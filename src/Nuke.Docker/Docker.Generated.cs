// Generated from https://github.com/nuke-build/nuke-docker/blob/master/src/Nuke.Docker/Docker.json
// Generated with Nuke.CodeGeneration version 0.22.2 (OSX,.NETStandard,Version=v2.0)

using JetBrains.Annotations;
using Newtonsoft.Json;
using Nuke.Common;
using Nuke.Common.Execution;
using Nuke.Common.Tooling;
using Nuke.Common.Tools;
using Nuke.Common.Utilities.Collections;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Text;

namespace Nuke.Docker
{
    /// <summary>
    ///   <p>Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. By taking advantage of Docker’s methodologies for shipping, testing, and deploying code quickly, you can significantly reduce the delay between writing code and running it in production.</p>
    ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerTasks
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public static string DockerPath =>
            ToolPathResolver.TryGetEnvironmentExecutable("DOCKER_EXE") ??
            ToolPathResolver.GetPathExecutable("docker");
        public static Action<OutputType, string> DockerLogger { get; set; } = ProcessTasks.DefaultLogger;
        /// <summary>
        ///   <p>Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. By taking advantage of Docker’s methodologies for shipping, testing, and deploying code quickly, you can significantly reduce the delay between writing code and running it in production.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        public static IReadOnlyCollection<Output> Docker(string arguments, string workingDirectory = null, IReadOnlyDictionary<string, string> environmentVariables = null, int? timeout = null, bool? logOutput = null, bool? logInvocation = null, Func<string, string> outputFilter = null)
        {
            var process = ProcessTasks.StartProcess(DockerPath, arguments, workingDirectory, environmentVariables, timeout, logOutput, logInvocation, DockerLogger, outputFilter);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove one or more configs.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerConfigRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;configs&gt;</c> via <see cref="DockerConfigRmSettings.Configs"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerConfigRm(DockerConfigRmSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerConfigRmSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove one or more configs.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerConfigRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;configs&gt;</c> via <see cref="DockerConfigRmSettings.Configs"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerConfigRm(Configure<DockerConfigRmSettings> configurator)
        {
            return DockerConfigRm(configurator(new DockerConfigRmSettings()));
        }
        /// <summary>
        ///   <p>Remove one or more configs.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerConfigRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;configs&gt;</c> via <see cref="DockerConfigRmSettings.Configs"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerConfigRmSettings Settings, IReadOnlyCollection<Output> Output)> DockerConfigRm(CombinatorialConfigure<DockerConfigRmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerConfigRm, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Load an image from a tar archive or STDIN.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerLoadSettings.CliSettings"/></li>
        ///     <li><c>--input</c> via <see cref="DockerLoadSettings.Input"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerLoadSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerLoad(DockerLoadSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerLoadSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Load an image from a tar archive or STDIN.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerLoadSettings.CliSettings"/></li>
        ///     <li><c>--input</c> via <see cref="DockerLoadSettings.Input"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerLoadSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerLoad(Configure<DockerLoadSettings> configurator)
        {
            return DockerLoad(configurator(new DockerLoadSettings()));
        }
        /// <summary>
        ///   <p>Load an image from a tar archive or STDIN.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerLoadSettings.CliSettings"/></li>
        ///     <li><c>--input</c> via <see cref="DockerLoadSettings.Input"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerLoadSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerLoadSettings Settings, IReadOnlyCollection<Output> Output)> DockerLoad(CombinatorialConfigure<DockerLoadSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerLoad, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Remove all stopped containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerPruneSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerContainerPruneSettings.Filter"/></li>
        ///     <li><c>--force</c> via <see cref="DockerContainerPruneSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerPrune(DockerContainerPruneSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContainerPruneSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove all stopped containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerPruneSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerContainerPruneSettings.Filter"/></li>
        ///     <li><c>--force</c> via <see cref="DockerContainerPruneSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerPrune(Configure<DockerContainerPruneSettings> configurator)
        {
            return DockerContainerPrune(configurator(new DockerContainerPruneSettings()));
        }
        /// <summary>
        ///   <p>Remove all stopped containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerPruneSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerContainerPruneSettings.Filter"/></li>
        ///     <li><c>--force</c> via <see cref="DockerContainerPruneSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContainerPruneSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerPrune(CombinatorialConfigure<DockerContainerPruneSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContainerPrune, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage trust on Docker images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerTrust(DockerTrustSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerTrustSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage trust on Docker images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerTrust(Configure<DockerTrustSettings> configurator)
        {
            return DockerTrust(configurator(new DockerTrustSettings()));
        }
        /// <summary>
        ///   <p>Manage trust on Docker images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerTrustSettings Settings, IReadOnlyCollection<Output> Output)> DockerTrust(CombinatorialConfigure<DockerTrustSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerTrust, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Docker stacks.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStackSettings.CliSettings"/></li>
        ///     <li><c>--kubeconfig</c> via <see cref="DockerStackSettings.Kubeconfig"/></li>
        ///     <li><c>--orchestrator</c> via <see cref="DockerStackSettings.Orchestrator"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerStack(DockerStackSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerStackSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Docker stacks.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStackSettings.CliSettings"/></li>
        ///     <li><c>--kubeconfig</c> via <see cref="DockerStackSettings.Kubeconfig"/></li>
        ///     <li><c>--orchestrator</c> via <see cref="DockerStackSettings.Orchestrator"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerStack(Configure<DockerStackSettings> configurator)
        {
            return DockerStack(configurator(new DockerStackSettings()));
        }
        /// <summary>
        ///   <p>Manage Docker stacks.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStackSettings.CliSettings"/></li>
        ///     <li><c>--kubeconfig</c> via <see cref="DockerStackSettings.Kubeconfig"/></li>
        ///     <li><c>--orchestrator</c> via <see cref="DockerStackSettings.Orchestrator"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerStackSettings Settings, IReadOnlyCollection<Output> Output)> DockerStack(CombinatorialConfigure<DockerStackSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerStack, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Display the running processes of a container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTopSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerTopSettings.Container"/></li>
        ///     <li><c>&lt;options&gt;</c> via <see cref="DockerTopSettings.Options"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerTop(DockerTopSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerTopSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Display the running processes of a container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTopSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerTopSettings.Container"/></li>
        ///     <li><c>&lt;options&gt;</c> via <see cref="DockerTopSettings.Options"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerTop(Configure<DockerTopSettings> configurator)
        {
            return DockerTop(configurator(new DockerTopSettings()));
        }
        /// <summary>
        ///   <p>Display the running processes of a container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTopSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerTopSettings.Container"/></li>
        ///     <li><c>&lt;options&gt;</c> via <see cref="DockerTopSettings.Options"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerTopSettings Settings, IReadOnlyCollection<Output> Output)> DockerTop(CombinatorialConfigure<DockerTopSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerTop, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Pull an image or a repository from a registry.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPullSettings.CliSettings"/></li>
        ///     <li><c>&lt;name&gt;</c> via <see cref="DockerPullSettings.Name"/></li>
        ///     <li><c>--all-tags</c> via <see cref="DockerPullSettings.AllTags"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerPullSettings.DisableContentTrust"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerPullSettings.Platform"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerPullSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPull(DockerPullSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerPullSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Pull an image or a repository from a registry.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPullSettings.CliSettings"/></li>
        ///     <li><c>&lt;name&gt;</c> via <see cref="DockerPullSettings.Name"/></li>
        ///     <li><c>--all-tags</c> via <see cref="DockerPullSettings.AllTags"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerPullSettings.DisableContentTrust"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerPullSettings.Platform"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerPullSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPull(Configure<DockerPullSettings> configurator)
        {
            return DockerPull(configurator(new DockerPullSettings()));
        }
        /// <summary>
        ///   <p>Pull an image or a repository from a registry.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPullSettings.CliSettings"/></li>
        ///     <li><c>&lt;name&gt;</c> via <see cref="DockerPullSettings.Name"/></li>
        ///     <li><c>--all-tags</c> via <see cref="DockerPullSettings.AllTags"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerPullSettings.DisableContentTrust"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerPullSettings.Platform"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerPullSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerPullSettings Settings, IReadOnlyCollection<Output> Output)> DockerPull(CombinatorialConfigure<DockerPullSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerPull, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Sign an image.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustSignSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerTrustSign(DockerTrustSignSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerTrustSignSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Sign an image.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustSignSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerTrustSign(Configure<DockerTrustSignSettings> configurator)
        {
            return DockerTrustSign(configurator(new DockerTrustSignSettings()));
        }
        /// <summary>
        ///   <p>Sign an image.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustSignSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerTrustSignSettings Settings, IReadOnlyCollection<Output> Output)> DockerTrustSign(CombinatorialConfigure<DockerTrustSignSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerTrustSign, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage checkpoints.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerCheckpointSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerCheckpoint(DockerCheckpointSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerCheckpointSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage checkpoints.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerCheckpointSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerCheckpoint(Configure<DockerCheckpointSettings> configurator)
        {
            return DockerCheckpoint(configurator(new DockerCheckpointSettings()));
        }
        /// <summary>
        ///   <p>Manage checkpoints.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerCheckpointSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerCheckpointSettings Settings, IReadOnlyCollection<Output> Output)> DockerCheckpoint(CombinatorialConfigure<DockerCheckpointSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerCheckpoint, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage entities who can sign Docker images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustSignerSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerTrustSigner(DockerTrustSignerSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerTrustSignerSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage entities who can sign Docker images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustSignerSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerTrustSigner(Configure<DockerTrustSignerSettings> configurator)
        {
            return DockerTrustSigner(configurator(new DockerTrustSignerSettings()));
        }
        /// <summary>
        ///   <p>Manage entities who can sign Docker images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustSignerSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerTrustSignerSettings Settings, IReadOnlyCollection<Output> Output)> DockerTrustSigner(CombinatorialConfigure<DockerTrustSignerSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerTrustSigner, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Display detailed information on one or more configs.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerConfigInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;configs&gt;</c> via <see cref="DockerConfigInspectSettings.Configs"/></li>
        ///     <li><c>--format</c> via <see cref="DockerConfigInspectSettings.Format"/></li>
        ///     <li><c>--pretty</c> via <see cref="DockerConfigInspectSettings.Pretty"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerConfigInspect(DockerConfigInspectSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerConfigInspectSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Display detailed information on one or more configs.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerConfigInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;configs&gt;</c> via <see cref="DockerConfigInspectSettings.Configs"/></li>
        ///     <li><c>--format</c> via <see cref="DockerConfigInspectSettings.Format"/></li>
        ///     <li><c>--pretty</c> via <see cref="DockerConfigInspectSettings.Pretty"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerConfigInspect(Configure<DockerConfigInspectSettings> configurator)
        {
            return DockerConfigInspect(configurator(new DockerConfigInspectSettings()));
        }
        /// <summary>
        ///   <p>Display detailed information on one or more configs.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerConfigInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;configs&gt;</c> via <see cref="DockerConfigInspectSettings.Configs"/></li>
        ///     <li><c>--format</c> via <see cref="DockerConfigInspectSettings.Format"/></li>
        ///     <li><c>--pretty</c> via <see cref="DockerConfigInspectSettings.Pretty"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerConfigInspectSettings Settings, IReadOnlyCollection<Output> Output)> DockerConfigInspect(CombinatorialConfigure<DockerConfigInspectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerConfigInspect, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage services.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerService(DockerServiceSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerServiceSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage services.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerService(Configure<DockerServiceSettings> configurator)
        {
            return DockerService(configurator(new DockerServiceSettings()));
        }
        /// <summary>
        ///   <p>Manage services.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerServiceSettings Settings, IReadOnlyCollection<Output> Output)> DockerService(CombinatorialConfigure<DockerServiceSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerService, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Generate and load a signing key-pair.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustKeyGenerateSettings.CliSettings"/></li>
        ///     <li><c>&lt;name&gt;</c> via <see cref="DockerTrustKeyGenerateSettings.Name"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerTrustKeyGenerate(DockerTrustKeyGenerateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerTrustKeyGenerateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Generate and load a signing key-pair.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustKeyGenerateSettings.CliSettings"/></li>
        ///     <li><c>&lt;name&gt;</c> via <see cref="DockerTrustKeyGenerateSettings.Name"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerTrustKeyGenerate(Configure<DockerTrustKeyGenerateSettings> configurator)
        {
            return DockerTrustKeyGenerate(configurator(new DockerTrustKeyGenerateSettings()));
        }
        /// <summary>
        ///   <p>Generate and load a signing key-pair.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustKeyGenerateSettings.CliSettings"/></li>
        ///     <li><c>&lt;name&gt;</c> via <see cref="DockerTrustKeyGenerateSettings.Name"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerTrustKeyGenerateSettings Settings, IReadOnlyCollection<Output> Output)> DockerTrustKeyGenerate(CombinatorialConfigure<DockerTrustKeyGenerateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerTrustKeyGenerate, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Docker.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSystemSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSystem(DockerSystemSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerSystemSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Docker.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSystemSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSystem(Configure<DockerSystemSettings> configurator)
        {
            return DockerSystem(configurator(new DockerSystemSettings()));
        }
        /// <summary>
        ///   <p>Manage Docker.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSystemSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerSystemSettings Settings, IReadOnlyCollection<Output> Output)> DockerSystem(CombinatorialConfigure<DockerSystemSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerSystem, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>List configs.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerConfigLsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerConfigLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerConfigLsSettings.Format"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerConfigLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerConfigLs(DockerConfigLsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerConfigLsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>List configs.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerConfigLsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerConfigLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerConfigLsSettings.Format"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerConfigLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerConfigLs(Configure<DockerConfigLsSettings> configurator)
        {
            return DockerConfigLs(configurator(new DockerConfigLsSettings()));
        }
        /// <summary>
        ///   <p>List configs.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerConfigLsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerConfigLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerConfigLsSettings.Format"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerConfigLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerConfigLsSettings Settings, IReadOnlyCollection<Output> Output)> DockerConfigLs(CombinatorialConfigure<DockerConfigLsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerConfigLs, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Update a context.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextUpdateSettings.CliSettings"/></li>
        ///     <li><c>&lt;context&gt;</c> via <see cref="DockerContextUpdateSettings.Context"/></li>
        ///     <li><c>--default-stack-orchestrator</c> via <see cref="DockerContextUpdateSettings.DefaultStackOrchestrator"/></li>
        ///     <li><c>--description</c> via <see cref="DockerContextUpdateSettings.Description"/></li>
        ///     <li><c>--docker</c> via <see cref="DockerContextUpdateSettings.Docker"/></li>
        ///     <li><c>--kubernetes</c> via <see cref="DockerContextUpdateSettings.Kubernetes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContextUpdate(DockerContextUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContextUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Update a context.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextUpdateSettings.CliSettings"/></li>
        ///     <li><c>&lt;context&gt;</c> via <see cref="DockerContextUpdateSettings.Context"/></li>
        ///     <li><c>--default-stack-orchestrator</c> via <see cref="DockerContextUpdateSettings.DefaultStackOrchestrator"/></li>
        ///     <li><c>--description</c> via <see cref="DockerContextUpdateSettings.Description"/></li>
        ///     <li><c>--docker</c> via <see cref="DockerContextUpdateSettings.Docker"/></li>
        ///     <li><c>--kubernetes</c> via <see cref="DockerContextUpdateSettings.Kubernetes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContextUpdate(Configure<DockerContextUpdateSettings> configurator)
        {
            return DockerContextUpdate(configurator(new DockerContextUpdateSettings()));
        }
        /// <summary>
        ///   <p>Update a context.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextUpdateSettings.CliSettings"/></li>
        ///     <li><c>&lt;context&gt;</c> via <see cref="DockerContextUpdateSettings.Context"/></li>
        ///     <li><c>--default-stack-orchestrator</c> via <see cref="DockerContextUpdateSettings.DefaultStackOrchestrator"/></li>
        ///     <li><c>--description</c> via <see cref="DockerContextUpdateSettings.Description"/></li>
        ///     <li><c>--docker</c> via <see cref="DockerContextUpdateSettings.Docker"/></li>
        ///     <li><c>--kubernetes</c> via <see cref="DockerContextUpdateSettings.Kubernetes"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContextUpdateSettings Settings, IReadOnlyCollection<Output> Output)> DockerContextUpdate(CombinatorialConfigure<DockerContextUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContextUpdate, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>List the services in the stack.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStackServicesSettings.CliSettings"/></li>
        ///     <li><c>&lt;stack&gt;</c> via <see cref="DockerStackServicesSettings.Stack"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerStackServicesSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerStackServicesSettings.Format"/></li>
        ///     <li><c>--namespace</c> via <see cref="DockerStackServicesSettings.Namespace"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerStackServicesSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerStackServices(DockerStackServicesSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerStackServicesSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>List the services in the stack.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStackServicesSettings.CliSettings"/></li>
        ///     <li><c>&lt;stack&gt;</c> via <see cref="DockerStackServicesSettings.Stack"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerStackServicesSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerStackServicesSettings.Format"/></li>
        ///     <li><c>--namespace</c> via <see cref="DockerStackServicesSettings.Namespace"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerStackServicesSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerStackServices(Configure<DockerStackServicesSettings> configurator)
        {
            return DockerStackServices(configurator(new DockerStackServicesSettings()));
        }
        /// <summary>
        ///   <p>List the services in the stack.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStackServicesSettings.CliSettings"/></li>
        ///     <li><c>&lt;stack&gt;</c> via <see cref="DockerStackServicesSettings.Stack"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerStackServicesSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerStackServicesSettings.Format"/></li>
        ///     <li><c>--namespace</c> via <see cref="DockerStackServicesSettings.Namespace"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerStackServicesSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerStackServicesSettings Settings, IReadOnlyCollection<Output> Output)> DockerStackServices(CombinatorialConfigure<DockerStackServicesSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerStackServices, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>List port mappings or a specific mapping for the container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerPortSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerPortSettings.Container"/></li>
        ///     <li><c>&lt;privatePort&gt;</c> via <see cref="DockerContainerPortSettings.PrivatePort"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerPort(DockerContainerPortSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContainerPortSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>List port mappings or a specific mapping for the container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerPortSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerPortSettings.Container"/></li>
        ///     <li><c>&lt;privatePort&gt;</c> via <see cref="DockerContainerPortSettings.PrivatePort"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerPort(Configure<DockerContainerPortSettings> configurator)
        {
            return DockerContainerPort(configurator(new DockerContainerPortSettings()));
        }
        /// <summary>
        ///   <p>List port mappings or a specific mapping for the container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerPortSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerPortSettings.Container"/></li>
        ///     <li><c>&lt;privatePort&gt;</c> via <see cref="DockerContainerPortSettings.PrivatePort"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContainerPortSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerPort(CombinatorialConfigure<DockerContainerPortSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContainerPort, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Rename a container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerRenameSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerRenameSettings.Container"/></li>
        ///     <li><c>&lt;newName&gt;</c> via <see cref="DockerRenameSettings.NewName"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerRename(DockerRenameSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerRenameSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Rename a container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerRenameSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerRenameSettings.Container"/></li>
        ///     <li><c>&lt;newName&gt;</c> via <see cref="DockerRenameSettings.NewName"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerRename(Configure<DockerRenameSettings> configurator)
        {
            return DockerRename(configurator(new DockerRenameSettings()));
        }
        /// <summary>
        ///   <p>Rename a container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerRenameSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerRenameSettings.Container"/></li>
        ///     <li><c>&lt;newName&gt;</c> via <see cref="DockerRenameSettings.NewName"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerRenameSettings Settings, IReadOnlyCollection<Output> Output)> DockerRename(CombinatorialConfigure<DockerRenameSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerRename, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTagSettings.CliSettings"/></li>
        ///     <li><c>&lt;sourceImage&gt;</c> via <see cref="DockerTagSettings.SourceImage"/></li>
        ///     <li><c>&lt;targetImage&gt;</c> via <see cref="DockerTagSettings.TargetImage"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerTag(DockerTagSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerTagSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTagSettings.CliSettings"/></li>
        ///     <li><c>&lt;sourceImage&gt;</c> via <see cref="DockerTagSettings.SourceImage"/></li>
        ///     <li><c>&lt;targetImage&gt;</c> via <see cref="DockerTagSettings.TargetImage"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerTag(Configure<DockerTagSettings> configurator)
        {
            return DockerTag(configurator(new DockerTagSettings()));
        }
        /// <summary>
        ///   <p>Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTagSettings.CliSettings"/></li>
        ///     <li><c>&lt;sourceImage&gt;</c> via <see cref="DockerTagSettings.SourceImage"/></li>
        ///     <li><c>&lt;targetImage&gt;</c> via <see cref="DockerTagSettings.TargetImage"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerTagSettings Settings, IReadOnlyCollection<Output> Output)> DockerTag(CombinatorialConfigure<DockerTagSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerTag, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Display detailed information on one or more secrets.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSecretInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;secrets&gt;</c> via <see cref="DockerSecretInspectSettings.Secrets"/></li>
        ///     <li><c>--format</c> via <see cref="DockerSecretInspectSettings.Format"/></li>
        ///     <li><c>--pretty</c> via <see cref="DockerSecretInspectSettings.Pretty"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSecretInspect(DockerSecretInspectSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerSecretInspectSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Display detailed information on one or more secrets.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSecretInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;secrets&gt;</c> via <see cref="DockerSecretInspectSettings.Secrets"/></li>
        ///     <li><c>--format</c> via <see cref="DockerSecretInspectSettings.Format"/></li>
        ///     <li><c>--pretty</c> via <see cref="DockerSecretInspectSettings.Pretty"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSecretInspect(Configure<DockerSecretInspectSettings> configurator)
        {
            return DockerSecretInspect(configurator(new DockerSecretInspectSettings()));
        }
        /// <summary>
        ///   <p>Display detailed information on one or more secrets.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSecretInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;secrets&gt;</c> via <see cref="DockerSecretInspectSettings.Secrets"/></li>
        ///     <li><c>--format</c> via <see cref="DockerSecretInspectSettings.Format"/></li>
        ///     <li><c>--pretty</c> via <see cref="DockerSecretInspectSettings.Pretty"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerSecretInspectSettings Settings, IReadOnlyCollection<Output> Output)> DockerSecretInspect(CombinatorialConfigure<DockerSecretInspectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerSecretInspect, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Docker secrets.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSecretSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSecret(DockerSecretSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerSecretSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Docker secrets.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSecretSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSecret(Configure<DockerSecretSettings> configurator)
        {
            return DockerSecret(configurator(new DockerSecretSettings()));
        }
        /// <summary>
        ///   <p>Manage Docker secrets.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSecretSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerSecretSettings Settings, IReadOnlyCollection<Output> Output)> DockerSecret(CombinatorialConfigure<DockerSecretSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerSecret, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Export a container's filesystem as a tar archive.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerExportSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerExportSettings.Container"/></li>
        ///     <li><c>--output</c> via <see cref="DockerContainerExportSettings.Output"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerExport(DockerContainerExportSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContainerExportSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Export a container's filesystem as a tar archive.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerExportSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerExportSettings.Container"/></li>
        ///     <li><c>--output</c> via <see cref="DockerContainerExportSettings.Output"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerExport(Configure<DockerContainerExportSettings> configurator)
        {
            return DockerContainerExport(configurator(new DockerContainerExportSettings()));
        }
        /// <summary>
        ///   <p>Export a container's filesystem as a tar archive.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerExportSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerExportSettings.Container"/></li>
        ///     <li><c>--output</c> via <see cref="DockerContainerExportSettings.Output"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContainerExportSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerExport(CombinatorialConfigure<DockerContainerExportSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContainerExport, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Show the history of an image.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerHistorySettings.CliSettings"/></li>
        ///     <li><c>&lt;image&gt;</c> via <see cref="DockerHistorySettings.Image"/></li>
        ///     <li><c>--format</c> via <see cref="DockerHistorySettings.Format"/></li>
        ///     <li><c>--human</c> via <see cref="DockerHistorySettings.Human"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerHistorySettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerHistorySettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerHistory(DockerHistorySettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerHistorySettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Show the history of an image.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerHistorySettings.CliSettings"/></li>
        ///     <li><c>&lt;image&gt;</c> via <see cref="DockerHistorySettings.Image"/></li>
        ///     <li><c>--format</c> via <see cref="DockerHistorySettings.Format"/></li>
        ///     <li><c>--human</c> via <see cref="DockerHistorySettings.Human"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerHistorySettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerHistorySettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerHistory(Configure<DockerHistorySettings> configurator)
        {
            return DockerHistory(configurator(new DockerHistorySettings()));
        }
        /// <summary>
        ///   <p>Show the history of an image.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerHistorySettings.CliSettings"/></li>
        ///     <li><c>&lt;image&gt;</c> via <see cref="DockerHistorySettings.Image"/></li>
        ///     <li><c>--format</c> via <see cref="DockerHistorySettings.Format"/></li>
        ///     <li><c>--human</c> via <see cref="DockerHistorySettings.Human"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerHistorySettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerHistorySettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerHistorySettings Settings, IReadOnlyCollection<Output> Output)> DockerHistory(CombinatorialConfigure<DockerHistorySettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerHistory, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Create a new service.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;args&gt;</c> via <see cref="DockerServiceCreateSettings.Args"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerServiceCreateSettings.Command"/></li>
        ///     <li><c>&lt;image&gt;</c> via <see cref="DockerServiceCreateSettings.Image"/></li>
        ///     <li><c>--config</c> via <see cref="DockerServiceCreateSettings.Config"/></li>
        ///     <li><c>--constraint</c> via <see cref="DockerServiceCreateSettings.Constraint"/></li>
        ///     <li><c>--container-label</c> via <see cref="DockerServiceCreateSettings.ContainerLabel"/></li>
        ///     <li><c>--credential-spec</c> via <see cref="DockerServiceCreateSettings.CredentialSpec"/></li>
        ///     <li><c>--detach</c> via <see cref="DockerServiceCreateSettings.Detach"/></li>
        ///     <li><c>--dns</c> via <see cref="DockerServiceCreateSettings.Dns"/></li>
        ///     <li><c>--dns-option</c> via <see cref="DockerServiceCreateSettings.DnsOption"/></li>
        ///     <li><c>--dns-search</c> via <see cref="DockerServiceCreateSettings.DnsSearch"/></li>
        ///     <li><c>--endpoint-mode</c> via <see cref="DockerServiceCreateSettings.EndpointMode"/></li>
        ///     <li><c>--entrypoint</c> via <see cref="DockerServiceCreateSettings.Entrypoint"/></li>
        ///     <li><c>--env</c> via <see cref="DockerServiceCreateSettings.Env"/></li>
        ///     <li><c>--env-file</c> via <see cref="DockerServiceCreateSettings.EnvFile"/></li>
        ///     <li><c>--generic-resource</c> via <see cref="DockerServiceCreateSettings.GenericResource"/></li>
        ///     <li><c>--group</c> via <see cref="DockerServiceCreateSettings.Group"/></li>
        ///     <li><c>--health-cmd</c> via <see cref="DockerServiceCreateSettings.HealthCmd"/></li>
        ///     <li><c>--health-interval</c> via <see cref="DockerServiceCreateSettings.HealthInterval"/></li>
        ///     <li><c>--health-retries</c> via <see cref="DockerServiceCreateSettings.HealthRetries"/></li>
        ///     <li><c>--health-start-period</c> via <see cref="DockerServiceCreateSettings.HealthStartPeriod"/></li>
        ///     <li><c>--health-timeout</c> via <see cref="DockerServiceCreateSettings.HealthTimeout"/></li>
        ///     <li><c>--host</c> via <see cref="DockerServiceCreateSettings.Host"/></li>
        ///     <li><c>--hostname</c> via <see cref="DockerServiceCreateSettings.Hostname"/></li>
        ///     <li><c>--init</c> via <see cref="DockerServiceCreateSettings.Init"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerServiceCreateSettings.Isolation"/></li>
        ///     <li><c>--label</c> via <see cref="DockerServiceCreateSettings.Label"/></li>
        ///     <li><c>--limit-cpu</c> via <see cref="DockerServiceCreateSettings.LimitCpu"/></li>
        ///     <li><c>--limit-memory</c> via <see cref="DockerServiceCreateSettings.LimitMemory"/></li>
        ///     <li><c>--log-driver</c> via <see cref="DockerServiceCreateSettings.LogDriver"/></li>
        ///     <li><c>--log-opt</c> via <see cref="DockerServiceCreateSettings.LogOpt"/></li>
        ///     <li><c>--mode</c> via <see cref="DockerServiceCreateSettings.Mode"/></li>
        ///     <li><c>--mount</c> via <see cref="DockerServiceCreateSettings.Mount"/></li>
        ///     <li><c>--name</c> via <see cref="DockerServiceCreateSettings.Name"/></li>
        ///     <li><c>--network</c> via <see cref="DockerServiceCreateSettings.Network"/></li>
        ///     <li><c>--no-healthcheck</c> via <see cref="DockerServiceCreateSettings.NoHealthcheck"/></li>
        ///     <li><c>--no-resolve-image</c> via <see cref="DockerServiceCreateSettings.NoResolveImage"/></li>
        ///     <li><c>--placement-pref</c> via <see cref="DockerServiceCreateSettings.PlacementPref"/></li>
        ///     <li><c>--publish</c> via <see cref="DockerServiceCreateSettings.Publish"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerServiceCreateSettings.Quiet"/></li>
        ///     <li><c>--read-only</c> via <see cref="DockerServiceCreateSettings.ReadOnly"/></li>
        ///     <li><c>--replicas</c> via <see cref="DockerServiceCreateSettings.Replicas"/></li>
        ///     <li><c>--replicas-max-per-node</c> via <see cref="DockerServiceCreateSettings.ReplicasMaxPerNode"/></li>
        ///     <li><c>--reserve-cpu</c> via <see cref="DockerServiceCreateSettings.ReserveCpu"/></li>
        ///     <li><c>--reserve-memory</c> via <see cref="DockerServiceCreateSettings.ReserveMemory"/></li>
        ///     <li><c>--restart-condition</c> via <see cref="DockerServiceCreateSettings.RestartCondition"/></li>
        ///     <li><c>--restart-delay</c> via <see cref="DockerServiceCreateSettings.RestartDelay"/></li>
        ///     <li><c>--restart-max-attempts</c> via <see cref="DockerServiceCreateSettings.RestartMaxAttempts"/></li>
        ///     <li><c>--restart-window</c> via <see cref="DockerServiceCreateSettings.RestartWindow"/></li>
        ///     <li><c>--rollback-delay</c> via <see cref="DockerServiceCreateSettings.RollbackDelay"/></li>
        ///     <li><c>--rollback-failure-action</c> via <see cref="DockerServiceCreateSettings.RollbackFailureAction"/></li>
        ///     <li><c>--rollback-max-failure-ratio</c> via <see cref="DockerServiceCreateSettings.RollbackMaxFailureRatio"/></li>
        ///     <li><c>--rollback-monitor</c> via <see cref="DockerServiceCreateSettings.RollbackMonitor"/></li>
        ///     <li><c>--rollback-order</c> via <see cref="DockerServiceCreateSettings.RollbackOrder"/></li>
        ///     <li><c>--rollback-parallelism</c> via <see cref="DockerServiceCreateSettings.RollbackParallelism"/></li>
        ///     <li><c>--secret</c> via <see cref="DockerServiceCreateSettings.Secret"/></li>
        ///     <li><c>--stop-grace-period</c> via <see cref="DockerServiceCreateSettings.StopGracePeriod"/></li>
        ///     <li><c>--stop-signal</c> via <see cref="DockerServiceCreateSettings.StopSignal"/></li>
        ///     <li><c>--sysctl</c> via <see cref="DockerServiceCreateSettings.Sysctl"/></li>
        ///     <li><c>--tty</c> via <see cref="DockerServiceCreateSettings.Tty"/></li>
        ///     <li><c>--update-delay</c> via <see cref="DockerServiceCreateSettings.UpdateDelay"/></li>
        ///     <li><c>--update-failure-action</c> via <see cref="DockerServiceCreateSettings.UpdateFailureAction"/></li>
        ///     <li><c>--update-max-failure-ratio</c> via <see cref="DockerServiceCreateSettings.UpdateMaxFailureRatio"/></li>
        ///     <li><c>--update-monitor</c> via <see cref="DockerServiceCreateSettings.UpdateMonitor"/></li>
        ///     <li><c>--update-order</c> via <see cref="DockerServiceCreateSettings.UpdateOrder"/></li>
        ///     <li><c>--update-parallelism</c> via <see cref="DockerServiceCreateSettings.UpdateParallelism"/></li>
        ///     <li><c>--user</c> via <see cref="DockerServiceCreateSettings.User"/></li>
        ///     <li><c>--with-registry-auth</c> via <see cref="DockerServiceCreateSettings.WithRegistryAuth"/></li>
        ///     <li><c>--workdir</c> via <see cref="DockerServiceCreateSettings.Workdir"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerServiceCreate(DockerServiceCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerServiceCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Create a new service.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;args&gt;</c> via <see cref="DockerServiceCreateSettings.Args"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerServiceCreateSettings.Command"/></li>
        ///     <li><c>&lt;image&gt;</c> via <see cref="DockerServiceCreateSettings.Image"/></li>
        ///     <li><c>--config</c> via <see cref="DockerServiceCreateSettings.Config"/></li>
        ///     <li><c>--constraint</c> via <see cref="DockerServiceCreateSettings.Constraint"/></li>
        ///     <li><c>--container-label</c> via <see cref="DockerServiceCreateSettings.ContainerLabel"/></li>
        ///     <li><c>--credential-spec</c> via <see cref="DockerServiceCreateSettings.CredentialSpec"/></li>
        ///     <li><c>--detach</c> via <see cref="DockerServiceCreateSettings.Detach"/></li>
        ///     <li><c>--dns</c> via <see cref="DockerServiceCreateSettings.Dns"/></li>
        ///     <li><c>--dns-option</c> via <see cref="DockerServiceCreateSettings.DnsOption"/></li>
        ///     <li><c>--dns-search</c> via <see cref="DockerServiceCreateSettings.DnsSearch"/></li>
        ///     <li><c>--endpoint-mode</c> via <see cref="DockerServiceCreateSettings.EndpointMode"/></li>
        ///     <li><c>--entrypoint</c> via <see cref="DockerServiceCreateSettings.Entrypoint"/></li>
        ///     <li><c>--env</c> via <see cref="DockerServiceCreateSettings.Env"/></li>
        ///     <li><c>--env-file</c> via <see cref="DockerServiceCreateSettings.EnvFile"/></li>
        ///     <li><c>--generic-resource</c> via <see cref="DockerServiceCreateSettings.GenericResource"/></li>
        ///     <li><c>--group</c> via <see cref="DockerServiceCreateSettings.Group"/></li>
        ///     <li><c>--health-cmd</c> via <see cref="DockerServiceCreateSettings.HealthCmd"/></li>
        ///     <li><c>--health-interval</c> via <see cref="DockerServiceCreateSettings.HealthInterval"/></li>
        ///     <li><c>--health-retries</c> via <see cref="DockerServiceCreateSettings.HealthRetries"/></li>
        ///     <li><c>--health-start-period</c> via <see cref="DockerServiceCreateSettings.HealthStartPeriod"/></li>
        ///     <li><c>--health-timeout</c> via <see cref="DockerServiceCreateSettings.HealthTimeout"/></li>
        ///     <li><c>--host</c> via <see cref="DockerServiceCreateSettings.Host"/></li>
        ///     <li><c>--hostname</c> via <see cref="DockerServiceCreateSettings.Hostname"/></li>
        ///     <li><c>--init</c> via <see cref="DockerServiceCreateSettings.Init"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerServiceCreateSettings.Isolation"/></li>
        ///     <li><c>--label</c> via <see cref="DockerServiceCreateSettings.Label"/></li>
        ///     <li><c>--limit-cpu</c> via <see cref="DockerServiceCreateSettings.LimitCpu"/></li>
        ///     <li><c>--limit-memory</c> via <see cref="DockerServiceCreateSettings.LimitMemory"/></li>
        ///     <li><c>--log-driver</c> via <see cref="DockerServiceCreateSettings.LogDriver"/></li>
        ///     <li><c>--log-opt</c> via <see cref="DockerServiceCreateSettings.LogOpt"/></li>
        ///     <li><c>--mode</c> via <see cref="DockerServiceCreateSettings.Mode"/></li>
        ///     <li><c>--mount</c> via <see cref="DockerServiceCreateSettings.Mount"/></li>
        ///     <li><c>--name</c> via <see cref="DockerServiceCreateSettings.Name"/></li>
        ///     <li><c>--network</c> via <see cref="DockerServiceCreateSettings.Network"/></li>
        ///     <li><c>--no-healthcheck</c> via <see cref="DockerServiceCreateSettings.NoHealthcheck"/></li>
        ///     <li><c>--no-resolve-image</c> via <see cref="DockerServiceCreateSettings.NoResolveImage"/></li>
        ///     <li><c>--placement-pref</c> via <see cref="DockerServiceCreateSettings.PlacementPref"/></li>
        ///     <li><c>--publish</c> via <see cref="DockerServiceCreateSettings.Publish"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerServiceCreateSettings.Quiet"/></li>
        ///     <li><c>--read-only</c> via <see cref="DockerServiceCreateSettings.ReadOnly"/></li>
        ///     <li><c>--replicas</c> via <see cref="DockerServiceCreateSettings.Replicas"/></li>
        ///     <li><c>--replicas-max-per-node</c> via <see cref="DockerServiceCreateSettings.ReplicasMaxPerNode"/></li>
        ///     <li><c>--reserve-cpu</c> via <see cref="DockerServiceCreateSettings.ReserveCpu"/></li>
        ///     <li><c>--reserve-memory</c> via <see cref="DockerServiceCreateSettings.ReserveMemory"/></li>
        ///     <li><c>--restart-condition</c> via <see cref="DockerServiceCreateSettings.RestartCondition"/></li>
        ///     <li><c>--restart-delay</c> via <see cref="DockerServiceCreateSettings.RestartDelay"/></li>
        ///     <li><c>--restart-max-attempts</c> via <see cref="DockerServiceCreateSettings.RestartMaxAttempts"/></li>
        ///     <li><c>--restart-window</c> via <see cref="DockerServiceCreateSettings.RestartWindow"/></li>
        ///     <li><c>--rollback-delay</c> via <see cref="DockerServiceCreateSettings.RollbackDelay"/></li>
        ///     <li><c>--rollback-failure-action</c> via <see cref="DockerServiceCreateSettings.RollbackFailureAction"/></li>
        ///     <li><c>--rollback-max-failure-ratio</c> via <see cref="DockerServiceCreateSettings.RollbackMaxFailureRatio"/></li>
        ///     <li><c>--rollback-monitor</c> via <see cref="DockerServiceCreateSettings.RollbackMonitor"/></li>
        ///     <li><c>--rollback-order</c> via <see cref="DockerServiceCreateSettings.RollbackOrder"/></li>
        ///     <li><c>--rollback-parallelism</c> via <see cref="DockerServiceCreateSettings.RollbackParallelism"/></li>
        ///     <li><c>--secret</c> via <see cref="DockerServiceCreateSettings.Secret"/></li>
        ///     <li><c>--stop-grace-period</c> via <see cref="DockerServiceCreateSettings.StopGracePeriod"/></li>
        ///     <li><c>--stop-signal</c> via <see cref="DockerServiceCreateSettings.StopSignal"/></li>
        ///     <li><c>--sysctl</c> via <see cref="DockerServiceCreateSettings.Sysctl"/></li>
        ///     <li><c>--tty</c> via <see cref="DockerServiceCreateSettings.Tty"/></li>
        ///     <li><c>--update-delay</c> via <see cref="DockerServiceCreateSettings.UpdateDelay"/></li>
        ///     <li><c>--update-failure-action</c> via <see cref="DockerServiceCreateSettings.UpdateFailureAction"/></li>
        ///     <li><c>--update-max-failure-ratio</c> via <see cref="DockerServiceCreateSettings.UpdateMaxFailureRatio"/></li>
        ///     <li><c>--update-monitor</c> via <see cref="DockerServiceCreateSettings.UpdateMonitor"/></li>
        ///     <li><c>--update-order</c> via <see cref="DockerServiceCreateSettings.UpdateOrder"/></li>
        ///     <li><c>--update-parallelism</c> via <see cref="DockerServiceCreateSettings.UpdateParallelism"/></li>
        ///     <li><c>--user</c> via <see cref="DockerServiceCreateSettings.User"/></li>
        ///     <li><c>--with-registry-auth</c> via <see cref="DockerServiceCreateSettings.WithRegistryAuth"/></li>
        ///     <li><c>--workdir</c> via <see cref="DockerServiceCreateSettings.Workdir"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerServiceCreate(Configure<DockerServiceCreateSettings> configurator)
        {
            return DockerServiceCreate(configurator(new DockerServiceCreateSettings()));
        }
        /// <summary>
        ///   <p>Create a new service.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;args&gt;</c> via <see cref="DockerServiceCreateSettings.Args"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerServiceCreateSettings.Command"/></li>
        ///     <li><c>&lt;image&gt;</c> via <see cref="DockerServiceCreateSettings.Image"/></li>
        ///     <li><c>--config</c> via <see cref="DockerServiceCreateSettings.Config"/></li>
        ///     <li><c>--constraint</c> via <see cref="DockerServiceCreateSettings.Constraint"/></li>
        ///     <li><c>--container-label</c> via <see cref="DockerServiceCreateSettings.ContainerLabel"/></li>
        ///     <li><c>--credential-spec</c> via <see cref="DockerServiceCreateSettings.CredentialSpec"/></li>
        ///     <li><c>--detach</c> via <see cref="DockerServiceCreateSettings.Detach"/></li>
        ///     <li><c>--dns</c> via <see cref="DockerServiceCreateSettings.Dns"/></li>
        ///     <li><c>--dns-option</c> via <see cref="DockerServiceCreateSettings.DnsOption"/></li>
        ///     <li><c>--dns-search</c> via <see cref="DockerServiceCreateSettings.DnsSearch"/></li>
        ///     <li><c>--endpoint-mode</c> via <see cref="DockerServiceCreateSettings.EndpointMode"/></li>
        ///     <li><c>--entrypoint</c> via <see cref="DockerServiceCreateSettings.Entrypoint"/></li>
        ///     <li><c>--env</c> via <see cref="DockerServiceCreateSettings.Env"/></li>
        ///     <li><c>--env-file</c> via <see cref="DockerServiceCreateSettings.EnvFile"/></li>
        ///     <li><c>--generic-resource</c> via <see cref="DockerServiceCreateSettings.GenericResource"/></li>
        ///     <li><c>--group</c> via <see cref="DockerServiceCreateSettings.Group"/></li>
        ///     <li><c>--health-cmd</c> via <see cref="DockerServiceCreateSettings.HealthCmd"/></li>
        ///     <li><c>--health-interval</c> via <see cref="DockerServiceCreateSettings.HealthInterval"/></li>
        ///     <li><c>--health-retries</c> via <see cref="DockerServiceCreateSettings.HealthRetries"/></li>
        ///     <li><c>--health-start-period</c> via <see cref="DockerServiceCreateSettings.HealthStartPeriod"/></li>
        ///     <li><c>--health-timeout</c> via <see cref="DockerServiceCreateSettings.HealthTimeout"/></li>
        ///     <li><c>--host</c> via <see cref="DockerServiceCreateSettings.Host"/></li>
        ///     <li><c>--hostname</c> via <see cref="DockerServiceCreateSettings.Hostname"/></li>
        ///     <li><c>--init</c> via <see cref="DockerServiceCreateSettings.Init"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerServiceCreateSettings.Isolation"/></li>
        ///     <li><c>--label</c> via <see cref="DockerServiceCreateSettings.Label"/></li>
        ///     <li><c>--limit-cpu</c> via <see cref="DockerServiceCreateSettings.LimitCpu"/></li>
        ///     <li><c>--limit-memory</c> via <see cref="DockerServiceCreateSettings.LimitMemory"/></li>
        ///     <li><c>--log-driver</c> via <see cref="DockerServiceCreateSettings.LogDriver"/></li>
        ///     <li><c>--log-opt</c> via <see cref="DockerServiceCreateSettings.LogOpt"/></li>
        ///     <li><c>--mode</c> via <see cref="DockerServiceCreateSettings.Mode"/></li>
        ///     <li><c>--mount</c> via <see cref="DockerServiceCreateSettings.Mount"/></li>
        ///     <li><c>--name</c> via <see cref="DockerServiceCreateSettings.Name"/></li>
        ///     <li><c>--network</c> via <see cref="DockerServiceCreateSettings.Network"/></li>
        ///     <li><c>--no-healthcheck</c> via <see cref="DockerServiceCreateSettings.NoHealthcheck"/></li>
        ///     <li><c>--no-resolve-image</c> via <see cref="DockerServiceCreateSettings.NoResolveImage"/></li>
        ///     <li><c>--placement-pref</c> via <see cref="DockerServiceCreateSettings.PlacementPref"/></li>
        ///     <li><c>--publish</c> via <see cref="DockerServiceCreateSettings.Publish"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerServiceCreateSettings.Quiet"/></li>
        ///     <li><c>--read-only</c> via <see cref="DockerServiceCreateSettings.ReadOnly"/></li>
        ///     <li><c>--replicas</c> via <see cref="DockerServiceCreateSettings.Replicas"/></li>
        ///     <li><c>--replicas-max-per-node</c> via <see cref="DockerServiceCreateSettings.ReplicasMaxPerNode"/></li>
        ///     <li><c>--reserve-cpu</c> via <see cref="DockerServiceCreateSettings.ReserveCpu"/></li>
        ///     <li><c>--reserve-memory</c> via <see cref="DockerServiceCreateSettings.ReserveMemory"/></li>
        ///     <li><c>--restart-condition</c> via <see cref="DockerServiceCreateSettings.RestartCondition"/></li>
        ///     <li><c>--restart-delay</c> via <see cref="DockerServiceCreateSettings.RestartDelay"/></li>
        ///     <li><c>--restart-max-attempts</c> via <see cref="DockerServiceCreateSettings.RestartMaxAttempts"/></li>
        ///     <li><c>--restart-window</c> via <see cref="DockerServiceCreateSettings.RestartWindow"/></li>
        ///     <li><c>--rollback-delay</c> via <see cref="DockerServiceCreateSettings.RollbackDelay"/></li>
        ///     <li><c>--rollback-failure-action</c> via <see cref="DockerServiceCreateSettings.RollbackFailureAction"/></li>
        ///     <li><c>--rollback-max-failure-ratio</c> via <see cref="DockerServiceCreateSettings.RollbackMaxFailureRatio"/></li>
        ///     <li><c>--rollback-monitor</c> via <see cref="DockerServiceCreateSettings.RollbackMonitor"/></li>
        ///     <li><c>--rollback-order</c> via <see cref="DockerServiceCreateSettings.RollbackOrder"/></li>
        ///     <li><c>--rollback-parallelism</c> via <see cref="DockerServiceCreateSettings.RollbackParallelism"/></li>
        ///     <li><c>--secret</c> via <see cref="DockerServiceCreateSettings.Secret"/></li>
        ///     <li><c>--stop-grace-period</c> via <see cref="DockerServiceCreateSettings.StopGracePeriod"/></li>
        ///     <li><c>--stop-signal</c> via <see cref="DockerServiceCreateSettings.StopSignal"/></li>
        ///     <li><c>--sysctl</c> via <see cref="DockerServiceCreateSettings.Sysctl"/></li>
        ///     <li><c>--tty</c> via <see cref="DockerServiceCreateSettings.Tty"/></li>
        ///     <li><c>--update-delay</c> via <see cref="DockerServiceCreateSettings.UpdateDelay"/></li>
        ///     <li><c>--update-failure-action</c> via <see cref="DockerServiceCreateSettings.UpdateFailureAction"/></li>
        ///     <li><c>--update-max-failure-ratio</c> via <see cref="DockerServiceCreateSettings.UpdateMaxFailureRatio"/></li>
        ///     <li><c>--update-monitor</c> via <see cref="DockerServiceCreateSettings.UpdateMonitor"/></li>
        ///     <li><c>--update-order</c> via <see cref="DockerServiceCreateSettings.UpdateOrder"/></li>
        ///     <li><c>--update-parallelism</c> via <see cref="DockerServiceCreateSettings.UpdateParallelism"/></li>
        ///     <li><c>--user</c> via <see cref="DockerServiceCreateSettings.User"/></li>
        ///     <li><c>--with-registry-auth</c> via <see cref="DockerServiceCreateSettings.WithRegistryAuth"/></li>
        ///     <li><c>--workdir</c> via <see cref="DockerServiceCreateSettings.Workdir"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerServiceCreateSettings Settings, IReadOnlyCollection<Output> Output)> DockerServiceCreate(CombinatorialConfigure<DockerServiceCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerServiceCreate, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>List the tasks of one or more services.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServicePsSettings.CliSettings"/></li>
        ///     <li><c>&lt;services&gt;</c> via <see cref="DockerServicePsSettings.Services"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerServicePsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerServicePsSettings.Format"/></li>
        ///     <li><c>--no-resolve</c> via <see cref="DockerServicePsSettings.NoResolve"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerServicePsSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerServicePsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerServicePs(DockerServicePsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerServicePsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>List the tasks of one or more services.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServicePsSettings.CliSettings"/></li>
        ///     <li><c>&lt;services&gt;</c> via <see cref="DockerServicePsSettings.Services"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerServicePsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerServicePsSettings.Format"/></li>
        ///     <li><c>--no-resolve</c> via <see cref="DockerServicePsSettings.NoResolve"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerServicePsSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerServicePsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerServicePs(Configure<DockerServicePsSettings> configurator)
        {
            return DockerServicePs(configurator(new DockerServicePsSettings()));
        }
        /// <summary>
        ///   <p>List the tasks of one or more services.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServicePsSettings.CliSettings"/></li>
        ///     <li><c>&lt;services&gt;</c> via <see cref="DockerServicePsSettings.Services"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerServicePsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerServicePsSettings.Format"/></li>
        ///     <li><c>--no-resolve</c> via <see cref="DockerServicePsSettings.NoResolve"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerServicePsSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerServicePsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerServicePsSettings Settings, IReadOnlyCollection<Output> Output)> DockerServicePs(CombinatorialConfigure<DockerServicePsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerServicePs, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Stop one or more running containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStopSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerStopSettings.Containers"/></li>
        ///     <li><c>--time</c> via <see cref="DockerStopSettings.Time"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerStop(DockerStopSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerStopSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Stop one or more running containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStopSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerStopSettings.Containers"/></li>
        ///     <li><c>--time</c> via <see cref="DockerStopSettings.Time"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerStop(Configure<DockerStopSettings> configurator)
        {
            return DockerStop(configurator(new DockerStopSettings()));
        }
        /// <summary>
        ///   <p>Stop one or more running containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStopSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerStopSettings.Containers"/></li>
        ///     <li><c>--time</c> via <see cref="DockerStopSettings.Time"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerStopSettings Settings, IReadOnlyCollection<Output> Output)> DockerStop(CombinatorialConfigure<DockerStopSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerStop, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Swarm nodes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNodeSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNode(DockerNodeSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerNodeSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Swarm nodes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNodeSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNode(Configure<DockerNodeSettings> configurator)
        {
            return DockerNode(configurator(new DockerNodeSettings()));
        }
        /// <summary>
        ///   <p>Manage Swarm nodes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNodeSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerNodeSettings Settings, IReadOnlyCollection<Output> Output)> DockerNode(CombinatorialConfigure<DockerNodeSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerNode, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Update configuration of one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerUpdateSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerUpdateSettings.Containers"/></li>
        ///     <li><c>--blkio-weight</c> via <see cref="DockerUpdateSettings.BlkioWeight"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerUpdateSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerUpdateSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-rt-period</c> via <see cref="DockerUpdateSettings.CpuRtPeriod"/></li>
        ///     <li><c>--cpu-rt-runtime</c> via <see cref="DockerUpdateSettings.CpuRtRuntime"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerUpdateSettings.CpuShares"/></li>
        ///     <li><c>--cpus</c> via <see cref="DockerUpdateSettings.Cpus"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerUpdateSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerUpdateSettings.CpusetMems"/></li>
        ///     <li><c>--kernel-memory</c> via <see cref="DockerUpdateSettings.KernelMemory"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerUpdateSettings.Memory"/></li>
        ///     <li><c>--memory-reservation</c> via <see cref="DockerUpdateSettings.MemoryReservation"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerUpdateSettings.MemorySwap"/></li>
        ///     <li><c>--pids-limit</c> via <see cref="DockerUpdateSettings.PidsLimit"/></li>
        ///     <li><c>--restart</c> via <see cref="DockerUpdateSettings.Restart"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerUpdate(DockerUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Update configuration of one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerUpdateSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerUpdateSettings.Containers"/></li>
        ///     <li><c>--blkio-weight</c> via <see cref="DockerUpdateSettings.BlkioWeight"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerUpdateSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerUpdateSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-rt-period</c> via <see cref="DockerUpdateSettings.CpuRtPeriod"/></li>
        ///     <li><c>--cpu-rt-runtime</c> via <see cref="DockerUpdateSettings.CpuRtRuntime"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerUpdateSettings.CpuShares"/></li>
        ///     <li><c>--cpus</c> via <see cref="DockerUpdateSettings.Cpus"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerUpdateSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerUpdateSettings.CpusetMems"/></li>
        ///     <li><c>--kernel-memory</c> via <see cref="DockerUpdateSettings.KernelMemory"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerUpdateSettings.Memory"/></li>
        ///     <li><c>--memory-reservation</c> via <see cref="DockerUpdateSettings.MemoryReservation"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerUpdateSettings.MemorySwap"/></li>
        ///     <li><c>--pids-limit</c> via <see cref="DockerUpdateSettings.PidsLimit"/></li>
        ///     <li><c>--restart</c> via <see cref="DockerUpdateSettings.Restart"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerUpdate(Configure<DockerUpdateSettings> configurator)
        {
            return DockerUpdate(configurator(new DockerUpdateSettings()));
        }
        /// <summary>
        ///   <p>Update configuration of one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerUpdateSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerUpdateSettings.Containers"/></li>
        ///     <li><c>--blkio-weight</c> via <see cref="DockerUpdateSettings.BlkioWeight"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerUpdateSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerUpdateSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-rt-period</c> via <see cref="DockerUpdateSettings.CpuRtPeriod"/></li>
        ///     <li><c>--cpu-rt-runtime</c> via <see cref="DockerUpdateSettings.CpuRtRuntime"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerUpdateSettings.CpuShares"/></li>
        ///     <li><c>--cpus</c> via <see cref="DockerUpdateSettings.Cpus"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerUpdateSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerUpdateSettings.CpusetMems"/></li>
        ///     <li><c>--kernel-memory</c> via <see cref="DockerUpdateSettings.KernelMemory"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerUpdateSettings.Memory"/></li>
        ///     <li><c>--memory-reservation</c> via <see cref="DockerUpdateSettings.MemoryReservation"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerUpdateSettings.MemorySwap"/></li>
        ///     <li><c>--pids-limit</c> via <see cref="DockerUpdateSettings.PidsLimit"/></li>
        ///     <li><c>--restart</c> via <see cref="DockerUpdateSettings.Restart"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerUpdateSettings Settings, IReadOnlyCollection<Output> Output)> DockerUpdate(CombinatorialConfigure<DockerUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerUpdate, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Create a plugin from a rootfs and configuration. Plugin data directory must contain config.json and rootfs directory.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginCreateSettings.Plugin"/></li>
        ///     <li><c>&lt;pluginDataDir&gt;</c> via <see cref="DockerPluginCreateSettings.PluginDataDir"/></li>
        ///     <li><c>--compress</c> via <see cref="DockerPluginCreateSettings.Compress"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPluginCreate(DockerPluginCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerPluginCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Create a plugin from a rootfs and configuration. Plugin data directory must contain config.json and rootfs directory.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginCreateSettings.Plugin"/></li>
        ///     <li><c>&lt;pluginDataDir&gt;</c> via <see cref="DockerPluginCreateSettings.PluginDataDir"/></li>
        ///     <li><c>--compress</c> via <see cref="DockerPluginCreateSettings.Compress"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPluginCreate(Configure<DockerPluginCreateSettings> configurator)
        {
            return DockerPluginCreate(configurator(new DockerPluginCreateSettings()));
        }
        /// <summary>
        ///   <p>Create a plugin from a rootfs and configuration. Plugin data directory must contain config.json and rootfs directory.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginCreateSettings.Plugin"/></li>
        ///     <li><c>&lt;pluginDataDir&gt;</c> via <see cref="DockerPluginCreateSettings.PluginDataDir"/></li>
        ///     <li><c>--compress</c> via <see cref="DockerPluginCreateSettings.Compress"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerPluginCreateSettings Settings, IReadOnlyCollection<Output> Output)> DockerPluginCreate(CombinatorialConfigure<DockerPluginCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerPluginCreate, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Display system-wide information.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSystemInfoSettings.CliSettings"/></li>
        ///     <li><c>--format</c> via <see cref="DockerSystemInfoSettings.Format"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSystemInfo(DockerSystemInfoSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerSystemInfoSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Display system-wide information.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSystemInfoSettings.CliSettings"/></li>
        ///     <li><c>--format</c> via <see cref="DockerSystemInfoSettings.Format"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSystemInfo(Configure<DockerSystemInfoSettings> configurator)
        {
            return DockerSystemInfo(configurator(new DockerSystemInfoSettings()));
        }
        /// <summary>
        ///   <p>Display system-wide information.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSystemInfoSettings.CliSettings"/></li>
        ///     <li><c>--format</c> via <see cref="DockerSystemInfoSettings.Format"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerSystemInfoSettings Settings, IReadOnlyCollection<Output> Output)> DockerSystemInfo(CombinatorialConfigure<DockerSystemInfoSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerSystemInfo, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Remove all unused local volumes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerVolumePruneSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerVolumePruneSettings.Filter"/></li>
        ///     <li><c>--force</c> via <see cref="DockerVolumePruneSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerVolumePrune(DockerVolumePruneSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerVolumePruneSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove all unused local volumes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerVolumePruneSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerVolumePruneSettings.Filter"/></li>
        ///     <li><c>--force</c> via <see cref="DockerVolumePruneSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerVolumePrune(Configure<DockerVolumePruneSettings> configurator)
        {
            return DockerVolumePrune(configurator(new DockerVolumePruneSettings()));
        }
        /// <summary>
        ///   <p>Remove all unused local volumes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerVolumePruneSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerVolumePruneSettings.Filter"/></li>
        ///     <li><c>--force</c> via <see cref="DockerVolumePruneSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerVolumePruneSettings Settings, IReadOnlyCollection<Output> Output)> DockerVolumePrune(CombinatorialConfigure<DockerVolumePruneSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerVolumePrune, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Upgrade an existing plugin.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginUpgradeSettings.CliSettings"/></li>
        ///     <li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginUpgradeSettings.Plugin"/></li>
        ///     <li><c>&lt;remote&gt;</c> via <see cref="DockerPluginUpgradeSettings.Remote"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerPluginUpgradeSettings.DisableContentTrust"/></li>
        ///     <li><c>--grant-all-permissions</c> via <see cref="DockerPluginUpgradeSettings.GrantAllPermissions"/></li>
        ///     <li><c>--skip-remote-check</c> via <see cref="DockerPluginUpgradeSettings.SkipRemoteCheck"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPluginUpgrade(DockerPluginUpgradeSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerPluginUpgradeSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Upgrade an existing plugin.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginUpgradeSettings.CliSettings"/></li>
        ///     <li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginUpgradeSettings.Plugin"/></li>
        ///     <li><c>&lt;remote&gt;</c> via <see cref="DockerPluginUpgradeSettings.Remote"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerPluginUpgradeSettings.DisableContentTrust"/></li>
        ///     <li><c>--grant-all-permissions</c> via <see cref="DockerPluginUpgradeSettings.GrantAllPermissions"/></li>
        ///     <li><c>--skip-remote-check</c> via <see cref="DockerPluginUpgradeSettings.SkipRemoteCheck"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPluginUpgrade(Configure<DockerPluginUpgradeSettings> configurator)
        {
            return DockerPluginUpgrade(configurator(new DockerPluginUpgradeSettings()));
        }
        /// <summary>
        ///   <p>Upgrade an existing plugin.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginUpgradeSettings.CliSettings"/></li>
        ///     <li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginUpgradeSettings.Plugin"/></li>
        ///     <li><c>&lt;remote&gt;</c> via <see cref="DockerPluginUpgradeSettings.Remote"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerPluginUpgradeSettings.DisableContentTrust"/></li>
        ///     <li><c>--grant-all-permissions</c> via <see cref="DockerPluginUpgradeSettings.GrantAllPermissions"/></li>
        ///     <li><c>--skip-remote-check</c> via <see cref="DockerPluginUpgradeSettings.SkipRemoteCheck"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerPluginUpgradeSettings Settings, IReadOnlyCollection<Output> Output)> DockerPluginUpgrade(CombinatorialConfigure<DockerPluginUpgradeSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerPluginUpgrade, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Remove build cache.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerBuilderPruneSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerBuilderPrune(DockerBuilderPruneSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerBuilderPruneSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove build cache.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerBuilderPruneSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerBuilderPrune(Configure<DockerBuilderPruneSettings> configurator)
        {
            return DockerBuilderPrune(configurator(new DockerBuilderPruneSettings()));
        }
        /// <summary>
        ///   <p>Remove build cache.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerBuilderPruneSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerBuilderPruneSettings Settings, IReadOnlyCollection<Output> Output)> DockerBuilderPrune(CombinatorialConfigure<DockerBuilderPruneSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerBuilderPrune, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage join tokens.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmJoinTokenSettings.CliSettings"/></li>
        ///     <li><c>&lt;worker&gt;</c> via <see cref="DockerSwarmJoinTokenSettings.Worker"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerSwarmJoinTokenSettings.Quiet"/></li>
        ///     <li><c>--rotate</c> via <see cref="DockerSwarmJoinTokenSettings.Rotate"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSwarmJoinToken(DockerSwarmJoinTokenSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerSwarmJoinTokenSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage join tokens.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmJoinTokenSettings.CliSettings"/></li>
        ///     <li><c>&lt;worker&gt;</c> via <see cref="DockerSwarmJoinTokenSettings.Worker"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerSwarmJoinTokenSettings.Quiet"/></li>
        ///     <li><c>--rotate</c> via <see cref="DockerSwarmJoinTokenSettings.Rotate"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSwarmJoinToken(Configure<DockerSwarmJoinTokenSettings> configurator)
        {
            return DockerSwarmJoinToken(configurator(new DockerSwarmJoinTokenSettings()));
        }
        /// <summary>
        ///   <p>Manage join tokens.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmJoinTokenSettings.CliSettings"/></li>
        ///     <li><c>&lt;worker&gt;</c> via <see cref="DockerSwarmJoinTokenSettings.Worker"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerSwarmJoinTokenSettings.Quiet"/></li>
        ///     <li><c>--rotate</c> via <see cref="DockerSwarmJoinTokenSettings.Rotate"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerSwarmJoinTokenSettings Settings, IReadOnlyCollection<Output> Output)> DockerSwarmJoinToken(CombinatorialConfigure<DockerSwarmJoinTokenSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerSwarmJoinToken, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Update a node.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNodeUpdateSettings.CliSettings"/></li>
        ///     <li><c>&lt;node&gt;</c> via <see cref="DockerNodeUpdateSettings.Node"/></li>
        ///     <li><c>--availability</c> via <see cref="DockerNodeUpdateSettings.Availability"/></li>
        ///     <li><c>--label-add</c> via <see cref="DockerNodeUpdateSettings.LabelAdd"/></li>
        ///     <li><c>--label-rm</c> via <see cref="DockerNodeUpdateSettings.LabelRm"/></li>
        ///     <li><c>--role</c> via <see cref="DockerNodeUpdateSettings.Role"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNodeUpdate(DockerNodeUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerNodeUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Update a node.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNodeUpdateSettings.CliSettings"/></li>
        ///     <li><c>&lt;node&gt;</c> via <see cref="DockerNodeUpdateSettings.Node"/></li>
        ///     <li><c>--availability</c> via <see cref="DockerNodeUpdateSettings.Availability"/></li>
        ///     <li><c>--label-add</c> via <see cref="DockerNodeUpdateSettings.LabelAdd"/></li>
        ///     <li><c>--label-rm</c> via <see cref="DockerNodeUpdateSettings.LabelRm"/></li>
        ///     <li><c>--role</c> via <see cref="DockerNodeUpdateSettings.Role"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNodeUpdate(Configure<DockerNodeUpdateSettings> configurator)
        {
            return DockerNodeUpdate(configurator(new DockerNodeUpdateSettings()));
        }
        /// <summary>
        ///   <p>Update a node.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNodeUpdateSettings.CliSettings"/></li>
        ///     <li><c>&lt;node&gt;</c> via <see cref="DockerNodeUpdateSettings.Node"/></li>
        ///     <li><c>--availability</c> via <see cref="DockerNodeUpdateSettings.Availability"/></li>
        ///     <li><c>--label-add</c> via <see cref="DockerNodeUpdateSettings.LabelAdd"/></li>
        ///     <li><c>--label-rm</c> via <see cref="DockerNodeUpdateSettings.LabelRm"/></li>
        ///     <li><c>--role</c> via <see cref="DockerNodeUpdateSettings.Role"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerNodeUpdateSettings Settings, IReadOnlyCollection<Output> Output)> DockerNodeUpdate(CombinatorialConfigure<DockerNodeUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerNodeUpdate, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Add a signer.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustSignerAddSettings.CliSettings"/></li>
        ///     <li><c>&lt;name&gt;</c> via <see cref="DockerTrustSignerAddSettings.Name"/></li>
        ///     <li><c>&lt;options&gt;</c> via <see cref="DockerTrustSignerAddSettings.Options"/></li>
        ///     <li><c>&lt;repositories&gt;</c> via <see cref="DockerTrustSignerAddSettings.Repositories"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerTrustSignerAdd(DockerTrustSignerAddSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerTrustSignerAddSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Add a signer.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustSignerAddSettings.CliSettings"/></li>
        ///     <li><c>&lt;name&gt;</c> via <see cref="DockerTrustSignerAddSettings.Name"/></li>
        ///     <li><c>&lt;options&gt;</c> via <see cref="DockerTrustSignerAddSettings.Options"/></li>
        ///     <li><c>&lt;repositories&gt;</c> via <see cref="DockerTrustSignerAddSettings.Repositories"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerTrustSignerAdd(Configure<DockerTrustSignerAddSettings> configurator)
        {
            return DockerTrustSignerAdd(configurator(new DockerTrustSignerAddSettings()));
        }
        /// <summary>
        ///   <p>Add a signer.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustSignerAddSettings.CliSettings"/></li>
        ///     <li><c>&lt;name&gt;</c> via <see cref="DockerTrustSignerAddSettings.Name"/></li>
        ///     <li><c>&lt;options&gt;</c> via <see cref="DockerTrustSignerAddSettings.Options"/></li>
        ///     <li><c>&lt;repositories&gt;</c> via <see cref="DockerTrustSignerAddSettings.Repositories"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerTrustSignerAddSettings Settings, IReadOnlyCollection<Output> Output)> DockerTrustSignerAdd(CombinatorialConfigure<DockerTrustSignerAddSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerTrustSignerAdd, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Update the swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmUpdateSettings.CliSettings"/></li>
        ///     <li><c>--autolock</c> via <see cref="DockerSwarmUpdateSettings.Autolock"/></li>
        ///     <li><c>--cert-expiry</c> via <see cref="DockerSwarmUpdateSettings.CertExpiry"/></li>
        ///     <li><c>--dispatcher-heartbeat</c> via <see cref="DockerSwarmUpdateSettings.DispatcherHeartbeat"/></li>
        ///     <li><c>--external-ca</c> via <see cref="DockerSwarmUpdateSettings.ExternalCa"/></li>
        ///     <li><c>--max-snapshots</c> via <see cref="DockerSwarmUpdateSettings.MaxSnapshots"/></li>
        ///     <li><c>--snapshot-interval</c> via <see cref="DockerSwarmUpdateSettings.SnapshotInterval"/></li>
        ///     <li><c>--task-history-limit</c> via <see cref="DockerSwarmUpdateSettings.TaskHistoryLimit"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSwarmUpdate(DockerSwarmUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerSwarmUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Update the swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmUpdateSettings.CliSettings"/></li>
        ///     <li><c>--autolock</c> via <see cref="DockerSwarmUpdateSettings.Autolock"/></li>
        ///     <li><c>--cert-expiry</c> via <see cref="DockerSwarmUpdateSettings.CertExpiry"/></li>
        ///     <li><c>--dispatcher-heartbeat</c> via <see cref="DockerSwarmUpdateSettings.DispatcherHeartbeat"/></li>
        ///     <li><c>--external-ca</c> via <see cref="DockerSwarmUpdateSettings.ExternalCa"/></li>
        ///     <li><c>--max-snapshots</c> via <see cref="DockerSwarmUpdateSettings.MaxSnapshots"/></li>
        ///     <li><c>--snapshot-interval</c> via <see cref="DockerSwarmUpdateSettings.SnapshotInterval"/></li>
        ///     <li><c>--task-history-limit</c> via <see cref="DockerSwarmUpdateSettings.TaskHistoryLimit"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSwarmUpdate(Configure<DockerSwarmUpdateSettings> configurator)
        {
            return DockerSwarmUpdate(configurator(new DockerSwarmUpdateSettings()));
        }
        /// <summary>
        ///   <p>Update the swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmUpdateSettings.CliSettings"/></li>
        ///     <li><c>--autolock</c> via <see cref="DockerSwarmUpdateSettings.Autolock"/></li>
        ///     <li><c>--cert-expiry</c> via <see cref="DockerSwarmUpdateSettings.CertExpiry"/></li>
        ///     <li><c>--dispatcher-heartbeat</c> via <see cref="DockerSwarmUpdateSettings.DispatcherHeartbeat"/></li>
        ///     <li><c>--external-ca</c> via <see cref="DockerSwarmUpdateSettings.ExternalCa"/></li>
        ///     <li><c>--max-snapshots</c> via <see cref="DockerSwarmUpdateSettings.MaxSnapshots"/></li>
        ///     <li><c>--snapshot-interval</c> via <see cref="DockerSwarmUpdateSettings.SnapshotInterval"/></li>
        ///     <li><c>--task-history-limit</c> via <see cref="DockerSwarmUpdateSettings.TaskHistoryLimit"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerSwarmUpdateSettings Settings, IReadOnlyCollection<Output> Output)> DockerSwarmUpdate(CombinatorialConfigure<DockerSwarmUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerSwarmUpdate, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Fetch the logs of a service or task.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceLogsSettings.CliSettings"/></li>
        ///     <li><c>&lt;service&gt;</c> via <see cref="DockerServiceLogsSettings.Service"/></li>
        ///     <li><c>--details</c> via <see cref="DockerServiceLogsSettings.Details"/></li>
        ///     <li><c>--follow</c> via <see cref="DockerServiceLogsSettings.Follow"/></li>
        ///     <li><c>--no-resolve</c> via <see cref="DockerServiceLogsSettings.NoResolve"/></li>
        ///     <li><c>--no-task-ids</c> via <see cref="DockerServiceLogsSettings.NoTaskIds"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerServiceLogsSettings.NoTrunc"/></li>
        ///     <li><c>--raw</c> via <see cref="DockerServiceLogsSettings.Raw"/></li>
        ///     <li><c>--since</c> via <see cref="DockerServiceLogsSettings.Since"/></li>
        ///     <li><c>--tail</c> via <see cref="DockerServiceLogsSettings.Tail"/></li>
        ///     <li><c>--timestamps</c> via <see cref="DockerServiceLogsSettings.Timestamps"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerServiceLogs(DockerServiceLogsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerServiceLogsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Fetch the logs of a service or task.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceLogsSettings.CliSettings"/></li>
        ///     <li><c>&lt;service&gt;</c> via <see cref="DockerServiceLogsSettings.Service"/></li>
        ///     <li><c>--details</c> via <see cref="DockerServiceLogsSettings.Details"/></li>
        ///     <li><c>--follow</c> via <see cref="DockerServiceLogsSettings.Follow"/></li>
        ///     <li><c>--no-resolve</c> via <see cref="DockerServiceLogsSettings.NoResolve"/></li>
        ///     <li><c>--no-task-ids</c> via <see cref="DockerServiceLogsSettings.NoTaskIds"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerServiceLogsSettings.NoTrunc"/></li>
        ///     <li><c>--raw</c> via <see cref="DockerServiceLogsSettings.Raw"/></li>
        ///     <li><c>--since</c> via <see cref="DockerServiceLogsSettings.Since"/></li>
        ///     <li><c>--tail</c> via <see cref="DockerServiceLogsSettings.Tail"/></li>
        ///     <li><c>--timestamps</c> via <see cref="DockerServiceLogsSettings.Timestamps"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerServiceLogs(Configure<DockerServiceLogsSettings> configurator)
        {
            return DockerServiceLogs(configurator(new DockerServiceLogsSettings()));
        }
        /// <summary>
        ///   <p>Fetch the logs of a service or task.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceLogsSettings.CliSettings"/></li>
        ///     <li><c>&lt;service&gt;</c> via <see cref="DockerServiceLogsSettings.Service"/></li>
        ///     <li><c>--details</c> via <see cref="DockerServiceLogsSettings.Details"/></li>
        ///     <li><c>--follow</c> via <see cref="DockerServiceLogsSettings.Follow"/></li>
        ///     <li><c>--no-resolve</c> via <see cref="DockerServiceLogsSettings.NoResolve"/></li>
        ///     <li><c>--no-task-ids</c> via <see cref="DockerServiceLogsSettings.NoTaskIds"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerServiceLogsSettings.NoTrunc"/></li>
        ///     <li><c>--raw</c> via <see cref="DockerServiceLogsSettings.Raw"/></li>
        ///     <li><c>--since</c> via <see cref="DockerServiceLogsSettings.Since"/></li>
        ///     <li><c>--tail</c> via <see cref="DockerServiceLogsSettings.Tail"/></li>
        ///     <li><c>--timestamps</c> via <see cref="DockerServiceLogsSettings.Timestamps"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerServiceLogsSettings Settings, IReadOnlyCollection<Output> Output)> DockerServiceLogs(CombinatorialConfigure<DockerServiceLogsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerServiceLogs, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>List services.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceLsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerServiceLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerServiceLsSettings.Format"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerServiceLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerServiceLs(DockerServiceLsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerServiceLsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>List services.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceLsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerServiceLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerServiceLsSettings.Format"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerServiceLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerServiceLs(Configure<DockerServiceLsSettings> configurator)
        {
            return DockerServiceLs(configurator(new DockerServiceLsSettings()));
        }
        /// <summary>
        ///   <p>List services.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceLsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerServiceLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerServiceLsSettings.Format"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerServiceLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerServiceLsSettings Settings, IReadOnlyCollection<Output> Output)> DockerServiceLs(CombinatorialConfigure<DockerServiceLsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerServiceLs, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Unlock swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmUnlockSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSwarmUnlock(DockerSwarmUnlockSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerSwarmUnlockSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Unlock swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmUnlockSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSwarmUnlock(Configure<DockerSwarmUnlockSettings> configurator)
        {
            return DockerSwarmUnlock(configurator(new DockerSwarmUnlockSettings()));
        }
        /// <summary>
        ///   <p>Unlock swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmUnlockSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerSwarmUnlockSettings Settings, IReadOnlyCollection<Output> Output)> DockerSwarmUnlock(CombinatorialConfigure<DockerSwarmUnlockSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerSwarmUnlock, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>List networks.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNetworkLsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerNetworkLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerNetworkLsSettings.Format"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerNetworkLsSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerNetworkLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNetworkLs(DockerNetworkLsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerNetworkLsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>List networks.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNetworkLsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerNetworkLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerNetworkLsSettings.Format"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerNetworkLsSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerNetworkLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNetworkLs(Configure<DockerNetworkLsSettings> configurator)
        {
            return DockerNetworkLs(configurator(new DockerNetworkLsSettings()));
        }
        /// <summary>
        ///   <p>List networks.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNetworkLsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerNetworkLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerNetworkLsSettings.Format"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerNetworkLsSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerNetworkLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerNetworkLsSettings Settings, IReadOnlyCollection<Output> Output)> DockerNetworkLs(CombinatorialConfigure<DockerNetworkLsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerNetworkLs, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>List plugins.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginLsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerPluginLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerPluginLsSettings.Format"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerPluginLsSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerPluginLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPluginLs(DockerPluginLsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerPluginLsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>List plugins.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginLsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerPluginLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerPluginLsSettings.Format"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerPluginLsSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerPluginLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPluginLs(Configure<DockerPluginLsSettings> configurator)
        {
            return DockerPluginLs(configurator(new DockerPluginLsSettings()));
        }
        /// <summary>
        ///   <p>List plugins.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginLsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerPluginLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerPluginLsSettings.Format"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerPluginLsSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerPluginLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerPluginLsSettings Settings, IReadOnlyCollection<Output> Output)> DockerPluginLs(CombinatorialConfigure<DockerPluginLsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerPluginLs, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Remove one or more plugins.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;plugins&gt;</c> via <see cref="DockerPluginRmSettings.Plugins"/></li>
        ///     <li><c>--force</c> via <see cref="DockerPluginRmSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPluginRm(DockerPluginRmSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerPluginRmSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove one or more plugins.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;plugins&gt;</c> via <see cref="DockerPluginRmSettings.Plugins"/></li>
        ///     <li><c>--force</c> via <see cref="DockerPluginRmSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPluginRm(Configure<DockerPluginRmSettings> configurator)
        {
            return DockerPluginRm(configurator(new DockerPluginRmSettings()));
        }
        /// <summary>
        ///   <p>Remove one or more plugins.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;plugins&gt;</c> via <see cref="DockerPluginRmSettings.Plugins"/></li>
        ///     <li><c>--force</c> via <see cref="DockerPluginRmSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerPluginRmSettings Settings, IReadOnlyCollection<Output> Output)> DockerPluginRm(CombinatorialConfigure<DockerPluginRmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerPluginRm, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Build an image from a Dockerfile.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageBuildSettings.CliSettings"/></li>
        ///     <li><c>&lt;path&gt;</c> via <see cref="DockerImageBuildSettings.Path"/></li>
        ///     <li><c>--add-host</c> via <see cref="DockerImageBuildSettings.AddHost"/></li>
        ///     <li><c>--build-arg</c> via <see cref="DockerImageBuildSettings.BuildArg"/></li>
        ///     <li><c>--cache-from</c> via <see cref="DockerImageBuildSettings.CacheFrom"/></li>
        ///     <li><c>--cgroup-parent</c> via <see cref="DockerImageBuildSettings.CgroupParent"/></li>
        ///     <li><c>--compress</c> via <see cref="DockerImageBuildSettings.Compress"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerImageBuildSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerImageBuildSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerImageBuildSettings.CpuShares"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerImageBuildSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerImageBuildSettings.CpusetMems"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerImageBuildSettings.DisableContentTrust"/></li>
        ///     <li><c>--file</c> via <see cref="DockerImageBuildSettings.File"/></li>
        ///     <li><c>--force-rm</c> via <see cref="DockerImageBuildSettings.ForceRm"/></li>
        ///     <li><c>--iidfile</c> via <see cref="DockerImageBuildSettings.Iidfile"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerImageBuildSettings.Isolation"/></li>
        ///     <li><c>--label</c> via <see cref="DockerImageBuildSettings.Label"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerImageBuildSettings.Memory"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerImageBuildSettings.MemorySwap"/></li>
        ///     <li><c>--network</c> via <see cref="DockerImageBuildSettings.Network"/></li>
        ///     <li><c>--no-cache</c> via <see cref="DockerImageBuildSettings.NoCache"/></li>
        ///     <li><c>--output</c> via <see cref="DockerImageBuildSettings.Output"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerImageBuildSettings.Platform"/></li>
        ///     <li><c>--progress</c> via <see cref="DockerImageBuildSettings.Progress"/></li>
        ///     <li><c>--pull</c> via <see cref="DockerImageBuildSettings.Pull"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerImageBuildSettings.Quiet"/></li>
        ///     <li><c>--rm</c> via <see cref="DockerImageBuildSettings.Rm"/></li>
        ///     <li><c>--secret</c> via <see cref="DockerImageBuildSettings.Secret"/></li>
        ///     <li><c>--security-opt</c> via <see cref="DockerImageBuildSettings.SecurityOpt"/></li>
        ///     <li><c>--shm-size</c> via <see cref="DockerImageBuildSettings.ShmSize"/></li>
        ///     <li><c>--squash</c> via <see cref="DockerImageBuildSettings.Squash"/></li>
        ///     <li><c>--ssh</c> via <see cref="DockerImageBuildSettings.Ssh"/></li>
        ///     <li><c>--stream</c> via <see cref="DockerImageBuildSettings.Stream"/></li>
        ///     <li><c>--tag</c> via <see cref="DockerImageBuildSettings.Tag"/></li>
        ///     <li><c>--target</c> via <see cref="DockerImageBuildSettings.Target"/></li>
        ///     <li><c>--ulimit</c> via <see cref="DockerImageBuildSettings.Ulimit"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImageBuild(DockerImageBuildSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerImageBuildSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Build an image from a Dockerfile.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageBuildSettings.CliSettings"/></li>
        ///     <li><c>&lt;path&gt;</c> via <see cref="DockerImageBuildSettings.Path"/></li>
        ///     <li><c>--add-host</c> via <see cref="DockerImageBuildSettings.AddHost"/></li>
        ///     <li><c>--build-arg</c> via <see cref="DockerImageBuildSettings.BuildArg"/></li>
        ///     <li><c>--cache-from</c> via <see cref="DockerImageBuildSettings.CacheFrom"/></li>
        ///     <li><c>--cgroup-parent</c> via <see cref="DockerImageBuildSettings.CgroupParent"/></li>
        ///     <li><c>--compress</c> via <see cref="DockerImageBuildSettings.Compress"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerImageBuildSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerImageBuildSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerImageBuildSettings.CpuShares"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerImageBuildSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerImageBuildSettings.CpusetMems"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerImageBuildSettings.DisableContentTrust"/></li>
        ///     <li><c>--file</c> via <see cref="DockerImageBuildSettings.File"/></li>
        ///     <li><c>--force-rm</c> via <see cref="DockerImageBuildSettings.ForceRm"/></li>
        ///     <li><c>--iidfile</c> via <see cref="DockerImageBuildSettings.Iidfile"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerImageBuildSettings.Isolation"/></li>
        ///     <li><c>--label</c> via <see cref="DockerImageBuildSettings.Label"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerImageBuildSettings.Memory"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerImageBuildSettings.MemorySwap"/></li>
        ///     <li><c>--network</c> via <see cref="DockerImageBuildSettings.Network"/></li>
        ///     <li><c>--no-cache</c> via <see cref="DockerImageBuildSettings.NoCache"/></li>
        ///     <li><c>--output</c> via <see cref="DockerImageBuildSettings.Output"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerImageBuildSettings.Platform"/></li>
        ///     <li><c>--progress</c> via <see cref="DockerImageBuildSettings.Progress"/></li>
        ///     <li><c>--pull</c> via <see cref="DockerImageBuildSettings.Pull"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerImageBuildSettings.Quiet"/></li>
        ///     <li><c>--rm</c> via <see cref="DockerImageBuildSettings.Rm"/></li>
        ///     <li><c>--secret</c> via <see cref="DockerImageBuildSettings.Secret"/></li>
        ///     <li><c>--security-opt</c> via <see cref="DockerImageBuildSettings.SecurityOpt"/></li>
        ///     <li><c>--shm-size</c> via <see cref="DockerImageBuildSettings.ShmSize"/></li>
        ///     <li><c>--squash</c> via <see cref="DockerImageBuildSettings.Squash"/></li>
        ///     <li><c>--ssh</c> via <see cref="DockerImageBuildSettings.Ssh"/></li>
        ///     <li><c>--stream</c> via <see cref="DockerImageBuildSettings.Stream"/></li>
        ///     <li><c>--tag</c> via <see cref="DockerImageBuildSettings.Tag"/></li>
        ///     <li><c>--target</c> via <see cref="DockerImageBuildSettings.Target"/></li>
        ///     <li><c>--ulimit</c> via <see cref="DockerImageBuildSettings.Ulimit"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImageBuild(Configure<DockerImageBuildSettings> configurator)
        {
            return DockerImageBuild(configurator(new DockerImageBuildSettings()));
        }
        /// <summary>
        ///   <p>Build an image from a Dockerfile.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageBuildSettings.CliSettings"/></li>
        ///     <li><c>&lt;path&gt;</c> via <see cref="DockerImageBuildSettings.Path"/></li>
        ///     <li><c>--add-host</c> via <see cref="DockerImageBuildSettings.AddHost"/></li>
        ///     <li><c>--build-arg</c> via <see cref="DockerImageBuildSettings.BuildArg"/></li>
        ///     <li><c>--cache-from</c> via <see cref="DockerImageBuildSettings.CacheFrom"/></li>
        ///     <li><c>--cgroup-parent</c> via <see cref="DockerImageBuildSettings.CgroupParent"/></li>
        ///     <li><c>--compress</c> via <see cref="DockerImageBuildSettings.Compress"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerImageBuildSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerImageBuildSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerImageBuildSettings.CpuShares"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerImageBuildSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerImageBuildSettings.CpusetMems"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerImageBuildSettings.DisableContentTrust"/></li>
        ///     <li><c>--file</c> via <see cref="DockerImageBuildSettings.File"/></li>
        ///     <li><c>--force-rm</c> via <see cref="DockerImageBuildSettings.ForceRm"/></li>
        ///     <li><c>--iidfile</c> via <see cref="DockerImageBuildSettings.Iidfile"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerImageBuildSettings.Isolation"/></li>
        ///     <li><c>--label</c> via <see cref="DockerImageBuildSettings.Label"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerImageBuildSettings.Memory"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerImageBuildSettings.MemorySwap"/></li>
        ///     <li><c>--network</c> via <see cref="DockerImageBuildSettings.Network"/></li>
        ///     <li><c>--no-cache</c> via <see cref="DockerImageBuildSettings.NoCache"/></li>
        ///     <li><c>--output</c> via <see cref="DockerImageBuildSettings.Output"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerImageBuildSettings.Platform"/></li>
        ///     <li><c>--progress</c> via <see cref="DockerImageBuildSettings.Progress"/></li>
        ///     <li><c>--pull</c> via <see cref="DockerImageBuildSettings.Pull"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerImageBuildSettings.Quiet"/></li>
        ///     <li><c>--rm</c> via <see cref="DockerImageBuildSettings.Rm"/></li>
        ///     <li><c>--secret</c> via <see cref="DockerImageBuildSettings.Secret"/></li>
        ///     <li><c>--security-opt</c> via <see cref="DockerImageBuildSettings.SecurityOpt"/></li>
        ///     <li><c>--shm-size</c> via <see cref="DockerImageBuildSettings.ShmSize"/></li>
        ///     <li><c>--squash</c> via <see cref="DockerImageBuildSettings.Squash"/></li>
        ///     <li><c>--ssh</c> via <see cref="DockerImageBuildSettings.Ssh"/></li>
        ///     <li><c>--stream</c> via <see cref="DockerImageBuildSettings.Stream"/></li>
        ///     <li><c>--tag</c> via <see cref="DockerImageBuildSettings.Tag"/></li>
        ///     <li><c>--target</c> via <see cref="DockerImageBuildSettings.Target"/></li>
        ///     <li><c>--ulimit</c> via <see cref="DockerImageBuildSettings.Ulimit"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerImageBuildSettings Settings, IReadOnlyCollection<Output> Output)> DockerImageBuild(CombinatorialConfigure<DockerImageBuildSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerImageBuild, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Remove trust for an image.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustRevokeSettings.CliSettings"/></li>
        ///     <li><c>&lt;image&gt;</c> via <see cref="DockerTrustRevokeSettings.Image"/></li>
        ///     <li><c>--yes</c> via <see cref="DockerTrustRevokeSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerTrustRevoke(DockerTrustRevokeSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerTrustRevokeSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove trust for an image.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustRevokeSettings.CliSettings"/></li>
        ///     <li><c>&lt;image&gt;</c> via <see cref="DockerTrustRevokeSettings.Image"/></li>
        ///     <li><c>--yes</c> via <see cref="DockerTrustRevokeSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerTrustRevoke(Configure<DockerTrustRevokeSettings> configurator)
        {
            return DockerTrustRevoke(configurator(new DockerTrustRevokeSettings()));
        }
        /// <summary>
        ///   <p>Remove trust for an image.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustRevokeSettings.CliSettings"/></li>
        ///     <li><c>&lt;image&gt;</c> via <see cref="DockerTrustRevokeSettings.Image"/></li>
        ///     <li><c>--yes</c> via <see cref="DockerTrustRevokeSettings.Yes"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerTrustRevokeSettings Settings, IReadOnlyCollection<Output> Output)> DockerTrustRevoke(CombinatorialConfigure<DockerTrustRevokeSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerTrustRevoke, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Remove one or more images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerRmiSettings.CliSettings"/></li>
        ///     <li><c>&lt;images&gt;</c> via <see cref="DockerRmiSettings.Images"/></li>
        ///     <li><c>--force</c> via <see cref="DockerRmiSettings.Force"/></li>
        ///     <li><c>--no-prune</c> via <see cref="DockerRmiSettings.NoPrune"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerRmi(DockerRmiSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerRmiSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove one or more images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerRmiSettings.CliSettings"/></li>
        ///     <li><c>&lt;images&gt;</c> via <see cref="DockerRmiSettings.Images"/></li>
        ///     <li><c>--force</c> via <see cref="DockerRmiSettings.Force"/></li>
        ///     <li><c>--no-prune</c> via <see cref="DockerRmiSettings.NoPrune"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerRmi(Configure<DockerRmiSettings> configurator)
        {
            return DockerRmi(configurator(new DockerRmiSettings()));
        }
        /// <summary>
        ///   <p>Remove one or more images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerRmiSettings.CliSettings"/></li>
        ///     <li><c>&lt;images&gt;</c> via <see cref="DockerRmiSettings.Images"/></li>
        ///     <li><c>--force</c> via <see cref="DockerRmiSettings.Force"/></li>
        ///     <li><c>--no-prune</c> via <see cref="DockerRmiSettings.NoPrune"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerRmiSettings Settings, IReadOnlyCollection<Output> Output)> DockerRmi(CombinatorialConfigure<DockerRmiSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerRmi, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Remove one or more networks.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNetworkRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;networks&gt;</c> via <see cref="DockerNetworkRmSettings.Networks"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNetworkRm(DockerNetworkRmSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerNetworkRmSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove one or more networks.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNetworkRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;networks&gt;</c> via <see cref="DockerNetworkRmSettings.Networks"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNetworkRm(Configure<DockerNetworkRmSettings> configurator)
        {
            return DockerNetworkRm(configurator(new DockerNetworkRmSettings()));
        }
        /// <summary>
        ///   <p>Remove one or more networks.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNetworkRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;networks&gt;</c> via <see cref="DockerNetworkRmSettings.Networks"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerNetworkRmSettings Settings, IReadOnlyCollection<Output> Output)> DockerNetworkRm(CombinatorialConfigure<DockerNetworkRmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerNetworkRm, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Show the Docker version information.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerVersionSettings.CliSettings"/></li>
        ///     <li><c>--format</c> via <see cref="DockerVersionSettings.Format"/></li>
        ///     <li><c>--kubeconfig</c> via <see cref="DockerVersionSettings.Kubeconfig"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerVersion(DockerVersionSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerVersionSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Show the Docker version information.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerVersionSettings.CliSettings"/></li>
        ///     <li><c>--format</c> via <see cref="DockerVersionSettings.Format"/></li>
        ///     <li><c>--kubeconfig</c> via <see cref="DockerVersionSettings.Kubeconfig"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerVersion(Configure<DockerVersionSettings> configurator)
        {
            return DockerVersion(configurator(new DockerVersionSettings()));
        }
        /// <summary>
        ///   <p>Show the Docker version information.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerVersionSettings.CliSettings"/></li>
        ///     <li><c>--format</c> via <see cref="DockerVersionSettings.Format"/></li>
        ///     <li><c>--kubeconfig</c> via <see cref="DockerVersionSettings.Kubeconfig"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerVersionSettings Settings, IReadOnlyCollection<Output> Output)> DockerVersion(CombinatorialConfigure<DockerVersionSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerVersion, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Create a secret from a file or STDIN as content.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSecretCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;file&gt;</c> via <see cref="DockerSecretCreateSettings.File"/></li>
        ///     <li><c>&lt;secret&gt;</c> via <see cref="DockerSecretCreateSettings.Secret"/></li>
        ///     <li><c>--driver</c> via <see cref="DockerSecretCreateSettings.Driver"/></li>
        ///     <li><c>--label</c> via <see cref="DockerSecretCreateSettings.Label"/></li>
        ///     <li><c>--template-driver</c> via <see cref="DockerSecretCreateSettings.TemplateDriver"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSecretCreate(DockerSecretCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerSecretCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Create a secret from a file or STDIN as content.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSecretCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;file&gt;</c> via <see cref="DockerSecretCreateSettings.File"/></li>
        ///     <li><c>&lt;secret&gt;</c> via <see cref="DockerSecretCreateSettings.Secret"/></li>
        ///     <li><c>--driver</c> via <see cref="DockerSecretCreateSettings.Driver"/></li>
        ///     <li><c>--label</c> via <see cref="DockerSecretCreateSettings.Label"/></li>
        ///     <li><c>--template-driver</c> via <see cref="DockerSecretCreateSettings.TemplateDriver"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSecretCreate(Configure<DockerSecretCreateSettings> configurator)
        {
            return DockerSecretCreate(configurator(new DockerSecretCreateSettings()));
        }
        /// <summary>
        ///   <p>Create a secret from a file or STDIN as content.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSecretCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;file&gt;</c> via <see cref="DockerSecretCreateSettings.File"/></li>
        ///     <li><c>&lt;secret&gt;</c> via <see cref="DockerSecretCreateSettings.Secret"/></li>
        ///     <li><c>--driver</c> via <see cref="DockerSecretCreateSettings.Driver"/></li>
        ///     <li><c>--label</c> via <see cref="DockerSecretCreateSettings.Label"/></li>
        ///     <li><c>--template-driver</c> via <see cref="DockerSecretCreateSettings.TemplateDriver"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerSecretCreateSettings Settings, IReadOnlyCollection<Output> Output)> DockerSecretCreate(CombinatorialConfigure<DockerSecretCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerSecretCreate, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Remove one or more services.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;services&gt;</c> via <see cref="DockerServiceRmSettings.Services"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerServiceRm(DockerServiceRmSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerServiceRmSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove one or more services.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;services&gt;</c> via <see cref="DockerServiceRmSettings.Services"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerServiceRm(Configure<DockerServiceRmSettings> configurator)
        {
            return DockerServiceRm(configurator(new DockerServiceRmSettings()));
        }
        /// <summary>
        ///   <p>Remove one or more services.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;services&gt;</c> via <see cref="DockerServiceRmSettings.Services"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerServiceRmSettings Settings, IReadOnlyCollection<Output> Output)> DockerServiceRm(CombinatorialConfigure<DockerServiceRmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerServiceRm, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Load a private key file for signing.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustKeyLoadSettings.CliSettings"/></li>
        ///     <li><c>&lt;keyfile&gt;</c> via <see cref="DockerTrustKeyLoadSettings.Keyfile"/></li>
        ///     <li><c>--name</c> via <see cref="DockerTrustKeyLoadSettings.Name"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerTrustKeyLoad(DockerTrustKeyLoadSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerTrustKeyLoadSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Load a private key file for signing.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustKeyLoadSettings.CliSettings"/></li>
        ///     <li><c>&lt;keyfile&gt;</c> via <see cref="DockerTrustKeyLoadSettings.Keyfile"/></li>
        ///     <li><c>--name</c> via <see cref="DockerTrustKeyLoadSettings.Name"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerTrustKeyLoad(Configure<DockerTrustKeyLoadSettings> configurator)
        {
            return DockerTrustKeyLoad(configurator(new DockerTrustKeyLoadSettings()));
        }
        /// <summary>
        ///   <p>Load a private key file for signing.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustKeyLoadSettings.CliSettings"/></li>
        ///     <li><c>&lt;keyfile&gt;</c> via <see cref="DockerTrustKeyLoadSettings.Keyfile"/></li>
        ///     <li><c>--name</c> via <see cref="DockerTrustKeyLoadSettings.Name"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerTrustKeyLoadSettings Settings, IReadOnlyCollection<Output> Output)> DockerTrustKeyLoad(CombinatorialConfigure<DockerTrustKeyLoadSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerTrustKeyLoad, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Remove one or more secrets.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSecretRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;secrets&gt;</c> via <see cref="DockerSecretRmSettings.Secrets"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSecretRm(DockerSecretRmSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerSecretRmSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove one or more secrets.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSecretRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;secrets&gt;</c> via <see cref="DockerSecretRmSettings.Secrets"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSecretRm(Configure<DockerSecretRmSettings> configurator)
        {
            return DockerSecretRm(configurator(new DockerSecretRmSettings()));
        }
        /// <summary>
        ///   <p>Remove one or more secrets.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSecretRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;secrets&gt;</c> via <see cref="DockerSecretRmSettings.Secrets"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerSecretRmSettings Settings, IReadOnlyCollection<Output> Output)> DockerSecretRm(CombinatorialConfigure<DockerSecretRmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerSecretRm, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Display detailed information on one or more images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;images&gt;</c> via <see cref="DockerImageInspectSettings.Images"/></li>
        ///     <li><c>--format</c> via <see cref="DockerImageInspectSettings.Format"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImageInspect(DockerImageInspectSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerImageInspectSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Display detailed information on one or more images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;images&gt;</c> via <see cref="DockerImageInspectSettings.Images"/></li>
        ///     <li><c>--format</c> via <see cref="DockerImageInspectSettings.Format"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImageInspect(Configure<DockerImageInspectSettings> configurator)
        {
            return DockerImageInspect(configurator(new DockerImageInspectSettings()));
        }
        /// <summary>
        ///   <p>Display detailed information on one or more images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;images&gt;</c> via <see cref="DockerImageInspectSettings.Images"/></li>
        ///     <li><c>--format</c> via <see cref="DockerImageInspectSettings.Format"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerImageInspectSettings Settings, IReadOnlyCollection<Output> Output)> DockerImageInspect(CombinatorialConfigure<DockerImageInspectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerImageInspect, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Save one or more images to a tar archive (streamed to STDOUT by default).</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageSaveSettings.CliSettings"/></li>
        ///     <li><c>&lt;images&gt;</c> via <see cref="DockerImageSaveSettings.Images"/></li>
        ///     <li><c>--output</c> via <see cref="DockerImageSaveSettings.Output"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImageSave(DockerImageSaveSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerImageSaveSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Save one or more images to a tar archive (streamed to STDOUT by default).</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageSaveSettings.CliSettings"/></li>
        ///     <li><c>&lt;images&gt;</c> via <see cref="DockerImageSaveSettings.Images"/></li>
        ///     <li><c>--output</c> via <see cref="DockerImageSaveSettings.Output"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImageSave(Configure<DockerImageSaveSettings> configurator)
        {
            return DockerImageSave(configurator(new DockerImageSaveSettings()));
        }
        /// <summary>
        ///   <p>Save one or more images to a tar archive (streamed to STDOUT by default).</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageSaveSettings.CliSettings"/></li>
        ///     <li><c>&lt;images&gt;</c> via <see cref="DockerImageSaveSettings.Images"/></li>
        ///     <li><c>--output</c> via <see cref="DockerImageSaveSettings.Output"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerImageSaveSettings Settings, IReadOnlyCollection<Output> Output)> DockerImageSave(CombinatorialConfigure<DockerImageSaveSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerImageSave, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage keys for signing Docker images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustKeySettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerTrustKey(DockerTrustKeySettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerTrustKeySettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage keys for signing Docker images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustKeySettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerTrustKey(Configure<DockerTrustKeySettings> configurator)
        {
            return DockerTrustKey(configurator(new DockerTrustKeySettings()));
        }
        /// <summary>
        ///   <p>Manage keys for signing Docker images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustKeySettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerTrustKeySettings Settings, IReadOnlyCollection<Output> Output)> DockerTrustKey(CombinatorialConfigure<DockerTrustKeySettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerTrustKey, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Attach local standard input, output, and error streams to a running container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerAttachSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerAttachSettings.Container"/></li>
        ///     <li><c>--detach-keys</c> via <see cref="DockerContainerAttachSettings.DetachKeys"/></li>
        ///     <li><c>--no-stdin</c> via <see cref="DockerContainerAttachSettings.NoStdin"/></li>
        ///     <li><c>--sig-proxy</c> via <see cref="DockerContainerAttachSettings.SigProxy"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerAttach(DockerContainerAttachSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContainerAttachSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Attach local standard input, output, and error streams to a running container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerAttachSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerAttachSettings.Container"/></li>
        ///     <li><c>--detach-keys</c> via <see cref="DockerContainerAttachSettings.DetachKeys"/></li>
        ///     <li><c>--no-stdin</c> via <see cref="DockerContainerAttachSettings.NoStdin"/></li>
        ///     <li><c>--sig-proxy</c> via <see cref="DockerContainerAttachSettings.SigProxy"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerAttach(Configure<DockerContainerAttachSettings> configurator)
        {
            return DockerContainerAttach(configurator(new DockerContainerAttachSettings()));
        }
        /// <summary>
        ///   <p>Attach local standard input, output, and error streams to a running container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerAttachSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerAttachSettings.Container"/></li>
        ///     <li><c>--detach-keys</c> via <see cref="DockerContainerAttachSettings.DetachKeys"/></li>
        ///     <li><c>--no-stdin</c> via <see cref="DockerContainerAttachSettings.NoStdin"/></li>
        ///     <li><c>--sig-proxy</c> via <see cref="DockerContainerAttachSettings.SigProxy"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContainerAttachSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerAttach(CombinatorialConfigure<DockerContainerAttachSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContainerAttach, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Create a context.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;context&gt;</c> via <see cref="DockerContextCreateSettings.Context"/></li>
        ///     <li><c>--default-stack-orchestrator</c> via <see cref="DockerContextCreateSettings.DefaultStackOrchestrator"/></li>
        ///     <li><c>--description</c> via <see cref="DockerContextCreateSettings.Description"/></li>
        ///     <li><c>--docker</c> via <see cref="DockerContextCreateSettings.Docker"/></li>
        ///     <li><c>--from</c> via <see cref="DockerContextCreateSettings.From"/></li>
        ///     <li><c>--kubernetes</c> via <see cref="DockerContextCreateSettings.Kubernetes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContextCreate(DockerContextCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContextCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Create a context.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;context&gt;</c> via <see cref="DockerContextCreateSettings.Context"/></li>
        ///     <li><c>--default-stack-orchestrator</c> via <see cref="DockerContextCreateSettings.DefaultStackOrchestrator"/></li>
        ///     <li><c>--description</c> via <see cref="DockerContextCreateSettings.Description"/></li>
        ///     <li><c>--docker</c> via <see cref="DockerContextCreateSettings.Docker"/></li>
        ///     <li><c>--from</c> via <see cref="DockerContextCreateSettings.From"/></li>
        ///     <li><c>--kubernetes</c> via <see cref="DockerContextCreateSettings.Kubernetes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContextCreate(Configure<DockerContextCreateSettings> configurator)
        {
            return DockerContextCreate(configurator(new DockerContextCreateSettings()));
        }
        /// <summary>
        ///   <p>Create a context.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;context&gt;</c> via <see cref="DockerContextCreateSettings.Context"/></li>
        ///     <li><c>--default-stack-orchestrator</c> via <see cref="DockerContextCreateSettings.DefaultStackOrchestrator"/></li>
        ///     <li><c>--description</c> via <see cref="DockerContextCreateSettings.Description"/></li>
        ///     <li><c>--docker</c> via <see cref="DockerContextCreateSettings.Docker"/></li>
        ///     <li><c>--from</c> via <see cref="DockerContextCreateSettings.From"/></li>
        ///     <li><c>--kubernetes</c> via <see cref="DockerContextCreateSettings.Kubernetes"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContextCreateSettings Settings, IReadOnlyCollection<Output> Output)> DockerContextCreate(CombinatorialConfigure<DockerContextCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContextCreate, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Create a config from a file or STDIN.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerConfigCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;config&gt;</c> via <see cref="DockerConfigCreateSettings.Config"/></li>
        ///     <li><c>&lt;file&gt;</c> via <see cref="DockerConfigCreateSettings.File"/></li>
        ///     <li><c>--label</c> via <see cref="DockerConfigCreateSettings.Label"/></li>
        ///     <li><c>--template-driver</c> via <see cref="DockerConfigCreateSettings.TemplateDriver"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerConfigCreate(DockerConfigCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerConfigCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Create a config from a file or STDIN.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerConfigCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;config&gt;</c> via <see cref="DockerConfigCreateSettings.Config"/></li>
        ///     <li><c>&lt;file&gt;</c> via <see cref="DockerConfigCreateSettings.File"/></li>
        ///     <li><c>--label</c> via <see cref="DockerConfigCreateSettings.Label"/></li>
        ///     <li><c>--template-driver</c> via <see cref="DockerConfigCreateSettings.TemplateDriver"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerConfigCreate(Configure<DockerConfigCreateSettings> configurator)
        {
            return DockerConfigCreate(configurator(new DockerConfigCreateSettings()));
        }
        /// <summary>
        ///   <p>Create a config from a file or STDIN.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerConfigCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;config&gt;</c> via <see cref="DockerConfigCreateSettings.Config"/></li>
        ///     <li><c>&lt;file&gt;</c> via <see cref="DockerConfigCreateSettings.File"/></li>
        ///     <li><c>--label</c> via <see cref="DockerConfigCreateSettings.Label"/></li>
        ///     <li><c>--template-driver</c> via <see cref="DockerConfigCreateSettings.TemplateDriver"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerConfigCreateSettings Settings, IReadOnlyCollection<Output> Output)> DockerConfigCreate(CombinatorialConfigure<DockerConfigCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerConfigCreate, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Display detailed information on one or more volumes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerVolumeInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;volumes&gt;</c> via <see cref="DockerVolumeInspectSettings.Volumes"/></li>
        ///     <li><c>--format</c> via <see cref="DockerVolumeInspectSettings.Format"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerVolumeInspect(DockerVolumeInspectSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerVolumeInspectSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Display detailed information on one or more volumes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerVolumeInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;volumes&gt;</c> via <see cref="DockerVolumeInspectSettings.Volumes"/></li>
        ///     <li><c>--format</c> via <see cref="DockerVolumeInspectSettings.Format"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerVolumeInspect(Configure<DockerVolumeInspectSettings> configurator)
        {
            return DockerVolumeInspect(configurator(new DockerVolumeInspectSettings()));
        }
        /// <summary>
        ///   <p>Display detailed information on one or more volumes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerVolumeInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;volumes&gt;</c> via <see cref="DockerVolumeInspectSettings.Volumes"/></li>
        ///     <li><c>--format</c> via <see cref="DockerVolumeInspectSettings.Format"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerVolumeInspectSettings Settings, IReadOnlyCollection<Output> Output)> DockerVolumeInspect(CombinatorialConfigure<DockerVolumeInspectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerVolumeInspect, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Stop one or more running containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerStopSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerStopSettings.Containers"/></li>
        ///     <li><c>--time</c> via <see cref="DockerContainerStopSettings.Time"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerStop(DockerContainerStopSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContainerStopSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Stop one or more running containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerStopSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerStopSettings.Containers"/></li>
        ///     <li><c>--time</c> via <see cref="DockerContainerStopSettings.Time"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerStop(Configure<DockerContainerStopSettings> configurator)
        {
            return DockerContainerStop(configurator(new DockerContainerStopSettings()));
        }
        /// <summary>
        ///   <p>Stop one or more running containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerStopSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerStopSettings.Containers"/></li>
        ///     <li><c>--time</c> via <see cref="DockerContainerStopSettings.Time"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContainerStopSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerStop(CombinatorialConfigure<DockerContainerStopSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContainerStop, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Remove all unused networks.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNetworkPruneSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerNetworkPruneSettings.Filter"/></li>
        ///     <li><c>--force</c> via <see cref="DockerNetworkPruneSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNetworkPrune(DockerNetworkPruneSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerNetworkPruneSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove all unused networks.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNetworkPruneSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerNetworkPruneSettings.Filter"/></li>
        ///     <li><c>--force</c> via <see cref="DockerNetworkPruneSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNetworkPrune(Configure<DockerNetworkPruneSettings> configurator)
        {
            return DockerNetworkPrune(configurator(new DockerNetworkPruneSettings()));
        }
        /// <summary>
        ///   <p>Remove all unused networks.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNetworkPruneSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerNetworkPruneSettings.Filter"/></li>
        ///     <li><c>--force</c> via <see cref="DockerNetworkPruneSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerNetworkPruneSettings Settings, IReadOnlyCollection<Output> Output)> DockerNetworkPrune(CombinatorialConfigure<DockerNetworkPruneSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerNetworkPrune, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Display an image manifest, or manifest list.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerManifestInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;manifest&gt;</c> via <see cref="DockerManifestInspectSettings.Manifest"/></li>
        ///     <li><c>&lt;manifestList&gt;</c> via <see cref="DockerManifestInspectSettings.ManifestList"/></li>
        ///     <li><c>--insecure</c> via <see cref="DockerManifestInspectSettings.Insecure"/></li>
        ///     <li><c>--verbose</c> via <see cref="DockerManifestInspectSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerManifestInspect(DockerManifestInspectSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerManifestInspectSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Display an image manifest, or manifest list.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerManifestInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;manifest&gt;</c> via <see cref="DockerManifestInspectSettings.Manifest"/></li>
        ///     <li><c>&lt;manifestList&gt;</c> via <see cref="DockerManifestInspectSettings.ManifestList"/></li>
        ///     <li><c>--insecure</c> via <see cref="DockerManifestInspectSettings.Insecure"/></li>
        ///     <li><c>--verbose</c> via <see cref="DockerManifestInspectSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerManifestInspect(Configure<DockerManifestInspectSettings> configurator)
        {
            return DockerManifestInspect(configurator(new DockerManifestInspectSettings()));
        }
        /// <summary>
        ///   <p>Display an image manifest, or manifest list.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerManifestInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;manifest&gt;</c> via <see cref="DockerManifestInspectSettings.Manifest"/></li>
        ///     <li><c>&lt;manifestList&gt;</c> via <see cref="DockerManifestInspectSettings.ManifestList"/></li>
        ///     <li><c>--insecure</c> via <see cref="DockerManifestInspectSettings.Insecure"/></li>
        ///     <li><c>--verbose</c> via <see cref="DockerManifestInspectSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerManifestInspectSettings Settings, IReadOnlyCollection<Output> Output)> DockerManifestInspect(CombinatorialConfigure<DockerManifestInspectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerManifestInspect, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Display system-wide information.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerInfoSettings.CliSettings"/></li>
        ///     <li><c>--format</c> via <see cref="DockerInfoSettings.Format"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerInfo(DockerInfoSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerInfoSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Display system-wide information.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerInfoSettings.CliSettings"/></li>
        ///     <li><c>--format</c> via <see cref="DockerInfoSettings.Format"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerInfo(Configure<DockerInfoSettings> configurator)
        {
            return DockerInfo(configurator(new DockerInfoSettings()));
        }
        /// <summary>
        ///   <p>Display system-wide information.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerInfoSettings.CliSettings"/></li>
        ///     <li><c>--format</c> via <see cref="DockerInfoSettings.Format"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerInfoSettings Settings, IReadOnlyCollection<Output> Output)> DockerInfo(CombinatorialConfigure<DockerInfoSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerInfo, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Create a new image from a container's changes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerCommitSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerCommitSettings.Container"/></li>
        ///     <li><c>&lt;repository&gt;</c> via <see cref="DockerCommitSettings.Repository"/></li>
        ///     <li><c>--author</c> via <see cref="DockerCommitSettings.Author"/></li>
        ///     <li><c>--change</c> via <see cref="DockerCommitSettings.Change"/></li>
        ///     <li><c>--message</c> via <see cref="DockerCommitSettings.Message"/></li>
        ///     <li><c>--pause</c> via <see cref="DockerCommitSettings.Pause"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerCommit(DockerCommitSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerCommitSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Create a new image from a container's changes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerCommitSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerCommitSettings.Container"/></li>
        ///     <li><c>&lt;repository&gt;</c> via <see cref="DockerCommitSettings.Repository"/></li>
        ///     <li><c>--author</c> via <see cref="DockerCommitSettings.Author"/></li>
        ///     <li><c>--change</c> via <see cref="DockerCommitSettings.Change"/></li>
        ///     <li><c>--message</c> via <see cref="DockerCommitSettings.Message"/></li>
        ///     <li><c>--pause</c> via <see cref="DockerCommitSettings.Pause"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerCommit(Configure<DockerCommitSettings> configurator)
        {
            return DockerCommit(configurator(new DockerCommitSettings()));
        }
        /// <summary>
        ///   <p>Create a new image from a container's changes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerCommitSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerCommitSettings.Container"/></li>
        ///     <li><c>&lt;repository&gt;</c> via <see cref="DockerCommitSettings.Repository"/></li>
        ///     <li><c>--author</c> via <see cref="DockerCommitSettings.Author"/></li>
        ///     <li><c>--change</c> via <see cref="DockerCommitSettings.Change"/></li>
        ///     <li><c>--message</c> via <see cref="DockerCommitSettings.Message"/></li>
        ///     <li><c>--pause</c> via <see cref="DockerCommitSettings.Pause"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerCommitSettings Settings, IReadOnlyCollection<Output> Output)> DockerCommit(CombinatorialConfigure<DockerCommitSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerCommit, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Deploy a new stack or update an existing stack.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStackDeploySettings.CliSettings"/></li>
        ///     <li><c>&lt;stack&gt;</c> via <see cref="DockerStackDeploySettings.Stack"/></li>
        ///     <li><c>--bundle-file</c> via <see cref="DockerStackDeploySettings.BundleFile"/></li>
        ///     <li><c>--compose-file</c> via <see cref="DockerStackDeploySettings.ComposeFile"/></li>
        ///     <li><c>--namespace</c> via <see cref="DockerStackDeploySettings.Namespace"/></li>
        ///     <li><c>--prune</c> via <see cref="DockerStackDeploySettings.Prune"/></li>
        ///     <li><c>--resolve-image</c> via <see cref="DockerStackDeploySettings.ResolveImage"/></li>
        ///     <li><c>--with-registry-auth</c> via <see cref="DockerStackDeploySettings.WithRegistryAuth"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerStackDeploy(DockerStackDeploySettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerStackDeploySettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Deploy a new stack or update an existing stack.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStackDeploySettings.CliSettings"/></li>
        ///     <li><c>&lt;stack&gt;</c> via <see cref="DockerStackDeploySettings.Stack"/></li>
        ///     <li><c>--bundle-file</c> via <see cref="DockerStackDeploySettings.BundleFile"/></li>
        ///     <li><c>--compose-file</c> via <see cref="DockerStackDeploySettings.ComposeFile"/></li>
        ///     <li><c>--namespace</c> via <see cref="DockerStackDeploySettings.Namespace"/></li>
        ///     <li><c>--prune</c> via <see cref="DockerStackDeploySettings.Prune"/></li>
        ///     <li><c>--resolve-image</c> via <see cref="DockerStackDeploySettings.ResolveImage"/></li>
        ///     <li><c>--with-registry-auth</c> via <see cref="DockerStackDeploySettings.WithRegistryAuth"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerStackDeploy(Configure<DockerStackDeploySettings> configurator)
        {
            return DockerStackDeploy(configurator(new DockerStackDeploySettings()));
        }
        /// <summary>
        ///   <p>Deploy a new stack or update an existing stack.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStackDeploySettings.CliSettings"/></li>
        ///     <li><c>&lt;stack&gt;</c> via <see cref="DockerStackDeploySettings.Stack"/></li>
        ///     <li><c>--bundle-file</c> via <see cref="DockerStackDeploySettings.BundleFile"/></li>
        ///     <li><c>--compose-file</c> via <see cref="DockerStackDeploySettings.ComposeFile"/></li>
        ///     <li><c>--namespace</c> via <see cref="DockerStackDeploySettings.Namespace"/></li>
        ///     <li><c>--prune</c> via <see cref="DockerStackDeploySettings.Prune"/></li>
        ///     <li><c>--resolve-image</c> via <see cref="DockerStackDeploySettings.ResolveImage"/></li>
        ///     <li><c>--with-registry-auth</c> via <see cref="DockerStackDeploySettings.WithRegistryAuth"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerStackDeploySettings Settings, IReadOnlyCollection<Output> Output)> DockerStackDeploy(CombinatorialConfigure<DockerStackDeploySettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerStackDeploy, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Scale one or multiple replicated services.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceScaleSettings.CliSettings"/></li>
        ///     <li><c>&lt;serviceReplicas&gt;</c> via <see cref="DockerServiceScaleSettings.ServiceReplicas"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerServiceScale(DockerServiceScaleSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerServiceScaleSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Scale one or multiple replicated services.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceScaleSettings.CliSettings"/></li>
        ///     <li><c>&lt;serviceReplicas&gt;</c> via <see cref="DockerServiceScaleSettings.ServiceReplicas"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerServiceScale(Configure<DockerServiceScaleSettings> configurator)
        {
            return DockerServiceScale(configurator(new DockerServiceScaleSettings()));
        }
        /// <summary>
        ///   <p>Scale one or multiple replicated services.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceScaleSettings.CliSettings"/></li>
        ///     <li><c>&lt;serviceReplicas&gt;</c> via <see cref="DockerServiceScaleSettings.ServiceReplicas"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerServiceScaleSettings Settings, IReadOnlyCollection<Output> Output)> DockerServiceScale(CombinatorialConfigure<DockerServiceScaleSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerServiceScale, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Run a command in a new container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;args&gt;</c> via <see cref="DockerRunSettings.Args"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerRunSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerRunSettings.Command"/></li>
        ///     <li><c>&lt;image&gt;</c> via <see cref="DockerRunSettings.Image"/></li>
        ///     <li><c>--add-host</c> via <see cref="DockerRunSettings.AddHost"/></li>
        ///     <li><c>--attach</c> via <see cref="DockerRunSettings.Attach"/></li>
        ///     <li><c>--blkio-weight</c> via <see cref="DockerRunSettings.BlkioWeight"/></li>
        ///     <li><c>--blkio-weight-device</c> via <see cref="DockerRunSettings.BlkioWeightDevice"/></li>
        ///     <li><c>--cap-add</c> via <see cref="DockerRunSettings.CapAdd"/></li>
        ///     <li><c>--cap-drop</c> via <see cref="DockerRunSettings.CapDrop"/></li>
        ///     <li><c>--cgroup-parent</c> via <see cref="DockerRunSettings.CgroupParent"/></li>
        ///     <li><c>--cidfile</c> via <see cref="DockerRunSettings.Cidfile"/></li>
        ///     <li><c>--cpu-count</c> via <see cref="DockerRunSettings.CpuCount"/></li>
        ///     <li><c>--cpu-percent</c> via <see cref="DockerRunSettings.CpuPercent"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerRunSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerRunSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-rt-period</c> via <see cref="DockerRunSettings.CpuRtPeriod"/></li>
        ///     <li><c>--cpu-rt-runtime</c> via <see cref="DockerRunSettings.CpuRtRuntime"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerRunSettings.CpuShares"/></li>
        ///     <li><c>--cpus</c> via <see cref="DockerRunSettings.Cpus"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerRunSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerRunSettings.CpusetMems"/></li>
        ///     <li><c>--detach</c> via <see cref="DockerRunSettings.Detach"/></li>
        ///     <li><c>--detach-keys</c> via <see cref="DockerRunSettings.DetachKeys"/></li>
        ///     <li><c>--device</c> via <see cref="DockerRunSettings.Device"/></li>
        ///     <li><c>--device-cgroup-rule</c> via <see cref="DockerRunSettings.DeviceCgroupRule"/></li>
        ///     <li><c>--device-read-bps</c> via <see cref="DockerRunSettings.DeviceReadBps"/></li>
        ///     <li><c>--device-read-iops</c> via <see cref="DockerRunSettings.DeviceReadIops"/></li>
        ///     <li><c>--device-write-bps</c> via <see cref="DockerRunSettings.DeviceWriteBps"/></li>
        ///     <li><c>--device-write-iops</c> via <see cref="DockerRunSettings.DeviceWriteIops"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerRunSettings.DisableContentTrust"/></li>
        ///     <li><c>--dns</c> via <see cref="DockerRunSettings.Dns"/></li>
        ///     <li><c>--dns-opt</c> via <see cref="DockerRunSettings.DnsOpt"/></li>
        ///     <li><c>--dns-option</c> via <see cref="DockerRunSettings.DnsOption"/></li>
        ///     <li><c>--dns-search</c> via <see cref="DockerRunSettings.DnsSearch"/></li>
        ///     <li><c>--domainname</c> via <see cref="DockerRunSettings.Domainname"/></li>
        ///     <li><c>--entrypoint</c> via <see cref="DockerRunSettings.Entrypoint"/></li>
        ///     <li><c>--env</c> via <see cref="DockerRunSettings.Env"/></li>
        ///     <li><c>--env-file</c> via <see cref="DockerRunSettings.EnvFile"/></li>
        ///     <li><c>--expose</c> via <see cref="DockerRunSettings.Expose"/></li>
        ///     <li><c>--gpus</c> via <see cref="DockerRunSettings.Gpus"/></li>
        ///     <li><c>--group-add</c> via <see cref="DockerRunSettings.GroupAdd"/></li>
        ///     <li><c>--health-cmd</c> via <see cref="DockerRunSettings.HealthCmd"/></li>
        ///     <li><c>--health-interval</c> via <see cref="DockerRunSettings.HealthInterval"/></li>
        ///     <li><c>--health-retries</c> via <see cref="DockerRunSettings.HealthRetries"/></li>
        ///     <li><c>--health-start-period</c> via <see cref="DockerRunSettings.HealthStartPeriod"/></li>
        ///     <li><c>--health-timeout</c> via <see cref="DockerRunSettings.HealthTimeout"/></li>
        ///     <li><c>--help</c> via <see cref="DockerRunSettings.Help"/></li>
        ///     <li><c>--hostname</c> via <see cref="DockerRunSettings.Hostname"/></li>
        ///     <li><c>--init</c> via <see cref="DockerRunSettings.Init"/></li>
        ///     <li><c>--interactive</c> via <see cref="DockerRunSettings.Interactive"/></li>
        ///     <li><c>--io-maxbandwidth</c> via <see cref="DockerRunSettings.IoMaxbandwidth"/></li>
        ///     <li><c>--io-maxiops</c> via <see cref="DockerRunSettings.IoMaxiops"/></li>
        ///     <li><c>--ip</c> via <see cref="DockerRunSettings.Ip"/></li>
        ///     <li><c>--ip6</c> via <see cref="DockerRunSettings.Ip6"/></li>
        ///     <li><c>--ipc</c> via <see cref="DockerRunSettings.Ipc"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerRunSettings.Isolation"/></li>
        ///     <li><c>--kernel-memory</c> via <see cref="DockerRunSettings.KernelMemory"/></li>
        ///     <li><c>--label</c> via <see cref="DockerRunSettings.Label"/></li>
        ///     <li><c>--label-file</c> via <see cref="DockerRunSettings.LabelFile"/></li>
        ///     <li><c>--link</c> via <see cref="DockerRunSettings.Link"/></li>
        ///     <li><c>--link-local-ip</c> via <see cref="DockerRunSettings.LinkLocalIp"/></li>
        ///     <li><c>--log-driver</c> via <see cref="DockerRunSettings.LogDriver"/></li>
        ///     <li><c>--log-opt</c> via <see cref="DockerRunSettings.LogOpt"/></li>
        ///     <li><c>--mac-address</c> via <see cref="DockerRunSettings.MacAddress"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerRunSettings.Memory"/></li>
        ///     <li><c>--memory-reservation</c> via <see cref="DockerRunSettings.MemoryReservation"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerRunSettings.MemorySwap"/></li>
        ///     <li><c>--memory-swappiness</c> via <see cref="DockerRunSettings.MemorySwappiness"/></li>
        ///     <li><c>--mount</c> via <see cref="DockerRunSettings.Mount"/></li>
        ///     <li><c>--name</c> via <see cref="DockerRunSettings.Name"/></li>
        ///     <li><c>--net</c> via <see cref="DockerRunSettings.Net"/></li>
        ///     <li><c>--net-alias</c> via <see cref="DockerRunSettings.NetAlias"/></li>
        ///     <li><c>--network</c> via <see cref="DockerRunSettings.Network"/></li>
        ///     <li><c>--network-alias</c> via <see cref="DockerRunSettings.NetworkAlias"/></li>
        ///     <li><c>--no-healthcheck</c> via <see cref="DockerRunSettings.NoHealthcheck"/></li>
        ///     <li><c>--oom-kill-disable</c> via <see cref="DockerRunSettings.OomKillDisable"/></li>
        ///     <li><c>--oom-score-adj</c> via <see cref="DockerRunSettings.OomScoreAdj"/></li>
        ///     <li><c>--pid</c> via <see cref="DockerRunSettings.Pid"/></li>
        ///     <li><c>--pids-limit</c> via <see cref="DockerRunSettings.PidsLimit"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerRunSettings.Platform"/></li>
        ///     <li><c>--privileged</c> via <see cref="DockerRunSettings.Privileged"/></li>
        ///     <li><c>--publish</c> via <see cref="DockerRunSettings.Publish"/></li>
        ///     <li><c>--publish-all</c> via <see cref="DockerRunSettings.PublishAll"/></li>
        ///     <li><c>--read-only</c> via <see cref="DockerRunSettings.ReadOnly"/></li>
        ///     <li><c>--restart</c> via <see cref="DockerRunSettings.Restart"/></li>
        ///     <li><c>--rm</c> via <see cref="DockerRunSettings.Rm"/></li>
        ///     <li><c>--runtime</c> via <see cref="DockerRunSettings.Runtime"/></li>
        ///     <li><c>--security-opt</c> via <see cref="DockerRunSettings.SecurityOpt"/></li>
        ///     <li><c>--shm-size</c> via <see cref="DockerRunSettings.ShmSize"/></li>
        ///     <li><c>--sig-proxy</c> via <see cref="DockerRunSettings.SigProxy"/></li>
        ///     <li><c>--stop-signal</c> via <see cref="DockerRunSettings.StopSignal"/></li>
        ///     <li><c>--stop-timeout</c> via <see cref="DockerRunSettings.StopTimeout"/></li>
        ///     <li><c>--storage-opt</c> via <see cref="DockerRunSettings.StorageOpt"/></li>
        ///     <li><c>--sysctl</c> via <see cref="DockerRunSettings.Sysctl"/></li>
        ///     <li><c>--tmpfs</c> via <see cref="DockerRunSettings.Tmpfs"/></li>
        ///     <li><c>--tty</c> via <see cref="DockerRunSettings.Tty"/></li>
        ///     <li><c>--ulimit</c> via <see cref="DockerRunSettings.Ulimit"/></li>
        ///     <li><c>--user</c> via <see cref="DockerRunSettings.User"/></li>
        ///     <li><c>--userns</c> via <see cref="DockerRunSettings.Userns"/></li>
        ///     <li><c>--uts</c> via <see cref="DockerRunSettings.Uts"/></li>
        ///     <li><c>--volume</c> via <see cref="DockerRunSettings.Volume"/></li>
        ///     <li><c>--volume-driver</c> via <see cref="DockerRunSettings.VolumeDriver"/></li>
        ///     <li><c>--volumes-from</c> via <see cref="DockerRunSettings.VolumesFrom"/></li>
        ///     <li><c>--workdir</c> via <see cref="DockerRunSettings.Workdir"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerRun(DockerRunSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerRunSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Run a command in a new container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;args&gt;</c> via <see cref="DockerRunSettings.Args"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerRunSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerRunSettings.Command"/></li>
        ///     <li><c>&lt;image&gt;</c> via <see cref="DockerRunSettings.Image"/></li>
        ///     <li><c>--add-host</c> via <see cref="DockerRunSettings.AddHost"/></li>
        ///     <li><c>--attach</c> via <see cref="DockerRunSettings.Attach"/></li>
        ///     <li><c>--blkio-weight</c> via <see cref="DockerRunSettings.BlkioWeight"/></li>
        ///     <li><c>--blkio-weight-device</c> via <see cref="DockerRunSettings.BlkioWeightDevice"/></li>
        ///     <li><c>--cap-add</c> via <see cref="DockerRunSettings.CapAdd"/></li>
        ///     <li><c>--cap-drop</c> via <see cref="DockerRunSettings.CapDrop"/></li>
        ///     <li><c>--cgroup-parent</c> via <see cref="DockerRunSettings.CgroupParent"/></li>
        ///     <li><c>--cidfile</c> via <see cref="DockerRunSettings.Cidfile"/></li>
        ///     <li><c>--cpu-count</c> via <see cref="DockerRunSettings.CpuCount"/></li>
        ///     <li><c>--cpu-percent</c> via <see cref="DockerRunSettings.CpuPercent"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerRunSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerRunSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-rt-period</c> via <see cref="DockerRunSettings.CpuRtPeriod"/></li>
        ///     <li><c>--cpu-rt-runtime</c> via <see cref="DockerRunSettings.CpuRtRuntime"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerRunSettings.CpuShares"/></li>
        ///     <li><c>--cpus</c> via <see cref="DockerRunSettings.Cpus"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerRunSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerRunSettings.CpusetMems"/></li>
        ///     <li><c>--detach</c> via <see cref="DockerRunSettings.Detach"/></li>
        ///     <li><c>--detach-keys</c> via <see cref="DockerRunSettings.DetachKeys"/></li>
        ///     <li><c>--device</c> via <see cref="DockerRunSettings.Device"/></li>
        ///     <li><c>--device-cgroup-rule</c> via <see cref="DockerRunSettings.DeviceCgroupRule"/></li>
        ///     <li><c>--device-read-bps</c> via <see cref="DockerRunSettings.DeviceReadBps"/></li>
        ///     <li><c>--device-read-iops</c> via <see cref="DockerRunSettings.DeviceReadIops"/></li>
        ///     <li><c>--device-write-bps</c> via <see cref="DockerRunSettings.DeviceWriteBps"/></li>
        ///     <li><c>--device-write-iops</c> via <see cref="DockerRunSettings.DeviceWriteIops"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerRunSettings.DisableContentTrust"/></li>
        ///     <li><c>--dns</c> via <see cref="DockerRunSettings.Dns"/></li>
        ///     <li><c>--dns-opt</c> via <see cref="DockerRunSettings.DnsOpt"/></li>
        ///     <li><c>--dns-option</c> via <see cref="DockerRunSettings.DnsOption"/></li>
        ///     <li><c>--dns-search</c> via <see cref="DockerRunSettings.DnsSearch"/></li>
        ///     <li><c>--domainname</c> via <see cref="DockerRunSettings.Domainname"/></li>
        ///     <li><c>--entrypoint</c> via <see cref="DockerRunSettings.Entrypoint"/></li>
        ///     <li><c>--env</c> via <see cref="DockerRunSettings.Env"/></li>
        ///     <li><c>--env-file</c> via <see cref="DockerRunSettings.EnvFile"/></li>
        ///     <li><c>--expose</c> via <see cref="DockerRunSettings.Expose"/></li>
        ///     <li><c>--gpus</c> via <see cref="DockerRunSettings.Gpus"/></li>
        ///     <li><c>--group-add</c> via <see cref="DockerRunSettings.GroupAdd"/></li>
        ///     <li><c>--health-cmd</c> via <see cref="DockerRunSettings.HealthCmd"/></li>
        ///     <li><c>--health-interval</c> via <see cref="DockerRunSettings.HealthInterval"/></li>
        ///     <li><c>--health-retries</c> via <see cref="DockerRunSettings.HealthRetries"/></li>
        ///     <li><c>--health-start-period</c> via <see cref="DockerRunSettings.HealthStartPeriod"/></li>
        ///     <li><c>--health-timeout</c> via <see cref="DockerRunSettings.HealthTimeout"/></li>
        ///     <li><c>--help</c> via <see cref="DockerRunSettings.Help"/></li>
        ///     <li><c>--hostname</c> via <see cref="DockerRunSettings.Hostname"/></li>
        ///     <li><c>--init</c> via <see cref="DockerRunSettings.Init"/></li>
        ///     <li><c>--interactive</c> via <see cref="DockerRunSettings.Interactive"/></li>
        ///     <li><c>--io-maxbandwidth</c> via <see cref="DockerRunSettings.IoMaxbandwidth"/></li>
        ///     <li><c>--io-maxiops</c> via <see cref="DockerRunSettings.IoMaxiops"/></li>
        ///     <li><c>--ip</c> via <see cref="DockerRunSettings.Ip"/></li>
        ///     <li><c>--ip6</c> via <see cref="DockerRunSettings.Ip6"/></li>
        ///     <li><c>--ipc</c> via <see cref="DockerRunSettings.Ipc"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerRunSettings.Isolation"/></li>
        ///     <li><c>--kernel-memory</c> via <see cref="DockerRunSettings.KernelMemory"/></li>
        ///     <li><c>--label</c> via <see cref="DockerRunSettings.Label"/></li>
        ///     <li><c>--label-file</c> via <see cref="DockerRunSettings.LabelFile"/></li>
        ///     <li><c>--link</c> via <see cref="DockerRunSettings.Link"/></li>
        ///     <li><c>--link-local-ip</c> via <see cref="DockerRunSettings.LinkLocalIp"/></li>
        ///     <li><c>--log-driver</c> via <see cref="DockerRunSettings.LogDriver"/></li>
        ///     <li><c>--log-opt</c> via <see cref="DockerRunSettings.LogOpt"/></li>
        ///     <li><c>--mac-address</c> via <see cref="DockerRunSettings.MacAddress"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerRunSettings.Memory"/></li>
        ///     <li><c>--memory-reservation</c> via <see cref="DockerRunSettings.MemoryReservation"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerRunSettings.MemorySwap"/></li>
        ///     <li><c>--memory-swappiness</c> via <see cref="DockerRunSettings.MemorySwappiness"/></li>
        ///     <li><c>--mount</c> via <see cref="DockerRunSettings.Mount"/></li>
        ///     <li><c>--name</c> via <see cref="DockerRunSettings.Name"/></li>
        ///     <li><c>--net</c> via <see cref="DockerRunSettings.Net"/></li>
        ///     <li><c>--net-alias</c> via <see cref="DockerRunSettings.NetAlias"/></li>
        ///     <li><c>--network</c> via <see cref="DockerRunSettings.Network"/></li>
        ///     <li><c>--network-alias</c> via <see cref="DockerRunSettings.NetworkAlias"/></li>
        ///     <li><c>--no-healthcheck</c> via <see cref="DockerRunSettings.NoHealthcheck"/></li>
        ///     <li><c>--oom-kill-disable</c> via <see cref="DockerRunSettings.OomKillDisable"/></li>
        ///     <li><c>--oom-score-adj</c> via <see cref="DockerRunSettings.OomScoreAdj"/></li>
        ///     <li><c>--pid</c> via <see cref="DockerRunSettings.Pid"/></li>
        ///     <li><c>--pids-limit</c> via <see cref="DockerRunSettings.PidsLimit"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerRunSettings.Platform"/></li>
        ///     <li><c>--privileged</c> via <see cref="DockerRunSettings.Privileged"/></li>
        ///     <li><c>--publish</c> via <see cref="DockerRunSettings.Publish"/></li>
        ///     <li><c>--publish-all</c> via <see cref="DockerRunSettings.PublishAll"/></li>
        ///     <li><c>--read-only</c> via <see cref="DockerRunSettings.ReadOnly"/></li>
        ///     <li><c>--restart</c> via <see cref="DockerRunSettings.Restart"/></li>
        ///     <li><c>--rm</c> via <see cref="DockerRunSettings.Rm"/></li>
        ///     <li><c>--runtime</c> via <see cref="DockerRunSettings.Runtime"/></li>
        ///     <li><c>--security-opt</c> via <see cref="DockerRunSettings.SecurityOpt"/></li>
        ///     <li><c>--shm-size</c> via <see cref="DockerRunSettings.ShmSize"/></li>
        ///     <li><c>--sig-proxy</c> via <see cref="DockerRunSettings.SigProxy"/></li>
        ///     <li><c>--stop-signal</c> via <see cref="DockerRunSettings.StopSignal"/></li>
        ///     <li><c>--stop-timeout</c> via <see cref="DockerRunSettings.StopTimeout"/></li>
        ///     <li><c>--storage-opt</c> via <see cref="DockerRunSettings.StorageOpt"/></li>
        ///     <li><c>--sysctl</c> via <see cref="DockerRunSettings.Sysctl"/></li>
        ///     <li><c>--tmpfs</c> via <see cref="DockerRunSettings.Tmpfs"/></li>
        ///     <li><c>--tty</c> via <see cref="DockerRunSettings.Tty"/></li>
        ///     <li><c>--ulimit</c> via <see cref="DockerRunSettings.Ulimit"/></li>
        ///     <li><c>--user</c> via <see cref="DockerRunSettings.User"/></li>
        ///     <li><c>--userns</c> via <see cref="DockerRunSettings.Userns"/></li>
        ///     <li><c>--uts</c> via <see cref="DockerRunSettings.Uts"/></li>
        ///     <li><c>--volume</c> via <see cref="DockerRunSettings.Volume"/></li>
        ///     <li><c>--volume-driver</c> via <see cref="DockerRunSettings.VolumeDriver"/></li>
        ///     <li><c>--volumes-from</c> via <see cref="DockerRunSettings.VolumesFrom"/></li>
        ///     <li><c>--workdir</c> via <see cref="DockerRunSettings.Workdir"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerRun(Configure<DockerRunSettings> configurator)
        {
            return DockerRun(configurator(new DockerRunSettings()));
        }
        /// <summary>
        ///   <p>Run a command in a new container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;args&gt;</c> via <see cref="DockerRunSettings.Args"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerRunSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerRunSettings.Command"/></li>
        ///     <li><c>&lt;image&gt;</c> via <see cref="DockerRunSettings.Image"/></li>
        ///     <li><c>--add-host</c> via <see cref="DockerRunSettings.AddHost"/></li>
        ///     <li><c>--attach</c> via <see cref="DockerRunSettings.Attach"/></li>
        ///     <li><c>--blkio-weight</c> via <see cref="DockerRunSettings.BlkioWeight"/></li>
        ///     <li><c>--blkio-weight-device</c> via <see cref="DockerRunSettings.BlkioWeightDevice"/></li>
        ///     <li><c>--cap-add</c> via <see cref="DockerRunSettings.CapAdd"/></li>
        ///     <li><c>--cap-drop</c> via <see cref="DockerRunSettings.CapDrop"/></li>
        ///     <li><c>--cgroup-parent</c> via <see cref="DockerRunSettings.CgroupParent"/></li>
        ///     <li><c>--cidfile</c> via <see cref="DockerRunSettings.Cidfile"/></li>
        ///     <li><c>--cpu-count</c> via <see cref="DockerRunSettings.CpuCount"/></li>
        ///     <li><c>--cpu-percent</c> via <see cref="DockerRunSettings.CpuPercent"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerRunSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerRunSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-rt-period</c> via <see cref="DockerRunSettings.CpuRtPeriod"/></li>
        ///     <li><c>--cpu-rt-runtime</c> via <see cref="DockerRunSettings.CpuRtRuntime"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerRunSettings.CpuShares"/></li>
        ///     <li><c>--cpus</c> via <see cref="DockerRunSettings.Cpus"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerRunSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerRunSettings.CpusetMems"/></li>
        ///     <li><c>--detach</c> via <see cref="DockerRunSettings.Detach"/></li>
        ///     <li><c>--detach-keys</c> via <see cref="DockerRunSettings.DetachKeys"/></li>
        ///     <li><c>--device</c> via <see cref="DockerRunSettings.Device"/></li>
        ///     <li><c>--device-cgroup-rule</c> via <see cref="DockerRunSettings.DeviceCgroupRule"/></li>
        ///     <li><c>--device-read-bps</c> via <see cref="DockerRunSettings.DeviceReadBps"/></li>
        ///     <li><c>--device-read-iops</c> via <see cref="DockerRunSettings.DeviceReadIops"/></li>
        ///     <li><c>--device-write-bps</c> via <see cref="DockerRunSettings.DeviceWriteBps"/></li>
        ///     <li><c>--device-write-iops</c> via <see cref="DockerRunSettings.DeviceWriteIops"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerRunSettings.DisableContentTrust"/></li>
        ///     <li><c>--dns</c> via <see cref="DockerRunSettings.Dns"/></li>
        ///     <li><c>--dns-opt</c> via <see cref="DockerRunSettings.DnsOpt"/></li>
        ///     <li><c>--dns-option</c> via <see cref="DockerRunSettings.DnsOption"/></li>
        ///     <li><c>--dns-search</c> via <see cref="DockerRunSettings.DnsSearch"/></li>
        ///     <li><c>--domainname</c> via <see cref="DockerRunSettings.Domainname"/></li>
        ///     <li><c>--entrypoint</c> via <see cref="DockerRunSettings.Entrypoint"/></li>
        ///     <li><c>--env</c> via <see cref="DockerRunSettings.Env"/></li>
        ///     <li><c>--env-file</c> via <see cref="DockerRunSettings.EnvFile"/></li>
        ///     <li><c>--expose</c> via <see cref="DockerRunSettings.Expose"/></li>
        ///     <li><c>--gpus</c> via <see cref="DockerRunSettings.Gpus"/></li>
        ///     <li><c>--group-add</c> via <see cref="DockerRunSettings.GroupAdd"/></li>
        ///     <li><c>--health-cmd</c> via <see cref="DockerRunSettings.HealthCmd"/></li>
        ///     <li><c>--health-interval</c> via <see cref="DockerRunSettings.HealthInterval"/></li>
        ///     <li><c>--health-retries</c> via <see cref="DockerRunSettings.HealthRetries"/></li>
        ///     <li><c>--health-start-period</c> via <see cref="DockerRunSettings.HealthStartPeriod"/></li>
        ///     <li><c>--health-timeout</c> via <see cref="DockerRunSettings.HealthTimeout"/></li>
        ///     <li><c>--help</c> via <see cref="DockerRunSettings.Help"/></li>
        ///     <li><c>--hostname</c> via <see cref="DockerRunSettings.Hostname"/></li>
        ///     <li><c>--init</c> via <see cref="DockerRunSettings.Init"/></li>
        ///     <li><c>--interactive</c> via <see cref="DockerRunSettings.Interactive"/></li>
        ///     <li><c>--io-maxbandwidth</c> via <see cref="DockerRunSettings.IoMaxbandwidth"/></li>
        ///     <li><c>--io-maxiops</c> via <see cref="DockerRunSettings.IoMaxiops"/></li>
        ///     <li><c>--ip</c> via <see cref="DockerRunSettings.Ip"/></li>
        ///     <li><c>--ip6</c> via <see cref="DockerRunSettings.Ip6"/></li>
        ///     <li><c>--ipc</c> via <see cref="DockerRunSettings.Ipc"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerRunSettings.Isolation"/></li>
        ///     <li><c>--kernel-memory</c> via <see cref="DockerRunSettings.KernelMemory"/></li>
        ///     <li><c>--label</c> via <see cref="DockerRunSettings.Label"/></li>
        ///     <li><c>--label-file</c> via <see cref="DockerRunSettings.LabelFile"/></li>
        ///     <li><c>--link</c> via <see cref="DockerRunSettings.Link"/></li>
        ///     <li><c>--link-local-ip</c> via <see cref="DockerRunSettings.LinkLocalIp"/></li>
        ///     <li><c>--log-driver</c> via <see cref="DockerRunSettings.LogDriver"/></li>
        ///     <li><c>--log-opt</c> via <see cref="DockerRunSettings.LogOpt"/></li>
        ///     <li><c>--mac-address</c> via <see cref="DockerRunSettings.MacAddress"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerRunSettings.Memory"/></li>
        ///     <li><c>--memory-reservation</c> via <see cref="DockerRunSettings.MemoryReservation"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerRunSettings.MemorySwap"/></li>
        ///     <li><c>--memory-swappiness</c> via <see cref="DockerRunSettings.MemorySwappiness"/></li>
        ///     <li><c>--mount</c> via <see cref="DockerRunSettings.Mount"/></li>
        ///     <li><c>--name</c> via <see cref="DockerRunSettings.Name"/></li>
        ///     <li><c>--net</c> via <see cref="DockerRunSettings.Net"/></li>
        ///     <li><c>--net-alias</c> via <see cref="DockerRunSettings.NetAlias"/></li>
        ///     <li><c>--network</c> via <see cref="DockerRunSettings.Network"/></li>
        ///     <li><c>--network-alias</c> via <see cref="DockerRunSettings.NetworkAlias"/></li>
        ///     <li><c>--no-healthcheck</c> via <see cref="DockerRunSettings.NoHealthcheck"/></li>
        ///     <li><c>--oom-kill-disable</c> via <see cref="DockerRunSettings.OomKillDisable"/></li>
        ///     <li><c>--oom-score-adj</c> via <see cref="DockerRunSettings.OomScoreAdj"/></li>
        ///     <li><c>--pid</c> via <see cref="DockerRunSettings.Pid"/></li>
        ///     <li><c>--pids-limit</c> via <see cref="DockerRunSettings.PidsLimit"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerRunSettings.Platform"/></li>
        ///     <li><c>--privileged</c> via <see cref="DockerRunSettings.Privileged"/></li>
        ///     <li><c>--publish</c> via <see cref="DockerRunSettings.Publish"/></li>
        ///     <li><c>--publish-all</c> via <see cref="DockerRunSettings.PublishAll"/></li>
        ///     <li><c>--read-only</c> via <see cref="DockerRunSettings.ReadOnly"/></li>
        ///     <li><c>--restart</c> via <see cref="DockerRunSettings.Restart"/></li>
        ///     <li><c>--rm</c> via <see cref="DockerRunSettings.Rm"/></li>
        ///     <li><c>--runtime</c> via <see cref="DockerRunSettings.Runtime"/></li>
        ///     <li><c>--security-opt</c> via <see cref="DockerRunSettings.SecurityOpt"/></li>
        ///     <li><c>--shm-size</c> via <see cref="DockerRunSettings.ShmSize"/></li>
        ///     <li><c>--sig-proxy</c> via <see cref="DockerRunSettings.SigProxy"/></li>
        ///     <li><c>--stop-signal</c> via <see cref="DockerRunSettings.StopSignal"/></li>
        ///     <li><c>--stop-timeout</c> via <see cref="DockerRunSettings.StopTimeout"/></li>
        ///     <li><c>--storage-opt</c> via <see cref="DockerRunSettings.StorageOpt"/></li>
        ///     <li><c>--sysctl</c> via <see cref="DockerRunSettings.Sysctl"/></li>
        ///     <li><c>--tmpfs</c> via <see cref="DockerRunSettings.Tmpfs"/></li>
        ///     <li><c>--tty</c> via <see cref="DockerRunSettings.Tty"/></li>
        ///     <li><c>--ulimit</c> via <see cref="DockerRunSettings.Ulimit"/></li>
        ///     <li><c>--user</c> via <see cref="DockerRunSettings.User"/></li>
        ///     <li><c>--userns</c> via <see cref="DockerRunSettings.Userns"/></li>
        ///     <li><c>--uts</c> via <see cref="DockerRunSettings.Uts"/></li>
        ///     <li><c>--volume</c> via <see cref="DockerRunSettings.Volume"/></li>
        ///     <li><c>--volume-driver</c> via <see cref="DockerRunSettings.VolumeDriver"/></li>
        ///     <li><c>--volumes-from</c> via <see cref="DockerRunSettings.VolumesFrom"/></li>
        ///     <li><c>--workdir</c> via <see cref="DockerRunSettings.Workdir"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerRunSettings Settings, IReadOnlyCollection<Output> Output)> DockerRun(CombinatorialConfigure<DockerRunSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerRun, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Create a new container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;args&gt;</c> via <see cref="DockerCreateSettings.Args"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerCreateSettings.Command"/></li>
        ///     <li><c>&lt;image&gt;</c> via <see cref="DockerCreateSettings.Image"/></li>
        ///     <li><c>--add-host</c> via <see cref="DockerCreateSettings.AddHost"/></li>
        ///     <li><c>--attach</c> via <see cref="DockerCreateSettings.Attach"/></li>
        ///     <li><c>--blkio-weight</c> via <see cref="DockerCreateSettings.BlkioWeight"/></li>
        ///     <li><c>--blkio-weight-device</c> via <see cref="DockerCreateSettings.BlkioWeightDevice"/></li>
        ///     <li><c>--cap-add</c> via <see cref="DockerCreateSettings.CapAdd"/></li>
        ///     <li><c>--cap-drop</c> via <see cref="DockerCreateSettings.CapDrop"/></li>
        ///     <li><c>--cgroup-parent</c> via <see cref="DockerCreateSettings.CgroupParent"/></li>
        ///     <li><c>--cidfile</c> via <see cref="DockerCreateSettings.Cidfile"/></li>
        ///     <li><c>--cpu-count</c> via <see cref="DockerCreateSettings.CpuCount"/></li>
        ///     <li><c>--cpu-percent</c> via <see cref="DockerCreateSettings.CpuPercent"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerCreateSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerCreateSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-rt-period</c> via <see cref="DockerCreateSettings.CpuRtPeriod"/></li>
        ///     <li><c>--cpu-rt-runtime</c> via <see cref="DockerCreateSettings.CpuRtRuntime"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerCreateSettings.CpuShares"/></li>
        ///     <li><c>--cpus</c> via <see cref="DockerCreateSettings.Cpus"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerCreateSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerCreateSettings.CpusetMems"/></li>
        ///     <li><c>--device</c> via <see cref="DockerCreateSettings.Device"/></li>
        ///     <li><c>--device-cgroup-rule</c> via <see cref="DockerCreateSettings.DeviceCgroupRule"/></li>
        ///     <li><c>--device-read-bps</c> via <see cref="DockerCreateSettings.DeviceReadBps"/></li>
        ///     <li><c>--device-read-iops</c> via <see cref="DockerCreateSettings.DeviceReadIops"/></li>
        ///     <li><c>--device-write-bps</c> via <see cref="DockerCreateSettings.DeviceWriteBps"/></li>
        ///     <li><c>--device-write-iops</c> via <see cref="DockerCreateSettings.DeviceWriteIops"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerCreateSettings.DisableContentTrust"/></li>
        ///     <li><c>--dns</c> via <see cref="DockerCreateSettings.Dns"/></li>
        ///     <li><c>--dns-opt</c> via <see cref="DockerCreateSettings.DnsOpt"/></li>
        ///     <li><c>--dns-option</c> via <see cref="DockerCreateSettings.DnsOption"/></li>
        ///     <li><c>--dns-search</c> via <see cref="DockerCreateSettings.DnsSearch"/></li>
        ///     <li><c>--domainname</c> via <see cref="DockerCreateSettings.Domainname"/></li>
        ///     <li><c>--entrypoint</c> via <see cref="DockerCreateSettings.Entrypoint"/></li>
        ///     <li><c>--env</c> via <see cref="DockerCreateSettings.Env"/></li>
        ///     <li><c>--env-file</c> via <see cref="DockerCreateSettings.EnvFile"/></li>
        ///     <li><c>--expose</c> via <see cref="DockerCreateSettings.Expose"/></li>
        ///     <li><c>--gpus</c> via <see cref="DockerCreateSettings.Gpus"/></li>
        ///     <li><c>--group-add</c> via <see cref="DockerCreateSettings.GroupAdd"/></li>
        ///     <li><c>--health-cmd</c> via <see cref="DockerCreateSettings.HealthCmd"/></li>
        ///     <li><c>--health-interval</c> via <see cref="DockerCreateSettings.HealthInterval"/></li>
        ///     <li><c>--health-retries</c> via <see cref="DockerCreateSettings.HealthRetries"/></li>
        ///     <li><c>--health-start-period</c> via <see cref="DockerCreateSettings.HealthStartPeriod"/></li>
        ///     <li><c>--health-timeout</c> via <see cref="DockerCreateSettings.HealthTimeout"/></li>
        ///     <li><c>--help</c> via <see cref="DockerCreateSettings.Help"/></li>
        ///     <li><c>--hostname</c> via <see cref="DockerCreateSettings.Hostname"/></li>
        ///     <li><c>--init</c> via <see cref="DockerCreateSettings.Init"/></li>
        ///     <li><c>--interactive</c> via <see cref="DockerCreateSettings.Interactive"/></li>
        ///     <li><c>--io-maxbandwidth</c> via <see cref="DockerCreateSettings.IoMaxbandwidth"/></li>
        ///     <li><c>--io-maxiops</c> via <see cref="DockerCreateSettings.IoMaxiops"/></li>
        ///     <li><c>--ip</c> via <see cref="DockerCreateSettings.Ip"/></li>
        ///     <li><c>--ip6</c> via <see cref="DockerCreateSettings.Ip6"/></li>
        ///     <li><c>--ipc</c> via <see cref="DockerCreateSettings.Ipc"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerCreateSettings.Isolation"/></li>
        ///     <li><c>--kernel-memory</c> via <see cref="DockerCreateSettings.KernelMemory"/></li>
        ///     <li><c>--label</c> via <see cref="DockerCreateSettings.Label"/></li>
        ///     <li><c>--label-file</c> via <see cref="DockerCreateSettings.LabelFile"/></li>
        ///     <li><c>--link</c> via <see cref="DockerCreateSettings.Link"/></li>
        ///     <li><c>--link-local-ip</c> via <see cref="DockerCreateSettings.LinkLocalIp"/></li>
        ///     <li><c>--log-driver</c> via <see cref="DockerCreateSettings.LogDriver"/></li>
        ///     <li><c>--log-opt</c> via <see cref="DockerCreateSettings.LogOpt"/></li>
        ///     <li><c>--mac-address</c> via <see cref="DockerCreateSettings.MacAddress"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerCreateSettings.Memory"/></li>
        ///     <li><c>--memory-reservation</c> via <see cref="DockerCreateSettings.MemoryReservation"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerCreateSettings.MemorySwap"/></li>
        ///     <li><c>--memory-swappiness</c> via <see cref="DockerCreateSettings.MemorySwappiness"/></li>
        ///     <li><c>--mount</c> via <see cref="DockerCreateSettings.Mount"/></li>
        ///     <li><c>--name</c> via <see cref="DockerCreateSettings.Name"/></li>
        ///     <li><c>--net</c> via <see cref="DockerCreateSettings.Net"/></li>
        ///     <li><c>--net-alias</c> via <see cref="DockerCreateSettings.NetAlias"/></li>
        ///     <li><c>--network</c> via <see cref="DockerCreateSettings.Network"/></li>
        ///     <li><c>--network-alias</c> via <see cref="DockerCreateSettings.NetworkAlias"/></li>
        ///     <li><c>--no-healthcheck</c> via <see cref="DockerCreateSettings.NoHealthcheck"/></li>
        ///     <li><c>--oom-kill-disable</c> via <see cref="DockerCreateSettings.OomKillDisable"/></li>
        ///     <li><c>--oom-score-adj</c> via <see cref="DockerCreateSettings.OomScoreAdj"/></li>
        ///     <li><c>--pid</c> via <see cref="DockerCreateSettings.Pid"/></li>
        ///     <li><c>--pids-limit</c> via <see cref="DockerCreateSettings.PidsLimit"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerCreateSettings.Platform"/></li>
        ///     <li><c>--privileged</c> via <see cref="DockerCreateSettings.Privileged"/></li>
        ///     <li><c>--publish</c> via <see cref="DockerCreateSettings.Publish"/></li>
        ///     <li><c>--publish-all</c> via <see cref="DockerCreateSettings.PublishAll"/></li>
        ///     <li><c>--read-only</c> via <see cref="DockerCreateSettings.ReadOnly"/></li>
        ///     <li><c>--restart</c> via <see cref="DockerCreateSettings.Restart"/></li>
        ///     <li><c>--rm</c> via <see cref="DockerCreateSettings.Rm"/></li>
        ///     <li><c>--runtime</c> via <see cref="DockerCreateSettings.Runtime"/></li>
        ///     <li><c>--security-opt</c> via <see cref="DockerCreateSettings.SecurityOpt"/></li>
        ///     <li><c>--shm-size</c> via <see cref="DockerCreateSettings.ShmSize"/></li>
        ///     <li><c>--stop-signal</c> via <see cref="DockerCreateSettings.StopSignal"/></li>
        ///     <li><c>--stop-timeout</c> via <see cref="DockerCreateSettings.StopTimeout"/></li>
        ///     <li><c>--storage-opt</c> via <see cref="DockerCreateSettings.StorageOpt"/></li>
        ///     <li><c>--sysctl</c> via <see cref="DockerCreateSettings.Sysctl"/></li>
        ///     <li><c>--tmpfs</c> via <see cref="DockerCreateSettings.Tmpfs"/></li>
        ///     <li><c>--tty</c> via <see cref="DockerCreateSettings.Tty"/></li>
        ///     <li><c>--ulimit</c> via <see cref="DockerCreateSettings.Ulimit"/></li>
        ///     <li><c>--user</c> via <see cref="DockerCreateSettings.User"/></li>
        ///     <li><c>--userns</c> via <see cref="DockerCreateSettings.Userns"/></li>
        ///     <li><c>--uts</c> via <see cref="DockerCreateSettings.Uts"/></li>
        ///     <li><c>--volume</c> via <see cref="DockerCreateSettings.Volume"/></li>
        ///     <li><c>--volume-driver</c> via <see cref="DockerCreateSettings.VolumeDriver"/></li>
        ///     <li><c>--volumes-from</c> via <see cref="DockerCreateSettings.VolumesFrom"/></li>
        ///     <li><c>--workdir</c> via <see cref="DockerCreateSettings.Workdir"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerCreate(DockerCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Create a new container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;args&gt;</c> via <see cref="DockerCreateSettings.Args"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerCreateSettings.Command"/></li>
        ///     <li><c>&lt;image&gt;</c> via <see cref="DockerCreateSettings.Image"/></li>
        ///     <li><c>--add-host</c> via <see cref="DockerCreateSettings.AddHost"/></li>
        ///     <li><c>--attach</c> via <see cref="DockerCreateSettings.Attach"/></li>
        ///     <li><c>--blkio-weight</c> via <see cref="DockerCreateSettings.BlkioWeight"/></li>
        ///     <li><c>--blkio-weight-device</c> via <see cref="DockerCreateSettings.BlkioWeightDevice"/></li>
        ///     <li><c>--cap-add</c> via <see cref="DockerCreateSettings.CapAdd"/></li>
        ///     <li><c>--cap-drop</c> via <see cref="DockerCreateSettings.CapDrop"/></li>
        ///     <li><c>--cgroup-parent</c> via <see cref="DockerCreateSettings.CgroupParent"/></li>
        ///     <li><c>--cidfile</c> via <see cref="DockerCreateSettings.Cidfile"/></li>
        ///     <li><c>--cpu-count</c> via <see cref="DockerCreateSettings.CpuCount"/></li>
        ///     <li><c>--cpu-percent</c> via <see cref="DockerCreateSettings.CpuPercent"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerCreateSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerCreateSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-rt-period</c> via <see cref="DockerCreateSettings.CpuRtPeriod"/></li>
        ///     <li><c>--cpu-rt-runtime</c> via <see cref="DockerCreateSettings.CpuRtRuntime"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerCreateSettings.CpuShares"/></li>
        ///     <li><c>--cpus</c> via <see cref="DockerCreateSettings.Cpus"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerCreateSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerCreateSettings.CpusetMems"/></li>
        ///     <li><c>--device</c> via <see cref="DockerCreateSettings.Device"/></li>
        ///     <li><c>--device-cgroup-rule</c> via <see cref="DockerCreateSettings.DeviceCgroupRule"/></li>
        ///     <li><c>--device-read-bps</c> via <see cref="DockerCreateSettings.DeviceReadBps"/></li>
        ///     <li><c>--device-read-iops</c> via <see cref="DockerCreateSettings.DeviceReadIops"/></li>
        ///     <li><c>--device-write-bps</c> via <see cref="DockerCreateSettings.DeviceWriteBps"/></li>
        ///     <li><c>--device-write-iops</c> via <see cref="DockerCreateSettings.DeviceWriteIops"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerCreateSettings.DisableContentTrust"/></li>
        ///     <li><c>--dns</c> via <see cref="DockerCreateSettings.Dns"/></li>
        ///     <li><c>--dns-opt</c> via <see cref="DockerCreateSettings.DnsOpt"/></li>
        ///     <li><c>--dns-option</c> via <see cref="DockerCreateSettings.DnsOption"/></li>
        ///     <li><c>--dns-search</c> via <see cref="DockerCreateSettings.DnsSearch"/></li>
        ///     <li><c>--domainname</c> via <see cref="DockerCreateSettings.Domainname"/></li>
        ///     <li><c>--entrypoint</c> via <see cref="DockerCreateSettings.Entrypoint"/></li>
        ///     <li><c>--env</c> via <see cref="DockerCreateSettings.Env"/></li>
        ///     <li><c>--env-file</c> via <see cref="DockerCreateSettings.EnvFile"/></li>
        ///     <li><c>--expose</c> via <see cref="DockerCreateSettings.Expose"/></li>
        ///     <li><c>--gpus</c> via <see cref="DockerCreateSettings.Gpus"/></li>
        ///     <li><c>--group-add</c> via <see cref="DockerCreateSettings.GroupAdd"/></li>
        ///     <li><c>--health-cmd</c> via <see cref="DockerCreateSettings.HealthCmd"/></li>
        ///     <li><c>--health-interval</c> via <see cref="DockerCreateSettings.HealthInterval"/></li>
        ///     <li><c>--health-retries</c> via <see cref="DockerCreateSettings.HealthRetries"/></li>
        ///     <li><c>--health-start-period</c> via <see cref="DockerCreateSettings.HealthStartPeriod"/></li>
        ///     <li><c>--health-timeout</c> via <see cref="DockerCreateSettings.HealthTimeout"/></li>
        ///     <li><c>--help</c> via <see cref="DockerCreateSettings.Help"/></li>
        ///     <li><c>--hostname</c> via <see cref="DockerCreateSettings.Hostname"/></li>
        ///     <li><c>--init</c> via <see cref="DockerCreateSettings.Init"/></li>
        ///     <li><c>--interactive</c> via <see cref="DockerCreateSettings.Interactive"/></li>
        ///     <li><c>--io-maxbandwidth</c> via <see cref="DockerCreateSettings.IoMaxbandwidth"/></li>
        ///     <li><c>--io-maxiops</c> via <see cref="DockerCreateSettings.IoMaxiops"/></li>
        ///     <li><c>--ip</c> via <see cref="DockerCreateSettings.Ip"/></li>
        ///     <li><c>--ip6</c> via <see cref="DockerCreateSettings.Ip6"/></li>
        ///     <li><c>--ipc</c> via <see cref="DockerCreateSettings.Ipc"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerCreateSettings.Isolation"/></li>
        ///     <li><c>--kernel-memory</c> via <see cref="DockerCreateSettings.KernelMemory"/></li>
        ///     <li><c>--label</c> via <see cref="DockerCreateSettings.Label"/></li>
        ///     <li><c>--label-file</c> via <see cref="DockerCreateSettings.LabelFile"/></li>
        ///     <li><c>--link</c> via <see cref="DockerCreateSettings.Link"/></li>
        ///     <li><c>--link-local-ip</c> via <see cref="DockerCreateSettings.LinkLocalIp"/></li>
        ///     <li><c>--log-driver</c> via <see cref="DockerCreateSettings.LogDriver"/></li>
        ///     <li><c>--log-opt</c> via <see cref="DockerCreateSettings.LogOpt"/></li>
        ///     <li><c>--mac-address</c> via <see cref="DockerCreateSettings.MacAddress"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerCreateSettings.Memory"/></li>
        ///     <li><c>--memory-reservation</c> via <see cref="DockerCreateSettings.MemoryReservation"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerCreateSettings.MemorySwap"/></li>
        ///     <li><c>--memory-swappiness</c> via <see cref="DockerCreateSettings.MemorySwappiness"/></li>
        ///     <li><c>--mount</c> via <see cref="DockerCreateSettings.Mount"/></li>
        ///     <li><c>--name</c> via <see cref="DockerCreateSettings.Name"/></li>
        ///     <li><c>--net</c> via <see cref="DockerCreateSettings.Net"/></li>
        ///     <li><c>--net-alias</c> via <see cref="DockerCreateSettings.NetAlias"/></li>
        ///     <li><c>--network</c> via <see cref="DockerCreateSettings.Network"/></li>
        ///     <li><c>--network-alias</c> via <see cref="DockerCreateSettings.NetworkAlias"/></li>
        ///     <li><c>--no-healthcheck</c> via <see cref="DockerCreateSettings.NoHealthcheck"/></li>
        ///     <li><c>--oom-kill-disable</c> via <see cref="DockerCreateSettings.OomKillDisable"/></li>
        ///     <li><c>--oom-score-adj</c> via <see cref="DockerCreateSettings.OomScoreAdj"/></li>
        ///     <li><c>--pid</c> via <see cref="DockerCreateSettings.Pid"/></li>
        ///     <li><c>--pids-limit</c> via <see cref="DockerCreateSettings.PidsLimit"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerCreateSettings.Platform"/></li>
        ///     <li><c>--privileged</c> via <see cref="DockerCreateSettings.Privileged"/></li>
        ///     <li><c>--publish</c> via <see cref="DockerCreateSettings.Publish"/></li>
        ///     <li><c>--publish-all</c> via <see cref="DockerCreateSettings.PublishAll"/></li>
        ///     <li><c>--read-only</c> via <see cref="DockerCreateSettings.ReadOnly"/></li>
        ///     <li><c>--restart</c> via <see cref="DockerCreateSettings.Restart"/></li>
        ///     <li><c>--rm</c> via <see cref="DockerCreateSettings.Rm"/></li>
        ///     <li><c>--runtime</c> via <see cref="DockerCreateSettings.Runtime"/></li>
        ///     <li><c>--security-opt</c> via <see cref="DockerCreateSettings.SecurityOpt"/></li>
        ///     <li><c>--shm-size</c> via <see cref="DockerCreateSettings.ShmSize"/></li>
        ///     <li><c>--stop-signal</c> via <see cref="DockerCreateSettings.StopSignal"/></li>
        ///     <li><c>--stop-timeout</c> via <see cref="DockerCreateSettings.StopTimeout"/></li>
        ///     <li><c>--storage-opt</c> via <see cref="DockerCreateSettings.StorageOpt"/></li>
        ///     <li><c>--sysctl</c> via <see cref="DockerCreateSettings.Sysctl"/></li>
        ///     <li><c>--tmpfs</c> via <see cref="DockerCreateSettings.Tmpfs"/></li>
        ///     <li><c>--tty</c> via <see cref="DockerCreateSettings.Tty"/></li>
        ///     <li><c>--ulimit</c> via <see cref="DockerCreateSettings.Ulimit"/></li>
        ///     <li><c>--user</c> via <see cref="DockerCreateSettings.User"/></li>
        ///     <li><c>--userns</c> via <see cref="DockerCreateSettings.Userns"/></li>
        ///     <li><c>--uts</c> via <see cref="DockerCreateSettings.Uts"/></li>
        ///     <li><c>--volume</c> via <see cref="DockerCreateSettings.Volume"/></li>
        ///     <li><c>--volume-driver</c> via <see cref="DockerCreateSettings.VolumeDriver"/></li>
        ///     <li><c>--volumes-from</c> via <see cref="DockerCreateSettings.VolumesFrom"/></li>
        ///     <li><c>--workdir</c> via <see cref="DockerCreateSettings.Workdir"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerCreate(Configure<DockerCreateSettings> configurator)
        {
            return DockerCreate(configurator(new DockerCreateSettings()));
        }
        /// <summary>
        ///   <p>Create a new container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;args&gt;</c> via <see cref="DockerCreateSettings.Args"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerCreateSettings.Command"/></li>
        ///     <li><c>&lt;image&gt;</c> via <see cref="DockerCreateSettings.Image"/></li>
        ///     <li><c>--add-host</c> via <see cref="DockerCreateSettings.AddHost"/></li>
        ///     <li><c>--attach</c> via <see cref="DockerCreateSettings.Attach"/></li>
        ///     <li><c>--blkio-weight</c> via <see cref="DockerCreateSettings.BlkioWeight"/></li>
        ///     <li><c>--blkio-weight-device</c> via <see cref="DockerCreateSettings.BlkioWeightDevice"/></li>
        ///     <li><c>--cap-add</c> via <see cref="DockerCreateSettings.CapAdd"/></li>
        ///     <li><c>--cap-drop</c> via <see cref="DockerCreateSettings.CapDrop"/></li>
        ///     <li><c>--cgroup-parent</c> via <see cref="DockerCreateSettings.CgroupParent"/></li>
        ///     <li><c>--cidfile</c> via <see cref="DockerCreateSettings.Cidfile"/></li>
        ///     <li><c>--cpu-count</c> via <see cref="DockerCreateSettings.CpuCount"/></li>
        ///     <li><c>--cpu-percent</c> via <see cref="DockerCreateSettings.CpuPercent"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerCreateSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerCreateSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-rt-period</c> via <see cref="DockerCreateSettings.CpuRtPeriod"/></li>
        ///     <li><c>--cpu-rt-runtime</c> via <see cref="DockerCreateSettings.CpuRtRuntime"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerCreateSettings.CpuShares"/></li>
        ///     <li><c>--cpus</c> via <see cref="DockerCreateSettings.Cpus"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerCreateSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerCreateSettings.CpusetMems"/></li>
        ///     <li><c>--device</c> via <see cref="DockerCreateSettings.Device"/></li>
        ///     <li><c>--device-cgroup-rule</c> via <see cref="DockerCreateSettings.DeviceCgroupRule"/></li>
        ///     <li><c>--device-read-bps</c> via <see cref="DockerCreateSettings.DeviceReadBps"/></li>
        ///     <li><c>--device-read-iops</c> via <see cref="DockerCreateSettings.DeviceReadIops"/></li>
        ///     <li><c>--device-write-bps</c> via <see cref="DockerCreateSettings.DeviceWriteBps"/></li>
        ///     <li><c>--device-write-iops</c> via <see cref="DockerCreateSettings.DeviceWriteIops"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerCreateSettings.DisableContentTrust"/></li>
        ///     <li><c>--dns</c> via <see cref="DockerCreateSettings.Dns"/></li>
        ///     <li><c>--dns-opt</c> via <see cref="DockerCreateSettings.DnsOpt"/></li>
        ///     <li><c>--dns-option</c> via <see cref="DockerCreateSettings.DnsOption"/></li>
        ///     <li><c>--dns-search</c> via <see cref="DockerCreateSettings.DnsSearch"/></li>
        ///     <li><c>--domainname</c> via <see cref="DockerCreateSettings.Domainname"/></li>
        ///     <li><c>--entrypoint</c> via <see cref="DockerCreateSettings.Entrypoint"/></li>
        ///     <li><c>--env</c> via <see cref="DockerCreateSettings.Env"/></li>
        ///     <li><c>--env-file</c> via <see cref="DockerCreateSettings.EnvFile"/></li>
        ///     <li><c>--expose</c> via <see cref="DockerCreateSettings.Expose"/></li>
        ///     <li><c>--gpus</c> via <see cref="DockerCreateSettings.Gpus"/></li>
        ///     <li><c>--group-add</c> via <see cref="DockerCreateSettings.GroupAdd"/></li>
        ///     <li><c>--health-cmd</c> via <see cref="DockerCreateSettings.HealthCmd"/></li>
        ///     <li><c>--health-interval</c> via <see cref="DockerCreateSettings.HealthInterval"/></li>
        ///     <li><c>--health-retries</c> via <see cref="DockerCreateSettings.HealthRetries"/></li>
        ///     <li><c>--health-start-period</c> via <see cref="DockerCreateSettings.HealthStartPeriod"/></li>
        ///     <li><c>--health-timeout</c> via <see cref="DockerCreateSettings.HealthTimeout"/></li>
        ///     <li><c>--help</c> via <see cref="DockerCreateSettings.Help"/></li>
        ///     <li><c>--hostname</c> via <see cref="DockerCreateSettings.Hostname"/></li>
        ///     <li><c>--init</c> via <see cref="DockerCreateSettings.Init"/></li>
        ///     <li><c>--interactive</c> via <see cref="DockerCreateSettings.Interactive"/></li>
        ///     <li><c>--io-maxbandwidth</c> via <see cref="DockerCreateSettings.IoMaxbandwidth"/></li>
        ///     <li><c>--io-maxiops</c> via <see cref="DockerCreateSettings.IoMaxiops"/></li>
        ///     <li><c>--ip</c> via <see cref="DockerCreateSettings.Ip"/></li>
        ///     <li><c>--ip6</c> via <see cref="DockerCreateSettings.Ip6"/></li>
        ///     <li><c>--ipc</c> via <see cref="DockerCreateSettings.Ipc"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerCreateSettings.Isolation"/></li>
        ///     <li><c>--kernel-memory</c> via <see cref="DockerCreateSettings.KernelMemory"/></li>
        ///     <li><c>--label</c> via <see cref="DockerCreateSettings.Label"/></li>
        ///     <li><c>--label-file</c> via <see cref="DockerCreateSettings.LabelFile"/></li>
        ///     <li><c>--link</c> via <see cref="DockerCreateSettings.Link"/></li>
        ///     <li><c>--link-local-ip</c> via <see cref="DockerCreateSettings.LinkLocalIp"/></li>
        ///     <li><c>--log-driver</c> via <see cref="DockerCreateSettings.LogDriver"/></li>
        ///     <li><c>--log-opt</c> via <see cref="DockerCreateSettings.LogOpt"/></li>
        ///     <li><c>--mac-address</c> via <see cref="DockerCreateSettings.MacAddress"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerCreateSettings.Memory"/></li>
        ///     <li><c>--memory-reservation</c> via <see cref="DockerCreateSettings.MemoryReservation"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerCreateSettings.MemorySwap"/></li>
        ///     <li><c>--memory-swappiness</c> via <see cref="DockerCreateSettings.MemorySwappiness"/></li>
        ///     <li><c>--mount</c> via <see cref="DockerCreateSettings.Mount"/></li>
        ///     <li><c>--name</c> via <see cref="DockerCreateSettings.Name"/></li>
        ///     <li><c>--net</c> via <see cref="DockerCreateSettings.Net"/></li>
        ///     <li><c>--net-alias</c> via <see cref="DockerCreateSettings.NetAlias"/></li>
        ///     <li><c>--network</c> via <see cref="DockerCreateSettings.Network"/></li>
        ///     <li><c>--network-alias</c> via <see cref="DockerCreateSettings.NetworkAlias"/></li>
        ///     <li><c>--no-healthcheck</c> via <see cref="DockerCreateSettings.NoHealthcheck"/></li>
        ///     <li><c>--oom-kill-disable</c> via <see cref="DockerCreateSettings.OomKillDisable"/></li>
        ///     <li><c>--oom-score-adj</c> via <see cref="DockerCreateSettings.OomScoreAdj"/></li>
        ///     <li><c>--pid</c> via <see cref="DockerCreateSettings.Pid"/></li>
        ///     <li><c>--pids-limit</c> via <see cref="DockerCreateSettings.PidsLimit"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerCreateSettings.Platform"/></li>
        ///     <li><c>--privileged</c> via <see cref="DockerCreateSettings.Privileged"/></li>
        ///     <li><c>--publish</c> via <see cref="DockerCreateSettings.Publish"/></li>
        ///     <li><c>--publish-all</c> via <see cref="DockerCreateSettings.PublishAll"/></li>
        ///     <li><c>--read-only</c> via <see cref="DockerCreateSettings.ReadOnly"/></li>
        ///     <li><c>--restart</c> via <see cref="DockerCreateSettings.Restart"/></li>
        ///     <li><c>--rm</c> via <see cref="DockerCreateSettings.Rm"/></li>
        ///     <li><c>--runtime</c> via <see cref="DockerCreateSettings.Runtime"/></li>
        ///     <li><c>--security-opt</c> via <see cref="DockerCreateSettings.SecurityOpt"/></li>
        ///     <li><c>--shm-size</c> via <see cref="DockerCreateSettings.ShmSize"/></li>
        ///     <li><c>--stop-signal</c> via <see cref="DockerCreateSettings.StopSignal"/></li>
        ///     <li><c>--stop-timeout</c> via <see cref="DockerCreateSettings.StopTimeout"/></li>
        ///     <li><c>--storage-opt</c> via <see cref="DockerCreateSettings.StorageOpt"/></li>
        ///     <li><c>--sysctl</c> via <see cref="DockerCreateSettings.Sysctl"/></li>
        ///     <li><c>--tmpfs</c> via <see cref="DockerCreateSettings.Tmpfs"/></li>
        ///     <li><c>--tty</c> via <see cref="DockerCreateSettings.Tty"/></li>
        ///     <li><c>--ulimit</c> via <see cref="DockerCreateSettings.Ulimit"/></li>
        ///     <li><c>--user</c> via <see cref="DockerCreateSettings.User"/></li>
        ///     <li><c>--userns</c> via <see cref="DockerCreateSettings.Userns"/></li>
        ///     <li><c>--uts</c> via <see cref="DockerCreateSettings.Uts"/></li>
        ///     <li><c>--volume</c> via <see cref="DockerCreateSettings.Volume"/></li>
        ///     <li><c>--volume-driver</c> via <see cref="DockerCreateSettings.VolumeDriver"/></li>
        ///     <li><c>--volumes-from</c> via <see cref="DockerCreateSettings.VolumesFrom"/></li>
        ///     <li><c>--workdir</c> via <see cref="DockerCreateSettings.Workdir"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerCreateSettings Settings, IReadOnlyCollection<Output> Output)> DockerCreate(CombinatorialConfigure<DockerCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerCreate, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Update a service.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceUpdateSettings.CliSettings"/></li>
        ///     <li><c>&lt;service&gt;</c> via <see cref="DockerServiceUpdateSettings.Service"/></li>
        ///     <li><c>--args</c> via <see cref="DockerServiceUpdateSettings.Args"/></li>
        ///     <li><c>--config-add</c> via <see cref="DockerServiceUpdateSettings.ConfigAdd"/></li>
        ///     <li><c>--config-rm</c> via <see cref="DockerServiceUpdateSettings.ConfigRm"/></li>
        ///     <li><c>--constraint-add</c> via <see cref="DockerServiceUpdateSettings.ConstraintAdd"/></li>
        ///     <li><c>--constraint-rm</c> via <see cref="DockerServiceUpdateSettings.ConstraintRm"/></li>
        ///     <li><c>--container-label-add</c> via <see cref="DockerServiceUpdateSettings.ContainerLabelAdd"/></li>
        ///     <li><c>--container-label-rm</c> via <see cref="DockerServiceUpdateSettings.ContainerLabelRm"/></li>
        ///     <li><c>--credential-spec</c> via <see cref="DockerServiceUpdateSettings.CredentialSpec"/></li>
        ///     <li><c>--detach</c> via <see cref="DockerServiceUpdateSettings.Detach"/></li>
        ///     <li><c>--dns-add</c> via <see cref="DockerServiceUpdateSettings.DnsAdd"/></li>
        ///     <li><c>--dns-option-add</c> via <see cref="DockerServiceUpdateSettings.DnsOptionAdd"/></li>
        ///     <li><c>--dns-option-rm</c> via <see cref="DockerServiceUpdateSettings.DnsOptionRm"/></li>
        ///     <li><c>--dns-rm</c> via <see cref="DockerServiceUpdateSettings.DnsRm"/></li>
        ///     <li><c>--dns-search-add</c> via <see cref="DockerServiceUpdateSettings.DnsSearchAdd"/></li>
        ///     <li><c>--dns-search-rm</c> via <see cref="DockerServiceUpdateSettings.DnsSearchRm"/></li>
        ///     <li><c>--endpoint-mode</c> via <see cref="DockerServiceUpdateSettings.EndpointMode"/></li>
        ///     <li><c>--entrypoint</c> via <see cref="DockerServiceUpdateSettings.Entrypoint"/></li>
        ///     <li><c>--env-add</c> via <see cref="DockerServiceUpdateSettings.EnvAdd"/></li>
        ///     <li><c>--env-rm</c> via <see cref="DockerServiceUpdateSettings.EnvRm"/></li>
        ///     <li><c>--force</c> via <see cref="DockerServiceUpdateSettings.Force"/></li>
        ///     <li><c>--generic-resource-add</c> via <see cref="DockerServiceUpdateSettings.GenericResourceAdd"/></li>
        ///     <li><c>--generic-resource-rm</c> via <see cref="DockerServiceUpdateSettings.GenericResourceRm"/></li>
        ///     <li><c>--group-add</c> via <see cref="DockerServiceUpdateSettings.GroupAdd"/></li>
        ///     <li><c>--group-rm</c> via <see cref="DockerServiceUpdateSettings.GroupRm"/></li>
        ///     <li><c>--health-cmd</c> via <see cref="DockerServiceUpdateSettings.HealthCmd"/></li>
        ///     <li><c>--health-interval</c> via <see cref="DockerServiceUpdateSettings.HealthInterval"/></li>
        ///     <li><c>--health-retries</c> via <see cref="DockerServiceUpdateSettings.HealthRetries"/></li>
        ///     <li><c>--health-start-period</c> via <see cref="DockerServiceUpdateSettings.HealthStartPeriod"/></li>
        ///     <li><c>--health-timeout</c> via <see cref="DockerServiceUpdateSettings.HealthTimeout"/></li>
        ///     <li><c>--host-add</c> via <see cref="DockerServiceUpdateSettings.HostAdd"/></li>
        ///     <li><c>--host-rm</c> via <see cref="DockerServiceUpdateSettings.HostRm"/></li>
        ///     <li><c>--hostname</c> via <see cref="DockerServiceUpdateSettings.Hostname"/></li>
        ///     <li><c>--image</c> via <see cref="DockerServiceUpdateSettings.Image"/></li>
        ///     <li><c>--init</c> via <see cref="DockerServiceUpdateSettings.Init"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerServiceUpdateSettings.Isolation"/></li>
        ///     <li><c>--label-add</c> via <see cref="DockerServiceUpdateSettings.LabelAdd"/></li>
        ///     <li><c>--label-rm</c> via <see cref="DockerServiceUpdateSettings.LabelRm"/></li>
        ///     <li><c>--limit-cpu</c> via <see cref="DockerServiceUpdateSettings.LimitCpu"/></li>
        ///     <li><c>--limit-memory</c> via <see cref="DockerServiceUpdateSettings.LimitMemory"/></li>
        ///     <li><c>--log-driver</c> via <see cref="DockerServiceUpdateSettings.LogDriver"/></li>
        ///     <li><c>--log-opt</c> via <see cref="DockerServiceUpdateSettings.LogOpt"/></li>
        ///     <li><c>--mount-add</c> via <see cref="DockerServiceUpdateSettings.MountAdd"/></li>
        ///     <li><c>--mount-rm</c> via <see cref="DockerServiceUpdateSettings.MountRm"/></li>
        ///     <li><c>--network-add</c> via <see cref="DockerServiceUpdateSettings.NetworkAdd"/></li>
        ///     <li><c>--network-rm</c> via <see cref="DockerServiceUpdateSettings.NetworkRm"/></li>
        ///     <li><c>--no-healthcheck</c> via <see cref="DockerServiceUpdateSettings.NoHealthcheck"/></li>
        ///     <li><c>--no-resolve-image</c> via <see cref="DockerServiceUpdateSettings.NoResolveImage"/></li>
        ///     <li><c>--placement-pref-add</c> via <see cref="DockerServiceUpdateSettings.PlacementPrefAdd"/></li>
        ///     <li><c>--placement-pref-rm</c> via <see cref="DockerServiceUpdateSettings.PlacementPrefRm"/></li>
        ///     <li><c>--publish-add</c> via <see cref="DockerServiceUpdateSettings.PublishAdd"/></li>
        ///     <li><c>--publish-rm</c> via <see cref="DockerServiceUpdateSettings.PublishRm"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerServiceUpdateSettings.Quiet"/></li>
        ///     <li><c>--read-only</c> via <see cref="DockerServiceUpdateSettings.ReadOnly"/></li>
        ///     <li><c>--replicas</c> via <see cref="DockerServiceUpdateSettings.Replicas"/></li>
        ///     <li><c>--replicas-max-per-node</c> via <see cref="DockerServiceUpdateSettings.ReplicasMaxPerNode"/></li>
        ///     <li><c>--reserve-cpu</c> via <see cref="DockerServiceUpdateSettings.ReserveCpu"/></li>
        ///     <li><c>--reserve-memory</c> via <see cref="DockerServiceUpdateSettings.ReserveMemory"/></li>
        ///     <li><c>--restart-condition</c> via <see cref="DockerServiceUpdateSettings.RestartCondition"/></li>
        ///     <li><c>--restart-delay</c> via <see cref="DockerServiceUpdateSettings.RestartDelay"/></li>
        ///     <li><c>--restart-max-attempts</c> via <see cref="DockerServiceUpdateSettings.RestartMaxAttempts"/></li>
        ///     <li><c>--restart-window</c> via <see cref="DockerServiceUpdateSettings.RestartWindow"/></li>
        ///     <li><c>--rollback</c> via <see cref="DockerServiceUpdateSettings.Rollback"/></li>
        ///     <li><c>--rollback-delay</c> via <see cref="DockerServiceUpdateSettings.RollbackDelay"/></li>
        ///     <li><c>--rollback-failure-action</c> via <see cref="DockerServiceUpdateSettings.RollbackFailureAction"/></li>
        ///     <li><c>--rollback-max-failure-ratio</c> via <see cref="DockerServiceUpdateSettings.RollbackMaxFailureRatio"/></li>
        ///     <li><c>--rollback-monitor</c> via <see cref="DockerServiceUpdateSettings.RollbackMonitor"/></li>
        ///     <li><c>--rollback-order</c> via <see cref="DockerServiceUpdateSettings.RollbackOrder"/></li>
        ///     <li><c>--rollback-parallelism</c> via <see cref="DockerServiceUpdateSettings.RollbackParallelism"/></li>
        ///     <li><c>--secret-add</c> via <see cref="DockerServiceUpdateSettings.SecretAdd"/></li>
        ///     <li><c>--secret-rm</c> via <see cref="DockerServiceUpdateSettings.SecretRm"/></li>
        ///     <li><c>--stop-grace-period</c> via <see cref="DockerServiceUpdateSettings.StopGracePeriod"/></li>
        ///     <li><c>--stop-signal</c> via <see cref="DockerServiceUpdateSettings.StopSignal"/></li>
        ///     <li><c>--sysctl-add</c> via <see cref="DockerServiceUpdateSettings.SysctlAdd"/></li>
        ///     <li><c>--sysctl-rm</c> via <see cref="DockerServiceUpdateSettings.SysctlRm"/></li>
        ///     <li><c>--tty</c> via <see cref="DockerServiceUpdateSettings.Tty"/></li>
        ///     <li><c>--update-delay</c> via <see cref="DockerServiceUpdateSettings.UpdateDelay"/></li>
        ///     <li><c>--update-failure-action</c> via <see cref="DockerServiceUpdateSettings.UpdateFailureAction"/></li>
        ///     <li><c>--update-max-failure-ratio</c> via <see cref="DockerServiceUpdateSettings.UpdateMaxFailureRatio"/></li>
        ///     <li><c>--update-monitor</c> via <see cref="DockerServiceUpdateSettings.UpdateMonitor"/></li>
        ///     <li><c>--update-order</c> via <see cref="DockerServiceUpdateSettings.UpdateOrder"/></li>
        ///     <li><c>--update-parallelism</c> via <see cref="DockerServiceUpdateSettings.UpdateParallelism"/></li>
        ///     <li><c>--user</c> via <see cref="DockerServiceUpdateSettings.User"/></li>
        ///     <li><c>--with-registry-auth</c> via <see cref="DockerServiceUpdateSettings.WithRegistryAuth"/></li>
        ///     <li><c>--workdir</c> via <see cref="DockerServiceUpdateSettings.Workdir"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerServiceUpdate(DockerServiceUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerServiceUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Update a service.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceUpdateSettings.CliSettings"/></li>
        ///     <li><c>&lt;service&gt;</c> via <see cref="DockerServiceUpdateSettings.Service"/></li>
        ///     <li><c>--args</c> via <see cref="DockerServiceUpdateSettings.Args"/></li>
        ///     <li><c>--config-add</c> via <see cref="DockerServiceUpdateSettings.ConfigAdd"/></li>
        ///     <li><c>--config-rm</c> via <see cref="DockerServiceUpdateSettings.ConfigRm"/></li>
        ///     <li><c>--constraint-add</c> via <see cref="DockerServiceUpdateSettings.ConstraintAdd"/></li>
        ///     <li><c>--constraint-rm</c> via <see cref="DockerServiceUpdateSettings.ConstraintRm"/></li>
        ///     <li><c>--container-label-add</c> via <see cref="DockerServiceUpdateSettings.ContainerLabelAdd"/></li>
        ///     <li><c>--container-label-rm</c> via <see cref="DockerServiceUpdateSettings.ContainerLabelRm"/></li>
        ///     <li><c>--credential-spec</c> via <see cref="DockerServiceUpdateSettings.CredentialSpec"/></li>
        ///     <li><c>--detach</c> via <see cref="DockerServiceUpdateSettings.Detach"/></li>
        ///     <li><c>--dns-add</c> via <see cref="DockerServiceUpdateSettings.DnsAdd"/></li>
        ///     <li><c>--dns-option-add</c> via <see cref="DockerServiceUpdateSettings.DnsOptionAdd"/></li>
        ///     <li><c>--dns-option-rm</c> via <see cref="DockerServiceUpdateSettings.DnsOptionRm"/></li>
        ///     <li><c>--dns-rm</c> via <see cref="DockerServiceUpdateSettings.DnsRm"/></li>
        ///     <li><c>--dns-search-add</c> via <see cref="DockerServiceUpdateSettings.DnsSearchAdd"/></li>
        ///     <li><c>--dns-search-rm</c> via <see cref="DockerServiceUpdateSettings.DnsSearchRm"/></li>
        ///     <li><c>--endpoint-mode</c> via <see cref="DockerServiceUpdateSettings.EndpointMode"/></li>
        ///     <li><c>--entrypoint</c> via <see cref="DockerServiceUpdateSettings.Entrypoint"/></li>
        ///     <li><c>--env-add</c> via <see cref="DockerServiceUpdateSettings.EnvAdd"/></li>
        ///     <li><c>--env-rm</c> via <see cref="DockerServiceUpdateSettings.EnvRm"/></li>
        ///     <li><c>--force</c> via <see cref="DockerServiceUpdateSettings.Force"/></li>
        ///     <li><c>--generic-resource-add</c> via <see cref="DockerServiceUpdateSettings.GenericResourceAdd"/></li>
        ///     <li><c>--generic-resource-rm</c> via <see cref="DockerServiceUpdateSettings.GenericResourceRm"/></li>
        ///     <li><c>--group-add</c> via <see cref="DockerServiceUpdateSettings.GroupAdd"/></li>
        ///     <li><c>--group-rm</c> via <see cref="DockerServiceUpdateSettings.GroupRm"/></li>
        ///     <li><c>--health-cmd</c> via <see cref="DockerServiceUpdateSettings.HealthCmd"/></li>
        ///     <li><c>--health-interval</c> via <see cref="DockerServiceUpdateSettings.HealthInterval"/></li>
        ///     <li><c>--health-retries</c> via <see cref="DockerServiceUpdateSettings.HealthRetries"/></li>
        ///     <li><c>--health-start-period</c> via <see cref="DockerServiceUpdateSettings.HealthStartPeriod"/></li>
        ///     <li><c>--health-timeout</c> via <see cref="DockerServiceUpdateSettings.HealthTimeout"/></li>
        ///     <li><c>--host-add</c> via <see cref="DockerServiceUpdateSettings.HostAdd"/></li>
        ///     <li><c>--host-rm</c> via <see cref="DockerServiceUpdateSettings.HostRm"/></li>
        ///     <li><c>--hostname</c> via <see cref="DockerServiceUpdateSettings.Hostname"/></li>
        ///     <li><c>--image</c> via <see cref="DockerServiceUpdateSettings.Image"/></li>
        ///     <li><c>--init</c> via <see cref="DockerServiceUpdateSettings.Init"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerServiceUpdateSettings.Isolation"/></li>
        ///     <li><c>--label-add</c> via <see cref="DockerServiceUpdateSettings.LabelAdd"/></li>
        ///     <li><c>--label-rm</c> via <see cref="DockerServiceUpdateSettings.LabelRm"/></li>
        ///     <li><c>--limit-cpu</c> via <see cref="DockerServiceUpdateSettings.LimitCpu"/></li>
        ///     <li><c>--limit-memory</c> via <see cref="DockerServiceUpdateSettings.LimitMemory"/></li>
        ///     <li><c>--log-driver</c> via <see cref="DockerServiceUpdateSettings.LogDriver"/></li>
        ///     <li><c>--log-opt</c> via <see cref="DockerServiceUpdateSettings.LogOpt"/></li>
        ///     <li><c>--mount-add</c> via <see cref="DockerServiceUpdateSettings.MountAdd"/></li>
        ///     <li><c>--mount-rm</c> via <see cref="DockerServiceUpdateSettings.MountRm"/></li>
        ///     <li><c>--network-add</c> via <see cref="DockerServiceUpdateSettings.NetworkAdd"/></li>
        ///     <li><c>--network-rm</c> via <see cref="DockerServiceUpdateSettings.NetworkRm"/></li>
        ///     <li><c>--no-healthcheck</c> via <see cref="DockerServiceUpdateSettings.NoHealthcheck"/></li>
        ///     <li><c>--no-resolve-image</c> via <see cref="DockerServiceUpdateSettings.NoResolveImage"/></li>
        ///     <li><c>--placement-pref-add</c> via <see cref="DockerServiceUpdateSettings.PlacementPrefAdd"/></li>
        ///     <li><c>--placement-pref-rm</c> via <see cref="DockerServiceUpdateSettings.PlacementPrefRm"/></li>
        ///     <li><c>--publish-add</c> via <see cref="DockerServiceUpdateSettings.PublishAdd"/></li>
        ///     <li><c>--publish-rm</c> via <see cref="DockerServiceUpdateSettings.PublishRm"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerServiceUpdateSettings.Quiet"/></li>
        ///     <li><c>--read-only</c> via <see cref="DockerServiceUpdateSettings.ReadOnly"/></li>
        ///     <li><c>--replicas</c> via <see cref="DockerServiceUpdateSettings.Replicas"/></li>
        ///     <li><c>--replicas-max-per-node</c> via <see cref="DockerServiceUpdateSettings.ReplicasMaxPerNode"/></li>
        ///     <li><c>--reserve-cpu</c> via <see cref="DockerServiceUpdateSettings.ReserveCpu"/></li>
        ///     <li><c>--reserve-memory</c> via <see cref="DockerServiceUpdateSettings.ReserveMemory"/></li>
        ///     <li><c>--restart-condition</c> via <see cref="DockerServiceUpdateSettings.RestartCondition"/></li>
        ///     <li><c>--restart-delay</c> via <see cref="DockerServiceUpdateSettings.RestartDelay"/></li>
        ///     <li><c>--restart-max-attempts</c> via <see cref="DockerServiceUpdateSettings.RestartMaxAttempts"/></li>
        ///     <li><c>--restart-window</c> via <see cref="DockerServiceUpdateSettings.RestartWindow"/></li>
        ///     <li><c>--rollback</c> via <see cref="DockerServiceUpdateSettings.Rollback"/></li>
        ///     <li><c>--rollback-delay</c> via <see cref="DockerServiceUpdateSettings.RollbackDelay"/></li>
        ///     <li><c>--rollback-failure-action</c> via <see cref="DockerServiceUpdateSettings.RollbackFailureAction"/></li>
        ///     <li><c>--rollback-max-failure-ratio</c> via <see cref="DockerServiceUpdateSettings.RollbackMaxFailureRatio"/></li>
        ///     <li><c>--rollback-monitor</c> via <see cref="DockerServiceUpdateSettings.RollbackMonitor"/></li>
        ///     <li><c>--rollback-order</c> via <see cref="DockerServiceUpdateSettings.RollbackOrder"/></li>
        ///     <li><c>--rollback-parallelism</c> via <see cref="DockerServiceUpdateSettings.RollbackParallelism"/></li>
        ///     <li><c>--secret-add</c> via <see cref="DockerServiceUpdateSettings.SecretAdd"/></li>
        ///     <li><c>--secret-rm</c> via <see cref="DockerServiceUpdateSettings.SecretRm"/></li>
        ///     <li><c>--stop-grace-period</c> via <see cref="DockerServiceUpdateSettings.StopGracePeriod"/></li>
        ///     <li><c>--stop-signal</c> via <see cref="DockerServiceUpdateSettings.StopSignal"/></li>
        ///     <li><c>--sysctl-add</c> via <see cref="DockerServiceUpdateSettings.SysctlAdd"/></li>
        ///     <li><c>--sysctl-rm</c> via <see cref="DockerServiceUpdateSettings.SysctlRm"/></li>
        ///     <li><c>--tty</c> via <see cref="DockerServiceUpdateSettings.Tty"/></li>
        ///     <li><c>--update-delay</c> via <see cref="DockerServiceUpdateSettings.UpdateDelay"/></li>
        ///     <li><c>--update-failure-action</c> via <see cref="DockerServiceUpdateSettings.UpdateFailureAction"/></li>
        ///     <li><c>--update-max-failure-ratio</c> via <see cref="DockerServiceUpdateSettings.UpdateMaxFailureRatio"/></li>
        ///     <li><c>--update-monitor</c> via <see cref="DockerServiceUpdateSettings.UpdateMonitor"/></li>
        ///     <li><c>--update-order</c> via <see cref="DockerServiceUpdateSettings.UpdateOrder"/></li>
        ///     <li><c>--update-parallelism</c> via <see cref="DockerServiceUpdateSettings.UpdateParallelism"/></li>
        ///     <li><c>--user</c> via <see cref="DockerServiceUpdateSettings.User"/></li>
        ///     <li><c>--with-registry-auth</c> via <see cref="DockerServiceUpdateSettings.WithRegistryAuth"/></li>
        ///     <li><c>--workdir</c> via <see cref="DockerServiceUpdateSettings.Workdir"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerServiceUpdate(Configure<DockerServiceUpdateSettings> configurator)
        {
            return DockerServiceUpdate(configurator(new DockerServiceUpdateSettings()));
        }
        /// <summary>
        ///   <p>Update a service.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceUpdateSettings.CliSettings"/></li>
        ///     <li><c>&lt;service&gt;</c> via <see cref="DockerServiceUpdateSettings.Service"/></li>
        ///     <li><c>--args</c> via <see cref="DockerServiceUpdateSettings.Args"/></li>
        ///     <li><c>--config-add</c> via <see cref="DockerServiceUpdateSettings.ConfigAdd"/></li>
        ///     <li><c>--config-rm</c> via <see cref="DockerServiceUpdateSettings.ConfigRm"/></li>
        ///     <li><c>--constraint-add</c> via <see cref="DockerServiceUpdateSettings.ConstraintAdd"/></li>
        ///     <li><c>--constraint-rm</c> via <see cref="DockerServiceUpdateSettings.ConstraintRm"/></li>
        ///     <li><c>--container-label-add</c> via <see cref="DockerServiceUpdateSettings.ContainerLabelAdd"/></li>
        ///     <li><c>--container-label-rm</c> via <see cref="DockerServiceUpdateSettings.ContainerLabelRm"/></li>
        ///     <li><c>--credential-spec</c> via <see cref="DockerServiceUpdateSettings.CredentialSpec"/></li>
        ///     <li><c>--detach</c> via <see cref="DockerServiceUpdateSettings.Detach"/></li>
        ///     <li><c>--dns-add</c> via <see cref="DockerServiceUpdateSettings.DnsAdd"/></li>
        ///     <li><c>--dns-option-add</c> via <see cref="DockerServiceUpdateSettings.DnsOptionAdd"/></li>
        ///     <li><c>--dns-option-rm</c> via <see cref="DockerServiceUpdateSettings.DnsOptionRm"/></li>
        ///     <li><c>--dns-rm</c> via <see cref="DockerServiceUpdateSettings.DnsRm"/></li>
        ///     <li><c>--dns-search-add</c> via <see cref="DockerServiceUpdateSettings.DnsSearchAdd"/></li>
        ///     <li><c>--dns-search-rm</c> via <see cref="DockerServiceUpdateSettings.DnsSearchRm"/></li>
        ///     <li><c>--endpoint-mode</c> via <see cref="DockerServiceUpdateSettings.EndpointMode"/></li>
        ///     <li><c>--entrypoint</c> via <see cref="DockerServiceUpdateSettings.Entrypoint"/></li>
        ///     <li><c>--env-add</c> via <see cref="DockerServiceUpdateSettings.EnvAdd"/></li>
        ///     <li><c>--env-rm</c> via <see cref="DockerServiceUpdateSettings.EnvRm"/></li>
        ///     <li><c>--force</c> via <see cref="DockerServiceUpdateSettings.Force"/></li>
        ///     <li><c>--generic-resource-add</c> via <see cref="DockerServiceUpdateSettings.GenericResourceAdd"/></li>
        ///     <li><c>--generic-resource-rm</c> via <see cref="DockerServiceUpdateSettings.GenericResourceRm"/></li>
        ///     <li><c>--group-add</c> via <see cref="DockerServiceUpdateSettings.GroupAdd"/></li>
        ///     <li><c>--group-rm</c> via <see cref="DockerServiceUpdateSettings.GroupRm"/></li>
        ///     <li><c>--health-cmd</c> via <see cref="DockerServiceUpdateSettings.HealthCmd"/></li>
        ///     <li><c>--health-interval</c> via <see cref="DockerServiceUpdateSettings.HealthInterval"/></li>
        ///     <li><c>--health-retries</c> via <see cref="DockerServiceUpdateSettings.HealthRetries"/></li>
        ///     <li><c>--health-start-period</c> via <see cref="DockerServiceUpdateSettings.HealthStartPeriod"/></li>
        ///     <li><c>--health-timeout</c> via <see cref="DockerServiceUpdateSettings.HealthTimeout"/></li>
        ///     <li><c>--host-add</c> via <see cref="DockerServiceUpdateSettings.HostAdd"/></li>
        ///     <li><c>--host-rm</c> via <see cref="DockerServiceUpdateSettings.HostRm"/></li>
        ///     <li><c>--hostname</c> via <see cref="DockerServiceUpdateSettings.Hostname"/></li>
        ///     <li><c>--image</c> via <see cref="DockerServiceUpdateSettings.Image"/></li>
        ///     <li><c>--init</c> via <see cref="DockerServiceUpdateSettings.Init"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerServiceUpdateSettings.Isolation"/></li>
        ///     <li><c>--label-add</c> via <see cref="DockerServiceUpdateSettings.LabelAdd"/></li>
        ///     <li><c>--label-rm</c> via <see cref="DockerServiceUpdateSettings.LabelRm"/></li>
        ///     <li><c>--limit-cpu</c> via <see cref="DockerServiceUpdateSettings.LimitCpu"/></li>
        ///     <li><c>--limit-memory</c> via <see cref="DockerServiceUpdateSettings.LimitMemory"/></li>
        ///     <li><c>--log-driver</c> via <see cref="DockerServiceUpdateSettings.LogDriver"/></li>
        ///     <li><c>--log-opt</c> via <see cref="DockerServiceUpdateSettings.LogOpt"/></li>
        ///     <li><c>--mount-add</c> via <see cref="DockerServiceUpdateSettings.MountAdd"/></li>
        ///     <li><c>--mount-rm</c> via <see cref="DockerServiceUpdateSettings.MountRm"/></li>
        ///     <li><c>--network-add</c> via <see cref="DockerServiceUpdateSettings.NetworkAdd"/></li>
        ///     <li><c>--network-rm</c> via <see cref="DockerServiceUpdateSettings.NetworkRm"/></li>
        ///     <li><c>--no-healthcheck</c> via <see cref="DockerServiceUpdateSettings.NoHealthcheck"/></li>
        ///     <li><c>--no-resolve-image</c> via <see cref="DockerServiceUpdateSettings.NoResolveImage"/></li>
        ///     <li><c>--placement-pref-add</c> via <see cref="DockerServiceUpdateSettings.PlacementPrefAdd"/></li>
        ///     <li><c>--placement-pref-rm</c> via <see cref="DockerServiceUpdateSettings.PlacementPrefRm"/></li>
        ///     <li><c>--publish-add</c> via <see cref="DockerServiceUpdateSettings.PublishAdd"/></li>
        ///     <li><c>--publish-rm</c> via <see cref="DockerServiceUpdateSettings.PublishRm"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerServiceUpdateSettings.Quiet"/></li>
        ///     <li><c>--read-only</c> via <see cref="DockerServiceUpdateSettings.ReadOnly"/></li>
        ///     <li><c>--replicas</c> via <see cref="DockerServiceUpdateSettings.Replicas"/></li>
        ///     <li><c>--replicas-max-per-node</c> via <see cref="DockerServiceUpdateSettings.ReplicasMaxPerNode"/></li>
        ///     <li><c>--reserve-cpu</c> via <see cref="DockerServiceUpdateSettings.ReserveCpu"/></li>
        ///     <li><c>--reserve-memory</c> via <see cref="DockerServiceUpdateSettings.ReserveMemory"/></li>
        ///     <li><c>--restart-condition</c> via <see cref="DockerServiceUpdateSettings.RestartCondition"/></li>
        ///     <li><c>--restart-delay</c> via <see cref="DockerServiceUpdateSettings.RestartDelay"/></li>
        ///     <li><c>--restart-max-attempts</c> via <see cref="DockerServiceUpdateSettings.RestartMaxAttempts"/></li>
        ///     <li><c>--restart-window</c> via <see cref="DockerServiceUpdateSettings.RestartWindow"/></li>
        ///     <li><c>--rollback</c> via <see cref="DockerServiceUpdateSettings.Rollback"/></li>
        ///     <li><c>--rollback-delay</c> via <see cref="DockerServiceUpdateSettings.RollbackDelay"/></li>
        ///     <li><c>--rollback-failure-action</c> via <see cref="DockerServiceUpdateSettings.RollbackFailureAction"/></li>
        ///     <li><c>--rollback-max-failure-ratio</c> via <see cref="DockerServiceUpdateSettings.RollbackMaxFailureRatio"/></li>
        ///     <li><c>--rollback-monitor</c> via <see cref="DockerServiceUpdateSettings.RollbackMonitor"/></li>
        ///     <li><c>--rollback-order</c> via <see cref="DockerServiceUpdateSettings.RollbackOrder"/></li>
        ///     <li><c>--rollback-parallelism</c> via <see cref="DockerServiceUpdateSettings.RollbackParallelism"/></li>
        ///     <li><c>--secret-add</c> via <see cref="DockerServiceUpdateSettings.SecretAdd"/></li>
        ///     <li><c>--secret-rm</c> via <see cref="DockerServiceUpdateSettings.SecretRm"/></li>
        ///     <li><c>--stop-grace-period</c> via <see cref="DockerServiceUpdateSettings.StopGracePeriod"/></li>
        ///     <li><c>--stop-signal</c> via <see cref="DockerServiceUpdateSettings.StopSignal"/></li>
        ///     <li><c>--sysctl-add</c> via <see cref="DockerServiceUpdateSettings.SysctlAdd"/></li>
        ///     <li><c>--sysctl-rm</c> via <see cref="DockerServiceUpdateSettings.SysctlRm"/></li>
        ///     <li><c>--tty</c> via <see cref="DockerServiceUpdateSettings.Tty"/></li>
        ///     <li><c>--update-delay</c> via <see cref="DockerServiceUpdateSettings.UpdateDelay"/></li>
        ///     <li><c>--update-failure-action</c> via <see cref="DockerServiceUpdateSettings.UpdateFailureAction"/></li>
        ///     <li><c>--update-max-failure-ratio</c> via <see cref="DockerServiceUpdateSettings.UpdateMaxFailureRatio"/></li>
        ///     <li><c>--update-monitor</c> via <see cref="DockerServiceUpdateSettings.UpdateMonitor"/></li>
        ///     <li><c>--update-order</c> via <see cref="DockerServiceUpdateSettings.UpdateOrder"/></li>
        ///     <li><c>--update-parallelism</c> via <see cref="DockerServiceUpdateSettings.UpdateParallelism"/></li>
        ///     <li><c>--user</c> via <see cref="DockerServiceUpdateSettings.User"/></li>
        ///     <li><c>--with-registry-auth</c> via <see cref="DockerServiceUpdateSettings.WithRegistryAuth"/></li>
        ///     <li><c>--workdir</c> via <see cref="DockerServiceUpdateSettings.Workdir"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerServiceUpdateSettings Settings, IReadOnlyCollection<Output> Output)> DockerServiceUpdate(CombinatorialConfigure<DockerServiceUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerServiceUpdate, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>List port mappings or a specific mapping for the container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPortSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerPortSettings.Container"/></li>
        ///     <li><c>&lt;privatePort&gt;</c> via <see cref="DockerPortSettings.PrivatePort"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPort(DockerPortSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerPortSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>List port mappings or a specific mapping for the container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPortSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerPortSettings.Container"/></li>
        ///     <li><c>&lt;privatePort&gt;</c> via <see cref="DockerPortSettings.PrivatePort"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPort(Configure<DockerPortSettings> configurator)
        {
            return DockerPort(configurator(new DockerPortSettings()));
        }
        /// <summary>
        ///   <p>List port mappings or a specific mapping for the container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPortSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerPortSettings.Container"/></li>
        ///     <li><c>&lt;privatePort&gt;</c> via <see cref="DockerPortSettings.PrivatePort"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerPortSettings Settings, IReadOnlyCollection<Output> Output)> DockerPort(CombinatorialConfigure<DockerPortSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerPort, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainer(DockerContainerSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContainerSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainer(Configure<DockerContainerSettings> configurator)
        {
            return DockerContainer(configurator(new DockerContainerSettings()));
        }
        /// <summary>
        ///   <p>Manage containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContainerSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainer(CombinatorialConfigure<DockerContainerSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContainer, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Push an image or a repository to a registry.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImagePushSettings.CliSettings"/></li>
        ///     <li><c>&lt;name&gt;</c> via <see cref="DockerImagePushSettings.Name"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerImagePushSettings.DisableContentTrust"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImagePush(DockerImagePushSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerImagePushSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Push an image or a repository to a registry.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImagePushSettings.CliSettings"/></li>
        ///     <li><c>&lt;name&gt;</c> via <see cref="DockerImagePushSettings.Name"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerImagePushSettings.DisableContentTrust"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImagePush(Configure<DockerImagePushSettings> configurator)
        {
            return DockerImagePush(configurator(new DockerImagePushSettings()));
        }
        /// <summary>
        ///   <p>Push an image or a repository to a registry.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImagePushSettings.CliSettings"/></li>
        ///     <li><c>&lt;name&gt;</c> via <see cref="DockerImagePushSettings.Name"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerImagePushSettings.DisableContentTrust"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerImagePushSettings Settings, IReadOnlyCollection<Output> Output)> DockerImagePush(CombinatorialConfigure<DockerImagePushSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerImagePush, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Display detailed information on one or more services.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;services&gt;</c> via <see cref="DockerServiceInspectSettings.Services"/></li>
        ///     <li><c>--format</c> via <see cref="DockerServiceInspectSettings.Format"/></li>
        ///     <li><c>--pretty</c> via <see cref="DockerServiceInspectSettings.Pretty"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerServiceInspect(DockerServiceInspectSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerServiceInspectSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Display detailed information on one or more services.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;services&gt;</c> via <see cref="DockerServiceInspectSettings.Services"/></li>
        ///     <li><c>--format</c> via <see cref="DockerServiceInspectSettings.Format"/></li>
        ///     <li><c>--pretty</c> via <see cref="DockerServiceInspectSettings.Pretty"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerServiceInspect(Configure<DockerServiceInspectSettings> configurator)
        {
            return DockerServiceInspect(configurator(new DockerServiceInspectSettings()));
        }
        /// <summary>
        ///   <p>Display detailed information on one or more services.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;services&gt;</c> via <see cref="DockerServiceInspectSettings.Services"/></li>
        ///     <li><c>--format</c> via <see cref="DockerServiceInspectSettings.Format"/></li>
        ///     <li><c>--pretty</c> via <see cref="DockerServiceInspectSettings.Pretty"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerServiceInspectSettings Settings, IReadOnlyCollection<Output> Output)> DockerServiceInspect(CombinatorialConfigure<DockerServiceInspectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerServiceInspect, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Connect a container to a network.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNetworkConnectSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerNetworkConnectSettings.Container"/></li>
        ///     <li><c>&lt;network&gt;</c> via <see cref="DockerNetworkConnectSettings.Network"/></li>
        ///     <li><c>--alias</c> via <see cref="DockerNetworkConnectSettings.Alias"/></li>
        ///     <li><c>--driver-opt</c> via <see cref="DockerNetworkConnectSettings.DriverOpt"/></li>
        ///     <li><c>--ip</c> via <see cref="DockerNetworkConnectSettings.Ip"/></li>
        ///     <li><c>--ip6</c> via <see cref="DockerNetworkConnectSettings.Ip6"/></li>
        ///     <li><c>--link</c> via <see cref="DockerNetworkConnectSettings.Link"/></li>
        ///     <li><c>--link-local-ip</c> via <see cref="DockerNetworkConnectSettings.LinkLocalIp"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNetworkConnect(DockerNetworkConnectSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerNetworkConnectSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Connect a container to a network.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNetworkConnectSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerNetworkConnectSettings.Container"/></li>
        ///     <li><c>&lt;network&gt;</c> via <see cref="DockerNetworkConnectSettings.Network"/></li>
        ///     <li><c>--alias</c> via <see cref="DockerNetworkConnectSettings.Alias"/></li>
        ///     <li><c>--driver-opt</c> via <see cref="DockerNetworkConnectSettings.DriverOpt"/></li>
        ///     <li><c>--ip</c> via <see cref="DockerNetworkConnectSettings.Ip"/></li>
        ///     <li><c>--ip6</c> via <see cref="DockerNetworkConnectSettings.Ip6"/></li>
        ///     <li><c>--link</c> via <see cref="DockerNetworkConnectSettings.Link"/></li>
        ///     <li><c>--link-local-ip</c> via <see cref="DockerNetworkConnectSettings.LinkLocalIp"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNetworkConnect(Configure<DockerNetworkConnectSettings> configurator)
        {
            return DockerNetworkConnect(configurator(new DockerNetworkConnectSettings()));
        }
        /// <summary>
        ///   <p>Connect a container to a network.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNetworkConnectSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerNetworkConnectSettings.Container"/></li>
        ///     <li><c>&lt;network&gt;</c> via <see cref="DockerNetworkConnectSettings.Network"/></li>
        ///     <li><c>--alias</c> via <see cref="DockerNetworkConnectSettings.Alias"/></li>
        ///     <li><c>--driver-opt</c> via <see cref="DockerNetworkConnectSettings.DriverOpt"/></li>
        ///     <li><c>--ip</c> via <see cref="DockerNetworkConnectSettings.Ip"/></li>
        ///     <li><c>--ip6</c> via <see cref="DockerNetworkConnectSettings.Ip6"/></li>
        ///     <li><c>--link</c> via <see cref="DockerNetworkConnectSettings.Link"/></li>
        ///     <li><c>--link-local-ip</c> via <see cref="DockerNetworkConnectSettings.LinkLocalIp"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerNetworkConnectSettings Settings, IReadOnlyCollection<Output> Output)> DockerNetworkConnect(CombinatorialConfigure<DockerNetworkConnectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerNetworkConnect, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>List secrets.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSecretLsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerSecretLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerSecretLsSettings.Format"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerSecretLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSecretLs(DockerSecretLsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerSecretLsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>List secrets.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSecretLsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerSecretLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerSecretLsSettings.Format"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerSecretLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSecretLs(Configure<DockerSecretLsSettings> configurator)
        {
            return DockerSecretLs(configurator(new DockerSecretLsSettings()));
        }
        /// <summary>
        ///   <p>List secrets.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSecretLsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerSecretLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerSecretLsSettings.Format"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerSecretLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerSecretLsSettings Settings, IReadOnlyCollection<Output> Output)> DockerSecretLs(CombinatorialConfigure<DockerSecretLsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerSecretLs, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Leave the swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmLeaveSettings.CliSettings"/></li>
        ///     <li><c>--force</c> via <see cref="DockerSwarmLeaveSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSwarmLeave(DockerSwarmLeaveSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerSwarmLeaveSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Leave the swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmLeaveSettings.CliSettings"/></li>
        ///     <li><c>--force</c> via <see cref="DockerSwarmLeaveSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSwarmLeave(Configure<DockerSwarmLeaveSettings> configurator)
        {
            return DockerSwarmLeave(configurator(new DockerSwarmLeaveSettings()));
        }
        /// <summary>
        ///   <p>Leave the swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmLeaveSettings.CliSettings"/></li>
        ///     <li><c>--force</c> via <see cref="DockerSwarmLeaveSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerSwarmLeaveSettings Settings, IReadOnlyCollection<Output> Output)> DockerSwarmLeave(CombinatorialConfigure<DockerSwarmLeaveSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerSwarmLeave, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>List images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImagesSettings.CliSettings"/></li>
        ///     <li><c>&lt;repository&gt;</c> via <see cref="DockerImagesSettings.Repository"/></li>
        ///     <li><c>--all</c> via <see cref="DockerImagesSettings.All"/></li>
        ///     <li><c>--digests</c> via <see cref="DockerImagesSettings.Digests"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerImagesSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerImagesSettings.Format"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerImagesSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerImagesSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImages(DockerImagesSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerImagesSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>List images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImagesSettings.CliSettings"/></li>
        ///     <li><c>&lt;repository&gt;</c> via <see cref="DockerImagesSettings.Repository"/></li>
        ///     <li><c>--all</c> via <see cref="DockerImagesSettings.All"/></li>
        ///     <li><c>--digests</c> via <see cref="DockerImagesSettings.Digests"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerImagesSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerImagesSettings.Format"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerImagesSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerImagesSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImages(Configure<DockerImagesSettings> configurator)
        {
            return DockerImages(configurator(new DockerImagesSettings()));
        }
        /// <summary>
        ///   <p>List images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImagesSettings.CliSettings"/></li>
        ///     <li><c>&lt;repository&gt;</c> via <see cref="DockerImagesSettings.Repository"/></li>
        ///     <li><c>--all</c> via <see cref="DockerImagesSettings.All"/></li>
        ///     <li><c>--digests</c> via <see cref="DockerImagesSettings.Digests"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerImagesSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerImagesSettings.Format"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerImagesSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerImagesSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerImagesSettings Settings, IReadOnlyCollection<Output> Output)> DockerImages(CombinatorialConfigure<DockerImagesSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerImages, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Update a local engine.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerEngineUpdateSettings.CliSettings"/></li>
        ///     <li><c>--containerd</c> via <see cref="DockerEngineUpdateSettings.Containerd"/></li>
        ///     <li><c>--engine-image</c> via <see cref="DockerEngineUpdateSettings.EngineImage"/></li>
        ///     <li><c>--registry-prefix</c> via <see cref="DockerEngineUpdateSettings.RegistryPrefix"/></li>
        ///     <li><c>--version</c> via <see cref="DockerEngineUpdateSettings.Version"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerEngineUpdate(DockerEngineUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerEngineUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Update a local engine.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerEngineUpdateSettings.CliSettings"/></li>
        ///     <li><c>--containerd</c> via <see cref="DockerEngineUpdateSettings.Containerd"/></li>
        ///     <li><c>--engine-image</c> via <see cref="DockerEngineUpdateSettings.EngineImage"/></li>
        ///     <li><c>--registry-prefix</c> via <see cref="DockerEngineUpdateSettings.RegistryPrefix"/></li>
        ///     <li><c>--version</c> via <see cref="DockerEngineUpdateSettings.Version"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerEngineUpdate(Configure<DockerEngineUpdateSettings> configurator)
        {
            return DockerEngineUpdate(configurator(new DockerEngineUpdateSettings()));
        }
        /// <summary>
        ///   <p>Update a local engine.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerEngineUpdateSettings.CliSettings"/></li>
        ///     <li><c>--containerd</c> via <see cref="DockerEngineUpdateSettings.Containerd"/></li>
        ///     <li><c>--engine-image</c> via <see cref="DockerEngineUpdateSettings.EngineImage"/></li>
        ///     <li><c>--registry-prefix</c> via <see cref="DockerEngineUpdateSettings.RegistryPrefix"/></li>
        ///     <li><c>--version</c> via <see cref="DockerEngineUpdateSettings.Version"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerEngineUpdateSettings Settings, IReadOnlyCollection<Output> Output)> DockerEngineUpdate(CombinatorialConfigure<DockerEngineUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerEngineUpdate, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Get real time events from the server.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSystemEventsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerSystemEventsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerSystemEventsSettings.Format"/></li>
        ///     <li><c>--since</c> via <see cref="DockerSystemEventsSettings.Since"/></li>
        ///     <li><c>--until</c> via <see cref="DockerSystemEventsSettings.Until"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSystemEvents(DockerSystemEventsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerSystemEventsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Get real time events from the server.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSystemEventsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerSystemEventsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerSystemEventsSettings.Format"/></li>
        ///     <li><c>--since</c> via <see cref="DockerSystemEventsSettings.Since"/></li>
        ///     <li><c>--until</c> via <see cref="DockerSystemEventsSettings.Until"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSystemEvents(Configure<DockerSystemEventsSettings> configurator)
        {
            return DockerSystemEvents(configurator(new DockerSystemEventsSettings()));
        }
        /// <summary>
        ///   <p>Get real time events from the server.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSystemEventsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerSystemEventsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerSystemEventsSettings.Format"/></li>
        ///     <li><c>--since</c> via <see cref="DockerSystemEventsSettings.Since"/></li>
        ///     <li><c>--until</c> via <see cref="DockerSystemEventsSettings.Until"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerSystemEventsSettings Settings, IReadOnlyCollection<Output> Output)> DockerSystemEvents(CombinatorialConfigure<DockerSystemEventsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerSystemEvents, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Return low-level information on Docker objects.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;names&gt;</c> via <see cref="DockerInspectSettings.Names"/></li>
        ///     <li><c>--format</c> via <see cref="DockerInspectSettings.Format"/></li>
        ///     <li><c>--size</c> via <see cref="DockerInspectSettings.Size"/></li>
        ///     <li><c>--type</c> via <see cref="DockerInspectSettings.Type"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerInspect(DockerInspectSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerInspectSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Return low-level information on Docker objects.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;names&gt;</c> via <see cref="DockerInspectSettings.Names"/></li>
        ///     <li><c>--format</c> via <see cref="DockerInspectSettings.Format"/></li>
        ///     <li><c>--size</c> via <see cref="DockerInspectSettings.Size"/></li>
        ///     <li><c>--type</c> via <see cref="DockerInspectSettings.Type"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerInspect(Configure<DockerInspectSettings> configurator)
        {
            return DockerInspect(configurator(new DockerInspectSettings()));
        }
        /// <summary>
        ///   <p>Return low-level information on Docker objects.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;names&gt;</c> via <see cref="DockerInspectSettings.Names"/></li>
        ///     <li><c>--format</c> via <see cref="DockerInspectSettings.Format"/></li>
        ///     <li><c>--size</c> via <see cref="DockerInspectSettings.Size"/></li>
        ///     <li><c>--type</c> via <see cref="DockerInspectSettings.Type"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerInspectSettings Settings, IReadOnlyCollection<Output> Output)> DockerInspect(CombinatorialConfigure<DockerInspectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerInspect, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Check for available engine updates.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerEngineCheckSettings.CliSettings"/></li>
        ///     <li><c>--containerd</c> via <see cref="DockerEngineCheckSettings.Containerd"/></li>
        ///     <li><c>--downgrades</c> via <see cref="DockerEngineCheckSettings.Downgrades"/></li>
        ///     <li><c>--engine-image</c> via <see cref="DockerEngineCheckSettings.EngineImage"/></li>
        ///     <li><c>--format</c> via <see cref="DockerEngineCheckSettings.Format"/></li>
        ///     <li><c>--pre-releases</c> via <see cref="DockerEngineCheckSettings.PreReleases"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerEngineCheckSettings.Quiet"/></li>
        ///     <li><c>--registry-prefix</c> via <see cref="DockerEngineCheckSettings.RegistryPrefix"/></li>
        ///     <li><c>--upgrades</c> via <see cref="DockerEngineCheckSettings.Upgrades"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerEngineCheck(DockerEngineCheckSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerEngineCheckSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Check for available engine updates.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerEngineCheckSettings.CliSettings"/></li>
        ///     <li><c>--containerd</c> via <see cref="DockerEngineCheckSettings.Containerd"/></li>
        ///     <li><c>--downgrades</c> via <see cref="DockerEngineCheckSettings.Downgrades"/></li>
        ///     <li><c>--engine-image</c> via <see cref="DockerEngineCheckSettings.EngineImage"/></li>
        ///     <li><c>--format</c> via <see cref="DockerEngineCheckSettings.Format"/></li>
        ///     <li><c>--pre-releases</c> via <see cref="DockerEngineCheckSettings.PreReleases"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerEngineCheckSettings.Quiet"/></li>
        ///     <li><c>--registry-prefix</c> via <see cref="DockerEngineCheckSettings.RegistryPrefix"/></li>
        ///     <li><c>--upgrades</c> via <see cref="DockerEngineCheckSettings.Upgrades"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerEngineCheck(Configure<DockerEngineCheckSettings> configurator)
        {
            return DockerEngineCheck(configurator(new DockerEngineCheckSettings()));
        }
        /// <summary>
        ///   <p>Check for available engine updates.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerEngineCheckSettings.CliSettings"/></li>
        ///     <li><c>--containerd</c> via <see cref="DockerEngineCheckSettings.Containerd"/></li>
        ///     <li><c>--downgrades</c> via <see cref="DockerEngineCheckSettings.Downgrades"/></li>
        ///     <li><c>--engine-image</c> via <see cref="DockerEngineCheckSettings.EngineImage"/></li>
        ///     <li><c>--format</c> via <see cref="DockerEngineCheckSettings.Format"/></li>
        ///     <li><c>--pre-releases</c> via <see cref="DockerEngineCheckSettings.PreReleases"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerEngineCheckSettings.Quiet"/></li>
        ///     <li><c>--registry-prefix</c> via <see cref="DockerEngineCheckSettings.RegistryPrefix"/></li>
        ///     <li><c>--upgrades</c> via <see cref="DockerEngineCheckSettings.Upgrades"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerEngineCheckSettings Settings, IReadOnlyCollection<Output> Output)> DockerEngineCheck(CombinatorialConfigure<DockerEngineCheckSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerEngineCheck, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Attach local standard input, output, and error streams to a running container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerAttachSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerAttachSettings.Container"/></li>
        ///     <li><c>--detach-keys</c> via <see cref="DockerAttachSettings.DetachKeys"/></li>
        ///     <li><c>--no-stdin</c> via <see cref="DockerAttachSettings.NoStdin"/></li>
        ///     <li><c>--sig-proxy</c> via <see cref="DockerAttachSettings.SigProxy"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerAttach(DockerAttachSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerAttachSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Attach local standard input, output, and error streams to a running container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerAttachSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerAttachSettings.Container"/></li>
        ///     <li><c>--detach-keys</c> via <see cref="DockerAttachSettings.DetachKeys"/></li>
        ///     <li><c>--no-stdin</c> via <see cref="DockerAttachSettings.NoStdin"/></li>
        ///     <li><c>--sig-proxy</c> via <see cref="DockerAttachSettings.SigProxy"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerAttach(Configure<DockerAttachSettings> configurator)
        {
            return DockerAttach(configurator(new DockerAttachSettings()));
        }
        /// <summary>
        ///   <p>Attach local standard input, output, and error streams to a running container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerAttachSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerAttachSettings.Container"/></li>
        ///     <li><c>--detach-keys</c> via <see cref="DockerAttachSettings.DetachKeys"/></li>
        ///     <li><c>--no-stdin</c> via <see cref="DockerAttachSettings.NoStdin"/></li>
        ///     <li><c>--sig-proxy</c> via <see cref="DockerAttachSettings.SigProxy"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerAttachSettings Settings, IReadOnlyCollection<Output> Output)> DockerAttach(CombinatorialConfigure<DockerAttachSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerAttach, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Block until one or more containers stop, then print their exit codes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerWaitSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerWaitSettings.Containers"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerWait(DockerContainerWaitSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContainerWaitSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Block until one or more containers stop, then print their exit codes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerWaitSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerWaitSettings.Containers"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerWait(Configure<DockerContainerWaitSettings> configurator)
        {
            return DockerContainerWait(configurator(new DockerContainerWaitSettings()));
        }
        /// <summary>
        ///   <p>Block until one or more containers stop, then print their exit codes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerWaitSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerWaitSettings.Containers"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContainerWaitSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerWait(CombinatorialConfigure<DockerContainerWaitSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContainerWait, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Display and rotate the root CA.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmCaSettings.CliSettings"/></li>
        ///     <li><c>--ca-cert</c> via <see cref="DockerSwarmCaSettings.CaCert"/></li>
        ///     <li><c>--ca-key</c> via <see cref="DockerSwarmCaSettings.CaKey"/></li>
        ///     <li><c>--cert-expiry</c> via <see cref="DockerSwarmCaSettings.CertExpiry"/></li>
        ///     <li><c>--detach</c> via <see cref="DockerSwarmCaSettings.Detach"/></li>
        ///     <li><c>--external-ca</c> via <see cref="DockerSwarmCaSettings.ExternalCa"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerSwarmCaSettings.Quiet"/></li>
        ///     <li><c>--rotate</c> via <see cref="DockerSwarmCaSettings.Rotate"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSwarmCa(DockerSwarmCaSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerSwarmCaSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Display and rotate the root CA.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmCaSettings.CliSettings"/></li>
        ///     <li><c>--ca-cert</c> via <see cref="DockerSwarmCaSettings.CaCert"/></li>
        ///     <li><c>--ca-key</c> via <see cref="DockerSwarmCaSettings.CaKey"/></li>
        ///     <li><c>--cert-expiry</c> via <see cref="DockerSwarmCaSettings.CertExpiry"/></li>
        ///     <li><c>--detach</c> via <see cref="DockerSwarmCaSettings.Detach"/></li>
        ///     <li><c>--external-ca</c> via <see cref="DockerSwarmCaSettings.ExternalCa"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerSwarmCaSettings.Quiet"/></li>
        ///     <li><c>--rotate</c> via <see cref="DockerSwarmCaSettings.Rotate"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSwarmCa(Configure<DockerSwarmCaSettings> configurator)
        {
            return DockerSwarmCa(configurator(new DockerSwarmCaSettings()));
        }
        /// <summary>
        ///   <p>Display and rotate the root CA.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmCaSettings.CliSettings"/></li>
        ///     <li><c>--ca-cert</c> via <see cref="DockerSwarmCaSettings.CaCert"/></li>
        ///     <li><c>--ca-key</c> via <see cref="DockerSwarmCaSettings.CaKey"/></li>
        ///     <li><c>--cert-expiry</c> via <see cref="DockerSwarmCaSettings.CertExpiry"/></li>
        ///     <li><c>--detach</c> via <see cref="DockerSwarmCaSettings.Detach"/></li>
        ///     <li><c>--external-ca</c> via <see cref="DockerSwarmCaSettings.ExternalCa"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerSwarmCaSettings.Quiet"/></li>
        ///     <li><c>--rotate</c> via <see cref="DockerSwarmCaSettings.Rotate"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerSwarmCaSettings Settings, IReadOnlyCollection<Output> Output)> DockerSwarmCa(CombinatorialConfigure<DockerSwarmCaSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerSwarmCa, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage the docker engine.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerEngineSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerEngineSettings.Command"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerEngine(DockerEngineSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerEngineSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage the docker engine.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerEngineSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerEngineSettings.Command"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerEngine(Configure<DockerEngineSettings> configurator)
        {
            return DockerEngine(configurator(new DockerEngineSettings()));
        }
        /// <summary>
        ///   <p>Manage the docker engine.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerEngineSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerEngineSettings.Command"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerEngineSettings Settings, IReadOnlyCollection<Output> Output)> DockerEngine(CombinatorialConfigure<DockerEngineSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerEngine, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Remove unused data.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSystemPruneSettings.CliSettings"/></li>
        ///     <li><c>--all</c> via <see cref="DockerSystemPruneSettings.All"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerSystemPruneSettings.Filter"/></li>
        ///     <li><c>--force</c> via <see cref="DockerSystemPruneSettings.Force"/></li>
        ///     <li><c>--volumes</c> via <see cref="DockerSystemPruneSettings.Volumes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSystemPrune(DockerSystemPruneSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerSystemPruneSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove unused data.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSystemPruneSettings.CliSettings"/></li>
        ///     <li><c>--all</c> via <see cref="DockerSystemPruneSettings.All"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerSystemPruneSettings.Filter"/></li>
        ///     <li><c>--force</c> via <see cref="DockerSystemPruneSettings.Force"/></li>
        ///     <li><c>--volumes</c> via <see cref="DockerSystemPruneSettings.Volumes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSystemPrune(Configure<DockerSystemPruneSettings> configurator)
        {
            return DockerSystemPrune(configurator(new DockerSystemPruneSettings()));
        }
        /// <summary>
        ///   <p>Remove unused data.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSystemPruneSettings.CliSettings"/></li>
        ///     <li><c>--all</c> via <see cref="DockerSystemPruneSettings.All"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerSystemPruneSettings.Filter"/></li>
        ///     <li><c>--force</c> via <see cref="DockerSystemPruneSettings.Force"/></li>
        ///     <li><c>--volumes</c> via <see cref="DockerSystemPruneSettings.Volumes"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerSystemPruneSettings Settings, IReadOnlyCollection<Output> Output)> DockerSystemPrune(CombinatorialConfigure<DockerSystemPruneSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerSystemPrune, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage builds.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerBuilderSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerBuilder(DockerBuilderSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerBuilderSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage builds.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerBuilderSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerBuilder(Configure<DockerBuilderSettings> configurator)
        {
            return DockerBuilder(configurator(new DockerBuilderSettings()));
        }
        /// <summary>
        ///   <p>Manage builds.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerBuilderSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerBuilderSettings Settings, IReadOnlyCollection<Output> Output)> DockerBuilder(CombinatorialConfigure<DockerBuilderSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerBuilder, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Pause all processes within one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerPauseSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerPauseSettings.Containers"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerPause(DockerContainerPauseSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContainerPauseSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Pause all processes within one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerPauseSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerPauseSettings.Containers"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerPause(Configure<DockerContainerPauseSettings> configurator)
        {
            return DockerContainerPause(configurator(new DockerContainerPauseSettings()));
        }
        /// <summary>
        ///   <p>Pause all processes within one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerPauseSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerPauseSettings.Containers"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContainerPauseSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerPause(CombinatorialConfigure<DockerContainerPauseSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContainerPause, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Create a new image from a container's changes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerCommitSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerCommitSettings.Container"/></li>
        ///     <li><c>&lt;repository&gt;</c> via <see cref="DockerContainerCommitSettings.Repository"/></li>
        ///     <li><c>--author</c> via <see cref="DockerContainerCommitSettings.Author"/></li>
        ///     <li><c>--change</c> via <see cref="DockerContainerCommitSettings.Change"/></li>
        ///     <li><c>--message</c> via <see cref="DockerContainerCommitSettings.Message"/></li>
        ///     <li><c>--pause</c> via <see cref="DockerContainerCommitSettings.Pause"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerCommit(DockerContainerCommitSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContainerCommitSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Create a new image from a container's changes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerCommitSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerCommitSettings.Container"/></li>
        ///     <li><c>&lt;repository&gt;</c> via <see cref="DockerContainerCommitSettings.Repository"/></li>
        ///     <li><c>--author</c> via <see cref="DockerContainerCommitSettings.Author"/></li>
        ///     <li><c>--change</c> via <see cref="DockerContainerCommitSettings.Change"/></li>
        ///     <li><c>--message</c> via <see cref="DockerContainerCommitSettings.Message"/></li>
        ///     <li><c>--pause</c> via <see cref="DockerContainerCommitSettings.Pause"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerCommit(Configure<DockerContainerCommitSettings> configurator)
        {
            return DockerContainerCommit(configurator(new DockerContainerCommitSettings()));
        }
        /// <summary>
        ///   <p>Create a new image from a container's changes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerCommitSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerCommitSettings.Container"/></li>
        ///     <li><c>&lt;repository&gt;</c> via <see cref="DockerContainerCommitSettings.Repository"/></li>
        ///     <li><c>--author</c> via <see cref="DockerContainerCommitSettings.Author"/></li>
        ///     <li><c>--change</c> via <see cref="DockerContainerCommitSettings.Change"/></li>
        ///     <li><c>--message</c> via <see cref="DockerContainerCommitSettings.Message"/></li>
        ///     <li><c>--pause</c> via <see cref="DockerContainerCommitSettings.Pause"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContainerCommitSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerCommit(CombinatorialConfigure<DockerContainerCommitSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContainerCommit, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>List contexts.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextLsSettings.CliSettings"/></li>
        ///     <li><c>--format</c> via <see cref="DockerContextLsSettings.Format"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerContextLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContextLs(DockerContextLsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContextLsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>List contexts.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextLsSettings.CliSettings"/></li>
        ///     <li><c>--format</c> via <see cref="DockerContextLsSettings.Format"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerContextLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContextLs(Configure<DockerContextLsSettings> configurator)
        {
            return DockerContextLs(configurator(new DockerContextLsSettings()));
        }
        /// <summary>
        ///   <p>List contexts.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextLsSettings.CliSettings"/></li>
        ///     <li><c>--format</c> via <see cref="DockerContextLsSettings.Format"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerContextLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContextLsSettings Settings, IReadOnlyCollection<Output> Output)> DockerContextLs(CombinatorialConfigure<DockerContextLsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContextLs, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Remove one or more contexts.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;contexts&gt;</c> via <see cref="DockerContextRmSettings.Contexts"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContextRm(DockerContextRmSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContextRmSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove one or more contexts.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;contexts&gt;</c> via <see cref="DockerContextRmSettings.Contexts"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContextRm(Configure<DockerContextRmSettings> configurator)
        {
            return DockerContextRm(configurator(new DockerContextRmSettings()));
        }
        /// <summary>
        ///   <p>Remove one or more contexts.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;contexts&gt;</c> via <see cref="DockerContextRmSettings.Contexts"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContextRmSettings Settings, IReadOnlyCollection<Output> Output)> DockerContextRm(CombinatorialConfigure<DockerContextRmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContextRm, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>List the tasks in the stack.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStackPsSettings.CliSettings"/></li>
        ///     <li><c>&lt;stack&gt;</c> via <see cref="DockerStackPsSettings.Stack"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerStackPsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerStackPsSettings.Format"/></li>
        ///     <li><c>--namespace</c> via <see cref="DockerStackPsSettings.Namespace"/></li>
        ///     <li><c>--no-resolve</c> via <see cref="DockerStackPsSettings.NoResolve"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerStackPsSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerStackPsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerStackPs(DockerStackPsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerStackPsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>List the tasks in the stack.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStackPsSettings.CliSettings"/></li>
        ///     <li><c>&lt;stack&gt;</c> via <see cref="DockerStackPsSettings.Stack"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerStackPsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerStackPsSettings.Format"/></li>
        ///     <li><c>--namespace</c> via <see cref="DockerStackPsSettings.Namespace"/></li>
        ///     <li><c>--no-resolve</c> via <see cref="DockerStackPsSettings.NoResolve"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerStackPsSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerStackPsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerStackPs(Configure<DockerStackPsSettings> configurator)
        {
            return DockerStackPs(configurator(new DockerStackPsSettings()));
        }
        /// <summary>
        ///   <p>List the tasks in the stack.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStackPsSettings.CliSettings"/></li>
        ///     <li><c>&lt;stack&gt;</c> via <see cref="DockerStackPsSettings.Stack"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerStackPsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerStackPsSettings.Format"/></li>
        ///     <li><c>--namespace</c> via <see cref="DockerStackPsSettings.Namespace"/></li>
        ///     <li><c>--no-resolve</c> via <see cref="DockerStackPsSettings.NoResolve"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerStackPsSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerStackPsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerStackPsSettings Settings, IReadOnlyCollection<Output> Output)> DockerStackPs(CombinatorialConfigure<DockerStackPsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerStackPs, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Create a new container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;args&gt;</c> via <see cref="DockerContainerCreateSettings.Args"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerContainerCreateSettings.Command"/></li>
        ///     <li><c>&lt;image&gt;</c> via <see cref="DockerContainerCreateSettings.Image"/></li>
        ///     <li><c>--add-host</c> via <see cref="DockerContainerCreateSettings.AddHost"/></li>
        ///     <li><c>--attach</c> via <see cref="DockerContainerCreateSettings.Attach"/></li>
        ///     <li><c>--blkio-weight</c> via <see cref="DockerContainerCreateSettings.BlkioWeight"/></li>
        ///     <li><c>--blkio-weight-device</c> via <see cref="DockerContainerCreateSettings.BlkioWeightDevice"/></li>
        ///     <li><c>--cap-add</c> via <see cref="DockerContainerCreateSettings.CapAdd"/></li>
        ///     <li><c>--cap-drop</c> via <see cref="DockerContainerCreateSettings.CapDrop"/></li>
        ///     <li><c>--cgroup-parent</c> via <see cref="DockerContainerCreateSettings.CgroupParent"/></li>
        ///     <li><c>--cidfile</c> via <see cref="DockerContainerCreateSettings.Cidfile"/></li>
        ///     <li><c>--cpu-count</c> via <see cref="DockerContainerCreateSettings.CpuCount"/></li>
        ///     <li><c>--cpu-percent</c> via <see cref="DockerContainerCreateSettings.CpuPercent"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerContainerCreateSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerContainerCreateSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-rt-period</c> via <see cref="DockerContainerCreateSettings.CpuRtPeriod"/></li>
        ///     <li><c>--cpu-rt-runtime</c> via <see cref="DockerContainerCreateSettings.CpuRtRuntime"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerContainerCreateSettings.CpuShares"/></li>
        ///     <li><c>--cpus</c> via <see cref="DockerContainerCreateSettings.Cpus"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerContainerCreateSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerContainerCreateSettings.CpusetMems"/></li>
        ///     <li><c>--device</c> via <see cref="DockerContainerCreateSettings.Device"/></li>
        ///     <li><c>--device-cgroup-rule</c> via <see cref="DockerContainerCreateSettings.DeviceCgroupRule"/></li>
        ///     <li><c>--device-read-bps</c> via <see cref="DockerContainerCreateSettings.DeviceReadBps"/></li>
        ///     <li><c>--device-read-iops</c> via <see cref="DockerContainerCreateSettings.DeviceReadIops"/></li>
        ///     <li><c>--device-write-bps</c> via <see cref="DockerContainerCreateSettings.DeviceWriteBps"/></li>
        ///     <li><c>--device-write-iops</c> via <see cref="DockerContainerCreateSettings.DeviceWriteIops"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerContainerCreateSettings.DisableContentTrust"/></li>
        ///     <li><c>--dns</c> via <see cref="DockerContainerCreateSettings.Dns"/></li>
        ///     <li><c>--dns-opt</c> via <see cref="DockerContainerCreateSettings.DnsOpt"/></li>
        ///     <li><c>--dns-option</c> via <see cref="DockerContainerCreateSettings.DnsOption"/></li>
        ///     <li><c>--dns-search</c> via <see cref="DockerContainerCreateSettings.DnsSearch"/></li>
        ///     <li><c>--domainname</c> via <see cref="DockerContainerCreateSettings.Domainname"/></li>
        ///     <li><c>--entrypoint</c> via <see cref="DockerContainerCreateSettings.Entrypoint"/></li>
        ///     <li><c>--env</c> via <see cref="DockerContainerCreateSettings.Env"/></li>
        ///     <li><c>--env-file</c> via <see cref="DockerContainerCreateSettings.EnvFile"/></li>
        ///     <li><c>--expose</c> via <see cref="DockerContainerCreateSettings.Expose"/></li>
        ///     <li><c>--gpus</c> via <see cref="DockerContainerCreateSettings.Gpus"/></li>
        ///     <li><c>--group-add</c> via <see cref="DockerContainerCreateSettings.GroupAdd"/></li>
        ///     <li><c>--health-cmd</c> via <see cref="DockerContainerCreateSettings.HealthCmd"/></li>
        ///     <li><c>--health-interval</c> via <see cref="DockerContainerCreateSettings.HealthInterval"/></li>
        ///     <li><c>--health-retries</c> via <see cref="DockerContainerCreateSettings.HealthRetries"/></li>
        ///     <li><c>--health-start-period</c> via <see cref="DockerContainerCreateSettings.HealthStartPeriod"/></li>
        ///     <li><c>--health-timeout</c> via <see cref="DockerContainerCreateSettings.HealthTimeout"/></li>
        ///     <li><c>--help</c> via <see cref="DockerContainerCreateSettings.Help"/></li>
        ///     <li><c>--hostname</c> via <see cref="DockerContainerCreateSettings.Hostname"/></li>
        ///     <li><c>--init</c> via <see cref="DockerContainerCreateSettings.Init"/></li>
        ///     <li><c>--interactive</c> via <see cref="DockerContainerCreateSettings.Interactive"/></li>
        ///     <li><c>--io-maxbandwidth</c> via <see cref="DockerContainerCreateSettings.IoMaxbandwidth"/></li>
        ///     <li><c>--io-maxiops</c> via <see cref="DockerContainerCreateSettings.IoMaxiops"/></li>
        ///     <li><c>--ip</c> via <see cref="DockerContainerCreateSettings.Ip"/></li>
        ///     <li><c>--ip6</c> via <see cref="DockerContainerCreateSettings.Ip6"/></li>
        ///     <li><c>--ipc</c> via <see cref="DockerContainerCreateSettings.Ipc"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerContainerCreateSettings.Isolation"/></li>
        ///     <li><c>--kernel-memory</c> via <see cref="DockerContainerCreateSettings.KernelMemory"/></li>
        ///     <li><c>--label</c> via <see cref="DockerContainerCreateSettings.Label"/></li>
        ///     <li><c>--label-file</c> via <see cref="DockerContainerCreateSettings.LabelFile"/></li>
        ///     <li><c>--link</c> via <see cref="DockerContainerCreateSettings.Link"/></li>
        ///     <li><c>--link-local-ip</c> via <see cref="DockerContainerCreateSettings.LinkLocalIp"/></li>
        ///     <li><c>--log-driver</c> via <see cref="DockerContainerCreateSettings.LogDriver"/></li>
        ///     <li><c>--log-opt</c> via <see cref="DockerContainerCreateSettings.LogOpt"/></li>
        ///     <li><c>--mac-address</c> via <see cref="DockerContainerCreateSettings.MacAddress"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerContainerCreateSettings.Memory"/></li>
        ///     <li><c>--memory-reservation</c> via <see cref="DockerContainerCreateSettings.MemoryReservation"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerContainerCreateSettings.MemorySwap"/></li>
        ///     <li><c>--memory-swappiness</c> via <see cref="DockerContainerCreateSettings.MemorySwappiness"/></li>
        ///     <li><c>--mount</c> via <see cref="DockerContainerCreateSettings.Mount"/></li>
        ///     <li><c>--name</c> via <see cref="DockerContainerCreateSettings.Name"/></li>
        ///     <li><c>--net</c> via <see cref="DockerContainerCreateSettings.Net"/></li>
        ///     <li><c>--net-alias</c> via <see cref="DockerContainerCreateSettings.NetAlias"/></li>
        ///     <li><c>--network</c> via <see cref="DockerContainerCreateSettings.Network"/></li>
        ///     <li><c>--network-alias</c> via <see cref="DockerContainerCreateSettings.NetworkAlias"/></li>
        ///     <li><c>--no-healthcheck</c> via <see cref="DockerContainerCreateSettings.NoHealthcheck"/></li>
        ///     <li><c>--oom-kill-disable</c> via <see cref="DockerContainerCreateSettings.OomKillDisable"/></li>
        ///     <li><c>--oom-score-adj</c> via <see cref="DockerContainerCreateSettings.OomScoreAdj"/></li>
        ///     <li><c>--pid</c> via <see cref="DockerContainerCreateSettings.Pid"/></li>
        ///     <li><c>--pids-limit</c> via <see cref="DockerContainerCreateSettings.PidsLimit"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerContainerCreateSettings.Platform"/></li>
        ///     <li><c>--privileged</c> via <see cref="DockerContainerCreateSettings.Privileged"/></li>
        ///     <li><c>--publish</c> via <see cref="DockerContainerCreateSettings.Publish"/></li>
        ///     <li><c>--publish-all</c> via <see cref="DockerContainerCreateSettings.PublishAll"/></li>
        ///     <li><c>--read-only</c> via <see cref="DockerContainerCreateSettings.ReadOnly"/></li>
        ///     <li><c>--restart</c> via <see cref="DockerContainerCreateSettings.Restart"/></li>
        ///     <li><c>--rm</c> via <see cref="DockerContainerCreateSettings.Rm"/></li>
        ///     <li><c>--runtime</c> via <see cref="DockerContainerCreateSettings.Runtime"/></li>
        ///     <li><c>--security-opt</c> via <see cref="DockerContainerCreateSettings.SecurityOpt"/></li>
        ///     <li><c>--shm-size</c> via <see cref="DockerContainerCreateSettings.ShmSize"/></li>
        ///     <li><c>--stop-signal</c> via <see cref="DockerContainerCreateSettings.StopSignal"/></li>
        ///     <li><c>--stop-timeout</c> via <see cref="DockerContainerCreateSettings.StopTimeout"/></li>
        ///     <li><c>--storage-opt</c> via <see cref="DockerContainerCreateSettings.StorageOpt"/></li>
        ///     <li><c>--sysctl</c> via <see cref="DockerContainerCreateSettings.Sysctl"/></li>
        ///     <li><c>--tmpfs</c> via <see cref="DockerContainerCreateSettings.Tmpfs"/></li>
        ///     <li><c>--tty</c> via <see cref="DockerContainerCreateSettings.Tty"/></li>
        ///     <li><c>--ulimit</c> via <see cref="DockerContainerCreateSettings.Ulimit"/></li>
        ///     <li><c>--user</c> via <see cref="DockerContainerCreateSettings.User"/></li>
        ///     <li><c>--userns</c> via <see cref="DockerContainerCreateSettings.Userns"/></li>
        ///     <li><c>--uts</c> via <see cref="DockerContainerCreateSettings.Uts"/></li>
        ///     <li><c>--volume</c> via <see cref="DockerContainerCreateSettings.Volume"/></li>
        ///     <li><c>--volume-driver</c> via <see cref="DockerContainerCreateSettings.VolumeDriver"/></li>
        ///     <li><c>--volumes-from</c> via <see cref="DockerContainerCreateSettings.VolumesFrom"/></li>
        ///     <li><c>--workdir</c> via <see cref="DockerContainerCreateSettings.Workdir"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerCreate(DockerContainerCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContainerCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Create a new container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;args&gt;</c> via <see cref="DockerContainerCreateSettings.Args"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerContainerCreateSettings.Command"/></li>
        ///     <li><c>&lt;image&gt;</c> via <see cref="DockerContainerCreateSettings.Image"/></li>
        ///     <li><c>--add-host</c> via <see cref="DockerContainerCreateSettings.AddHost"/></li>
        ///     <li><c>--attach</c> via <see cref="DockerContainerCreateSettings.Attach"/></li>
        ///     <li><c>--blkio-weight</c> via <see cref="DockerContainerCreateSettings.BlkioWeight"/></li>
        ///     <li><c>--blkio-weight-device</c> via <see cref="DockerContainerCreateSettings.BlkioWeightDevice"/></li>
        ///     <li><c>--cap-add</c> via <see cref="DockerContainerCreateSettings.CapAdd"/></li>
        ///     <li><c>--cap-drop</c> via <see cref="DockerContainerCreateSettings.CapDrop"/></li>
        ///     <li><c>--cgroup-parent</c> via <see cref="DockerContainerCreateSettings.CgroupParent"/></li>
        ///     <li><c>--cidfile</c> via <see cref="DockerContainerCreateSettings.Cidfile"/></li>
        ///     <li><c>--cpu-count</c> via <see cref="DockerContainerCreateSettings.CpuCount"/></li>
        ///     <li><c>--cpu-percent</c> via <see cref="DockerContainerCreateSettings.CpuPercent"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerContainerCreateSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerContainerCreateSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-rt-period</c> via <see cref="DockerContainerCreateSettings.CpuRtPeriod"/></li>
        ///     <li><c>--cpu-rt-runtime</c> via <see cref="DockerContainerCreateSettings.CpuRtRuntime"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerContainerCreateSettings.CpuShares"/></li>
        ///     <li><c>--cpus</c> via <see cref="DockerContainerCreateSettings.Cpus"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerContainerCreateSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerContainerCreateSettings.CpusetMems"/></li>
        ///     <li><c>--device</c> via <see cref="DockerContainerCreateSettings.Device"/></li>
        ///     <li><c>--device-cgroup-rule</c> via <see cref="DockerContainerCreateSettings.DeviceCgroupRule"/></li>
        ///     <li><c>--device-read-bps</c> via <see cref="DockerContainerCreateSettings.DeviceReadBps"/></li>
        ///     <li><c>--device-read-iops</c> via <see cref="DockerContainerCreateSettings.DeviceReadIops"/></li>
        ///     <li><c>--device-write-bps</c> via <see cref="DockerContainerCreateSettings.DeviceWriteBps"/></li>
        ///     <li><c>--device-write-iops</c> via <see cref="DockerContainerCreateSettings.DeviceWriteIops"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerContainerCreateSettings.DisableContentTrust"/></li>
        ///     <li><c>--dns</c> via <see cref="DockerContainerCreateSettings.Dns"/></li>
        ///     <li><c>--dns-opt</c> via <see cref="DockerContainerCreateSettings.DnsOpt"/></li>
        ///     <li><c>--dns-option</c> via <see cref="DockerContainerCreateSettings.DnsOption"/></li>
        ///     <li><c>--dns-search</c> via <see cref="DockerContainerCreateSettings.DnsSearch"/></li>
        ///     <li><c>--domainname</c> via <see cref="DockerContainerCreateSettings.Domainname"/></li>
        ///     <li><c>--entrypoint</c> via <see cref="DockerContainerCreateSettings.Entrypoint"/></li>
        ///     <li><c>--env</c> via <see cref="DockerContainerCreateSettings.Env"/></li>
        ///     <li><c>--env-file</c> via <see cref="DockerContainerCreateSettings.EnvFile"/></li>
        ///     <li><c>--expose</c> via <see cref="DockerContainerCreateSettings.Expose"/></li>
        ///     <li><c>--gpus</c> via <see cref="DockerContainerCreateSettings.Gpus"/></li>
        ///     <li><c>--group-add</c> via <see cref="DockerContainerCreateSettings.GroupAdd"/></li>
        ///     <li><c>--health-cmd</c> via <see cref="DockerContainerCreateSettings.HealthCmd"/></li>
        ///     <li><c>--health-interval</c> via <see cref="DockerContainerCreateSettings.HealthInterval"/></li>
        ///     <li><c>--health-retries</c> via <see cref="DockerContainerCreateSettings.HealthRetries"/></li>
        ///     <li><c>--health-start-period</c> via <see cref="DockerContainerCreateSettings.HealthStartPeriod"/></li>
        ///     <li><c>--health-timeout</c> via <see cref="DockerContainerCreateSettings.HealthTimeout"/></li>
        ///     <li><c>--help</c> via <see cref="DockerContainerCreateSettings.Help"/></li>
        ///     <li><c>--hostname</c> via <see cref="DockerContainerCreateSettings.Hostname"/></li>
        ///     <li><c>--init</c> via <see cref="DockerContainerCreateSettings.Init"/></li>
        ///     <li><c>--interactive</c> via <see cref="DockerContainerCreateSettings.Interactive"/></li>
        ///     <li><c>--io-maxbandwidth</c> via <see cref="DockerContainerCreateSettings.IoMaxbandwidth"/></li>
        ///     <li><c>--io-maxiops</c> via <see cref="DockerContainerCreateSettings.IoMaxiops"/></li>
        ///     <li><c>--ip</c> via <see cref="DockerContainerCreateSettings.Ip"/></li>
        ///     <li><c>--ip6</c> via <see cref="DockerContainerCreateSettings.Ip6"/></li>
        ///     <li><c>--ipc</c> via <see cref="DockerContainerCreateSettings.Ipc"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerContainerCreateSettings.Isolation"/></li>
        ///     <li><c>--kernel-memory</c> via <see cref="DockerContainerCreateSettings.KernelMemory"/></li>
        ///     <li><c>--label</c> via <see cref="DockerContainerCreateSettings.Label"/></li>
        ///     <li><c>--label-file</c> via <see cref="DockerContainerCreateSettings.LabelFile"/></li>
        ///     <li><c>--link</c> via <see cref="DockerContainerCreateSettings.Link"/></li>
        ///     <li><c>--link-local-ip</c> via <see cref="DockerContainerCreateSettings.LinkLocalIp"/></li>
        ///     <li><c>--log-driver</c> via <see cref="DockerContainerCreateSettings.LogDriver"/></li>
        ///     <li><c>--log-opt</c> via <see cref="DockerContainerCreateSettings.LogOpt"/></li>
        ///     <li><c>--mac-address</c> via <see cref="DockerContainerCreateSettings.MacAddress"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerContainerCreateSettings.Memory"/></li>
        ///     <li><c>--memory-reservation</c> via <see cref="DockerContainerCreateSettings.MemoryReservation"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerContainerCreateSettings.MemorySwap"/></li>
        ///     <li><c>--memory-swappiness</c> via <see cref="DockerContainerCreateSettings.MemorySwappiness"/></li>
        ///     <li><c>--mount</c> via <see cref="DockerContainerCreateSettings.Mount"/></li>
        ///     <li><c>--name</c> via <see cref="DockerContainerCreateSettings.Name"/></li>
        ///     <li><c>--net</c> via <see cref="DockerContainerCreateSettings.Net"/></li>
        ///     <li><c>--net-alias</c> via <see cref="DockerContainerCreateSettings.NetAlias"/></li>
        ///     <li><c>--network</c> via <see cref="DockerContainerCreateSettings.Network"/></li>
        ///     <li><c>--network-alias</c> via <see cref="DockerContainerCreateSettings.NetworkAlias"/></li>
        ///     <li><c>--no-healthcheck</c> via <see cref="DockerContainerCreateSettings.NoHealthcheck"/></li>
        ///     <li><c>--oom-kill-disable</c> via <see cref="DockerContainerCreateSettings.OomKillDisable"/></li>
        ///     <li><c>--oom-score-adj</c> via <see cref="DockerContainerCreateSettings.OomScoreAdj"/></li>
        ///     <li><c>--pid</c> via <see cref="DockerContainerCreateSettings.Pid"/></li>
        ///     <li><c>--pids-limit</c> via <see cref="DockerContainerCreateSettings.PidsLimit"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerContainerCreateSettings.Platform"/></li>
        ///     <li><c>--privileged</c> via <see cref="DockerContainerCreateSettings.Privileged"/></li>
        ///     <li><c>--publish</c> via <see cref="DockerContainerCreateSettings.Publish"/></li>
        ///     <li><c>--publish-all</c> via <see cref="DockerContainerCreateSettings.PublishAll"/></li>
        ///     <li><c>--read-only</c> via <see cref="DockerContainerCreateSettings.ReadOnly"/></li>
        ///     <li><c>--restart</c> via <see cref="DockerContainerCreateSettings.Restart"/></li>
        ///     <li><c>--rm</c> via <see cref="DockerContainerCreateSettings.Rm"/></li>
        ///     <li><c>--runtime</c> via <see cref="DockerContainerCreateSettings.Runtime"/></li>
        ///     <li><c>--security-opt</c> via <see cref="DockerContainerCreateSettings.SecurityOpt"/></li>
        ///     <li><c>--shm-size</c> via <see cref="DockerContainerCreateSettings.ShmSize"/></li>
        ///     <li><c>--stop-signal</c> via <see cref="DockerContainerCreateSettings.StopSignal"/></li>
        ///     <li><c>--stop-timeout</c> via <see cref="DockerContainerCreateSettings.StopTimeout"/></li>
        ///     <li><c>--storage-opt</c> via <see cref="DockerContainerCreateSettings.StorageOpt"/></li>
        ///     <li><c>--sysctl</c> via <see cref="DockerContainerCreateSettings.Sysctl"/></li>
        ///     <li><c>--tmpfs</c> via <see cref="DockerContainerCreateSettings.Tmpfs"/></li>
        ///     <li><c>--tty</c> via <see cref="DockerContainerCreateSettings.Tty"/></li>
        ///     <li><c>--ulimit</c> via <see cref="DockerContainerCreateSettings.Ulimit"/></li>
        ///     <li><c>--user</c> via <see cref="DockerContainerCreateSettings.User"/></li>
        ///     <li><c>--userns</c> via <see cref="DockerContainerCreateSettings.Userns"/></li>
        ///     <li><c>--uts</c> via <see cref="DockerContainerCreateSettings.Uts"/></li>
        ///     <li><c>--volume</c> via <see cref="DockerContainerCreateSettings.Volume"/></li>
        ///     <li><c>--volume-driver</c> via <see cref="DockerContainerCreateSettings.VolumeDriver"/></li>
        ///     <li><c>--volumes-from</c> via <see cref="DockerContainerCreateSettings.VolumesFrom"/></li>
        ///     <li><c>--workdir</c> via <see cref="DockerContainerCreateSettings.Workdir"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerCreate(Configure<DockerContainerCreateSettings> configurator)
        {
            return DockerContainerCreate(configurator(new DockerContainerCreateSettings()));
        }
        /// <summary>
        ///   <p>Create a new container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;args&gt;</c> via <see cref="DockerContainerCreateSettings.Args"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerContainerCreateSettings.Command"/></li>
        ///     <li><c>&lt;image&gt;</c> via <see cref="DockerContainerCreateSettings.Image"/></li>
        ///     <li><c>--add-host</c> via <see cref="DockerContainerCreateSettings.AddHost"/></li>
        ///     <li><c>--attach</c> via <see cref="DockerContainerCreateSettings.Attach"/></li>
        ///     <li><c>--blkio-weight</c> via <see cref="DockerContainerCreateSettings.BlkioWeight"/></li>
        ///     <li><c>--blkio-weight-device</c> via <see cref="DockerContainerCreateSettings.BlkioWeightDevice"/></li>
        ///     <li><c>--cap-add</c> via <see cref="DockerContainerCreateSettings.CapAdd"/></li>
        ///     <li><c>--cap-drop</c> via <see cref="DockerContainerCreateSettings.CapDrop"/></li>
        ///     <li><c>--cgroup-parent</c> via <see cref="DockerContainerCreateSettings.CgroupParent"/></li>
        ///     <li><c>--cidfile</c> via <see cref="DockerContainerCreateSettings.Cidfile"/></li>
        ///     <li><c>--cpu-count</c> via <see cref="DockerContainerCreateSettings.CpuCount"/></li>
        ///     <li><c>--cpu-percent</c> via <see cref="DockerContainerCreateSettings.CpuPercent"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerContainerCreateSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerContainerCreateSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-rt-period</c> via <see cref="DockerContainerCreateSettings.CpuRtPeriod"/></li>
        ///     <li><c>--cpu-rt-runtime</c> via <see cref="DockerContainerCreateSettings.CpuRtRuntime"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerContainerCreateSettings.CpuShares"/></li>
        ///     <li><c>--cpus</c> via <see cref="DockerContainerCreateSettings.Cpus"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerContainerCreateSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerContainerCreateSettings.CpusetMems"/></li>
        ///     <li><c>--device</c> via <see cref="DockerContainerCreateSettings.Device"/></li>
        ///     <li><c>--device-cgroup-rule</c> via <see cref="DockerContainerCreateSettings.DeviceCgroupRule"/></li>
        ///     <li><c>--device-read-bps</c> via <see cref="DockerContainerCreateSettings.DeviceReadBps"/></li>
        ///     <li><c>--device-read-iops</c> via <see cref="DockerContainerCreateSettings.DeviceReadIops"/></li>
        ///     <li><c>--device-write-bps</c> via <see cref="DockerContainerCreateSettings.DeviceWriteBps"/></li>
        ///     <li><c>--device-write-iops</c> via <see cref="DockerContainerCreateSettings.DeviceWriteIops"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerContainerCreateSettings.DisableContentTrust"/></li>
        ///     <li><c>--dns</c> via <see cref="DockerContainerCreateSettings.Dns"/></li>
        ///     <li><c>--dns-opt</c> via <see cref="DockerContainerCreateSettings.DnsOpt"/></li>
        ///     <li><c>--dns-option</c> via <see cref="DockerContainerCreateSettings.DnsOption"/></li>
        ///     <li><c>--dns-search</c> via <see cref="DockerContainerCreateSettings.DnsSearch"/></li>
        ///     <li><c>--domainname</c> via <see cref="DockerContainerCreateSettings.Domainname"/></li>
        ///     <li><c>--entrypoint</c> via <see cref="DockerContainerCreateSettings.Entrypoint"/></li>
        ///     <li><c>--env</c> via <see cref="DockerContainerCreateSettings.Env"/></li>
        ///     <li><c>--env-file</c> via <see cref="DockerContainerCreateSettings.EnvFile"/></li>
        ///     <li><c>--expose</c> via <see cref="DockerContainerCreateSettings.Expose"/></li>
        ///     <li><c>--gpus</c> via <see cref="DockerContainerCreateSettings.Gpus"/></li>
        ///     <li><c>--group-add</c> via <see cref="DockerContainerCreateSettings.GroupAdd"/></li>
        ///     <li><c>--health-cmd</c> via <see cref="DockerContainerCreateSettings.HealthCmd"/></li>
        ///     <li><c>--health-interval</c> via <see cref="DockerContainerCreateSettings.HealthInterval"/></li>
        ///     <li><c>--health-retries</c> via <see cref="DockerContainerCreateSettings.HealthRetries"/></li>
        ///     <li><c>--health-start-period</c> via <see cref="DockerContainerCreateSettings.HealthStartPeriod"/></li>
        ///     <li><c>--health-timeout</c> via <see cref="DockerContainerCreateSettings.HealthTimeout"/></li>
        ///     <li><c>--help</c> via <see cref="DockerContainerCreateSettings.Help"/></li>
        ///     <li><c>--hostname</c> via <see cref="DockerContainerCreateSettings.Hostname"/></li>
        ///     <li><c>--init</c> via <see cref="DockerContainerCreateSettings.Init"/></li>
        ///     <li><c>--interactive</c> via <see cref="DockerContainerCreateSettings.Interactive"/></li>
        ///     <li><c>--io-maxbandwidth</c> via <see cref="DockerContainerCreateSettings.IoMaxbandwidth"/></li>
        ///     <li><c>--io-maxiops</c> via <see cref="DockerContainerCreateSettings.IoMaxiops"/></li>
        ///     <li><c>--ip</c> via <see cref="DockerContainerCreateSettings.Ip"/></li>
        ///     <li><c>--ip6</c> via <see cref="DockerContainerCreateSettings.Ip6"/></li>
        ///     <li><c>--ipc</c> via <see cref="DockerContainerCreateSettings.Ipc"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerContainerCreateSettings.Isolation"/></li>
        ///     <li><c>--kernel-memory</c> via <see cref="DockerContainerCreateSettings.KernelMemory"/></li>
        ///     <li><c>--label</c> via <see cref="DockerContainerCreateSettings.Label"/></li>
        ///     <li><c>--label-file</c> via <see cref="DockerContainerCreateSettings.LabelFile"/></li>
        ///     <li><c>--link</c> via <see cref="DockerContainerCreateSettings.Link"/></li>
        ///     <li><c>--link-local-ip</c> via <see cref="DockerContainerCreateSettings.LinkLocalIp"/></li>
        ///     <li><c>--log-driver</c> via <see cref="DockerContainerCreateSettings.LogDriver"/></li>
        ///     <li><c>--log-opt</c> via <see cref="DockerContainerCreateSettings.LogOpt"/></li>
        ///     <li><c>--mac-address</c> via <see cref="DockerContainerCreateSettings.MacAddress"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerContainerCreateSettings.Memory"/></li>
        ///     <li><c>--memory-reservation</c> via <see cref="DockerContainerCreateSettings.MemoryReservation"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerContainerCreateSettings.MemorySwap"/></li>
        ///     <li><c>--memory-swappiness</c> via <see cref="DockerContainerCreateSettings.MemorySwappiness"/></li>
        ///     <li><c>--mount</c> via <see cref="DockerContainerCreateSettings.Mount"/></li>
        ///     <li><c>--name</c> via <see cref="DockerContainerCreateSettings.Name"/></li>
        ///     <li><c>--net</c> via <see cref="DockerContainerCreateSettings.Net"/></li>
        ///     <li><c>--net-alias</c> via <see cref="DockerContainerCreateSettings.NetAlias"/></li>
        ///     <li><c>--network</c> via <see cref="DockerContainerCreateSettings.Network"/></li>
        ///     <li><c>--network-alias</c> via <see cref="DockerContainerCreateSettings.NetworkAlias"/></li>
        ///     <li><c>--no-healthcheck</c> via <see cref="DockerContainerCreateSettings.NoHealthcheck"/></li>
        ///     <li><c>--oom-kill-disable</c> via <see cref="DockerContainerCreateSettings.OomKillDisable"/></li>
        ///     <li><c>--oom-score-adj</c> via <see cref="DockerContainerCreateSettings.OomScoreAdj"/></li>
        ///     <li><c>--pid</c> via <see cref="DockerContainerCreateSettings.Pid"/></li>
        ///     <li><c>--pids-limit</c> via <see cref="DockerContainerCreateSettings.PidsLimit"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerContainerCreateSettings.Platform"/></li>
        ///     <li><c>--privileged</c> via <see cref="DockerContainerCreateSettings.Privileged"/></li>
        ///     <li><c>--publish</c> via <see cref="DockerContainerCreateSettings.Publish"/></li>
        ///     <li><c>--publish-all</c> via <see cref="DockerContainerCreateSettings.PublishAll"/></li>
        ///     <li><c>--read-only</c> via <see cref="DockerContainerCreateSettings.ReadOnly"/></li>
        ///     <li><c>--restart</c> via <see cref="DockerContainerCreateSettings.Restart"/></li>
        ///     <li><c>--rm</c> via <see cref="DockerContainerCreateSettings.Rm"/></li>
        ///     <li><c>--runtime</c> via <see cref="DockerContainerCreateSettings.Runtime"/></li>
        ///     <li><c>--security-opt</c> via <see cref="DockerContainerCreateSettings.SecurityOpt"/></li>
        ///     <li><c>--shm-size</c> via <see cref="DockerContainerCreateSettings.ShmSize"/></li>
        ///     <li><c>--stop-signal</c> via <see cref="DockerContainerCreateSettings.StopSignal"/></li>
        ///     <li><c>--stop-timeout</c> via <see cref="DockerContainerCreateSettings.StopTimeout"/></li>
        ///     <li><c>--storage-opt</c> via <see cref="DockerContainerCreateSettings.StorageOpt"/></li>
        ///     <li><c>--sysctl</c> via <see cref="DockerContainerCreateSettings.Sysctl"/></li>
        ///     <li><c>--tmpfs</c> via <see cref="DockerContainerCreateSettings.Tmpfs"/></li>
        ///     <li><c>--tty</c> via <see cref="DockerContainerCreateSettings.Tty"/></li>
        ///     <li><c>--ulimit</c> via <see cref="DockerContainerCreateSettings.Ulimit"/></li>
        ///     <li><c>--user</c> via <see cref="DockerContainerCreateSettings.User"/></li>
        ///     <li><c>--userns</c> via <see cref="DockerContainerCreateSettings.Userns"/></li>
        ///     <li><c>--uts</c> via <see cref="DockerContainerCreateSettings.Uts"/></li>
        ///     <li><c>--volume</c> via <see cref="DockerContainerCreateSettings.Volume"/></li>
        ///     <li><c>--volume-driver</c> via <see cref="DockerContainerCreateSettings.VolumeDriver"/></li>
        ///     <li><c>--volumes-from</c> via <see cref="DockerContainerCreateSettings.VolumesFrom"/></li>
        ///     <li><c>--workdir</c> via <see cref="DockerContainerCreateSettings.Workdir"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContainerCreateSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerCreate(CombinatorialConfigure<DockerContainerCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContainerCreate, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Create a volume.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerVolumeCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;volume&gt;</c> via <see cref="DockerVolumeCreateSettings.Volume"/></li>
        ///     <li><c>--driver</c> via <see cref="DockerVolumeCreateSettings.Driver"/></li>
        ///     <li><c>--label</c> via <see cref="DockerVolumeCreateSettings.Label"/></li>
        ///     <li><c>--name</c> via <see cref="DockerVolumeCreateSettings.Name"/></li>
        ///     <li><c>--opt</c> via <see cref="DockerVolumeCreateSettings.Opt"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerVolumeCreate(DockerVolumeCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerVolumeCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Create a volume.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerVolumeCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;volume&gt;</c> via <see cref="DockerVolumeCreateSettings.Volume"/></li>
        ///     <li><c>--driver</c> via <see cref="DockerVolumeCreateSettings.Driver"/></li>
        ///     <li><c>--label</c> via <see cref="DockerVolumeCreateSettings.Label"/></li>
        ///     <li><c>--name</c> via <see cref="DockerVolumeCreateSettings.Name"/></li>
        ///     <li><c>--opt</c> via <see cref="DockerVolumeCreateSettings.Opt"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerVolumeCreate(Configure<DockerVolumeCreateSettings> configurator)
        {
            return DockerVolumeCreate(configurator(new DockerVolumeCreateSettings()));
        }
        /// <summary>
        ///   <p>Create a volume.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerVolumeCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;volume&gt;</c> via <see cref="DockerVolumeCreateSettings.Volume"/></li>
        ///     <li><c>--driver</c> via <see cref="DockerVolumeCreateSettings.Driver"/></li>
        ///     <li><c>--label</c> via <see cref="DockerVolumeCreateSettings.Label"/></li>
        ///     <li><c>--name</c> via <see cref="DockerVolumeCreateSettings.Name"/></li>
        ///     <li><c>--opt</c> via <see cref="DockerVolumeCreateSettings.Opt"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerVolumeCreateSettings Settings, IReadOnlyCollection<Output> Output)> DockerVolumeCreate(CombinatorialConfigure<DockerVolumeCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerVolumeCreate, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage plugins.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPlugin(DockerPluginSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerPluginSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage plugins.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPlugin(Configure<DockerPluginSettings> configurator)
        {
            return DockerPlugin(configurator(new DockerPluginSettings()));
        }
        /// <summary>
        ///   <p>Manage plugins.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerPluginSettings Settings, IReadOnlyCollection<Output> Output)> DockerPlugin(CombinatorialConfigure<DockerPluginSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerPlugin, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Log in to a Docker registry.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerLoginSettings.CliSettings"/></li>
        ///     <li><c>&lt;server&gt;</c> via <see cref="DockerLoginSettings.Server"/></li>
        ///     <li><c>--password</c> via <see cref="DockerLoginSettings.Password"/></li>
        ///     <li><c>--username</c> via <see cref="DockerLoginSettings.Username"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerLogin(DockerLoginSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerLoginSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Log in to a Docker registry.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerLoginSettings.CliSettings"/></li>
        ///     <li><c>&lt;server&gt;</c> via <see cref="DockerLoginSettings.Server"/></li>
        ///     <li><c>--password</c> via <see cref="DockerLoginSettings.Password"/></li>
        ///     <li><c>--username</c> via <see cref="DockerLoginSettings.Username"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerLogin(Configure<DockerLoginSettings> configurator)
        {
            return DockerLogin(configurator(new DockerLoginSettings()));
        }
        /// <summary>
        ///   <p>Log in to a Docker registry.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerLoginSettings.CliSettings"/></li>
        ///     <li><c>&lt;server&gt;</c> via <see cref="DockerLoginSettings.Server"/></li>
        ///     <li><c>--password</c> via <see cref="DockerLoginSettings.Password"/></li>
        ///     <li><c>--username</c> via <see cref="DockerLoginSettings.Username"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerLoginSettings Settings, IReadOnlyCollection<Output> Output)> DockerLogin(CombinatorialConfigure<DockerLoginSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerLogin, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage the unlock key.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmUnlockKeySettings.CliSettings"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerSwarmUnlockKeySettings.Quiet"/></li>
        ///     <li><c>--rotate</c> via <see cref="DockerSwarmUnlockKeySettings.Rotate"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSwarmUnlockKey(DockerSwarmUnlockKeySettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerSwarmUnlockKeySettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage the unlock key.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmUnlockKeySettings.CliSettings"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerSwarmUnlockKeySettings.Quiet"/></li>
        ///     <li><c>--rotate</c> via <see cref="DockerSwarmUnlockKeySettings.Rotate"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSwarmUnlockKey(Configure<DockerSwarmUnlockKeySettings> configurator)
        {
            return DockerSwarmUnlockKey(configurator(new DockerSwarmUnlockKeySettings()));
        }
        /// <summary>
        ///   <p>Manage the unlock key.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmUnlockKeySettings.CliSettings"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerSwarmUnlockKeySettings.Quiet"/></li>
        ///     <li><c>--rotate</c> via <see cref="DockerSwarmUnlockKeySettings.Rotate"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerSwarmUnlockKeySettings Settings, IReadOnlyCollection<Output> Output)> DockerSwarmUnlockKey(CombinatorialConfigure<DockerSwarmUnlockKeySettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerSwarmUnlockKey, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Start one or more stopped containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStartSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerStartSettings.Containers"/></li>
        ///     <li><c>--attach</c> via <see cref="DockerStartSettings.Attach"/></li>
        ///     <li><c>--checkpoint</c> via <see cref="DockerStartSettings.Checkpoint"/></li>
        ///     <li><c>--checkpoint-dir</c> via <see cref="DockerStartSettings.CheckpointDir"/></li>
        ///     <li><c>--detach-keys</c> via <see cref="DockerStartSettings.DetachKeys"/></li>
        ///     <li><c>--interactive</c> via <see cref="DockerStartSettings.Interactive"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerStart(DockerStartSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerStartSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Start one or more stopped containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStartSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerStartSettings.Containers"/></li>
        ///     <li><c>--attach</c> via <see cref="DockerStartSettings.Attach"/></li>
        ///     <li><c>--checkpoint</c> via <see cref="DockerStartSettings.Checkpoint"/></li>
        ///     <li><c>--checkpoint-dir</c> via <see cref="DockerStartSettings.CheckpointDir"/></li>
        ///     <li><c>--detach-keys</c> via <see cref="DockerStartSettings.DetachKeys"/></li>
        ///     <li><c>--interactive</c> via <see cref="DockerStartSettings.Interactive"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerStart(Configure<DockerStartSettings> configurator)
        {
            return DockerStart(configurator(new DockerStartSettings()));
        }
        /// <summary>
        ///   <p>Start one or more stopped containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStartSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerStartSettings.Containers"/></li>
        ///     <li><c>--attach</c> via <see cref="DockerStartSettings.Attach"/></li>
        ///     <li><c>--checkpoint</c> via <see cref="DockerStartSettings.Checkpoint"/></li>
        ///     <li><c>--checkpoint-dir</c> via <see cref="DockerStartSettings.CheckpointDir"/></li>
        ///     <li><c>--detach-keys</c> via <see cref="DockerStartSettings.DetachKeys"/></li>
        ///     <li><c>--interactive</c> via <see cref="DockerStartSettings.Interactive"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerStartSettings Settings, IReadOnlyCollection<Output> Output)> DockerStart(CombinatorialConfigure<DockerStartSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerStart, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Initialize a swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmInitSettings.CliSettings"/></li>
        ///     <li><c>--advertise-addr</c> via <see cref="DockerSwarmInitSettings.AdvertiseAddr"/></li>
        ///     <li><c>--autolock</c> via <see cref="DockerSwarmInitSettings.Autolock"/></li>
        ///     <li><c>--availability</c> via <see cref="DockerSwarmInitSettings.Availability"/></li>
        ///     <li><c>--cert-expiry</c> via <see cref="DockerSwarmInitSettings.CertExpiry"/></li>
        ///     <li><c>--data-path-addr</c> via <see cref="DockerSwarmInitSettings.DataPathAddr"/></li>
        ///     <li><c>--data-path-port</c> via <see cref="DockerSwarmInitSettings.DataPathPort"/></li>
        ///     <li><c>--default-addr-pool</c> via <see cref="DockerSwarmInitSettings.DefaultAddrPool"/></li>
        ///     <li><c>--default-addr-pool-mask-length</c> via <see cref="DockerSwarmInitSettings.DefaultAddrPoolMaskLength"/></li>
        ///     <li><c>--dispatcher-heartbeat</c> via <see cref="DockerSwarmInitSettings.DispatcherHeartbeat"/></li>
        ///     <li><c>--external-ca</c> via <see cref="DockerSwarmInitSettings.ExternalCa"/></li>
        ///     <li><c>--force-new-cluster</c> via <see cref="DockerSwarmInitSettings.ForceNewCluster"/></li>
        ///     <li><c>--listen-addr</c> via <see cref="DockerSwarmInitSettings.ListenAddr"/></li>
        ///     <li><c>--max-snapshots</c> via <see cref="DockerSwarmInitSettings.MaxSnapshots"/></li>
        ///     <li><c>--snapshot-interval</c> via <see cref="DockerSwarmInitSettings.SnapshotInterval"/></li>
        ///     <li><c>--task-history-limit</c> via <see cref="DockerSwarmInitSettings.TaskHistoryLimit"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSwarmInit(DockerSwarmInitSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerSwarmInitSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Initialize a swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmInitSettings.CliSettings"/></li>
        ///     <li><c>--advertise-addr</c> via <see cref="DockerSwarmInitSettings.AdvertiseAddr"/></li>
        ///     <li><c>--autolock</c> via <see cref="DockerSwarmInitSettings.Autolock"/></li>
        ///     <li><c>--availability</c> via <see cref="DockerSwarmInitSettings.Availability"/></li>
        ///     <li><c>--cert-expiry</c> via <see cref="DockerSwarmInitSettings.CertExpiry"/></li>
        ///     <li><c>--data-path-addr</c> via <see cref="DockerSwarmInitSettings.DataPathAddr"/></li>
        ///     <li><c>--data-path-port</c> via <see cref="DockerSwarmInitSettings.DataPathPort"/></li>
        ///     <li><c>--default-addr-pool</c> via <see cref="DockerSwarmInitSettings.DefaultAddrPool"/></li>
        ///     <li><c>--default-addr-pool-mask-length</c> via <see cref="DockerSwarmInitSettings.DefaultAddrPoolMaskLength"/></li>
        ///     <li><c>--dispatcher-heartbeat</c> via <see cref="DockerSwarmInitSettings.DispatcherHeartbeat"/></li>
        ///     <li><c>--external-ca</c> via <see cref="DockerSwarmInitSettings.ExternalCa"/></li>
        ///     <li><c>--force-new-cluster</c> via <see cref="DockerSwarmInitSettings.ForceNewCluster"/></li>
        ///     <li><c>--listen-addr</c> via <see cref="DockerSwarmInitSettings.ListenAddr"/></li>
        ///     <li><c>--max-snapshots</c> via <see cref="DockerSwarmInitSettings.MaxSnapshots"/></li>
        ///     <li><c>--snapshot-interval</c> via <see cref="DockerSwarmInitSettings.SnapshotInterval"/></li>
        ///     <li><c>--task-history-limit</c> via <see cref="DockerSwarmInitSettings.TaskHistoryLimit"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSwarmInit(Configure<DockerSwarmInitSettings> configurator)
        {
            return DockerSwarmInit(configurator(new DockerSwarmInitSettings()));
        }
        /// <summary>
        ///   <p>Initialize a swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmInitSettings.CliSettings"/></li>
        ///     <li><c>--advertise-addr</c> via <see cref="DockerSwarmInitSettings.AdvertiseAddr"/></li>
        ///     <li><c>--autolock</c> via <see cref="DockerSwarmInitSettings.Autolock"/></li>
        ///     <li><c>--availability</c> via <see cref="DockerSwarmInitSettings.Availability"/></li>
        ///     <li><c>--cert-expiry</c> via <see cref="DockerSwarmInitSettings.CertExpiry"/></li>
        ///     <li><c>--data-path-addr</c> via <see cref="DockerSwarmInitSettings.DataPathAddr"/></li>
        ///     <li><c>--data-path-port</c> via <see cref="DockerSwarmInitSettings.DataPathPort"/></li>
        ///     <li><c>--default-addr-pool</c> via <see cref="DockerSwarmInitSettings.DefaultAddrPool"/></li>
        ///     <li><c>--default-addr-pool-mask-length</c> via <see cref="DockerSwarmInitSettings.DefaultAddrPoolMaskLength"/></li>
        ///     <li><c>--dispatcher-heartbeat</c> via <see cref="DockerSwarmInitSettings.DispatcherHeartbeat"/></li>
        ///     <li><c>--external-ca</c> via <see cref="DockerSwarmInitSettings.ExternalCa"/></li>
        ///     <li><c>--force-new-cluster</c> via <see cref="DockerSwarmInitSettings.ForceNewCluster"/></li>
        ///     <li><c>--listen-addr</c> via <see cref="DockerSwarmInitSettings.ListenAddr"/></li>
        ///     <li><c>--max-snapshots</c> via <see cref="DockerSwarmInitSettings.MaxSnapshots"/></li>
        ///     <li><c>--snapshot-interval</c> via <see cref="DockerSwarmInitSettings.SnapshotInterval"/></li>
        ///     <li><c>--task-history-limit</c> via <see cref="DockerSwarmInitSettings.TaskHistoryLimit"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerSwarmInitSettings Settings, IReadOnlyCollection<Output> Output)> DockerSwarmInit(CombinatorialConfigure<DockerSwarmInitSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerSwarmInit, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Inspect changes to files or directories on a container's filesystem.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerDiffSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerDiffSettings.Container"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerDiff(DockerContainerDiffSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContainerDiffSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Inspect changes to files or directories on a container's filesystem.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerDiffSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerDiffSettings.Container"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerDiff(Configure<DockerContainerDiffSettings> configurator)
        {
            return DockerContainerDiff(configurator(new DockerContainerDiffSettings()));
        }
        /// <summary>
        ///   <p>Inspect changes to files or directories on a container's filesystem.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerDiffSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerDiffSettings.Container"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContainerDiffSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerDiff(CombinatorialConfigure<DockerContainerDiffSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContainerDiff, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Restart one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerRestartSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerRestartSettings.Containers"/></li>
        ///     <li><c>--time</c> via <see cref="DockerContainerRestartSettings.Time"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerRestart(DockerContainerRestartSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContainerRestartSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Restart one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerRestartSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerRestartSettings.Containers"/></li>
        ///     <li><c>--time</c> via <see cref="DockerContainerRestartSettings.Time"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerRestart(Configure<DockerContainerRestartSettings> configurator)
        {
            return DockerContainerRestart(configurator(new DockerContainerRestartSettings()));
        }
        /// <summary>
        ///   <p>Restart one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerRestartSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerRestartSettings.Containers"/></li>
        ///     <li><c>--time</c> via <see cref="DockerContainerRestartSettings.Time"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContainerRestartSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerRestart(CombinatorialConfigure<DockerContainerRestartSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContainerRestart, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Docker configs.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerConfigSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerConfig(DockerConfigSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerConfigSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Docker configs.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerConfigSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerConfig(Configure<DockerConfigSettings> configurator)
        {
            return DockerConfig(configurator(new DockerConfigSettings()));
        }
        /// <summary>
        ///   <p>Manage Docker configs.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerConfigSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerConfigSettings Settings, IReadOnlyCollection<Output> Output)> DockerConfig(CombinatorialConfigure<DockerConfigSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerConfig, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Disable a plugin.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginDisableSettings.CliSettings"/></li>
        ///     <li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginDisableSettings.Plugin"/></li>
        ///     <li><c>--force</c> via <see cref="DockerPluginDisableSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPluginDisable(DockerPluginDisableSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerPluginDisableSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Disable a plugin.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginDisableSettings.CliSettings"/></li>
        ///     <li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginDisableSettings.Plugin"/></li>
        ///     <li><c>--force</c> via <see cref="DockerPluginDisableSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPluginDisable(Configure<DockerPluginDisableSettings> configurator)
        {
            return DockerPluginDisable(configurator(new DockerPluginDisableSettings()));
        }
        /// <summary>
        ///   <p>Disable a plugin.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginDisableSettings.CliSettings"/></li>
        ///     <li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginDisableSettings.Plugin"/></li>
        ///     <li><c>--force</c> via <see cref="DockerPluginDisableSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerPluginDisableSettings Settings, IReadOnlyCollection<Output> Output)> DockerPluginDisable(CombinatorialConfigure<DockerPluginDisableSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerPluginDisable, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Unpause all processes within one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerUnpauseSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerUnpauseSettings.Containers"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerUnpause(DockerContainerUnpauseSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContainerUnpauseSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Unpause all processes within one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerUnpauseSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerUnpauseSettings.Containers"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerUnpause(Configure<DockerContainerUnpauseSettings> configurator)
        {
            return DockerContainerUnpause(configurator(new DockerContainerUnpauseSettings()));
        }
        /// <summary>
        ///   <p>Unpause all processes within one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerUnpauseSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerUnpauseSettings.Containers"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContainerUnpauseSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerUnpause(CombinatorialConfigure<DockerContainerUnpauseSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContainerUnpause, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Import a context from a tar or zip file.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextImportSettings.CliSettings"/></li>
        ///     <li><c>&lt;context&gt;</c> via <see cref="DockerContextImportSettings.Context"/></li>
        ///     <li><c>&lt;file&gt;</c> via <see cref="DockerContextImportSettings.File"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContextImport(DockerContextImportSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContextImportSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Import a context from a tar or zip file.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextImportSettings.CliSettings"/></li>
        ///     <li><c>&lt;context&gt;</c> via <see cref="DockerContextImportSettings.Context"/></li>
        ///     <li><c>&lt;file&gt;</c> via <see cref="DockerContextImportSettings.File"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContextImport(Configure<DockerContextImportSettings> configurator)
        {
            return DockerContextImport(configurator(new DockerContextImportSettings()));
        }
        /// <summary>
        ///   <p>Import a context from a tar or zip file.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextImportSettings.CliSettings"/></li>
        ///     <li><c>&lt;context&gt;</c> via <see cref="DockerContextImportSettings.Context"/></li>
        ///     <li><c>&lt;file&gt;</c> via <see cref="DockerContextImportSettings.File"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContextImportSettings Settings, IReadOnlyCollection<Output> Output)> DockerContextImport(CombinatorialConfigure<DockerContextImportSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContextImport, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Remove one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerRmSettings.Containers"/></li>
        ///     <li><c>--force</c> via <see cref="DockerRmSettings.Force"/></li>
        ///     <li><c>--link</c> via <see cref="DockerRmSettings.Link"/></li>
        ///     <li><c>--volumes</c> via <see cref="DockerRmSettings.Volumes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerRm(DockerRmSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerRmSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerRmSettings.Containers"/></li>
        ///     <li><c>--force</c> via <see cref="DockerRmSettings.Force"/></li>
        ///     <li><c>--link</c> via <see cref="DockerRmSettings.Link"/></li>
        ///     <li><c>--volumes</c> via <see cref="DockerRmSettings.Volumes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerRm(Configure<DockerRmSettings> configurator)
        {
            return DockerRm(configurator(new DockerRmSettings()));
        }
        /// <summary>
        ///   <p>Remove one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerRmSettings.Containers"/></li>
        ///     <li><c>--force</c> via <see cref="DockerRmSettings.Force"/></li>
        ///     <li><c>--link</c> via <see cref="DockerRmSettings.Link"/></li>
        ///     <li><c>--volumes</c> via <see cref="DockerRmSettings.Volumes"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerRmSettings Settings, IReadOnlyCollection<Output> Output)> DockerRm(CombinatorialConfigure<DockerRmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerRm, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Deploy a new stack or update an existing stack.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerDeploySettings.CliSettings"/></li>
        ///     <li><c>&lt;stack&gt;</c> via <see cref="DockerDeploySettings.Stack"/></li>
        ///     <li><c>--bundle-file</c> via <see cref="DockerDeploySettings.BundleFile"/></li>
        ///     <li><c>--compose-file</c> via <see cref="DockerDeploySettings.ComposeFile"/></li>
        ///     <li><c>--namespace</c> via <see cref="DockerDeploySettings.Namespace"/></li>
        ///     <li><c>--prune</c> via <see cref="DockerDeploySettings.Prune"/></li>
        ///     <li><c>--resolve-image</c> via <see cref="DockerDeploySettings.ResolveImage"/></li>
        ///     <li><c>--with-registry-auth</c> via <see cref="DockerDeploySettings.WithRegistryAuth"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerDeploy(DockerDeploySettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerDeploySettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Deploy a new stack or update an existing stack.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerDeploySettings.CliSettings"/></li>
        ///     <li><c>&lt;stack&gt;</c> via <see cref="DockerDeploySettings.Stack"/></li>
        ///     <li><c>--bundle-file</c> via <see cref="DockerDeploySettings.BundleFile"/></li>
        ///     <li><c>--compose-file</c> via <see cref="DockerDeploySettings.ComposeFile"/></li>
        ///     <li><c>--namespace</c> via <see cref="DockerDeploySettings.Namespace"/></li>
        ///     <li><c>--prune</c> via <see cref="DockerDeploySettings.Prune"/></li>
        ///     <li><c>--resolve-image</c> via <see cref="DockerDeploySettings.ResolveImage"/></li>
        ///     <li><c>--with-registry-auth</c> via <see cref="DockerDeploySettings.WithRegistryAuth"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerDeploy(Configure<DockerDeploySettings> configurator)
        {
            return DockerDeploy(configurator(new DockerDeploySettings()));
        }
        /// <summary>
        ///   <p>Deploy a new stack or update an existing stack.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerDeploySettings.CliSettings"/></li>
        ///     <li><c>&lt;stack&gt;</c> via <see cref="DockerDeploySettings.Stack"/></li>
        ///     <li><c>--bundle-file</c> via <see cref="DockerDeploySettings.BundleFile"/></li>
        ///     <li><c>--compose-file</c> via <see cref="DockerDeploySettings.ComposeFile"/></li>
        ///     <li><c>--namespace</c> via <see cref="DockerDeploySettings.Namespace"/></li>
        ///     <li><c>--prune</c> via <see cref="DockerDeploySettings.Prune"/></li>
        ///     <li><c>--resolve-image</c> via <see cref="DockerDeploySettings.ResolveImage"/></li>
        ///     <li><c>--with-registry-auth</c> via <see cref="DockerDeploySettings.WithRegistryAuth"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerDeploySettings Settings, IReadOnlyCollection<Output> Output)> DockerDeploy(CombinatorialConfigure<DockerDeploySettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerDeploy, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Remove one or more nodes from the swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNodeRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;nodes&gt;</c> via <see cref="DockerNodeRmSettings.Nodes"/></li>
        ///     <li><c>--force</c> via <see cref="DockerNodeRmSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNodeRm(DockerNodeRmSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerNodeRmSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove one or more nodes from the swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNodeRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;nodes&gt;</c> via <see cref="DockerNodeRmSettings.Nodes"/></li>
        ///     <li><c>--force</c> via <see cref="DockerNodeRmSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNodeRm(Configure<DockerNodeRmSettings> configurator)
        {
            return DockerNodeRm(configurator(new DockerNodeRmSettings()));
        }
        /// <summary>
        ///   <p>Remove one or more nodes from the swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNodeRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;nodes&gt;</c> via <see cref="DockerNodeRmSettings.Nodes"/></li>
        ///     <li><c>--force</c> via <see cref="DockerNodeRmSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerNodeRmSettings Settings, IReadOnlyCollection<Output> Output)> DockerNodeRm(CombinatorialConfigure<DockerNodeRmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerNodeRm, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Remove a checkpoint.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;checkpoint&gt;</c> via <see cref="DockerCheckpointRmSettings.Checkpoint"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerCheckpointRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerCheckpointRmSettings.Container"/></li>
        ///     <li><c>--checkpoint-dir</c> via <see cref="DockerCheckpointRmSettings.CheckpointDir"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerCheckpointRm(DockerCheckpointRmSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerCheckpointRmSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove a checkpoint.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;checkpoint&gt;</c> via <see cref="DockerCheckpointRmSettings.Checkpoint"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerCheckpointRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerCheckpointRmSettings.Container"/></li>
        ///     <li><c>--checkpoint-dir</c> via <see cref="DockerCheckpointRmSettings.CheckpointDir"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerCheckpointRm(Configure<DockerCheckpointRmSettings> configurator)
        {
            return DockerCheckpointRm(configurator(new DockerCheckpointRmSettings()));
        }
        /// <summary>
        ///   <p>Remove a checkpoint.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;checkpoint&gt;</c> via <see cref="DockerCheckpointRmSettings.Checkpoint"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerCheckpointRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerCheckpointRmSettings.Container"/></li>
        ///     <li><c>--checkpoint-dir</c> via <see cref="DockerCheckpointRmSettings.CheckpointDir"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerCheckpointRmSettings Settings, IReadOnlyCollection<Output> Output)> DockerCheckpointRm(CombinatorialConfigure<DockerCheckpointRmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerCheckpointRm, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Push an image or a repository to a registry.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPushSettings.CliSettings"/></li>
        ///     <li><c>&lt;name&gt;</c> via <see cref="DockerPushSettings.Name"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerPushSettings.DisableContentTrust"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPush(DockerPushSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerPushSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Push an image or a repository to a registry.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPushSettings.CliSettings"/></li>
        ///     <li><c>&lt;name&gt;</c> via <see cref="DockerPushSettings.Name"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerPushSettings.DisableContentTrust"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPush(Configure<DockerPushSettings> configurator)
        {
            return DockerPush(configurator(new DockerPushSettings()));
        }
        /// <summary>
        ///   <p>Push an image or a repository to a registry.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPushSettings.CliSettings"/></li>
        ///     <li><c>&lt;name&gt;</c> via <see cref="DockerPushSettings.Name"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerPushSettings.DisableContentTrust"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerPushSettings Settings, IReadOnlyCollection<Output> Output)> DockerPush(CombinatorialConfigure<DockerPushSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerPush, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Create a network.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNetworkCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;network&gt;</c> via <see cref="DockerNetworkCreateSettings.Network"/></li>
        ///     <li><c>--attachable</c> via <see cref="DockerNetworkCreateSettings.Attachable"/></li>
        ///     <li><c>--aux-address</c> via <see cref="DockerNetworkCreateSettings.AuxAddress"/></li>
        ///     <li><c>--config-from</c> via <see cref="DockerNetworkCreateSettings.ConfigFrom"/></li>
        ///     <li><c>--config-only</c> via <see cref="DockerNetworkCreateSettings.ConfigOnly"/></li>
        ///     <li><c>--driver</c> via <see cref="DockerNetworkCreateSettings.Driver"/></li>
        ///     <li><c>--gateway</c> via <see cref="DockerNetworkCreateSettings.Gateway"/></li>
        ///     <li><c>--ingress</c> via <see cref="DockerNetworkCreateSettings.Ingress"/></li>
        ///     <li><c>--internal</c> via <see cref="DockerNetworkCreateSettings.Internal"/></li>
        ///     <li><c>--ip-range</c> via <see cref="DockerNetworkCreateSettings.IpRange"/></li>
        ///     <li><c>--ipam-driver</c> via <see cref="DockerNetworkCreateSettings.IpamDriver"/></li>
        ///     <li><c>--ipam-opt</c> via <see cref="DockerNetworkCreateSettings.IpamOpt"/></li>
        ///     <li><c>--ipv6</c> via <see cref="DockerNetworkCreateSettings.Ipv6"/></li>
        ///     <li><c>--label</c> via <see cref="DockerNetworkCreateSettings.Label"/></li>
        ///     <li><c>--opt</c> via <see cref="DockerNetworkCreateSettings.Opt"/></li>
        ///     <li><c>--scope</c> via <see cref="DockerNetworkCreateSettings.Scope"/></li>
        ///     <li><c>--subnet</c> via <see cref="DockerNetworkCreateSettings.Subnet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNetworkCreate(DockerNetworkCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerNetworkCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Create a network.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNetworkCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;network&gt;</c> via <see cref="DockerNetworkCreateSettings.Network"/></li>
        ///     <li><c>--attachable</c> via <see cref="DockerNetworkCreateSettings.Attachable"/></li>
        ///     <li><c>--aux-address</c> via <see cref="DockerNetworkCreateSettings.AuxAddress"/></li>
        ///     <li><c>--config-from</c> via <see cref="DockerNetworkCreateSettings.ConfigFrom"/></li>
        ///     <li><c>--config-only</c> via <see cref="DockerNetworkCreateSettings.ConfigOnly"/></li>
        ///     <li><c>--driver</c> via <see cref="DockerNetworkCreateSettings.Driver"/></li>
        ///     <li><c>--gateway</c> via <see cref="DockerNetworkCreateSettings.Gateway"/></li>
        ///     <li><c>--ingress</c> via <see cref="DockerNetworkCreateSettings.Ingress"/></li>
        ///     <li><c>--internal</c> via <see cref="DockerNetworkCreateSettings.Internal"/></li>
        ///     <li><c>--ip-range</c> via <see cref="DockerNetworkCreateSettings.IpRange"/></li>
        ///     <li><c>--ipam-driver</c> via <see cref="DockerNetworkCreateSettings.IpamDriver"/></li>
        ///     <li><c>--ipam-opt</c> via <see cref="DockerNetworkCreateSettings.IpamOpt"/></li>
        ///     <li><c>--ipv6</c> via <see cref="DockerNetworkCreateSettings.Ipv6"/></li>
        ///     <li><c>--label</c> via <see cref="DockerNetworkCreateSettings.Label"/></li>
        ///     <li><c>--opt</c> via <see cref="DockerNetworkCreateSettings.Opt"/></li>
        ///     <li><c>--scope</c> via <see cref="DockerNetworkCreateSettings.Scope"/></li>
        ///     <li><c>--subnet</c> via <see cref="DockerNetworkCreateSettings.Subnet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNetworkCreate(Configure<DockerNetworkCreateSettings> configurator)
        {
            return DockerNetworkCreate(configurator(new DockerNetworkCreateSettings()));
        }
        /// <summary>
        ///   <p>Create a network.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNetworkCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;network&gt;</c> via <see cref="DockerNetworkCreateSettings.Network"/></li>
        ///     <li><c>--attachable</c> via <see cref="DockerNetworkCreateSettings.Attachable"/></li>
        ///     <li><c>--aux-address</c> via <see cref="DockerNetworkCreateSettings.AuxAddress"/></li>
        ///     <li><c>--config-from</c> via <see cref="DockerNetworkCreateSettings.ConfigFrom"/></li>
        ///     <li><c>--config-only</c> via <see cref="DockerNetworkCreateSettings.ConfigOnly"/></li>
        ///     <li><c>--driver</c> via <see cref="DockerNetworkCreateSettings.Driver"/></li>
        ///     <li><c>--gateway</c> via <see cref="DockerNetworkCreateSettings.Gateway"/></li>
        ///     <li><c>--ingress</c> via <see cref="DockerNetworkCreateSettings.Ingress"/></li>
        ///     <li><c>--internal</c> via <see cref="DockerNetworkCreateSettings.Internal"/></li>
        ///     <li><c>--ip-range</c> via <see cref="DockerNetworkCreateSettings.IpRange"/></li>
        ///     <li><c>--ipam-driver</c> via <see cref="DockerNetworkCreateSettings.IpamDriver"/></li>
        ///     <li><c>--ipam-opt</c> via <see cref="DockerNetworkCreateSettings.IpamOpt"/></li>
        ///     <li><c>--ipv6</c> via <see cref="DockerNetworkCreateSettings.Ipv6"/></li>
        ///     <li><c>--label</c> via <see cref="DockerNetworkCreateSettings.Label"/></li>
        ///     <li><c>--opt</c> via <see cref="DockerNetworkCreateSettings.Opt"/></li>
        ///     <li><c>--scope</c> via <see cref="DockerNetworkCreateSettings.Scope"/></li>
        ///     <li><c>--subnet</c> via <see cref="DockerNetworkCreateSettings.Subnet"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerNetworkCreateSettings Settings, IReadOnlyCollection<Output> Output)> DockerNetworkCreate(CombinatorialConfigure<DockerNetworkCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerNetworkCreate, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>List volumes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerVolumeLsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerVolumeLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerVolumeLsSettings.Format"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerVolumeLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerVolumeLs(DockerVolumeLsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerVolumeLsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>List volumes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerVolumeLsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerVolumeLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerVolumeLsSettings.Format"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerVolumeLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerVolumeLs(Configure<DockerVolumeLsSettings> configurator)
        {
            return DockerVolumeLs(configurator(new DockerVolumeLsSettings()));
        }
        /// <summary>
        ///   <p>List volumes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerVolumeLsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerVolumeLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerVolumeLsSettings.Format"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerVolumeLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerVolumeLsSettings Settings, IReadOnlyCollection<Output> Output)> DockerVolumeLs(CombinatorialConfigure<DockerVolumeLsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerVolumeLs, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Return low-level information about keys and signatures.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;images&gt;</c> via <see cref="DockerTrustInspectSettings.Images"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerTrustInspect(DockerTrustInspectSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerTrustInspectSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Return low-level information about keys and signatures.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;images&gt;</c> via <see cref="DockerTrustInspectSettings.Images"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerTrustInspect(Configure<DockerTrustInspectSettings> configurator)
        {
            return DockerTrustInspect(configurator(new DockerTrustInspectSettings()));
        }
        /// <summary>
        ///   <p>Return low-level information about keys and signatures.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;images&gt;</c> via <see cref="DockerTrustInspectSettings.Images"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerTrustInspectSettings Settings, IReadOnlyCollection<Output> Output)> DockerTrustInspect(CombinatorialConfigure<DockerTrustInspectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerTrustInspect, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Display detailed information on one or more networks.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNetworkInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;networks&gt;</c> via <see cref="DockerNetworkInspectSettings.Networks"/></li>
        ///     <li><c>--format</c> via <see cref="DockerNetworkInspectSettings.Format"/></li>
        ///     <li><c>--verbose</c> via <see cref="DockerNetworkInspectSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNetworkInspect(DockerNetworkInspectSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerNetworkInspectSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Display detailed information on one or more networks.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNetworkInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;networks&gt;</c> via <see cref="DockerNetworkInspectSettings.Networks"/></li>
        ///     <li><c>--format</c> via <see cref="DockerNetworkInspectSettings.Format"/></li>
        ///     <li><c>--verbose</c> via <see cref="DockerNetworkInspectSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNetworkInspect(Configure<DockerNetworkInspectSettings> configurator)
        {
            return DockerNetworkInspect(configurator(new DockerNetworkInspectSettings()));
        }
        /// <summary>
        ///   <p>Display detailed information on one or more networks.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNetworkInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;networks&gt;</c> via <see cref="DockerNetworkInspectSettings.Networks"/></li>
        ///     <li><c>--format</c> via <see cref="DockerNetworkInspectSettings.Format"/></li>
        ///     <li><c>--verbose</c> via <see cref="DockerNetworkInspectSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerNetworkInspectSettings Settings, IReadOnlyCollection<Output> Output)> DockerNetworkInspect(CombinatorialConfigure<DockerNetworkInspectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerNetworkInspect, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Activate Enterprise Edition.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerEngineActivateSettings.CliSettings"/></li>
        ///     <li><c>--containerd</c> via <see cref="DockerEngineActivateSettings.Containerd"/></li>
        ///     <li><c>--display-only</c> via <see cref="DockerEngineActivateSettings.DisplayOnly"/></li>
        ///     <li><c>--engine-image</c> via <see cref="DockerEngineActivateSettings.EngineImage"/></li>
        ///     <li><c>--format</c> via <see cref="DockerEngineActivateSettings.Format"/></li>
        ///     <li><c>--license</c> via <see cref="DockerEngineActivateSettings.License"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerEngineActivateSettings.Quiet"/></li>
        ///     <li><c>--registry-prefix</c> via <see cref="DockerEngineActivateSettings.RegistryPrefix"/></li>
        ///     <li><c>--version</c> via <see cref="DockerEngineActivateSettings.Version"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerEngineActivate(DockerEngineActivateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerEngineActivateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Activate Enterprise Edition.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerEngineActivateSettings.CliSettings"/></li>
        ///     <li><c>--containerd</c> via <see cref="DockerEngineActivateSettings.Containerd"/></li>
        ///     <li><c>--display-only</c> via <see cref="DockerEngineActivateSettings.DisplayOnly"/></li>
        ///     <li><c>--engine-image</c> via <see cref="DockerEngineActivateSettings.EngineImage"/></li>
        ///     <li><c>--format</c> via <see cref="DockerEngineActivateSettings.Format"/></li>
        ///     <li><c>--license</c> via <see cref="DockerEngineActivateSettings.License"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerEngineActivateSettings.Quiet"/></li>
        ///     <li><c>--registry-prefix</c> via <see cref="DockerEngineActivateSettings.RegistryPrefix"/></li>
        ///     <li><c>--version</c> via <see cref="DockerEngineActivateSettings.Version"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerEngineActivate(Configure<DockerEngineActivateSettings> configurator)
        {
            return DockerEngineActivate(configurator(new DockerEngineActivateSettings()));
        }
        /// <summary>
        ///   <p>Activate Enterprise Edition.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerEngineActivateSettings.CliSettings"/></li>
        ///     <li><c>--containerd</c> via <see cref="DockerEngineActivateSettings.Containerd"/></li>
        ///     <li><c>--display-only</c> via <see cref="DockerEngineActivateSettings.DisplayOnly"/></li>
        ///     <li><c>--engine-image</c> via <see cref="DockerEngineActivateSettings.EngineImage"/></li>
        ///     <li><c>--format</c> via <see cref="DockerEngineActivateSettings.Format"/></li>
        ///     <li><c>--license</c> via <see cref="DockerEngineActivateSettings.License"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerEngineActivateSettings.Quiet"/></li>
        ///     <li><c>--registry-prefix</c> via <see cref="DockerEngineActivateSettings.RegistryPrefix"/></li>
        ///     <li><c>--version</c> via <see cref="DockerEngineActivateSettings.Version"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerEngineActivateSettings Settings, IReadOnlyCollection<Output> Output)> DockerEngineActivate(CombinatorialConfigure<DockerEngineActivateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerEngineActivate, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Set the current docker context.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextUseSettings.CliSettings"/></li>
        ///     <li><c>&lt;context&gt;</c> via <see cref="DockerContextUseSettings.Context"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContextUse(DockerContextUseSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContextUseSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Set the current docker context.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextUseSettings.CliSettings"/></li>
        ///     <li><c>&lt;context&gt;</c> via <see cref="DockerContextUseSettings.Context"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContextUse(Configure<DockerContextUseSettings> configurator)
        {
            return DockerContextUse(configurator(new DockerContextUseSettings()));
        }
        /// <summary>
        ///   <p>Set the current docker context.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextUseSettings.CliSettings"/></li>
        ///     <li><c>&lt;context&gt;</c> via <see cref="DockerContextUseSettings.Context"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContextUseSettings Settings, IReadOnlyCollection<Output> Output)> DockerContextUse(CombinatorialConfigure<DockerContextUseSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContextUse, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Remove one or more volumes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerVolumeRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;volumes&gt;</c> via <see cref="DockerVolumeRmSettings.Volumes"/></li>
        ///     <li><c>--force</c> via <see cref="DockerVolumeRmSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerVolumeRm(DockerVolumeRmSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerVolumeRmSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove one or more volumes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerVolumeRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;volumes&gt;</c> via <see cref="DockerVolumeRmSettings.Volumes"/></li>
        ///     <li><c>--force</c> via <see cref="DockerVolumeRmSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerVolumeRm(Configure<DockerVolumeRmSettings> configurator)
        {
            return DockerVolumeRm(configurator(new DockerVolumeRmSettings()));
        }
        /// <summary>
        ///   <p>Remove one or more volumes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerVolumeRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;volumes&gt;</c> via <see cref="DockerVolumeRmSettings.Volumes"/></li>
        ///     <li><c>--force</c> via <see cref="DockerVolumeRmSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerVolumeRmSettings Settings, IReadOnlyCollection<Output> Output)> DockerVolumeRm(CombinatorialConfigure<DockerVolumeRmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerVolumeRm, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Create a local manifest list for annotating and pushing to a registry.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerManifestCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;manifestList&gt;</c> via <see cref="DockerManifestCreateSettings.ManifestList"/></li>
        ///     <li><c>&lt;manifests&gt;</c> via <see cref="DockerManifestCreateSettings.Manifests"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerManifestCreate(DockerManifestCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerManifestCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Create a local manifest list for annotating and pushing to a registry.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerManifestCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;manifestList&gt;</c> via <see cref="DockerManifestCreateSettings.ManifestList"/></li>
        ///     <li><c>&lt;manifests&gt;</c> via <see cref="DockerManifestCreateSettings.Manifests"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerManifestCreate(Configure<DockerManifestCreateSettings> configurator)
        {
            return DockerManifestCreate(configurator(new DockerManifestCreateSettings()));
        }
        /// <summary>
        ///   <p>Create a local manifest list for annotating and pushing to a registry.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerManifestCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;manifestList&gt;</c> via <see cref="DockerManifestCreateSettings.ManifestList"/></li>
        ///     <li><c>&lt;manifests&gt;</c> via <see cref="DockerManifestCreateSettings.Manifests"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerManifestCreateSettings Settings, IReadOnlyCollection<Output> Output)> DockerManifestCreate(CombinatorialConfigure<DockerManifestCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerManifestCreate, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Push a manifest list to a repository.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerManifestPushSettings.CliSettings"/></li>
        ///     <li><c>&lt;manifestList&gt;</c> via <see cref="DockerManifestPushSettings.ManifestList"/></li>
        ///     <li><c>--insecure</c> via <see cref="DockerManifestPushSettings.Insecure"/></li>
        ///     <li><c>--purge</c> via <see cref="DockerManifestPushSettings.Purge"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerManifestPush(DockerManifestPushSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerManifestPushSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Push a manifest list to a repository.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerManifestPushSettings.CliSettings"/></li>
        ///     <li><c>&lt;manifestList&gt;</c> via <see cref="DockerManifestPushSettings.ManifestList"/></li>
        ///     <li><c>--insecure</c> via <see cref="DockerManifestPushSettings.Insecure"/></li>
        ///     <li><c>--purge</c> via <see cref="DockerManifestPushSettings.Purge"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerManifestPush(Configure<DockerManifestPushSettings> configurator)
        {
            return DockerManifestPush(configurator(new DockerManifestPushSettings()));
        }
        /// <summary>
        ///   <p>Push a manifest list to a repository.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerManifestPushSettings.CliSettings"/></li>
        ///     <li><c>&lt;manifestList&gt;</c> via <see cref="DockerManifestPushSettings.ManifestList"/></li>
        ///     <li><c>--insecure</c> via <see cref="DockerManifestPushSettings.Insecure"/></li>
        ///     <li><c>--purge</c> via <see cref="DockerManifestPushSettings.Purge"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerManifestPushSettings Settings, IReadOnlyCollection<Output> Output)> DockerManifestPush(CombinatorialConfigure<DockerManifestPushSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerManifestPush, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Enable a plugin.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginEnableSettings.CliSettings"/></li>
        ///     <li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginEnableSettings.Plugin"/></li>
        ///     <li><c>--timeout</c> via <see cref="DockerPluginEnableSettings.Timeout"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPluginEnable(DockerPluginEnableSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerPluginEnableSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Enable a plugin.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginEnableSettings.CliSettings"/></li>
        ///     <li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginEnableSettings.Plugin"/></li>
        ///     <li><c>--timeout</c> via <see cref="DockerPluginEnableSettings.Timeout"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPluginEnable(Configure<DockerPluginEnableSettings> configurator)
        {
            return DockerPluginEnable(configurator(new DockerPluginEnableSettings()));
        }
        /// <summary>
        ///   <p>Enable a plugin.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginEnableSettings.CliSettings"/></li>
        ///     <li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginEnableSettings.Plugin"/></li>
        ///     <li><c>--timeout</c> via <see cref="DockerPluginEnableSettings.Timeout"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerPluginEnableSettings Settings, IReadOnlyCollection<Output> Output)> DockerPluginEnable(CombinatorialConfigure<DockerPluginEnableSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerPluginEnable, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Import the contents from a tarball to create a filesystem image.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImportSettings.CliSettings"/></li>
        ///     <li><c>&lt;file&gt;</c> via <see cref="DockerImportSettings.File"/></li>
        ///     <li><c>&lt;repository&gt;</c> via <see cref="DockerImportSettings.Repository"/></li>
        ///     <li><c>--change</c> via <see cref="DockerImportSettings.Change"/></li>
        ///     <li><c>--message</c> via <see cref="DockerImportSettings.Message"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerImportSettings.Platform"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImport(DockerImportSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerImportSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Import the contents from a tarball to create a filesystem image.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImportSettings.CliSettings"/></li>
        ///     <li><c>&lt;file&gt;</c> via <see cref="DockerImportSettings.File"/></li>
        ///     <li><c>&lt;repository&gt;</c> via <see cref="DockerImportSettings.Repository"/></li>
        ///     <li><c>--change</c> via <see cref="DockerImportSettings.Change"/></li>
        ///     <li><c>--message</c> via <see cref="DockerImportSettings.Message"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerImportSettings.Platform"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImport(Configure<DockerImportSettings> configurator)
        {
            return DockerImport(configurator(new DockerImportSettings()));
        }
        /// <summary>
        ///   <p>Import the contents from a tarball to create a filesystem image.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImportSettings.CliSettings"/></li>
        ///     <li><c>&lt;file&gt;</c> via <see cref="DockerImportSettings.File"/></li>
        ///     <li><c>&lt;repository&gt;</c> via <see cref="DockerImportSettings.Repository"/></li>
        ///     <li><c>--change</c> via <see cref="DockerImportSettings.Change"/></li>
        ///     <li><c>--message</c> via <see cref="DockerImportSettings.Message"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerImportSettings.Platform"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerImportSettings Settings, IReadOnlyCollection<Output> Output)> DockerImport(CombinatorialConfigure<DockerImportSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerImport, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Run a command in a new container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;args&gt;</c> via <see cref="DockerContainerRunSettings.Args"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerRunSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerContainerRunSettings.Command"/></li>
        ///     <li><c>&lt;image&gt;</c> via <see cref="DockerContainerRunSettings.Image"/></li>
        ///     <li><c>--add-host</c> via <see cref="DockerContainerRunSettings.AddHost"/></li>
        ///     <li><c>--attach</c> via <see cref="DockerContainerRunSettings.Attach"/></li>
        ///     <li><c>--blkio-weight</c> via <see cref="DockerContainerRunSettings.BlkioWeight"/></li>
        ///     <li><c>--blkio-weight-device</c> via <see cref="DockerContainerRunSettings.BlkioWeightDevice"/></li>
        ///     <li><c>--cap-add</c> via <see cref="DockerContainerRunSettings.CapAdd"/></li>
        ///     <li><c>--cap-drop</c> via <see cref="DockerContainerRunSettings.CapDrop"/></li>
        ///     <li><c>--cgroup-parent</c> via <see cref="DockerContainerRunSettings.CgroupParent"/></li>
        ///     <li><c>--cidfile</c> via <see cref="DockerContainerRunSettings.Cidfile"/></li>
        ///     <li><c>--cpu-count</c> via <see cref="DockerContainerRunSettings.CpuCount"/></li>
        ///     <li><c>--cpu-percent</c> via <see cref="DockerContainerRunSettings.CpuPercent"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerContainerRunSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerContainerRunSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-rt-period</c> via <see cref="DockerContainerRunSettings.CpuRtPeriod"/></li>
        ///     <li><c>--cpu-rt-runtime</c> via <see cref="DockerContainerRunSettings.CpuRtRuntime"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerContainerRunSettings.CpuShares"/></li>
        ///     <li><c>--cpus</c> via <see cref="DockerContainerRunSettings.Cpus"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerContainerRunSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerContainerRunSettings.CpusetMems"/></li>
        ///     <li><c>--detach</c> via <see cref="DockerContainerRunSettings.Detach"/></li>
        ///     <li><c>--detach-keys</c> via <see cref="DockerContainerRunSettings.DetachKeys"/></li>
        ///     <li><c>--device</c> via <see cref="DockerContainerRunSettings.Device"/></li>
        ///     <li><c>--device-cgroup-rule</c> via <see cref="DockerContainerRunSettings.DeviceCgroupRule"/></li>
        ///     <li><c>--device-read-bps</c> via <see cref="DockerContainerRunSettings.DeviceReadBps"/></li>
        ///     <li><c>--device-read-iops</c> via <see cref="DockerContainerRunSettings.DeviceReadIops"/></li>
        ///     <li><c>--device-write-bps</c> via <see cref="DockerContainerRunSettings.DeviceWriteBps"/></li>
        ///     <li><c>--device-write-iops</c> via <see cref="DockerContainerRunSettings.DeviceWriteIops"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerContainerRunSettings.DisableContentTrust"/></li>
        ///     <li><c>--dns</c> via <see cref="DockerContainerRunSettings.Dns"/></li>
        ///     <li><c>--dns-opt</c> via <see cref="DockerContainerRunSettings.DnsOpt"/></li>
        ///     <li><c>--dns-option</c> via <see cref="DockerContainerRunSettings.DnsOption"/></li>
        ///     <li><c>--dns-search</c> via <see cref="DockerContainerRunSettings.DnsSearch"/></li>
        ///     <li><c>--domainname</c> via <see cref="DockerContainerRunSettings.Domainname"/></li>
        ///     <li><c>--entrypoint</c> via <see cref="DockerContainerRunSettings.Entrypoint"/></li>
        ///     <li><c>--env</c> via <see cref="DockerContainerRunSettings.Env"/></li>
        ///     <li><c>--env-file</c> via <see cref="DockerContainerRunSettings.EnvFile"/></li>
        ///     <li><c>--expose</c> via <see cref="DockerContainerRunSettings.Expose"/></li>
        ///     <li><c>--gpus</c> via <see cref="DockerContainerRunSettings.Gpus"/></li>
        ///     <li><c>--group-add</c> via <see cref="DockerContainerRunSettings.GroupAdd"/></li>
        ///     <li><c>--health-cmd</c> via <see cref="DockerContainerRunSettings.HealthCmd"/></li>
        ///     <li><c>--health-interval</c> via <see cref="DockerContainerRunSettings.HealthInterval"/></li>
        ///     <li><c>--health-retries</c> via <see cref="DockerContainerRunSettings.HealthRetries"/></li>
        ///     <li><c>--health-start-period</c> via <see cref="DockerContainerRunSettings.HealthStartPeriod"/></li>
        ///     <li><c>--health-timeout</c> via <see cref="DockerContainerRunSettings.HealthTimeout"/></li>
        ///     <li><c>--help</c> via <see cref="DockerContainerRunSettings.Help"/></li>
        ///     <li><c>--hostname</c> via <see cref="DockerContainerRunSettings.Hostname"/></li>
        ///     <li><c>--init</c> via <see cref="DockerContainerRunSettings.Init"/></li>
        ///     <li><c>--interactive</c> via <see cref="DockerContainerRunSettings.Interactive"/></li>
        ///     <li><c>--io-maxbandwidth</c> via <see cref="DockerContainerRunSettings.IoMaxbandwidth"/></li>
        ///     <li><c>--io-maxiops</c> via <see cref="DockerContainerRunSettings.IoMaxiops"/></li>
        ///     <li><c>--ip</c> via <see cref="DockerContainerRunSettings.Ip"/></li>
        ///     <li><c>--ip6</c> via <see cref="DockerContainerRunSettings.Ip6"/></li>
        ///     <li><c>--ipc</c> via <see cref="DockerContainerRunSettings.Ipc"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerContainerRunSettings.Isolation"/></li>
        ///     <li><c>--kernel-memory</c> via <see cref="DockerContainerRunSettings.KernelMemory"/></li>
        ///     <li><c>--label</c> via <see cref="DockerContainerRunSettings.Label"/></li>
        ///     <li><c>--label-file</c> via <see cref="DockerContainerRunSettings.LabelFile"/></li>
        ///     <li><c>--link</c> via <see cref="DockerContainerRunSettings.Link"/></li>
        ///     <li><c>--link-local-ip</c> via <see cref="DockerContainerRunSettings.LinkLocalIp"/></li>
        ///     <li><c>--log-driver</c> via <see cref="DockerContainerRunSettings.LogDriver"/></li>
        ///     <li><c>--log-opt</c> via <see cref="DockerContainerRunSettings.LogOpt"/></li>
        ///     <li><c>--mac-address</c> via <see cref="DockerContainerRunSettings.MacAddress"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerContainerRunSettings.Memory"/></li>
        ///     <li><c>--memory-reservation</c> via <see cref="DockerContainerRunSettings.MemoryReservation"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerContainerRunSettings.MemorySwap"/></li>
        ///     <li><c>--memory-swappiness</c> via <see cref="DockerContainerRunSettings.MemorySwappiness"/></li>
        ///     <li><c>--mount</c> via <see cref="DockerContainerRunSettings.Mount"/></li>
        ///     <li><c>--name</c> via <see cref="DockerContainerRunSettings.Name"/></li>
        ///     <li><c>--net</c> via <see cref="DockerContainerRunSettings.Net"/></li>
        ///     <li><c>--net-alias</c> via <see cref="DockerContainerRunSettings.NetAlias"/></li>
        ///     <li><c>--network</c> via <see cref="DockerContainerRunSettings.Network"/></li>
        ///     <li><c>--network-alias</c> via <see cref="DockerContainerRunSettings.NetworkAlias"/></li>
        ///     <li><c>--no-healthcheck</c> via <see cref="DockerContainerRunSettings.NoHealthcheck"/></li>
        ///     <li><c>--oom-kill-disable</c> via <see cref="DockerContainerRunSettings.OomKillDisable"/></li>
        ///     <li><c>--oom-score-adj</c> via <see cref="DockerContainerRunSettings.OomScoreAdj"/></li>
        ///     <li><c>--pid</c> via <see cref="DockerContainerRunSettings.Pid"/></li>
        ///     <li><c>--pids-limit</c> via <see cref="DockerContainerRunSettings.PidsLimit"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerContainerRunSettings.Platform"/></li>
        ///     <li><c>--privileged</c> via <see cref="DockerContainerRunSettings.Privileged"/></li>
        ///     <li><c>--publish</c> via <see cref="DockerContainerRunSettings.Publish"/></li>
        ///     <li><c>--publish-all</c> via <see cref="DockerContainerRunSettings.PublishAll"/></li>
        ///     <li><c>--read-only</c> via <see cref="DockerContainerRunSettings.ReadOnly"/></li>
        ///     <li><c>--restart</c> via <see cref="DockerContainerRunSettings.Restart"/></li>
        ///     <li><c>--rm</c> via <see cref="DockerContainerRunSettings.Rm"/></li>
        ///     <li><c>--runtime</c> via <see cref="DockerContainerRunSettings.Runtime"/></li>
        ///     <li><c>--security-opt</c> via <see cref="DockerContainerRunSettings.SecurityOpt"/></li>
        ///     <li><c>--shm-size</c> via <see cref="DockerContainerRunSettings.ShmSize"/></li>
        ///     <li><c>--sig-proxy</c> via <see cref="DockerContainerRunSettings.SigProxy"/></li>
        ///     <li><c>--stop-signal</c> via <see cref="DockerContainerRunSettings.StopSignal"/></li>
        ///     <li><c>--stop-timeout</c> via <see cref="DockerContainerRunSettings.StopTimeout"/></li>
        ///     <li><c>--storage-opt</c> via <see cref="DockerContainerRunSettings.StorageOpt"/></li>
        ///     <li><c>--sysctl</c> via <see cref="DockerContainerRunSettings.Sysctl"/></li>
        ///     <li><c>--tmpfs</c> via <see cref="DockerContainerRunSettings.Tmpfs"/></li>
        ///     <li><c>--tty</c> via <see cref="DockerContainerRunSettings.Tty"/></li>
        ///     <li><c>--ulimit</c> via <see cref="DockerContainerRunSettings.Ulimit"/></li>
        ///     <li><c>--user</c> via <see cref="DockerContainerRunSettings.User"/></li>
        ///     <li><c>--userns</c> via <see cref="DockerContainerRunSettings.Userns"/></li>
        ///     <li><c>--uts</c> via <see cref="DockerContainerRunSettings.Uts"/></li>
        ///     <li><c>--volume</c> via <see cref="DockerContainerRunSettings.Volume"/></li>
        ///     <li><c>--volume-driver</c> via <see cref="DockerContainerRunSettings.VolumeDriver"/></li>
        ///     <li><c>--volumes-from</c> via <see cref="DockerContainerRunSettings.VolumesFrom"/></li>
        ///     <li><c>--workdir</c> via <see cref="DockerContainerRunSettings.Workdir"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerRun(DockerContainerRunSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContainerRunSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Run a command in a new container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;args&gt;</c> via <see cref="DockerContainerRunSettings.Args"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerRunSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerContainerRunSettings.Command"/></li>
        ///     <li><c>&lt;image&gt;</c> via <see cref="DockerContainerRunSettings.Image"/></li>
        ///     <li><c>--add-host</c> via <see cref="DockerContainerRunSettings.AddHost"/></li>
        ///     <li><c>--attach</c> via <see cref="DockerContainerRunSettings.Attach"/></li>
        ///     <li><c>--blkio-weight</c> via <see cref="DockerContainerRunSettings.BlkioWeight"/></li>
        ///     <li><c>--blkio-weight-device</c> via <see cref="DockerContainerRunSettings.BlkioWeightDevice"/></li>
        ///     <li><c>--cap-add</c> via <see cref="DockerContainerRunSettings.CapAdd"/></li>
        ///     <li><c>--cap-drop</c> via <see cref="DockerContainerRunSettings.CapDrop"/></li>
        ///     <li><c>--cgroup-parent</c> via <see cref="DockerContainerRunSettings.CgroupParent"/></li>
        ///     <li><c>--cidfile</c> via <see cref="DockerContainerRunSettings.Cidfile"/></li>
        ///     <li><c>--cpu-count</c> via <see cref="DockerContainerRunSettings.CpuCount"/></li>
        ///     <li><c>--cpu-percent</c> via <see cref="DockerContainerRunSettings.CpuPercent"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerContainerRunSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerContainerRunSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-rt-period</c> via <see cref="DockerContainerRunSettings.CpuRtPeriod"/></li>
        ///     <li><c>--cpu-rt-runtime</c> via <see cref="DockerContainerRunSettings.CpuRtRuntime"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerContainerRunSettings.CpuShares"/></li>
        ///     <li><c>--cpus</c> via <see cref="DockerContainerRunSettings.Cpus"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerContainerRunSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerContainerRunSettings.CpusetMems"/></li>
        ///     <li><c>--detach</c> via <see cref="DockerContainerRunSettings.Detach"/></li>
        ///     <li><c>--detach-keys</c> via <see cref="DockerContainerRunSettings.DetachKeys"/></li>
        ///     <li><c>--device</c> via <see cref="DockerContainerRunSettings.Device"/></li>
        ///     <li><c>--device-cgroup-rule</c> via <see cref="DockerContainerRunSettings.DeviceCgroupRule"/></li>
        ///     <li><c>--device-read-bps</c> via <see cref="DockerContainerRunSettings.DeviceReadBps"/></li>
        ///     <li><c>--device-read-iops</c> via <see cref="DockerContainerRunSettings.DeviceReadIops"/></li>
        ///     <li><c>--device-write-bps</c> via <see cref="DockerContainerRunSettings.DeviceWriteBps"/></li>
        ///     <li><c>--device-write-iops</c> via <see cref="DockerContainerRunSettings.DeviceWriteIops"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerContainerRunSettings.DisableContentTrust"/></li>
        ///     <li><c>--dns</c> via <see cref="DockerContainerRunSettings.Dns"/></li>
        ///     <li><c>--dns-opt</c> via <see cref="DockerContainerRunSettings.DnsOpt"/></li>
        ///     <li><c>--dns-option</c> via <see cref="DockerContainerRunSettings.DnsOption"/></li>
        ///     <li><c>--dns-search</c> via <see cref="DockerContainerRunSettings.DnsSearch"/></li>
        ///     <li><c>--domainname</c> via <see cref="DockerContainerRunSettings.Domainname"/></li>
        ///     <li><c>--entrypoint</c> via <see cref="DockerContainerRunSettings.Entrypoint"/></li>
        ///     <li><c>--env</c> via <see cref="DockerContainerRunSettings.Env"/></li>
        ///     <li><c>--env-file</c> via <see cref="DockerContainerRunSettings.EnvFile"/></li>
        ///     <li><c>--expose</c> via <see cref="DockerContainerRunSettings.Expose"/></li>
        ///     <li><c>--gpus</c> via <see cref="DockerContainerRunSettings.Gpus"/></li>
        ///     <li><c>--group-add</c> via <see cref="DockerContainerRunSettings.GroupAdd"/></li>
        ///     <li><c>--health-cmd</c> via <see cref="DockerContainerRunSettings.HealthCmd"/></li>
        ///     <li><c>--health-interval</c> via <see cref="DockerContainerRunSettings.HealthInterval"/></li>
        ///     <li><c>--health-retries</c> via <see cref="DockerContainerRunSettings.HealthRetries"/></li>
        ///     <li><c>--health-start-period</c> via <see cref="DockerContainerRunSettings.HealthStartPeriod"/></li>
        ///     <li><c>--health-timeout</c> via <see cref="DockerContainerRunSettings.HealthTimeout"/></li>
        ///     <li><c>--help</c> via <see cref="DockerContainerRunSettings.Help"/></li>
        ///     <li><c>--hostname</c> via <see cref="DockerContainerRunSettings.Hostname"/></li>
        ///     <li><c>--init</c> via <see cref="DockerContainerRunSettings.Init"/></li>
        ///     <li><c>--interactive</c> via <see cref="DockerContainerRunSettings.Interactive"/></li>
        ///     <li><c>--io-maxbandwidth</c> via <see cref="DockerContainerRunSettings.IoMaxbandwidth"/></li>
        ///     <li><c>--io-maxiops</c> via <see cref="DockerContainerRunSettings.IoMaxiops"/></li>
        ///     <li><c>--ip</c> via <see cref="DockerContainerRunSettings.Ip"/></li>
        ///     <li><c>--ip6</c> via <see cref="DockerContainerRunSettings.Ip6"/></li>
        ///     <li><c>--ipc</c> via <see cref="DockerContainerRunSettings.Ipc"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerContainerRunSettings.Isolation"/></li>
        ///     <li><c>--kernel-memory</c> via <see cref="DockerContainerRunSettings.KernelMemory"/></li>
        ///     <li><c>--label</c> via <see cref="DockerContainerRunSettings.Label"/></li>
        ///     <li><c>--label-file</c> via <see cref="DockerContainerRunSettings.LabelFile"/></li>
        ///     <li><c>--link</c> via <see cref="DockerContainerRunSettings.Link"/></li>
        ///     <li><c>--link-local-ip</c> via <see cref="DockerContainerRunSettings.LinkLocalIp"/></li>
        ///     <li><c>--log-driver</c> via <see cref="DockerContainerRunSettings.LogDriver"/></li>
        ///     <li><c>--log-opt</c> via <see cref="DockerContainerRunSettings.LogOpt"/></li>
        ///     <li><c>--mac-address</c> via <see cref="DockerContainerRunSettings.MacAddress"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerContainerRunSettings.Memory"/></li>
        ///     <li><c>--memory-reservation</c> via <see cref="DockerContainerRunSettings.MemoryReservation"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerContainerRunSettings.MemorySwap"/></li>
        ///     <li><c>--memory-swappiness</c> via <see cref="DockerContainerRunSettings.MemorySwappiness"/></li>
        ///     <li><c>--mount</c> via <see cref="DockerContainerRunSettings.Mount"/></li>
        ///     <li><c>--name</c> via <see cref="DockerContainerRunSettings.Name"/></li>
        ///     <li><c>--net</c> via <see cref="DockerContainerRunSettings.Net"/></li>
        ///     <li><c>--net-alias</c> via <see cref="DockerContainerRunSettings.NetAlias"/></li>
        ///     <li><c>--network</c> via <see cref="DockerContainerRunSettings.Network"/></li>
        ///     <li><c>--network-alias</c> via <see cref="DockerContainerRunSettings.NetworkAlias"/></li>
        ///     <li><c>--no-healthcheck</c> via <see cref="DockerContainerRunSettings.NoHealthcheck"/></li>
        ///     <li><c>--oom-kill-disable</c> via <see cref="DockerContainerRunSettings.OomKillDisable"/></li>
        ///     <li><c>--oom-score-adj</c> via <see cref="DockerContainerRunSettings.OomScoreAdj"/></li>
        ///     <li><c>--pid</c> via <see cref="DockerContainerRunSettings.Pid"/></li>
        ///     <li><c>--pids-limit</c> via <see cref="DockerContainerRunSettings.PidsLimit"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerContainerRunSettings.Platform"/></li>
        ///     <li><c>--privileged</c> via <see cref="DockerContainerRunSettings.Privileged"/></li>
        ///     <li><c>--publish</c> via <see cref="DockerContainerRunSettings.Publish"/></li>
        ///     <li><c>--publish-all</c> via <see cref="DockerContainerRunSettings.PublishAll"/></li>
        ///     <li><c>--read-only</c> via <see cref="DockerContainerRunSettings.ReadOnly"/></li>
        ///     <li><c>--restart</c> via <see cref="DockerContainerRunSettings.Restart"/></li>
        ///     <li><c>--rm</c> via <see cref="DockerContainerRunSettings.Rm"/></li>
        ///     <li><c>--runtime</c> via <see cref="DockerContainerRunSettings.Runtime"/></li>
        ///     <li><c>--security-opt</c> via <see cref="DockerContainerRunSettings.SecurityOpt"/></li>
        ///     <li><c>--shm-size</c> via <see cref="DockerContainerRunSettings.ShmSize"/></li>
        ///     <li><c>--sig-proxy</c> via <see cref="DockerContainerRunSettings.SigProxy"/></li>
        ///     <li><c>--stop-signal</c> via <see cref="DockerContainerRunSettings.StopSignal"/></li>
        ///     <li><c>--stop-timeout</c> via <see cref="DockerContainerRunSettings.StopTimeout"/></li>
        ///     <li><c>--storage-opt</c> via <see cref="DockerContainerRunSettings.StorageOpt"/></li>
        ///     <li><c>--sysctl</c> via <see cref="DockerContainerRunSettings.Sysctl"/></li>
        ///     <li><c>--tmpfs</c> via <see cref="DockerContainerRunSettings.Tmpfs"/></li>
        ///     <li><c>--tty</c> via <see cref="DockerContainerRunSettings.Tty"/></li>
        ///     <li><c>--ulimit</c> via <see cref="DockerContainerRunSettings.Ulimit"/></li>
        ///     <li><c>--user</c> via <see cref="DockerContainerRunSettings.User"/></li>
        ///     <li><c>--userns</c> via <see cref="DockerContainerRunSettings.Userns"/></li>
        ///     <li><c>--uts</c> via <see cref="DockerContainerRunSettings.Uts"/></li>
        ///     <li><c>--volume</c> via <see cref="DockerContainerRunSettings.Volume"/></li>
        ///     <li><c>--volume-driver</c> via <see cref="DockerContainerRunSettings.VolumeDriver"/></li>
        ///     <li><c>--volumes-from</c> via <see cref="DockerContainerRunSettings.VolumesFrom"/></li>
        ///     <li><c>--workdir</c> via <see cref="DockerContainerRunSettings.Workdir"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerRun(Configure<DockerContainerRunSettings> configurator)
        {
            return DockerContainerRun(configurator(new DockerContainerRunSettings()));
        }
        /// <summary>
        ///   <p>Run a command in a new container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;args&gt;</c> via <see cref="DockerContainerRunSettings.Args"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerRunSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerContainerRunSettings.Command"/></li>
        ///     <li><c>&lt;image&gt;</c> via <see cref="DockerContainerRunSettings.Image"/></li>
        ///     <li><c>--add-host</c> via <see cref="DockerContainerRunSettings.AddHost"/></li>
        ///     <li><c>--attach</c> via <see cref="DockerContainerRunSettings.Attach"/></li>
        ///     <li><c>--blkio-weight</c> via <see cref="DockerContainerRunSettings.BlkioWeight"/></li>
        ///     <li><c>--blkio-weight-device</c> via <see cref="DockerContainerRunSettings.BlkioWeightDevice"/></li>
        ///     <li><c>--cap-add</c> via <see cref="DockerContainerRunSettings.CapAdd"/></li>
        ///     <li><c>--cap-drop</c> via <see cref="DockerContainerRunSettings.CapDrop"/></li>
        ///     <li><c>--cgroup-parent</c> via <see cref="DockerContainerRunSettings.CgroupParent"/></li>
        ///     <li><c>--cidfile</c> via <see cref="DockerContainerRunSettings.Cidfile"/></li>
        ///     <li><c>--cpu-count</c> via <see cref="DockerContainerRunSettings.CpuCount"/></li>
        ///     <li><c>--cpu-percent</c> via <see cref="DockerContainerRunSettings.CpuPercent"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerContainerRunSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerContainerRunSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-rt-period</c> via <see cref="DockerContainerRunSettings.CpuRtPeriod"/></li>
        ///     <li><c>--cpu-rt-runtime</c> via <see cref="DockerContainerRunSettings.CpuRtRuntime"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerContainerRunSettings.CpuShares"/></li>
        ///     <li><c>--cpus</c> via <see cref="DockerContainerRunSettings.Cpus"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerContainerRunSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerContainerRunSettings.CpusetMems"/></li>
        ///     <li><c>--detach</c> via <see cref="DockerContainerRunSettings.Detach"/></li>
        ///     <li><c>--detach-keys</c> via <see cref="DockerContainerRunSettings.DetachKeys"/></li>
        ///     <li><c>--device</c> via <see cref="DockerContainerRunSettings.Device"/></li>
        ///     <li><c>--device-cgroup-rule</c> via <see cref="DockerContainerRunSettings.DeviceCgroupRule"/></li>
        ///     <li><c>--device-read-bps</c> via <see cref="DockerContainerRunSettings.DeviceReadBps"/></li>
        ///     <li><c>--device-read-iops</c> via <see cref="DockerContainerRunSettings.DeviceReadIops"/></li>
        ///     <li><c>--device-write-bps</c> via <see cref="DockerContainerRunSettings.DeviceWriteBps"/></li>
        ///     <li><c>--device-write-iops</c> via <see cref="DockerContainerRunSettings.DeviceWriteIops"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerContainerRunSettings.DisableContentTrust"/></li>
        ///     <li><c>--dns</c> via <see cref="DockerContainerRunSettings.Dns"/></li>
        ///     <li><c>--dns-opt</c> via <see cref="DockerContainerRunSettings.DnsOpt"/></li>
        ///     <li><c>--dns-option</c> via <see cref="DockerContainerRunSettings.DnsOption"/></li>
        ///     <li><c>--dns-search</c> via <see cref="DockerContainerRunSettings.DnsSearch"/></li>
        ///     <li><c>--domainname</c> via <see cref="DockerContainerRunSettings.Domainname"/></li>
        ///     <li><c>--entrypoint</c> via <see cref="DockerContainerRunSettings.Entrypoint"/></li>
        ///     <li><c>--env</c> via <see cref="DockerContainerRunSettings.Env"/></li>
        ///     <li><c>--env-file</c> via <see cref="DockerContainerRunSettings.EnvFile"/></li>
        ///     <li><c>--expose</c> via <see cref="DockerContainerRunSettings.Expose"/></li>
        ///     <li><c>--gpus</c> via <see cref="DockerContainerRunSettings.Gpus"/></li>
        ///     <li><c>--group-add</c> via <see cref="DockerContainerRunSettings.GroupAdd"/></li>
        ///     <li><c>--health-cmd</c> via <see cref="DockerContainerRunSettings.HealthCmd"/></li>
        ///     <li><c>--health-interval</c> via <see cref="DockerContainerRunSettings.HealthInterval"/></li>
        ///     <li><c>--health-retries</c> via <see cref="DockerContainerRunSettings.HealthRetries"/></li>
        ///     <li><c>--health-start-period</c> via <see cref="DockerContainerRunSettings.HealthStartPeriod"/></li>
        ///     <li><c>--health-timeout</c> via <see cref="DockerContainerRunSettings.HealthTimeout"/></li>
        ///     <li><c>--help</c> via <see cref="DockerContainerRunSettings.Help"/></li>
        ///     <li><c>--hostname</c> via <see cref="DockerContainerRunSettings.Hostname"/></li>
        ///     <li><c>--init</c> via <see cref="DockerContainerRunSettings.Init"/></li>
        ///     <li><c>--interactive</c> via <see cref="DockerContainerRunSettings.Interactive"/></li>
        ///     <li><c>--io-maxbandwidth</c> via <see cref="DockerContainerRunSettings.IoMaxbandwidth"/></li>
        ///     <li><c>--io-maxiops</c> via <see cref="DockerContainerRunSettings.IoMaxiops"/></li>
        ///     <li><c>--ip</c> via <see cref="DockerContainerRunSettings.Ip"/></li>
        ///     <li><c>--ip6</c> via <see cref="DockerContainerRunSettings.Ip6"/></li>
        ///     <li><c>--ipc</c> via <see cref="DockerContainerRunSettings.Ipc"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerContainerRunSettings.Isolation"/></li>
        ///     <li><c>--kernel-memory</c> via <see cref="DockerContainerRunSettings.KernelMemory"/></li>
        ///     <li><c>--label</c> via <see cref="DockerContainerRunSettings.Label"/></li>
        ///     <li><c>--label-file</c> via <see cref="DockerContainerRunSettings.LabelFile"/></li>
        ///     <li><c>--link</c> via <see cref="DockerContainerRunSettings.Link"/></li>
        ///     <li><c>--link-local-ip</c> via <see cref="DockerContainerRunSettings.LinkLocalIp"/></li>
        ///     <li><c>--log-driver</c> via <see cref="DockerContainerRunSettings.LogDriver"/></li>
        ///     <li><c>--log-opt</c> via <see cref="DockerContainerRunSettings.LogOpt"/></li>
        ///     <li><c>--mac-address</c> via <see cref="DockerContainerRunSettings.MacAddress"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerContainerRunSettings.Memory"/></li>
        ///     <li><c>--memory-reservation</c> via <see cref="DockerContainerRunSettings.MemoryReservation"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerContainerRunSettings.MemorySwap"/></li>
        ///     <li><c>--memory-swappiness</c> via <see cref="DockerContainerRunSettings.MemorySwappiness"/></li>
        ///     <li><c>--mount</c> via <see cref="DockerContainerRunSettings.Mount"/></li>
        ///     <li><c>--name</c> via <see cref="DockerContainerRunSettings.Name"/></li>
        ///     <li><c>--net</c> via <see cref="DockerContainerRunSettings.Net"/></li>
        ///     <li><c>--net-alias</c> via <see cref="DockerContainerRunSettings.NetAlias"/></li>
        ///     <li><c>--network</c> via <see cref="DockerContainerRunSettings.Network"/></li>
        ///     <li><c>--network-alias</c> via <see cref="DockerContainerRunSettings.NetworkAlias"/></li>
        ///     <li><c>--no-healthcheck</c> via <see cref="DockerContainerRunSettings.NoHealthcheck"/></li>
        ///     <li><c>--oom-kill-disable</c> via <see cref="DockerContainerRunSettings.OomKillDisable"/></li>
        ///     <li><c>--oom-score-adj</c> via <see cref="DockerContainerRunSettings.OomScoreAdj"/></li>
        ///     <li><c>--pid</c> via <see cref="DockerContainerRunSettings.Pid"/></li>
        ///     <li><c>--pids-limit</c> via <see cref="DockerContainerRunSettings.PidsLimit"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerContainerRunSettings.Platform"/></li>
        ///     <li><c>--privileged</c> via <see cref="DockerContainerRunSettings.Privileged"/></li>
        ///     <li><c>--publish</c> via <see cref="DockerContainerRunSettings.Publish"/></li>
        ///     <li><c>--publish-all</c> via <see cref="DockerContainerRunSettings.PublishAll"/></li>
        ///     <li><c>--read-only</c> via <see cref="DockerContainerRunSettings.ReadOnly"/></li>
        ///     <li><c>--restart</c> via <see cref="DockerContainerRunSettings.Restart"/></li>
        ///     <li><c>--rm</c> via <see cref="DockerContainerRunSettings.Rm"/></li>
        ///     <li><c>--runtime</c> via <see cref="DockerContainerRunSettings.Runtime"/></li>
        ///     <li><c>--security-opt</c> via <see cref="DockerContainerRunSettings.SecurityOpt"/></li>
        ///     <li><c>--shm-size</c> via <see cref="DockerContainerRunSettings.ShmSize"/></li>
        ///     <li><c>--sig-proxy</c> via <see cref="DockerContainerRunSettings.SigProxy"/></li>
        ///     <li><c>--stop-signal</c> via <see cref="DockerContainerRunSettings.StopSignal"/></li>
        ///     <li><c>--stop-timeout</c> via <see cref="DockerContainerRunSettings.StopTimeout"/></li>
        ///     <li><c>--storage-opt</c> via <see cref="DockerContainerRunSettings.StorageOpt"/></li>
        ///     <li><c>--sysctl</c> via <see cref="DockerContainerRunSettings.Sysctl"/></li>
        ///     <li><c>--tmpfs</c> via <see cref="DockerContainerRunSettings.Tmpfs"/></li>
        ///     <li><c>--tty</c> via <see cref="DockerContainerRunSettings.Tty"/></li>
        ///     <li><c>--ulimit</c> via <see cref="DockerContainerRunSettings.Ulimit"/></li>
        ///     <li><c>--user</c> via <see cref="DockerContainerRunSettings.User"/></li>
        ///     <li><c>--userns</c> via <see cref="DockerContainerRunSettings.Userns"/></li>
        ///     <li><c>--uts</c> via <see cref="DockerContainerRunSettings.Uts"/></li>
        ///     <li><c>--volume</c> via <see cref="DockerContainerRunSettings.Volume"/></li>
        ///     <li><c>--volume-driver</c> via <see cref="DockerContainerRunSettings.VolumeDriver"/></li>
        ///     <li><c>--volumes-from</c> via <see cref="DockerContainerRunSettings.VolumesFrom"/></li>
        ///     <li><c>--workdir</c> via <see cref="DockerContainerRunSettings.Workdir"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContainerRunSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerRun(CombinatorialConfigure<DockerContainerRunSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContainerRun, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Display detailed information on one or more nodes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNodeInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;selves&gt;</c> via <see cref="DockerNodeInspectSettings.Selves"/></li>
        ///     <li><c>--format</c> via <see cref="DockerNodeInspectSettings.Format"/></li>
        ///     <li><c>--pretty</c> via <see cref="DockerNodeInspectSettings.Pretty"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNodeInspect(DockerNodeInspectSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerNodeInspectSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Display detailed information on one or more nodes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNodeInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;selves&gt;</c> via <see cref="DockerNodeInspectSettings.Selves"/></li>
        ///     <li><c>--format</c> via <see cref="DockerNodeInspectSettings.Format"/></li>
        ///     <li><c>--pretty</c> via <see cref="DockerNodeInspectSettings.Pretty"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNodeInspect(Configure<DockerNodeInspectSettings> configurator)
        {
            return DockerNodeInspect(configurator(new DockerNodeInspectSettings()));
        }
        /// <summary>
        ///   <p>Display detailed information on one or more nodes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNodeInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;selves&gt;</c> via <see cref="DockerNodeInspectSettings.Selves"/></li>
        ///     <li><c>--format</c> via <see cref="DockerNodeInspectSettings.Format"/></li>
        ///     <li><c>--pretty</c> via <see cref="DockerNodeInspectSettings.Pretty"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerNodeInspectSettings Settings, IReadOnlyCollection<Output> Output)> DockerNodeInspect(CombinatorialConfigure<DockerNodeInspectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerNodeInspect, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Save one or more images to a tar archive (streamed to STDOUT by default).</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSaveSettings.CliSettings"/></li>
        ///     <li><c>&lt;images&gt;</c> via <see cref="DockerSaveSettings.Images"/></li>
        ///     <li><c>--output</c> via <see cref="DockerSaveSettings.Output"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSave(DockerSaveSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerSaveSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Save one or more images to a tar archive (streamed to STDOUT by default).</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSaveSettings.CliSettings"/></li>
        ///     <li><c>&lt;images&gt;</c> via <see cref="DockerSaveSettings.Images"/></li>
        ///     <li><c>--output</c> via <see cref="DockerSaveSettings.Output"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSave(Configure<DockerSaveSettings> configurator)
        {
            return DockerSave(configurator(new DockerSaveSettings()));
        }
        /// <summary>
        ///   <p>Save one or more images to a tar archive (streamed to STDOUT by default).</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSaveSettings.CliSettings"/></li>
        ///     <li><c>&lt;images&gt;</c> via <see cref="DockerSaveSettings.Images"/></li>
        ///     <li><c>--output</c> via <see cref="DockerSaveSettings.Output"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerSaveSettings Settings, IReadOnlyCollection<Output> Output)> DockerSave(CombinatorialConfigure<DockerSaveSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerSave, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Display a live stream of container(s) resource usage statistics.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerStatsSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerStatsSettings.Containers"/></li>
        ///     <li><c>--all</c> via <see cref="DockerContainerStatsSettings.All"/></li>
        ///     <li><c>--format</c> via <see cref="DockerContainerStatsSettings.Format"/></li>
        ///     <li><c>--no-stream</c> via <see cref="DockerContainerStatsSettings.NoStream"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerContainerStatsSettings.NoTrunc"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerStats(DockerContainerStatsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContainerStatsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Display a live stream of container(s) resource usage statistics.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerStatsSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerStatsSettings.Containers"/></li>
        ///     <li><c>--all</c> via <see cref="DockerContainerStatsSettings.All"/></li>
        ///     <li><c>--format</c> via <see cref="DockerContainerStatsSettings.Format"/></li>
        ///     <li><c>--no-stream</c> via <see cref="DockerContainerStatsSettings.NoStream"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerContainerStatsSettings.NoTrunc"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerStats(Configure<DockerContainerStatsSettings> configurator)
        {
            return DockerContainerStats(configurator(new DockerContainerStatsSettings()));
        }
        /// <summary>
        ///   <p>Display a live stream of container(s) resource usage statistics.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerStatsSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerStatsSettings.Containers"/></li>
        ///     <li><c>--all</c> via <see cref="DockerContainerStatsSettings.All"/></li>
        ///     <li><c>--format</c> via <see cref="DockerContainerStatsSettings.Format"/></li>
        ///     <li><c>--no-stream</c> via <see cref="DockerContainerStatsSettings.NoStream"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerContainerStatsSettings.NoTrunc"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContainerStatsSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerStats(CombinatorialConfigure<DockerContainerStatsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContainerStats, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Run a command in a running container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;args&gt;</c> via <see cref="DockerContainerExecSettings.Args"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerExecSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerContainerExecSettings.Command"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerExecSettings.Container"/></li>
        ///     <li><c>--detach</c> via <see cref="DockerContainerExecSettings.Detach"/></li>
        ///     <li><c>--detach-keys</c> via <see cref="DockerContainerExecSettings.DetachKeys"/></li>
        ///     <li><c>--env</c> via <see cref="DockerContainerExecSettings.Env"/></li>
        ///     <li><c>--interactive</c> via <see cref="DockerContainerExecSettings.Interactive"/></li>
        ///     <li><c>--privileged</c> via <see cref="DockerContainerExecSettings.Privileged"/></li>
        ///     <li><c>--tty</c> via <see cref="DockerContainerExecSettings.Tty"/></li>
        ///     <li><c>--user</c> via <see cref="DockerContainerExecSettings.User"/></li>
        ///     <li><c>--workdir</c> via <see cref="DockerContainerExecSettings.Workdir"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerExec(DockerContainerExecSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContainerExecSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Run a command in a running container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;args&gt;</c> via <see cref="DockerContainerExecSettings.Args"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerExecSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerContainerExecSettings.Command"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerExecSettings.Container"/></li>
        ///     <li><c>--detach</c> via <see cref="DockerContainerExecSettings.Detach"/></li>
        ///     <li><c>--detach-keys</c> via <see cref="DockerContainerExecSettings.DetachKeys"/></li>
        ///     <li><c>--env</c> via <see cref="DockerContainerExecSettings.Env"/></li>
        ///     <li><c>--interactive</c> via <see cref="DockerContainerExecSettings.Interactive"/></li>
        ///     <li><c>--privileged</c> via <see cref="DockerContainerExecSettings.Privileged"/></li>
        ///     <li><c>--tty</c> via <see cref="DockerContainerExecSettings.Tty"/></li>
        ///     <li><c>--user</c> via <see cref="DockerContainerExecSettings.User"/></li>
        ///     <li><c>--workdir</c> via <see cref="DockerContainerExecSettings.Workdir"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerExec(Configure<DockerContainerExecSettings> configurator)
        {
            return DockerContainerExec(configurator(new DockerContainerExecSettings()));
        }
        /// <summary>
        ///   <p>Run a command in a running container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;args&gt;</c> via <see cref="DockerContainerExecSettings.Args"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerExecSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerContainerExecSettings.Command"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerExecSettings.Container"/></li>
        ///     <li><c>--detach</c> via <see cref="DockerContainerExecSettings.Detach"/></li>
        ///     <li><c>--detach-keys</c> via <see cref="DockerContainerExecSettings.DetachKeys"/></li>
        ///     <li><c>--env</c> via <see cref="DockerContainerExecSettings.Env"/></li>
        ///     <li><c>--interactive</c> via <see cref="DockerContainerExecSettings.Interactive"/></li>
        ///     <li><c>--privileged</c> via <see cref="DockerContainerExecSettings.Privileged"/></li>
        ///     <li><c>--tty</c> via <see cref="DockerContainerExecSettings.Tty"/></li>
        ///     <li><c>--user</c> via <see cref="DockerContainerExecSettings.User"/></li>
        ///     <li><c>--workdir</c> via <see cref="DockerContainerExecSettings.Workdir"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContainerExecSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerExec(CombinatorialConfigure<DockerContainerExecSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContainerExec, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>List nodes in the swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNodeLsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerNodeLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerNodeLsSettings.Format"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerNodeLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNodeLs(DockerNodeLsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerNodeLsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>List nodes in the swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNodeLsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerNodeLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerNodeLsSettings.Format"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerNodeLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNodeLs(Configure<DockerNodeLsSettings> configurator)
        {
            return DockerNodeLs(configurator(new DockerNodeLsSettings()));
        }
        /// <summary>
        ///   <p>List nodes in the swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNodeLsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerNodeLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerNodeLsSettings.Format"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerNodeLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerNodeLsSettings Settings, IReadOnlyCollection<Output> Output)> DockerNodeLs(CombinatorialConfigure<DockerNodeLsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerNodeLs, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Join a swarm as a node and/or manager.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmJoinSettings.CliSettings"/></li>
        ///     <li><c>--advertise-addr</c> via <see cref="DockerSwarmJoinSettings.AdvertiseAddr"/></li>
        ///     <li><c>--availability</c> via <see cref="DockerSwarmJoinSettings.Availability"/></li>
        ///     <li><c>--data-path-addr</c> via <see cref="DockerSwarmJoinSettings.DataPathAddr"/></li>
        ///     <li><c>--listen-addr</c> via <see cref="DockerSwarmJoinSettings.ListenAddr"/></li>
        ///     <li><c>--token</c> via <see cref="DockerSwarmJoinSettings.Token"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSwarmJoin(DockerSwarmJoinSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerSwarmJoinSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Join a swarm as a node and/or manager.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmJoinSettings.CliSettings"/></li>
        ///     <li><c>--advertise-addr</c> via <see cref="DockerSwarmJoinSettings.AdvertiseAddr"/></li>
        ///     <li><c>--availability</c> via <see cref="DockerSwarmJoinSettings.Availability"/></li>
        ///     <li><c>--data-path-addr</c> via <see cref="DockerSwarmJoinSettings.DataPathAddr"/></li>
        ///     <li><c>--listen-addr</c> via <see cref="DockerSwarmJoinSettings.ListenAddr"/></li>
        ///     <li><c>--token</c> via <see cref="DockerSwarmJoinSettings.Token"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSwarmJoin(Configure<DockerSwarmJoinSettings> configurator)
        {
            return DockerSwarmJoin(configurator(new DockerSwarmJoinSettings()));
        }
        /// <summary>
        ///   <p>Join a swarm as a node and/or manager.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmJoinSettings.CliSettings"/></li>
        ///     <li><c>--advertise-addr</c> via <see cref="DockerSwarmJoinSettings.AdvertiseAddr"/></li>
        ///     <li><c>--availability</c> via <see cref="DockerSwarmJoinSettings.Availability"/></li>
        ///     <li><c>--data-path-addr</c> via <see cref="DockerSwarmJoinSettings.DataPathAddr"/></li>
        ///     <li><c>--listen-addr</c> via <see cref="DockerSwarmJoinSettings.ListenAddr"/></li>
        ///     <li><c>--token</c> via <see cref="DockerSwarmJoinSettings.Token"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerSwarmJoinSettings Settings, IReadOnlyCollection<Output> Output)> DockerSwarmJoin(CombinatorialConfigure<DockerSwarmJoinSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerSwarmJoin, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Fetch the logs of a container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerLogsSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerLogsSettings.Container"/></li>
        ///     <li><c>--details</c> via <see cref="DockerContainerLogsSettings.Details"/></li>
        ///     <li><c>--follow</c> via <see cref="DockerContainerLogsSettings.Follow"/></li>
        ///     <li><c>--since</c> via <see cref="DockerContainerLogsSettings.Since"/></li>
        ///     <li><c>--tail</c> via <see cref="DockerContainerLogsSettings.Tail"/></li>
        ///     <li><c>--timestamps</c> via <see cref="DockerContainerLogsSettings.Timestamps"/></li>
        ///     <li><c>--until</c> via <see cref="DockerContainerLogsSettings.Until"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerLogs(DockerContainerLogsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContainerLogsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Fetch the logs of a container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerLogsSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerLogsSettings.Container"/></li>
        ///     <li><c>--details</c> via <see cref="DockerContainerLogsSettings.Details"/></li>
        ///     <li><c>--follow</c> via <see cref="DockerContainerLogsSettings.Follow"/></li>
        ///     <li><c>--since</c> via <see cref="DockerContainerLogsSettings.Since"/></li>
        ///     <li><c>--tail</c> via <see cref="DockerContainerLogsSettings.Tail"/></li>
        ///     <li><c>--timestamps</c> via <see cref="DockerContainerLogsSettings.Timestamps"/></li>
        ///     <li><c>--until</c> via <see cref="DockerContainerLogsSettings.Until"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerLogs(Configure<DockerContainerLogsSettings> configurator)
        {
            return DockerContainerLogs(configurator(new DockerContainerLogsSettings()));
        }
        /// <summary>
        ///   <p>Fetch the logs of a container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerLogsSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerLogsSettings.Container"/></li>
        ///     <li><c>--details</c> via <see cref="DockerContainerLogsSettings.Details"/></li>
        ///     <li><c>--follow</c> via <see cref="DockerContainerLogsSettings.Follow"/></li>
        ///     <li><c>--since</c> via <see cref="DockerContainerLogsSettings.Since"/></li>
        ///     <li><c>--tail</c> via <see cref="DockerContainerLogsSettings.Tail"/></li>
        ///     <li><c>--timestamps</c> via <see cref="DockerContainerLogsSettings.Timestamps"/></li>
        ///     <li><c>--until</c> via <see cref="DockerContainerLogsSettings.Until"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContainerLogsSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerLogs(CombinatorialConfigure<DockerContainerLogsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContainerLogs, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>List checkpoints for a container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerCheckpointLsSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerCheckpointLsSettings.Container"/></li>
        ///     <li><c>--checkpoint-dir</c> via <see cref="DockerCheckpointLsSettings.CheckpointDir"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerCheckpointLs(DockerCheckpointLsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerCheckpointLsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>List checkpoints for a container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerCheckpointLsSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerCheckpointLsSettings.Container"/></li>
        ///     <li><c>--checkpoint-dir</c> via <see cref="DockerCheckpointLsSettings.CheckpointDir"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerCheckpointLs(Configure<DockerCheckpointLsSettings> configurator)
        {
            return DockerCheckpointLs(configurator(new DockerCheckpointLsSettings()));
        }
        /// <summary>
        ///   <p>List checkpoints for a container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerCheckpointLsSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerCheckpointLsSettings.Container"/></li>
        ///     <li><c>--checkpoint-dir</c> via <see cref="DockerCheckpointLsSettings.CheckpointDir"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerCheckpointLsSettings Settings, IReadOnlyCollection<Output> Output)> DockerCheckpointLs(CombinatorialConfigure<DockerCheckpointLsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerCheckpointLs, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Kill one or more running containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerKillSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerKillSettings.Containers"/></li>
        ///     <li><c>--signal</c> via <see cref="DockerContainerKillSettings.Signal"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerKill(DockerContainerKillSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContainerKillSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Kill one or more running containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerKillSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerKillSettings.Containers"/></li>
        ///     <li><c>--signal</c> via <see cref="DockerContainerKillSettings.Signal"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerKill(Configure<DockerContainerKillSettings> configurator)
        {
            return DockerContainerKill(configurator(new DockerContainerKillSettings()));
        }
        /// <summary>
        ///   <p>Kill one or more running containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerKillSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerKillSettings.Containers"/></li>
        ///     <li><c>--signal</c> via <see cref="DockerContainerKillSettings.Signal"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContainerKillSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerKill(CombinatorialConfigure<DockerContainerKillSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContainerKill, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Install a plugin.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginInstallSettings.CliSettings"/></li>
        ///     <li><c>&lt;keyValues&gt;</c> via <see cref="DockerPluginInstallSettings.KeyValues"/></li>
        ///     <li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginInstallSettings.Plugin"/></li>
        ///     <li><c>--alias</c> via <see cref="DockerPluginInstallSettings.Alias"/></li>
        ///     <li><c>--disable</c> via <see cref="DockerPluginInstallSettings.Disable"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerPluginInstallSettings.DisableContentTrust"/></li>
        ///     <li><c>--grant-all-permissions</c> via <see cref="DockerPluginInstallSettings.GrantAllPermissions"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPluginInstall(DockerPluginInstallSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerPluginInstallSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Install a plugin.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginInstallSettings.CliSettings"/></li>
        ///     <li><c>&lt;keyValues&gt;</c> via <see cref="DockerPluginInstallSettings.KeyValues"/></li>
        ///     <li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginInstallSettings.Plugin"/></li>
        ///     <li><c>--alias</c> via <see cref="DockerPluginInstallSettings.Alias"/></li>
        ///     <li><c>--disable</c> via <see cref="DockerPluginInstallSettings.Disable"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerPluginInstallSettings.DisableContentTrust"/></li>
        ///     <li><c>--grant-all-permissions</c> via <see cref="DockerPluginInstallSettings.GrantAllPermissions"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPluginInstall(Configure<DockerPluginInstallSettings> configurator)
        {
            return DockerPluginInstall(configurator(new DockerPluginInstallSettings()));
        }
        /// <summary>
        ///   <p>Install a plugin.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginInstallSettings.CliSettings"/></li>
        ///     <li><c>&lt;keyValues&gt;</c> via <see cref="DockerPluginInstallSettings.KeyValues"/></li>
        ///     <li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginInstallSettings.Plugin"/></li>
        ///     <li><c>--alias</c> via <see cref="DockerPluginInstallSettings.Alias"/></li>
        ///     <li><c>--disable</c> via <see cref="DockerPluginInstallSettings.Disable"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerPluginInstallSettings.DisableContentTrust"/></li>
        ///     <li><c>--grant-all-permissions</c> via <see cref="DockerPluginInstallSettings.GrantAllPermissions"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerPluginInstallSettings Settings, IReadOnlyCollection<Output> Output)> DockerPluginInstall(CombinatorialConfigure<DockerPluginInstallSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerPluginInstall, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Remove unused images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImagePruneSettings.CliSettings"/></li>
        ///     <li><c>--all</c> via <see cref="DockerImagePruneSettings.All"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerImagePruneSettings.Filter"/></li>
        ///     <li><c>--force</c> via <see cref="DockerImagePruneSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImagePrune(DockerImagePruneSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerImagePruneSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove unused images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImagePruneSettings.CliSettings"/></li>
        ///     <li><c>--all</c> via <see cref="DockerImagePruneSettings.All"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerImagePruneSettings.Filter"/></li>
        ///     <li><c>--force</c> via <see cref="DockerImagePruneSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImagePrune(Configure<DockerImagePruneSettings> configurator)
        {
            return DockerImagePrune(configurator(new DockerImagePruneSettings()));
        }
        /// <summary>
        ///   <p>Remove unused images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImagePruneSettings.CliSettings"/></li>
        ///     <li><c>--all</c> via <see cref="DockerImagePruneSettings.All"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerImagePruneSettings.Filter"/></li>
        ///     <li><c>--force</c> via <see cref="DockerImagePruneSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerImagePruneSettings Settings, IReadOnlyCollection<Output> Output)> DockerImagePrune(CombinatorialConfigure<DockerImagePruneSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerImagePrune, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Import the contents from a tarball to create a filesystem image.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageImportSettings.CliSettings"/></li>
        ///     <li><c>&lt;file&gt;</c> via <see cref="DockerImageImportSettings.File"/></li>
        ///     <li><c>&lt;repository&gt;</c> via <see cref="DockerImageImportSettings.Repository"/></li>
        ///     <li><c>--change</c> via <see cref="DockerImageImportSettings.Change"/></li>
        ///     <li><c>--message</c> via <see cref="DockerImageImportSettings.Message"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerImageImportSettings.Platform"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImageImport(DockerImageImportSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerImageImportSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Import the contents from a tarball to create a filesystem image.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageImportSettings.CliSettings"/></li>
        ///     <li><c>&lt;file&gt;</c> via <see cref="DockerImageImportSettings.File"/></li>
        ///     <li><c>&lt;repository&gt;</c> via <see cref="DockerImageImportSettings.Repository"/></li>
        ///     <li><c>--change</c> via <see cref="DockerImageImportSettings.Change"/></li>
        ///     <li><c>--message</c> via <see cref="DockerImageImportSettings.Message"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerImageImportSettings.Platform"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImageImport(Configure<DockerImageImportSettings> configurator)
        {
            return DockerImageImport(configurator(new DockerImageImportSettings()));
        }
        /// <summary>
        ///   <p>Import the contents from a tarball to create a filesystem image.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageImportSettings.CliSettings"/></li>
        ///     <li><c>&lt;file&gt;</c> via <see cref="DockerImageImportSettings.File"/></li>
        ///     <li><c>&lt;repository&gt;</c> via <see cref="DockerImageImportSettings.Repository"/></li>
        ///     <li><c>--change</c> via <see cref="DockerImageImportSettings.Change"/></li>
        ///     <li><c>--message</c> via <see cref="DockerImageImportSettings.Message"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerImageImportSettings.Platform"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerImageImportSettings Settings, IReadOnlyCollection<Output> Output)> DockerImageImport(CombinatorialConfigure<DockerImageImportSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerImageImport, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Inspect changes to files or directories on a container's filesystem.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerDiffSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerDiffSettings.Container"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerDiff(DockerDiffSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerDiffSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Inspect changes to files or directories on a container's filesystem.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerDiffSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerDiffSettings.Container"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerDiff(Configure<DockerDiffSettings> configurator)
        {
            return DockerDiff(configurator(new DockerDiffSettings()));
        }
        /// <summary>
        ///   <p>Inspect changes to files or directories on a container's filesystem.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerDiffSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerDiffSettings.Container"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerDiffSettings Settings, IReadOnlyCollection<Output> Output)> DockerDiff(CombinatorialConfigure<DockerDiffSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerDiff, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Unpause all processes within one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerUnpauseSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerUnpauseSettings.Containers"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerUnpause(DockerUnpauseSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerUnpauseSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Unpause all processes within one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerUnpauseSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerUnpauseSettings.Containers"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerUnpause(Configure<DockerUnpauseSettings> configurator)
        {
            return DockerUnpause(configurator(new DockerUnpauseSettings()));
        }
        /// <summary>
        ///   <p>Unpause all processes within one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerUnpauseSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerUnpauseSettings.Containers"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerUnpauseSettings Settings, IReadOnlyCollection<Output> Output)> DockerUnpause(CombinatorialConfigure<DockerUnpauseSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerUnpause, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>List containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerLsSettings.CliSettings"/></li>
        ///     <li><c>--all</c> via <see cref="DockerContainerLsSettings.All"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerContainerLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerContainerLsSettings.Format"/></li>
        ///     <li><c>--last</c> via <see cref="DockerContainerLsSettings.Last"/></li>
        ///     <li><c>--latest</c> via <see cref="DockerContainerLsSettings.Latest"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerContainerLsSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerContainerLsSettings.Quiet"/></li>
        ///     <li><c>--size</c> via <see cref="DockerContainerLsSettings.Size"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerLs(DockerContainerLsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContainerLsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>List containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerLsSettings.CliSettings"/></li>
        ///     <li><c>--all</c> via <see cref="DockerContainerLsSettings.All"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerContainerLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerContainerLsSettings.Format"/></li>
        ///     <li><c>--last</c> via <see cref="DockerContainerLsSettings.Last"/></li>
        ///     <li><c>--latest</c> via <see cref="DockerContainerLsSettings.Latest"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerContainerLsSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerContainerLsSettings.Quiet"/></li>
        ///     <li><c>--size</c> via <see cref="DockerContainerLsSettings.Size"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerLs(Configure<DockerContainerLsSettings> configurator)
        {
            return DockerContainerLs(configurator(new DockerContainerLsSettings()));
        }
        /// <summary>
        ///   <p>List containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerLsSettings.CliSettings"/></li>
        ///     <li><c>--all</c> via <see cref="DockerContainerLsSettings.All"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerContainerLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerContainerLsSettings.Format"/></li>
        ///     <li><c>--last</c> via <see cref="DockerContainerLsSettings.Last"/></li>
        ///     <li><c>--latest</c> via <see cref="DockerContainerLsSettings.Latest"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerContainerLsSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerContainerLsSettings.Quiet"/></li>
        ///     <li><c>--size</c> via <see cref="DockerContainerLsSettings.Size"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContainerLsSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerLs(CombinatorialConfigure<DockerContainerLsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContainerLs, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>List tasks running on one or more nodes, defaults to current node.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNodePsSettings.CliSettings"/></li>
        ///     <li><c>&lt;nodes&gt;</c> via <see cref="DockerNodePsSettings.Nodes"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerNodePsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerNodePsSettings.Format"/></li>
        ///     <li><c>--no-resolve</c> via <see cref="DockerNodePsSettings.NoResolve"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerNodePsSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerNodePsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNodePs(DockerNodePsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerNodePsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>List tasks running on one or more nodes, defaults to current node.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNodePsSettings.CliSettings"/></li>
        ///     <li><c>&lt;nodes&gt;</c> via <see cref="DockerNodePsSettings.Nodes"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerNodePsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerNodePsSettings.Format"/></li>
        ///     <li><c>--no-resolve</c> via <see cref="DockerNodePsSettings.NoResolve"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerNodePsSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerNodePsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNodePs(Configure<DockerNodePsSettings> configurator)
        {
            return DockerNodePs(configurator(new DockerNodePsSettings()));
        }
        /// <summary>
        ///   <p>List tasks running on one or more nodes, defaults to current node.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNodePsSettings.CliSettings"/></li>
        ///     <li><c>&lt;nodes&gt;</c> via <see cref="DockerNodePsSettings.Nodes"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerNodePsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerNodePsSettings.Format"/></li>
        ///     <li><c>--no-resolve</c> via <see cref="DockerNodePsSettings.NoResolve"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerNodePsSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerNodePsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerNodePsSettings Settings, IReadOnlyCollection<Output> Output)> DockerNodePs(CombinatorialConfigure<DockerNodePsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerNodePs, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Display the running processes of a container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerTopSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerTopSettings.Container"/></li>
        ///     <li><c>&lt;options&gt;</c> via <see cref="DockerContainerTopSettings.Options"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerTop(DockerContainerTopSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContainerTopSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Display the running processes of a container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerTopSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerTopSettings.Container"/></li>
        ///     <li><c>&lt;options&gt;</c> via <see cref="DockerContainerTopSettings.Options"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerTop(Configure<DockerContainerTopSettings> configurator)
        {
            return DockerContainerTop(configurator(new DockerContainerTopSettings()));
        }
        /// <summary>
        ///   <p>Display the running processes of a container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerTopSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerTopSettings.Container"/></li>
        ///     <li><c>&lt;options&gt;</c> via <see cref="DockerContainerTopSettings.Options"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContainerTopSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerTop(CombinatorialConfigure<DockerContainerTopSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContainerTop, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Rename a container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerRenameSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerRenameSettings.Container"/></li>
        ///     <li><c>&lt;newName&gt;</c> via <see cref="DockerContainerRenameSettings.NewName"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerRename(DockerContainerRenameSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContainerRenameSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Rename a container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerRenameSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerRenameSettings.Container"/></li>
        ///     <li><c>&lt;newName&gt;</c> via <see cref="DockerContainerRenameSettings.NewName"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerRename(Configure<DockerContainerRenameSettings> configurator)
        {
            return DockerContainerRename(configurator(new DockerContainerRenameSettings()));
        }
        /// <summary>
        ///   <p>Rename a container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerRenameSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerContainerRenameSettings.Container"/></li>
        ///     <li><c>&lt;newName&gt;</c> via <see cref="DockerContainerRenameSettings.NewName"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContainerRenameSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerRename(CombinatorialConfigure<DockerContainerRenameSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContainerRename, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Show the history of an image.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageHistorySettings.CliSettings"/></li>
        ///     <li><c>&lt;image&gt;</c> via <see cref="DockerImageHistorySettings.Image"/></li>
        ///     <li><c>--format</c> via <see cref="DockerImageHistorySettings.Format"/></li>
        ///     <li><c>--human</c> via <see cref="DockerImageHistorySettings.Human"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerImageHistorySettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerImageHistorySettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImageHistory(DockerImageHistorySettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerImageHistorySettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Show the history of an image.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageHistorySettings.CliSettings"/></li>
        ///     <li><c>&lt;image&gt;</c> via <see cref="DockerImageHistorySettings.Image"/></li>
        ///     <li><c>--format</c> via <see cref="DockerImageHistorySettings.Format"/></li>
        ///     <li><c>--human</c> via <see cref="DockerImageHistorySettings.Human"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerImageHistorySettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerImageHistorySettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImageHistory(Configure<DockerImageHistorySettings> configurator)
        {
            return DockerImageHistory(configurator(new DockerImageHistorySettings()));
        }
        /// <summary>
        ///   <p>Show the history of an image.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageHistorySettings.CliSettings"/></li>
        ///     <li><c>&lt;image&gt;</c> via <see cref="DockerImageHistorySettings.Image"/></li>
        ///     <li><c>--format</c> via <see cref="DockerImageHistorySettings.Format"/></li>
        ///     <li><c>--human</c> via <see cref="DockerImageHistorySettings.Human"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerImageHistorySettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerImageHistorySettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerImageHistorySettings Settings, IReadOnlyCollection<Output> Output)> DockerImageHistory(CombinatorialConfigure<DockerImageHistorySettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerImageHistory, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>List containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPsSettings.CliSettings"/></li>
        ///     <li><c>--all</c> via <see cref="DockerPsSettings.All"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerPsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerPsSettings.Format"/></li>
        ///     <li><c>--last</c> via <see cref="DockerPsSettings.Last"/></li>
        ///     <li><c>--latest</c> via <see cref="DockerPsSettings.Latest"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerPsSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerPsSettings.Quiet"/></li>
        ///     <li><c>--size</c> via <see cref="DockerPsSettings.Size"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPs(DockerPsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerPsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>List containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPsSettings.CliSettings"/></li>
        ///     <li><c>--all</c> via <see cref="DockerPsSettings.All"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerPsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerPsSettings.Format"/></li>
        ///     <li><c>--last</c> via <see cref="DockerPsSettings.Last"/></li>
        ///     <li><c>--latest</c> via <see cref="DockerPsSettings.Latest"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerPsSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerPsSettings.Quiet"/></li>
        ///     <li><c>--size</c> via <see cref="DockerPsSettings.Size"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPs(Configure<DockerPsSettings> configurator)
        {
            return DockerPs(configurator(new DockerPsSettings()));
        }
        /// <summary>
        ///   <p>List containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPsSettings.CliSettings"/></li>
        ///     <li><c>--all</c> via <see cref="DockerPsSettings.All"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerPsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerPsSettings.Format"/></li>
        ///     <li><c>--last</c> via <see cref="DockerPsSettings.Last"/></li>
        ///     <li><c>--latest</c> via <see cref="DockerPsSettings.Latest"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerPsSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerPsSettings.Quiet"/></li>
        ///     <li><c>--size</c> via <see cref="DockerPsSettings.Size"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerPsSettings Settings, IReadOnlyCollection<Output> Output)> DockerPs(CombinatorialConfigure<DockerPsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerPs, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageTagSettings.CliSettings"/></li>
        ///     <li><c>&lt;sourceImage&gt;</c> via <see cref="DockerImageTagSettings.SourceImage"/></li>
        ///     <li><c>&lt;targetImage&gt;</c> via <see cref="DockerImageTagSettings.TargetImage"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImageTag(DockerImageTagSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerImageTagSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageTagSettings.CliSettings"/></li>
        ///     <li><c>&lt;sourceImage&gt;</c> via <see cref="DockerImageTagSettings.SourceImage"/></li>
        ///     <li><c>&lt;targetImage&gt;</c> via <see cref="DockerImageTagSettings.TargetImage"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImageTag(Configure<DockerImageTagSettings> configurator)
        {
            return DockerImageTag(configurator(new DockerImageTagSettings()));
        }
        /// <summary>
        ///   <p>Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageTagSettings.CliSettings"/></li>
        ///     <li><c>&lt;sourceImage&gt;</c> via <see cref="DockerImageTagSettings.SourceImage"/></li>
        ///     <li><c>&lt;targetImage&gt;</c> via <see cref="DockerImageTagSettings.TargetImage"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerImageTagSettings Settings, IReadOnlyCollection<Output> Output)> DockerImageTag(CombinatorialConfigure<DockerImageTagSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerImageTag, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Export a container's filesystem as a tar archive.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerExportSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerExportSettings.Container"/></li>
        ///     <li><c>--output</c> via <see cref="DockerExportSettings.Output"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerExport(DockerExportSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerExportSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Export a container's filesystem as a tar archive.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerExportSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerExportSettings.Container"/></li>
        ///     <li><c>--output</c> via <see cref="DockerExportSettings.Output"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerExport(Configure<DockerExportSettings> configurator)
        {
            return DockerExport(configurator(new DockerExportSettings()));
        }
        /// <summary>
        ///   <p>Export a container's filesystem as a tar archive.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerExportSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerExportSettings.Container"/></li>
        ///     <li><c>--output</c> via <see cref="DockerExportSettings.Output"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerExportSettings Settings, IReadOnlyCollection<Output> Output)> DockerExport(CombinatorialConfigure<DockerExportSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerExport, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Disconnect a container from a network.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNetworkDisconnectSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerNetworkDisconnectSettings.Container"/></li>
        ///     <li><c>&lt;network&gt;</c> via <see cref="DockerNetworkDisconnectSettings.Network"/></li>
        ///     <li><c>--force</c> via <see cref="DockerNetworkDisconnectSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNetworkDisconnect(DockerNetworkDisconnectSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerNetworkDisconnectSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Disconnect a container from a network.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNetworkDisconnectSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerNetworkDisconnectSettings.Container"/></li>
        ///     <li><c>&lt;network&gt;</c> via <see cref="DockerNetworkDisconnectSettings.Network"/></li>
        ///     <li><c>--force</c> via <see cref="DockerNetworkDisconnectSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNetworkDisconnect(Configure<DockerNetworkDisconnectSettings> configurator)
        {
            return DockerNetworkDisconnect(configurator(new DockerNetworkDisconnectSettings()));
        }
        /// <summary>
        ///   <p>Disconnect a container from a network.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNetworkDisconnectSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerNetworkDisconnectSettings.Container"/></li>
        ///     <li><c>&lt;network&gt;</c> via <see cref="DockerNetworkDisconnectSettings.Network"/></li>
        ///     <li><c>--force</c> via <see cref="DockerNetworkDisconnectSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerNetworkDisconnectSettings Settings, IReadOnlyCollection<Output> Output)> DockerNetworkDisconnect(CombinatorialConfigure<DockerNetworkDisconnectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerNetworkDisconnect, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Build an image from a Dockerfile.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerBuilderBuildSettings.CliSettings"/></li>
        ///     <li><c>&lt;path&gt;</c> via <see cref="DockerBuilderBuildSettings.Path"/></li>
        ///     <li><c>--add-host</c> via <see cref="DockerBuilderBuildSettings.AddHost"/></li>
        ///     <li><c>--build-arg</c> via <see cref="DockerBuilderBuildSettings.BuildArg"/></li>
        ///     <li><c>--cache-from</c> via <see cref="DockerBuilderBuildSettings.CacheFrom"/></li>
        ///     <li><c>--cgroup-parent</c> via <see cref="DockerBuilderBuildSettings.CgroupParent"/></li>
        ///     <li><c>--compress</c> via <see cref="DockerBuilderBuildSettings.Compress"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerBuilderBuildSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerBuilderBuildSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerBuilderBuildSettings.CpuShares"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerBuilderBuildSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerBuilderBuildSettings.CpusetMems"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerBuilderBuildSettings.DisableContentTrust"/></li>
        ///     <li><c>--file</c> via <see cref="DockerBuilderBuildSettings.File"/></li>
        ///     <li><c>--force-rm</c> via <see cref="DockerBuilderBuildSettings.ForceRm"/></li>
        ///     <li><c>--iidfile</c> via <see cref="DockerBuilderBuildSettings.Iidfile"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerBuilderBuildSettings.Isolation"/></li>
        ///     <li><c>--label</c> via <see cref="DockerBuilderBuildSettings.Label"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerBuilderBuildSettings.Memory"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerBuilderBuildSettings.MemorySwap"/></li>
        ///     <li><c>--network</c> via <see cref="DockerBuilderBuildSettings.Network"/></li>
        ///     <li><c>--no-cache</c> via <see cref="DockerBuilderBuildSettings.NoCache"/></li>
        ///     <li><c>--output</c> via <see cref="DockerBuilderBuildSettings.Output"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerBuilderBuildSettings.Platform"/></li>
        ///     <li><c>--progress</c> via <see cref="DockerBuilderBuildSettings.Progress"/></li>
        ///     <li><c>--pull</c> via <see cref="DockerBuilderBuildSettings.Pull"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerBuilderBuildSettings.Quiet"/></li>
        ///     <li><c>--rm</c> via <see cref="DockerBuilderBuildSettings.Rm"/></li>
        ///     <li><c>--secret</c> via <see cref="DockerBuilderBuildSettings.Secret"/></li>
        ///     <li><c>--security-opt</c> via <see cref="DockerBuilderBuildSettings.SecurityOpt"/></li>
        ///     <li><c>--shm-size</c> via <see cref="DockerBuilderBuildSettings.ShmSize"/></li>
        ///     <li><c>--squash</c> via <see cref="DockerBuilderBuildSettings.Squash"/></li>
        ///     <li><c>--ssh</c> via <see cref="DockerBuilderBuildSettings.Ssh"/></li>
        ///     <li><c>--stream</c> via <see cref="DockerBuilderBuildSettings.Stream"/></li>
        ///     <li><c>--tag</c> via <see cref="DockerBuilderBuildSettings.Tag"/></li>
        ///     <li><c>--target</c> via <see cref="DockerBuilderBuildSettings.Target"/></li>
        ///     <li><c>--ulimit</c> via <see cref="DockerBuilderBuildSettings.Ulimit"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerBuilderBuild(DockerBuilderBuildSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerBuilderBuildSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Build an image from a Dockerfile.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerBuilderBuildSettings.CliSettings"/></li>
        ///     <li><c>&lt;path&gt;</c> via <see cref="DockerBuilderBuildSettings.Path"/></li>
        ///     <li><c>--add-host</c> via <see cref="DockerBuilderBuildSettings.AddHost"/></li>
        ///     <li><c>--build-arg</c> via <see cref="DockerBuilderBuildSettings.BuildArg"/></li>
        ///     <li><c>--cache-from</c> via <see cref="DockerBuilderBuildSettings.CacheFrom"/></li>
        ///     <li><c>--cgroup-parent</c> via <see cref="DockerBuilderBuildSettings.CgroupParent"/></li>
        ///     <li><c>--compress</c> via <see cref="DockerBuilderBuildSettings.Compress"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerBuilderBuildSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerBuilderBuildSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerBuilderBuildSettings.CpuShares"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerBuilderBuildSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerBuilderBuildSettings.CpusetMems"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerBuilderBuildSettings.DisableContentTrust"/></li>
        ///     <li><c>--file</c> via <see cref="DockerBuilderBuildSettings.File"/></li>
        ///     <li><c>--force-rm</c> via <see cref="DockerBuilderBuildSettings.ForceRm"/></li>
        ///     <li><c>--iidfile</c> via <see cref="DockerBuilderBuildSettings.Iidfile"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerBuilderBuildSettings.Isolation"/></li>
        ///     <li><c>--label</c> via <see cref="DockerBuilderBuildSettings.Label"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerBuilderBuildSettings.Memory"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerBuilderBuildSettings.MemorySwap"/></li>
        ///     <li><c>--network</c> via <see cref="DockerBuilderBuildSettings.Network"/></li>
        ///     <li><c>--no-cache</c> via <see cref="DockerBuilderBuildSettings.NoCache"/></li>
        ///     <li><c>--output</c> via <see cref="DockerBuilderBuildSettings.Output"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerBuilderBuildSettings.Platform"/></li>
        ///     <li><c>--progress</c> via <see cref="DockerBuilderBuildSettings.Progress"/></li>
        ///     <li><c>--pull</c> via <see cref="DockerBuilderBuildSettings.Pull"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerBuilderBuildSettings.Quiet"/></li>
        ///     <li><c>--rm</c> via <see cref="DockerBuilderBuildSettings.Rm"/></li>
        ///     <li><c>--secret</c> via <see cref="DockerBuilderBuildSettings.Secret"/></li>
        ///     <li><c>--security-opt</c> via <see cref="DockerBuilderBuildSettings.SecurityOpt"/></li>
        ///     <li><c>--shm-size</c> via <see cref="DockerBuilderBuildSettings.ShmSize"/></li>
        ///     <li><c>--squash</c> via <see cref="DockerBuilderBuildSettings.Squash"/></li>
        ///     <li><c>--ssh</c> via <see cref="DockerBuilderBuildSettings.Ssh"/></li>
        ///     <li><c>--stream</c> via <see cref="DockerBuilderBuildSettings.Stream"/></li>
        ///     <li><c>--tag</c> via <see cref="DockerBuilderBuildSettings.Tag"/></li>
        ///     <li><c>--target</c> via <see cref="DockerBuilderBuildSettings.Target"/></li>
        ///     <li><c>--ulimit</c> via <see cref="DockerBuilderBuildSettings.Ulimit"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerBuilderBuild(Configure<DockerBuilderBuildSettings> configurator)
        {
            return DockerBuilderBuild(configurator(new DockerBuilderBuildSettings()));
        }
        /// <summary>
        ///   <p>Build an image from a Dockerfile.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerBuilderBuildSettings.CliSettings"/></li>
        ///     <li><c>&lt;path&gt;</c> via <see cref="DockerBuilderBuildSettings.Path"/></li>
        ///     <li><c>--add-host</c> via <see cref="DockerBuilderBuildSettings.AddHost"/></li>
        ///     <li><c>--build-arg</c> via <see cref="DockerBuilderBuildSettings.BuildArg"/></li>
        ///     <li><c>--cache-from</c> via <see cref="DockerBuilderBuildSettings.CacheFrom"/></li>
        ///     <li><c>--cgroup-parent</c> via <see cref="DockerBuilderBuildSettings.CgroupParent"/></li>
        ///     <li><c>--compress</c> via <see cref="DockerBuilderBuildSettings.Compress"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerBuilderBuildSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerBuilderBuildSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerBuilderBuildSettings.CpuShares"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerBuilderBuildSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerBuilderBuildSettings.CpusetMems"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerBuilderBuildSettings.DisableContentTrust"/></li>
        ///     <li><c>--file</c> via <see cref="DockerBuilderBuildSettings.File"/></li>
        ///     <li><c>--force-rm</c> via <see cref="DockerBuilderBuildSettings.ForceRm"/></li>
        ///     <li><c>--iidfile</c> via <see cref="DockerBuilderBuildSettings.Iidfile"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerBuilderBuildSettings.Isolation"/></li>
        ///     <li><c>--label</c> via <see cref="DockerBuilderBuildSettings.Label"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerBuilderBuildSettings.Memory"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerBuilderBuildSettings.MemorySwap"/></li>
        ///     <li><c>--network</c> via <see cref="DockerBuilderBuildSettings.Network"/></li>
        ///     <li><c>--no-cache</c> via <see cref="DockerBuilderBuildSettings.NoCache"/></li>
        ///     <li><c>--output</c> via <see cref="DockerBuilderBuildSettings.Output"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerBuilderBuildSettings.Platform"/></li>
        ///     <li><c>--progress</c> via <see cref="DockerBuilderBuildSettings.Progress"/></li>
        ///     <li><c>--pull</c> via <see cref="DockerBuilderBuildSettings.Pull"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerBuilderBuildSettings.Quiet"/></li>
        ///     <li><c>--rm</c> via <see cref="DockerBuilderBuildSettings.Rm"/></li>
        ///     <li><c>--secret</c> via <see cref="DockerBuilderBuildSettings.Secret"/></li>
        ///     <li><c>--security-opt</c> via <see cref="DockerBuilderBuildSettings.SecurityOpt"/></li>
        ///     <li><c>--shm-size</c> via <see cref="DockerBuilderBuildSettings.ShmSize"/></li>
        ///     <li><c>--squash</c> via <see cref="DockerBuilderBuildSettings.Squash"/></li>
        ///     <li><c>--ssh</c> via <see cref="DockerBuilderBuildSettings.Ssh"/></li>
        ///     <li><c>--stream</c> via <see cref="DockerBuilderBuildSettings.Stream"/></li>
        ///     <li><c>--tag</c> via <see cref="DockerBuilderBuildSettings.Tag"/></li>
        ///     <li><c>--target</c> via <see cref="DockerBuilderBuildSettings.Target"/></li>
        ///     <li><c>--ulimit</c> via <see cref="DockerBuilderBuildSettings.Ulimit"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerBuilderBuildSettings Settings, IReadOnlyCollection<Output> Output)> DockerBuilderBuild(CombinatorialConfigure<DockerBuilderBuildSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerBuilderBuild, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Display a live stream of container(s) resource usage statistics.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStatsSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerStatsSettings.Containers"/></li>
        ///     <li><c>--all</c> via <see cref="DockerStatsSettings.All"/></li>
        ///     <li><c>--format</c> via <see cref="DockerStatsSettings.Format"/></li>
        ///     <li><c>--no-stream</c> via <see cref="DockerStatsSettings.NoStream"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerStatsSettings.NoTrunc"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerStats(DockerStatsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerStatsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Display a live stream of container(s) resource usage statistics.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStatsSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerStatsSettings.Containers"/></li>
        ///     <li><c>--all</c> via <see cref="DockerStatsSettings.All"/></li>
        ///     <li><c>--format</c> via <see cref="DockerStatsSettings.Format"/></li>
        ///     <li><c>--no-stream</c> via <see cref="DockerStatsSettings.NoStream"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerStatsSettings.NoTrunc"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerStats(Configure<DockerStatsSettings> configurator)
        {
            return DockerStats(configurator(new DockerStatsSettings()));
        }
        /// <summary>
        ///   <p>Display a live stream of container(s) resource usage statistics.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStatsSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerStatsSettings.Containers"/></li>
        ///     <li><c>--all</c> via <see cref="DockerStatsSettings.All"/></li>
        ///     <li><c>--format</c> via <see cref="DockerStatsSettings.Format"/></li>
        ///     <li><c>--no-stream</c> via <see cref="DockerStatsSettings.NoStream"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerStatsSettings.NoTrunc"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerStatsSettings Settings, IReadOnlyCollection<Output> Output)> DockerStats(CombinatorialConfigure<DockerStatsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerStats, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Search the Docker Hub for images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSearchSettings.CliSettings"/></li>
        ///     <li><c>&lt;term&gt;</c> via <see cref="DockerSearchSettings.Term"/></li>
        ///     <li><c>--automated</c> via <see cref="DockerSearchSettings.Automated"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerSearchSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerSearchSettings.Format"/></li>
        ///     <li><c>--limit</c> via <see cref="DockerSearchSettings.Limit"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerSearchSettings.NoTrunc"/></li>
        ///     <li><c>--stars</c> via <see cref="DockerSearchSettings.Stars"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSearch(DockerSearchSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerSearchSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Search the Docker Hub for images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSearchSettings.CliSettings"/></li>
        ///     <li><c>&lt;term&gt;</c> via <see cref="DockerSearchSettings.Term"/></li>
        ///     <li><c>--automated</c> via <see cref="DockerSearchSettings.Automated"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerSearchSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerSearchSettings.Format"/></li>
        ///     <li><c>--limit</c> via <see cref="DockerSearchSettings.Limit"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerSearchSettings.NoTrunc"/></li>
        ///     <li><c>--stars</c> via <see cref="DockerSearchSettings.Stars"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSearch(Configure<DockerSearchSettings> configurator)
        {
            return DockerSearch(configurator(new DockerSearchSettings()));
        }
        /// <summary>
        ///   <p>Search the Docker Hub for images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSearchSettings.CliSettings"/></li>
        ///     <li><c>&lt;term&gt;</c> via <see cref="DockerSearchSettings.Term"/></li>
        ///     <li><c>--automated</c> via <see cref="DockerSearchSettings.Automated"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerSearchSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerSearchSettings.Format"/></li>
        ///     <li><c>--limit</c> via <see cref="DockerSearchSettings.Limit"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerSearchSettings.NoTrunc"/></li>
        ///     <li><c>--stars</c> via <see cref="DockerSearchSettings.Stars"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerSearchSettings Settings, IReadOnlyCollection<Output> Output)> DockerSearch(CombinatorialConfigure<DockerSearchSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerSearch, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Docker image manifests and manifest lists.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerManifestSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerManifestSettings.Command"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerManifest(DockerManifestSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerManifestSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Docker image manifests and manifest lists.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerManifestSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerManifestSettings.Command"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerManifest(Configure<DockerManifestSettings> configurator)
        {
            return DockerManifest(configurator(new DockerManifestSettings()));
        }
        /// <summary>
        ///   <p>Manage Docker image manifests and manifest lists.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerManifestSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerManifestSettings.Command"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerManifestSettings Settings, IReadOnlyCollection<Output> Output)> DockerManifest(CombinatorialConfigure<DockerManifestSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerManifest, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Push a plugin to a registry.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginPushSettings.CliSettings"/></li>
        ///     <li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginPushSettings.Plugin"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerPluginPushSettings.DisableContentTrust"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPluginPush(DockerPluginPushSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerPluginPushSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Push a plugin to a registry.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginPushSettings.CliSettings"/></li>
        ///     <li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginPushSettings.Plugin"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerPluginPushSettings.DisableContentTrust"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPluginPush(Configure<DockerPluginPushSettings> configurator)
        {
            return DockerPluginPush(configurator(new DockerPluginPushSettings()));
        }
        /// <summary>
        ///   <p>Push a plugin to a registry.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginPushSettings.CliSettings"/></li>
        ///     <li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginPushSettings.Plugin"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerPluginPushSettings.DisableContentTrust"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerPluginPushSettings Settings, IReadOnlyCollection<Output> Output)> DockerPluginPush(CombinatorialConfigure<DockerPluginPushSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerPluginPush, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Load an image from a tar archive or STDIN.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageLoadSettings.CliSettings"/></li>
        ///     <li><c>--input</c> via <see cref="DockerImageLoadSettings.Input"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerImageLoadSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImageLoad(DockerImageLoadSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerImageLoadSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Load an image from a tar archive or STDIN.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageLoadSettings.CliSettings"/></li>
        ///     <li><c>--input</c> via <see cref="DockerImageLoadSettings.Input"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerImageLoadSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImageLoad(Configure<DockerImageLoadSettings> configurator)
        {
            return DockerImageLoad(configurator(new DockerImageLoadSettings()));
        }
        /// <summary>
        ///   <p>Load an image from a tar archive or STDIN.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageLoadSettings.CliSettings"/></li>
        ///     <li><c>--input</c> via <see cref="DockerImageLoadSettings.Input"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerImageLoadSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerImageLoadSettings Settings, IReadOnlyCollection<Output> Output)> DockerImageLoad(CombinatorialConfigure<DockerImageLoadSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerImageLoad, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage Swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSwarm(DockerSwarmSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerSwarmSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage Swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSwarm(Configure<DockerSwarmSettings> configurator)
        {
            return DockerSwarm(configurator(new DockerSwarmSettings()));
        }
        /// <summary>
        ///   <p>Manage Swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSwarmSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerSwarmSettings Settings, IReadOnlyCollection<Output> Output)> DockerSwarm(CombinatorialConfigure<DockerSwarmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerSwarm, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Remove one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerRmSettings.Containers"/></li>
        ///     <li><c>--force</c> via <see cref="DockerContainerRmSettings.Force"/></li>
        ///     <li><c>--link</c> via <see cref="DockerContainerRmSettings.Link"/></li>
        ///     <li><c>--volumes</c> via <see cref="DockerContainerRmSettings.Volumes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerRm(DockerContainerRmSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContainerRmSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerRmSettings.Containers"/></li>
        ///     <li><c>--force</c> via <see cref="DockerContainerRmSettings.Force"/></li>
        ///     <li><c>--link</c> via <see cref="DockerContainerRmSettings.Link"/></li>
        ///     <li><c>--volumes</c> via <see cref="DockerContainerRmSettings.Volumes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerRm(Configure<DockerContainerRmSettings> configurator)
        {
            return DockerContainerRm(configurator(new DockerContainerRmSettings()));
        }
        /// <summary>
        ///   <p>Remove one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerRmSettings.Containers"/></li>
        ///     <li><c>--force</c> via <see cref="DockerContainerRmSettings.Force"/></li>
        ///     <li><c>--link</c> via <see cref="DockerContainerRmSettings.Link"/></li>
        ///     <li><c>--volumes</c> via <see cref="DockerContainerRmSettings.Volumes"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContainerRmSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerRm(CombinatorialConfigure<DockerContainerRmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContainerRm, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Update configuration of one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerUpdateSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerUpdateSettings.Containers"/></li>
        ///     <li><c>--blkio-weight</c> via <see cref="DockerContainerUpdateSettings.BlkioWeight"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerContainerUpdateSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerContainerUpdateSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-rt-period</c> via <see cref="DockerContainerUpdateSettings.CpuRtPeriod"/></li>
        ///     <li><c>--cpu-rt-runtime</c> via <see cref="DockerContainerUpdateSettings.CpuRtRuntime"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerContainerUpdateSettings.CpuShares"/></li>
        ///     <li><c>--cpus</c> via <see cref="DockerContainerUpdateSettings.Cpus"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerContainerUpdateSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerContainerUpdateSettings.CpusetMems"/></li>
        ///     <li><c>--kernel-memory</c> via <see cref="DockerContainerUpdateSettings.KernelMemory"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerContainerUpdateSettings.Memory"/></li>
        ///     <li><c>--memory-reservation</c> via <see cref="DockerContainerUpdateSettings.MemoryReservation"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerContainerUpdateSettings.MemorySwap"/></li>
        ///     <li><c>--pids-limit</c> via <see cref="DockerContainerUpdateSettings.PidsLimit"/></li>
        ///     <li><c>--restart</c> via <see cref="DockerContainerUpdateSettings.Restart"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerUpdate(DockerContainerUpdateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContainerUpdateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Update configuration of one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerUpdateSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerUpdateSettings.Containers"/></li>
        ///     <li><c>--blkio-weight</c> via <see cref="DockerContainerUpdateSettings.BlkioWeight"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerContainerUpdateSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerContainerUpdateSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-rt-period</c> via <see cref="DockerContainerUpdateSettings.CpuRtPeriod"/></li>
        ///     <li><c>--cpu-rt-runtime</c> via <see cref="DockerContainerUpdateSettings.CpuRtRuntime"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerContainerUpdateSettings.CpuShares"/></li>
        ///     <li><c>--cpus</c> via <see cref="DockerContainerUpdateSettings.Cpus"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerContainerUpdateSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerContainerUpdateSettings.CpusetMems"/></li>
        ///     <li><c>--kernel-memory</c> via <see cref="DockerContainerUpdateSettings.KernelMemory"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerContainerUpdateSettings.Memory"/></li>
        ///     <li><c>--memory-reservation</c> via <see cref="DockerContainerUpdateSettings.MemoryReservation"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerContainerUpdateSettings.MemorySwap"/></li>
        ///     <li><c>--pids-limit</c> via <see cref="DockerContainerUpdateSettings.PidsLimit"/></li>
        ///     <li><c>--restart</c> via <see cref="DockerContainerUpdateSettings.Restart"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerUpdate(Configure<DockerContainerUpdateSettings> configurator)
        {
            return DockerContainerUpdate(configurator(new DockerContainerUpdateSettings()));
        }
        /// <summary>
        ///   <p>Update configuration of one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerUpdateSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerUpdateSettings.Containers"/></li>
        ///     <li><c>--blkio-weight</c> via <see cref="DockerContainerUpdateSettings.BlkioWeight"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerContainerUpdateSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerContainerUpdateSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-rt-period</c> via <see cref="DockerContainerUpdateSettings.CpuRtPeriod"/></li>
        ///     <li><c>--cpu-rt-runtime</c> via <see cref="DockerContainerUpdateSettings.CpuRtRuntime"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerContainerUpdateSettings.CpuShares"/></li>
        ///     <li><c>--cpus</c> via <see cref="DockerContainerUpdateSettings.Cpus"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerContainerUpdateSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerContainerUpdateSettings.CpusetMems"/></li>
        ///     <li><c>--kernel-memory</c> via <see cref="DockerContainerUpdateSettings.KernelMemory"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerContainerUpdateSettings.Memory"/></li>
        ///     <li><c>--memory-reservation</c> via <see cref="DockerContainerUpdateSettings.MemoryReservation"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerContainerUpdateSettings.MemorySwap"/></li>
        ///     <li><c>--pids-limit</c> via <see cref="DockerContainerUpdateSettings.PidsLimit"/></li>
        ///     <li><c>--restart</c> via <see cref="DockerContainerUpdateSettings.Restart"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContainerUpdateSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerUpdate(CombinatorialConfigure<DockerContainerUpdateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContainerUpdate, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Change settings for a plugin.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginSetSettings.CliSettings"/></li>
        ///     <li><c>&lt;keyValues&gt;</c> via <see cref="DockerPluginSetSettings.KeyValues"/></li>
        ///     <li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginSetSettings.Plugin"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPluginSet(DockerPluginSetSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerPluginSetSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Change settings for a plugin.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginSetSettings.CliSettings"/></li>
        ///     <li><c>&lt;keyValues&gt;</c> via <see cref="DockerPluginSetSettings.KeyValues"/></li>
        ///     <li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginSetSettings.Plugin"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPluginSet(Configure<DockerPluginSetSettings> configurator)
        {
            return DockerPluginSet(configurator(new DockerPluginSetSettings()));
        }
        /// <summary>
        ///   <p>Change settings for a plugin.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginSetSettings.CliSettings"/></li>
        ///     <li><c>&lt;keyValues&gt;</c> via <see cref="DockerPluginSetSettings.KeyValues"/></li>
        ///     <li><c>&lt;plugin&gt;</c> via <see cref="DockerPluginSetSettings.Plugin"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerPluginSetSettings Settings, IReadOnlyCollection<Output> Output)> DockerPluginSet(CombinatorialConfigure<DockerPluginSetSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerPluginSet, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Block until one or more containers stop, then print their exit codes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerWaitSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerWaitSettings.Containers"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerWait(DockerWaitSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerWaitSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Block until one or more containers stop, then print their exit codes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerWaitSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerWaitSettings.Containers"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerWait(Configure<DockerWaitSettings> configurator)
        {
            return DockerWait(configurator(new DockerWaitSettings()));
        }
        /// <summary>
        ///   <p>Block until one or more containers stop, then print their exit codes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerWaitSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerWaitSettings.Containers"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerWaitSettings Settings, IReadOnlyCollection<Output> Output)> DockerWait(CombinatorialConfigure<DockerWaitSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerWait, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Export a context to a tar or kubeconfig file.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextExportSettings.CliSettings"/></li>
        ///     <li><c>&lt;context&gt;</c> via <see cref="DockerContextExportSettings.Context"/></li>
        ///     <li><c>&lt;file&gt;</c> via <see cref="DockerContextExportSettings.File"/></li>
        ///     <li><c>--kubeconfig</c> via <see cref="DockerContextExportSettings.Kubeconfig"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContextExport(DockerContextExportSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContextExportSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Export a context to a tar or kubeconfig file.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextExportSettings.CliSettings"/></li>
        ///     <li><c>&lt;context&gt;</c> via <see cref="DockerContextExportSettings.Context"/></li>
        ///     <li><c>&lt;file&gt;</c> via <see cref="DockerContextExportSettings.File"/></li>
        ///     <li><c>--kubeconfig</c> via <see cref="DockerContextExportSettings.Kubeconfig"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContextExport(Configure<DockerContextExportSettings> configurator)
        {
            return DockerContextExport(configurator(new DockerContextExportSettings()));
        }
        /// <summary>
        ///   <p>Export a context to a tar or kubeconfig file.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextExportSettings.CliSettings"/></li>
        ///     <li><c>&lt;context&gt;</c> via <see cref="DockerContextExportSettings.Context"/></li>
        ///     <li><c>&lt;file&gt;</c> via <see cref="DockerContextExportSettings.File"/></li>
        ///     <li><c>--kubeconfig</c> via <see cref="DockerContextExportSettings.Kubeconfig"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContextExportSettings Settings, IReadOnlyCollection<Output> Output)> DockerContextExport(CombinatorialConfigure<DockerContextExportSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContextExport, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Add additional information to a local image manifest.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerManifestAnnotateSettings.CliSettings"/></li>
        ///     <li><c>&lt;manifest&gt;</c> via <see cref="DockerManifestAnnotateSettings.Manifest"/></li>
        ///     <li><c>&lt;manifestList&gt;</c> via <see cref="DockerManifestAnnotateSettings.ManifestList"/></li>
        ///     <li><c>--arch</c> via <see cref="DockerManifestAnnotateSettings.Arch"/></li>
        ///     <li><c>--os</c> via <see cref="DockerManifestAnnotateSettings.Os"/></li>
        ///     <li><c>--os-features</c> via <see cref="DockerManifestAnnotateSettings.OsFeatures"/></li>
        ///     <li><c>--variant</c> via <see cref="DockerManifestAnnotateSettings.Variant"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerManifestAnnotate(DockerManifestAnnotateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerManifestAnnotateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Add additional information to a local image manifest.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerManifestAnnotateSettings.CliSettings"/></li>
        ///     <li><c>&lt;manifest&gt;</c> via <see cref="DockerManifestAnnotateSettings.Manifest"/></li>
        ///     <li><c>&lt;manifestList&gt;</c> via <see cref="DockerManifestAnnotateSettings.ManifestList"/></li>
        ///     <li><c>--arch</c> via <see cref="DockerManifestAnnotateSettings.Arch"/></li>
        ///     <li><c>--os</c> via <see cref="DockerManifestAnnotateSettings.Os"/></li>
        ///     <li><c>--os-features</c> via <see cref="DockerManifestAnnotateSettings.OsFeatures"/></li>
        ///     <li><c>--variant</c> via <see cref="DockerManifestAnnotateSettings.Variant"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerManifestAnnotate(Configure<DockerManifestAnnotateSettings> configurator)
        {
            return DockerManifestAnnotate(configurator(new DockerManifestAnnotateSettings()));
        }
        /// <summary>
        ///   <p>Add additional information to a local image manifest.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerManifestAnnotateSettings.CliSettings"/></li>
        ///     <li><c>&lt;manifest&gt;</c> via <see cref="DockerManifestAnnotateSettings.Manifest"/></li>
        ///     <li><c>&lt;manifestList&gt;</c> via <see cref="DockerManifestAnnotateSettings.ManifestList"/></li>
        ///     <li><c>--arch</c> via <see cref="DockerManifestAnnotateSettings.Arch"/></li>
        ///     <li><c>--os</c> via <see cref="DockerManifestAnnotateSettings.Os"/></li>
        ///     <li><c>--os-features</c> via <see cref="DockerManifestAnnotateSettings.OsFeatures"/></li>
        ///     <li><c>--variant</c> via <see cref="DockerManifestAnnotateSettings.Variant"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerManifestAnnotateSettings Settings, IReadOnlyCollection<Output> Output)> DockerManifestAnnotate(CombinatorialConfigure<DockerManifestAnnotateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerManifestAnnotate, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Pull an image or a repository from a registry.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImagePullSettings.CliSettings"/></li>
        ///     <li><c>&lt;name&gt;</c> via <see cref="DockerImagePullSettings.Name"/></li>
        ///     <li><c>--all-tags</c> via <see cref="DockerImagePullSettings.AllTags"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerImagePullSettings.DisableContentTrust"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerImagePullSettings.Platform"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerImagePullSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImagePull(DockerImagePullSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerImagePullSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Pull an image or a repository from a registry.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImagePullSettings.CliSettings"/></li>
        ///     <li><c>&lt;name&gt;</c> via <see cref="DockerImagePullSettings.Name"/></li>
        ///     <li><c>--all-tags</c> via <see cref="DockerImagePullSettings.AllTags"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerImagePullSettings.DisableContentTrust"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerImagePullSettings.Platform"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerImagePullSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImagePull(Configure<DockerImagePullSettings> configurator)
        {
            return DockerImagePull(configurator(new DockerImagePullSettings()));
        }
        /// <summary>
        ///   <p>Pull an image or a repository from a registry.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImagePullSettings.CliSettings"/></li>
        ///     <li><c>&lt;name&gt;</c> via <see cref="DockerImagePullSettings.Name"/></li>
        ///     <li><c>--all-tags</c> via <see cref="DockerImagePullSettings.AllTags"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerImagePullSettings.DisableContentTrust"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerImagePullSettings.Platform"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerImagePullSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerImagePullSettings Settings, IReadOnlyCollection<Output> Output)> DockerImagePull(CombinatorialConfigure<DockerImagePullSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerImagePull, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Get real time events from the server.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerEventsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerEventsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerEventsSettings.Format"/></li>
        ///     <li><c>--since</c> via <see cref="DockerEventsSettings.Since"/></li>
        ///     <li><c>--until</c> via <see cref="DockerEventsSettings.Until"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerEvents(DockerEventsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerEventsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Get real time events from the server.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerEventsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerEventsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerEventsSettings.Format"/></li>
        ///     <li><c>--since</c> via <see cref="DockerEventsSettings.Since"/></li>
        ///     <li><c>--until</c> via <see cref="DockerEventsSettings.Until"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerEvents(Configure<DockerEventsSettings> configurator)
        {
            return DockerEvents(configurator(new DockerEventsSettings()));
        }
        /// <summary>
        ///   <p>Get real time events from the server.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerEventsSettings.CliSettings"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerEventsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerEventsSettings.Format"/></li>
        ///     <li><c>--since</c> via <see cref="DockerEventsSettings.Since"/></li>
        ///     <li><c>--until</c> via <see cref="DockerEventsSettings.Until"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerEventsSettings Settings, IReadOnlyCollection<Output> Output)> DockerEvents(CombinatorialConfigure<DockerEventsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerEvents, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>List stacks.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStackLsSettings.CliSettings"/></li>
        ///     <li><c>--all-namespaces</c> via <see cref="DockerStackLsSettings.AllNamespaces"/></li>
        ///     <li><c>--format</c> via <see cref="DockerStackLsSettings.Format"/></li>
        ///     <li><c>--namespace</c> via <see cref="DockerStackLsSettings.Namespace"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerStackLs(DockerStackLsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerStackLsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>List stacks.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStackLsSettings.CliSettings"/></li>
        ///     <li><c>--all-namespaces</c> via <see cref="DockerStackLsSettings.AllNamespaces"/></li>
        ///     <li><c>--format</c> via <see cref="DockerStackLsSettings.Format"/></li>
        ///     <li><c>--namespace</c> via <see cref="DockerStackLsSettings.Namespace"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerStackLs(Configure<DockerStackLsSettings> configurator)
        {
            return DockerStackLs(configurator(new DockerStackLsSettings()));
        }
        /// <summary>
        ///   <p>List stacks.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStackLsSettings.CliSettings"/></li>
        ///     <li><c>--all-namespaces</c> via <see cref="DockerStackLsSettings.AllNamespaces"/></li>
        ///     <li><c>--format</c> via <see cref="DockerStackLsSettings.Format"/></li>
        ///     <li><c>--namespace</c> via <see cref="DockerStackLsSettings.Namespace"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerStackLsSettings Settings, IReadOnlyCollection<Output> Output)> DockerStackLs(CombinatorialConfigure<DockerStackLsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerStackLs, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Display detailed information on one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerInspectSettings.Containers"/></li>
        ///     <li><c>--format</c> via <see cref="DockerContainerInspectSettings.Format"/></li>
        ///     <li><c>--size</c> via <see cref="DockerContainerInspectSettings.Size"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerInspect(DockerContainerInspectSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContainerInspectSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Display detailed information on one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerInspectSettings.Containers"/></li>
        ///     <li><c>--format</c> via <see cref="DockerContainerInspectSettings.Format"/></li>
        ///     <li><c>--size</c> via <see cref="DockerContainerInspectSettings.Size"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerInspect(Configure<DockerContainerInspectSettings> configurator)
        {
            return DockerContainerInspect(configurator(new DockerContainerInspectSettings()));
        }
        /// <summary>
        ///   <p>Display detailed information on one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerInspectSettings.Containers"/></li>
        ///     <li><c>--format</c> via <see cref="DockerContainerInspectSettings.Format"/></li>
        ///     <li><c>--size</c> via <see cref="DockerContainerInspectSettings.Size"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContainerInspectSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerInspect(CombinatorialConfigure<DockerContainerInspectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContainerInspect, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Kill one or more running containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerKillSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerKillSettings.Containers"/></li>
        ///     <li><c>--signal</c> via <see cref="DockerKillSettings.Signal"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerKill(DockerKillSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerKillSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Kill one or more running containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerKillSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerKillSettings.Containers"/></li>
        ///     <li><c>--signal</c> via <see cref="DockerKillSettings.Signal"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerKill(Configure<DockerKillSettings> configurator)
        {
            return DockerKill(configurator(new DockerKillSettings()));
        }
        /// <summary>
        ///   <p>Kill one or more running containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerKillSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerKillSettings.Containers"/></li>
        ///     <li><c>--signal</c> via <see cref="DockerKillSettings.Signal"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerKillSettings Settings, IReadOnlyCollection<Output> Output)> DockerKill(CombinatorialConfigure<DockerKillSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerKill, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Create a checkpoint from a running container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;checkpoint&gt;</c> via <see cref="DockerCheckpointCreateSettings.Checkpoint"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerCheckpointCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerCheckpointCreateSettings.Container"/></li>
        ///     <li><c>--checkpoint-dir</c> via <see cref="DockerCheckpointCreateSettings.CheckpointDir"/></li>
        ///     <li><c>--leave-running</c> via <see cref="DockerCheckpointCreateSettings.LeaveRunning"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerCheckpointCreate(DockerCheckpointCreateSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerCheckpointCreateSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Create a checkpoint from a running container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;checkpoint&gt;</c> via <see cref="DockerCheckpointCreateSettings.Checkpoint"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerCheckpointCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerCheckpointCreateSettings.Container"/></li>
        ///     <li><c>--checkpoint-dir</c> via <see cref="DockerCheckpointCreateSettings.CheckpointDir"/></li>
        ///     <li><c>--leave-running</c> via <see cref="DockerCheckpointCreateSettings.LeaveRunning"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerCheckpointCreate(Configure<DockerCheckpointCreateSettings> configurator)
        {
            return DockerCheckpointCreate(configurator(new DockerCheckpointCreateSettings()));
        }
        /// <summary>
        ///   <p>Create a checkpoint from a running container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;checkpoint&gt;</c> via <see cref="DockerCheckpointCreateSettings.Checkpoint"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerCheckpointCreateSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerCheckpointCreateSettings.Container"/></li>
        ///     <li><c>--checkpoint-dir</c> via <see cref="DockerCheckpointCreateSettings.CheckpointDir"/></li>
        ///     <li><c>--leave-running</c> via <see cref="DockerCheckpointCreateSettings.LeaveRunning"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerCheckpointCreateSettings Settings, IReadOnlyCollection<Output> Output)> DockerCheckpointCreate(CombinatorialConfigure<DockerCheckpointCreateSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerCheckpointCreate, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Pause all processes within one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPauseSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerPauseSettings.Containers"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPause(DockerPauseSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerPauseSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Pause all processes within one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPauseSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerPauseSettings.Containers"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPause(Configure<DockerPauseSettings> configurator)
        {
            return DockerPause(configurator(new DockerPauseSettings()));
        }
        /// <summary>
        ///   <p>Pause all processes within one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPauseSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerPauseSettings.Containers"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerPauseSettings Settings, IReadOnlyCollection<Output> Output)> DockerPause(CombinatorialConfigure<DockerPauseSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerPause, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Fetch the logs of a container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerLogsSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerLogsSettings.Container"/></li>
        ///     <li><c>--details</c> via <see cref="DockerLogsSettings.Details"/></li>
        ///     <li><c>--follow</c> via <see cref="DockerLogsSettings.Follow"/></li>
        ///     <li><c>--since</c> via <see cref="DockerLogsSettings.Since"/></li>
        ///     <li><c>--tail</c> via <see cref="DockerLogsSettings.Tail"/></li>
        ///     <li><c>--timestamps</c> via <see cref="DockerLogsSettings.Timestamps"/></li>
        ///     <li><c>--until</c> via <see cref="DockerLogsSettings.Until"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerLogs(DockerLogsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerLogsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Fetch the logs of a container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerLogsSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerLogsSettings.Container"/></li>
        ///     <li><c>--details</c> via <see cref="DockerLogsSettings.Details"/></li>
        ///     <li><c>--follow</c> via <see cref="DockerLogsSettings.Follow"/></li>
        ///     <li><c>--since</c> via <see cref="DockerLogsSettings.Since"/></li>
        ///     <li><c>--tail</c> via <see cref="DockerLogsSettings.Tail"/></li>
        ///     <li><c>--timestamps</c> via <see cref="DockerLogsSettings.Timestamps"/></li>
        ///     <li><c>--until</c> via <see cref="DockerLogsSettings.Until"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerLogs(Configure<DockerLogsSettings> configurator)
        {
            return DockerLogs(configurator(new DockerLogsSettings()));
        }
        /// <summary>
        ///   <p>Fetch the logs of a container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerLogsSettings.CliSettings"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerLogsSettings.Container"/></li>
        ///     <li><c>--details</c> via <see cref="DockerLogsSettings.Details"/></li>
        ///     <li><c>--follow</c> via <see cref="DockerLogsSettings.Follow"/></li>
        ///     <li><c>--since</c> via <see cref="DockerLogsSettings.Since"/></li>
        ///     <li><c>--tail</c> via <see cref="DockerLogsSettings.Tail"/></li>
        ///     <li><c>--timestamps</c> via <see cref="DockerLogsSettings.Timestamps"/></li>
        ///     <li><c>--until</c> via <see cref="DockerLogsSettings.Until"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerLogsSettings Settings, IReadOnlyCollection<Output> Output)> DockerLogs(CombinatorialConfigure<DockerLogsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerLogs, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Display detailed information on one or more contexts.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;context&gt;</c> via <see cref="DockerContextInspectSettings.Context"/></li>
        ///     <li><c>&lt;contexts&gt;</c> via <see cref="DockerContextInspectSettings.Contexts"/></li>
        ///     <li><c>--format</c> via <see cref="DockerContextInspectSettings.Format"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContextInspect(DockerContextInspectSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContextInspectSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Display detailed information on one or more contexts.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;context&gt;</c> via <see cref="DockerContextInspectSettings.Context"/></li>
        ///     <li><c>&lt;contexts&gt;</c> via <see cref="DockerContextInspectSettings.Contexts"/></li>
        ///     <li><c>--format</c> via <see cref="DockerContextInspectSettings.Format"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContextInspect(Configure<DockerContextInspectSettings> configurator)
        {
            return DockerContextInspect(configurator(new DockerContextInspectSettings()));
        }
        /// <summary>
        ///   <p>Display detailed information on one or more contexts.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;context&gt;</c> via <see cref="DockerContextInspectSettings.Context"/></li>
        ///     <li><c>&lt;contexts&gt;</c> via <see cref="DockerContextInspectSettings.Contexts"/></li>
        ///     <li><c>--format</c> via <see cref="DockerContextInspectSettings.Format"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContextInspectSettings Settings, IReadOnlyCollection<Output> Output)> DockerContextInspect(CombinatorialConfigure<DockerContextInspectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContextInspect, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Promote one or more nodes to manager in the swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNodePromoteSettings.CliSettings"/></li>
        ///     <li><c>&lt;nodes&gt;</c> via <see cref="DockerNodePromoteSettings.Nodes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNodePromote(DockerNodePromoteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerNodePromoteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Promote one or more nodes to manager in the swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNodePromoteSettings.CliSettings"/></li>
        ///     <li><c>&lt;nodes&gt;</c> via <see cref="DockerNodePromoteSettings.Nodes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNodePromote(Configure<DockerNodePromoteSettings> configurator)
        {
            return DockerNodePromote(configurator(new DockerNodePromoteSettings()));
        }
        /// <summary>
        ///   <p>Promote one or more nodes to manager in the swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNodePromoteSettings.CliSettings"/></li>
        ///     <li><c>&lt;nodes&gt;</c> via <see cref="DockerNodePromoteSettings.Nodes"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerNodePromoteSettings Settings, IReadOnlyCollection<Output> Output)> DockerNodePromote(CombinatorialConfigure<DockerNodePromoteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerNodePromote, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Demote one or more nodes from manager in the swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNodeDemoteSettings.CliSettings"/></li>
        ///     <li><c>&lt;nodes&gt;</c> via <see cref="DockerNodeDemoteSettings.Nodes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNodeDemote(DockerNodeDemoteSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerNodeDemoteSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Demote one or more nodes from manager in the swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNodeDemoteSettings.CliSettings"/></li>
        ///     <li><c>&lt;nodes&gt;</c> via <see cref="DockerNodeDemoteSettings.Nodes"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNodeDemote(Configure<DockerNodeDemoteSettings> configurator)
        {
            return DockerNodeDemote(configurator(new DockerNodeDemoteSettings()));
        }
        /// <summary>
        ///   <p>Demote one or more nodes from manager in the swarm.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNodeDemoteSettings.CliSettings"/></li>
        ///     <li><c>&lt;nodes&gt;</c> via <see cref="DockerNodeDemoteSettings.Nodes"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerNodeDemoteSettings Settings, IReadOnlyCollection<Output> Output)> DockerNodeDemote(CombinatorialConfigure<DockerNodeDemoteSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerNodeDemote, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Run a command in a running container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;args&gt;</c> via <see cref="DockerExecSettings.Args"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerExecSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerExecSettings.Command"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerExecSettings.Container"/></li>
        ///     <li><c>--detach</c> via <see cref="DockerExecSettings.Detach"/></li>
        ///     <li><c>--detach-keys</c> via <see cref="DockerExecSettings.DetachKeys"/></li>
        ///     <li><c>--env</c> via <see cref="DockerExecSettings.Env"/></li>
        ///     <li><c>--interactive</c> via <see cref="DockerExecSettings.Interactive"/></li>
        ///     <li><c>--privileged</c> via <see cref="DockerExecSettings.Privileged"/></li>
        ///     <li><c>--tty</c> via <see cref="DockerExecSettings.Tty"/></li>
        ///     <li><c>--user</c> via <see cref="DockerExecSettings.User"/></li>
        ///     <li><c>--workdir</c> via <see cref="DockerExecSettings.Workdir"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerExec(DockerExecSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerExecSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Run a command in a running container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;args&gt;</c> via <see cref="DockerExecSettings.Args"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerExecSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerExecSettings.Command"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerExecSettings.Container"/></li>
        ///     <li><c>--detach</c> via <see cref="DockerExecSettings.Detach"/></li>
        ///     <li><c>--detach-keys</c> via <see cref="DockerExecSettings.DetachKeys"/></li>
        ///     <li><c>--env</c> via <see cref="DockerExecSettings.Env"/></li>
        ///     <li><c>--interactive</c> via <see cref="DockerExecSettings.Interactive"/></li>
        ///     <li><c>--privileged</c> via <see cref="DockerExecSettings.Privileged"/></li>
        ///     <li><c>--tty</c> via <see cref="DockerExecSettings.Tty"/></li>
        ///     <li><c>--user</c> via <see cref="DockerExecSettings.User"/></li>
        ///     <li><c>--workdir</c> via <see cref="DockerExecSettings.Workdir"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerExec(Configure<DockerExecSettings> configurator)
        {
            return DockerExec(configurator(new DockerExecSettings()));
        }
        /// <summary>
        ///   <p>Run a command in a running container.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;args&gt;</c> via <see cref="DockerExecSettings.Args"/></li>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerExecSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerExecSettings.Command"/></li>
        ///     <li><c>&lt;container&gt;</c> via <see cref="DockerExecSettings.Container"/></li>
        ///     <li><c>--detach</c> via <see cref="DockerExecSettings.Detach"/></li>
        ///     <li><c>--detach-keys</c> via <see cref="DockerExecSettings.DetachKeys"/></li>
        ///     <li><c>--env</c> via <see cref="DockerExecSettings.Env"/></li>
        ///     <li><c>--interactive</c> via <see cref="DockerExecSettings.Interactive"/></li>
        ///     <li><c>--privileged</c> via <see cref="DockerExecSettings.Privileged"/></li>
        ///     <li><c>--tty</c> via <see cref="DockerExecSettings.Tty"/></li>
        ///     <li><c>--user</c> via <see cref="DockerExecSettings.User"/></li>
        ///     <li><c>--workdir</c> via <see cref="DockerExecSettings.Workdir"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerExecSettings Settings, IReadOnlyCollection<Output> Output)> DockerExec(CombinatorialConfigure<DockerExecSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerExec, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Remove one or more images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;images&gt;</c> via <see cref="DockerImageRmSettings.Images"/></li>
        ///     <li><c>--force</c> via <see cref="DockerImageRmSettings.Force"/></li>
        ///     <li><c>--no-prune</c> via <see cref="DockerImageRmSettings.NoPrune"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImageRm(DockerImageRmSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerImageRmSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove one or more images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;images&gt;</c> via <see cref="DockerImageRmSettings.Images"/></li>
        ///     <li><c>--force</c> via <see cref="DockerImageRmSettings.Force"/></li>
        ///     <li><c>--no-prune</c> via <see cref="DockerImageRmSettings.NoPrune"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImageRm(Configure<DockerImageRmSettings> configurator)
        {
            return DockerImageRm(configurator(new DockerImageRmSettings()));
        }
        /// <summary>
        ///   <p>Remove one or more images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;images&gt;</c> via <see cref="DockerImageRmSettings.Images"/></li>
        ///     <li><c>--force</c> via <see cref="DockerImageRmSettings.Force"/></li>
        ///     <li><c>--no-prune</c> via <see cref="DockerImageRmSettings.NoPrune"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerImageRmSettings Settings, IReadOnlyCollection<Output> Output)> DockerImageRm(CombinatorialConfigure<DockerImageRmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerImageRm, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImage(DockerImageSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerImageSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImage(Configure<DockerImageSettings> configurator)
        {
            return DockerImage(configurator(new DockerImageSettings()));
        }
        /// <summary>
        ///   <p>Manage images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerImageSettings Settings, IReadOnlyCollection<Output> Output)> DockerImage(CombinatorialConfigure<DockerImageSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerImage, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage contexts.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContext(DockerContextSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContextSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage contexts.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContext(Configure<DockerContextSettings> configurator)
        {
            return DockerContext(configurator(new DockerContextSettings()));
        }
        /// <summary>
        ///   <p>Manage contexts.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContextSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContextSettings Settings, IReadOnlyCollection<Output> Output)> DockerContext(CombinatorialConfigure<DockerContextSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContext, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage volumes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerVolumeSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerVolumeSettings.Command"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerVolume(DockerVolumeSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerVolumeSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage volumes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerVolumeSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerVolumeSettings.Command"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerVolume(Configure<DockerVolumeSettings> configurator)
        {
            return DockerVolume(configurator(new DockerVolumeSettings()));
        }
        /// <summary>
        ///   <p>Manage volumes.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerVolumeSettings.CliSettings"/></li>
        ///     <li><c>&lt;command&gt;</c> via <see cref="DockerVolumeSettings.Command"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerVolumeSettings Settings, IReadOnlyCollection<Output> Output)> DockerVolume(CombinatorialConfigure<DockerVolumeSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerVolume, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Start one or more stopped containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerStartSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerStartSettings.Containers"/></li>
        ///     <li><c>--attach</c> via <see cref="DockerContainerStartSettings.Attach"/></li>
        ///     <li><c>--checkpoint</c> via <see cref="DockerContainerStartSettings.Checkpoint"/></li>
        ///     <li><c>--checkpoint-dir</c> via <see cref="DockerContainerStartSettings.CheckpointDir"/></li>
        ///     <li><c>--detach-keys</c> via <see cref="DockerContainerStartSettings.DetachKeys"/></li>
        ///     <li><c>--interactive</c> via <see cref="DockerContainerStartSettings.Interactive"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerStart(DockerContainerStartSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerContainerStartSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Start one or more stopped containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerStartSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerStartSettings.Containers"/></li>
        ///     <li><c>--attach</c> via <see cref="DockerContainerStartSettings.Attach"/></li>
        ///     <li><c>--checkpoint</c> via <see cref="DockerContainerStartSettings.Checkpoint"/></li>
        ///     <li><c>--checkpoint-dir</c> via <see cref="DockerContainerStartSettings.CheckpointDir"/></li>
        ///     <li><c>--detach-keys</c> via <see cref="DockerContainerStartSettings.DetachKeys"/></li>
        ///     <li><c>--interactive</c> via <see cref="DockerContainerStartSettings.Interactive"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerContainerStart(Configure<DockerContainerStartSettings> configurator)
        {
            return DockerContainerStart(configurator(new DockerContainerStartSettings()));
        }
        /// <summary>
        ///   <p>Start one or more stopped containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerContainerStartSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerContainerStartSettings.Containers"/></li>
        ///     <li><c>--attach</c> via <see cref="DockerContainerStartSettings.Attach"/></li>
        ///     <li><c>--checkpoint</c> via <see cref="DockerContainerStartSettings.Checkpoint"/></li>
        ///     <li><c>--checkpoint-dir</c> via <see cref="DockerContainerStartSettings.CheckpointDir"/></li>
        ///     <li><c>--detach-keys</c> via <see cref="DockerContainerStartSettings.DetachKeys"/></li>
        ///     <li><c>--interactive</c> via <see cref="DockerContainerStartSettings.Interactive"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerContainerStartSettings Settings, IReadOnlyCollection<Output> Output)> DockerContainerStart(CombinatorialConfigure<DockerContainerStartSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerContainerStart, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Display detailed information on one or more plugins.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;plugins&gt;</c> via <see cref="DockerPluginInspectSettings.Plugins"/></li>
        ///     <li><c>--format</c> via <see cref="DockerPluginInspectSettings.Format"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPluginInspect(DockerPluginInspectSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerPluginInspectSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Display detailed information on one or more plugins.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;plugins&gt;</c> via <see cref="DockerPluginInspectSettings.Plugins"/></li>
        ///     <li><c>--format</c> via <see cref="DockerPluginInspectSettings.Format"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerPluginInspect(Configure<DockerPluginInspectSettings> configurator)
        {
            return DockerPluginInspect(configurator(new DockerPluginInspectSettings()));
        }
        /// <summary>
        ///   <p>Display detailed information on one or more plugins.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerPluginInspectSettings.CliSettings"/></li>
        ///     <li><c>&lt;plugins&gt;</c> via <see cref="DockerPluginInspectSettings.Plugins"/></li>
        ///     <li><c>--format</c> via <see cref="DockerPluginInspectSettings.Format"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerPluginInspectSettings Settings, IReadOnlyCollection<Output> Output)> DockerPluginInspect(CombinatorialConfigure<DockerPluginInspectSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerPluginInspect, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Log out from a Docker registry.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerLogoutSettings.CliSettings"/></li>
        ///     <li><c>&lt;server&gt;</c> via <see cref="DockerLogoutSettings.Server"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerLogout(DockerLogoutSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerLogoutSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Log out from a Docker registry.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerLogoutSettings.CliSettings"/></li>
        ///     <li><c>&lt;server&gt;</c> via <see cref="DockerLogoutSettings.Server"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerLogout(Configure<DockerLogoutSettings> configurator)
        {
            return DockerLogout(configurator(new DockerLogoutSettings()));
        }
        /// <summary>
        ///   <p>Log out from a Docker registry.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerLogoutSettings.CliSettings"/></li>
        ///     <li><c>&lt;server&gt;</c> via <see cref="DockerLogoutSettings.Server"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerLogoutSettings Settings, IReadOnlyCollection<Output> Output)> DockerLogout(CombinatorialConfigure<DockerLogoutSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerLogout, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Manage networks.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNetworkSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNetwork(DockerNetworkSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerNetworkSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Manage networks.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNetworkSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerNetwork(Configure<DockerNetworkSettings> configurator)
        {
            return DockerNetwork(configurator(new DockerNetworkSettings()));
        }
        /// <summary>
        ///   <p>Manage networks.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerNetworkSettings.CliSettings"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerNetworkSettings Settings, IReadOnlyCollection<Output> Output)> DockerNetwork(CombinatorialConfigure<DockerNetworkSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerNetwork, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>List images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageLsSettings.CliSettings"/></li>
        ///     <li><c>&lt;repository&gt;</c> via <see cref="DockerImageLsSettings.Repository"/></li>
        ///     <li><c>--all</c> via <see cref="DockerImageLsSettings.All"/></li>
        ///     <li><c>--digests</c> via <see cref="DockerImageLsSettings.Digests"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerImageLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerImageLsSettings.Format"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerImageLsSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerImageLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImageLs(DockerImageLsSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerImageLsSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>List images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageLsSettings.CliSettings"/></li>
        ///     <li><c>&lt;repository&gt;</c> via <see cref="DockerImageLsSettings.Repository"/></li>
        ///     <li><c>--all</c> via <see cref="DockerImageLsSettings.All"/></li>
        ///     <li><c>--digests</c> via <see cref="DockerImageLsSettings.Digests"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerImageLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerImageLsSettings.Format"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerImageLsSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerImageLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerImageLs(Configure<DockerImageLsSettings> configurator)
        {
            return DockerImageLs(configurator(new DockerImageLsSettings()));
        }
        /// <summary>
        ///   <p>List images.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerImageLsSettings.CliSettings"/></li>
        ///     <li><c>&lt;repository&gt;</c> via <see cref="DockerImageLsSettings.Repository"/></li>
        ///     <li><c>--all</c> via <see cref="DockerImageLsSettings.All"/></li>
        ///     <li><c>--digests</c> via <see cref="DockerImageLsSettings.Digests"/></li>
        ///     <li><c>--filter</c> via <see cref="DockerImageLsSettings.Filter"/></li>
        ///     <li><c>--format</c> via <see cref="DockerImageLsSettings.Format"/></li>
        ///     <li><c>--no-trunc</c> via <see cref="DockerImageLsSettings.NoTrunc"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerImageLsSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerImageLsSettings Settings, IReadOnlyCollection<Output> Output)> DockerImageLs(CombinatorialConfigure<DockerImageLsSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerImageLs, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Show docker disk usage.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSystemDfSettings.CliSettings"/></li>
        ///     <li><c>--format</c> via <see cref="DockerSystemDfSettings.Format"/></li>
        ///     <li><c>--verbose</c> via <see cref="DockerSystemDfSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSystemDf(DockerSystemDfSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerSystemDfSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Show docker disk usage.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSystemDfSettings.CliSettings"/></li>
        ///     <li><c>--format</c> via <see cref="DockerSystemDfSettings.Format"/></li>
        ///     <li><c>--verbose</c> via <see cref="DockerSystemDfSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerSystemDf(Configure<DockerSystemDfSettings> configurator)
        {
            return DockerSystemDf(configurator(new DockerSystemDfSettings()));
        }
        /// <summary>
        ///   <p>Show docker disk usage.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerSystemDfSettings.CliSettings"/></li>
        ///     <li><c>--format</c> via <see cref="DockerSystemDfSettings.Format"/></li>
        ///     <li><c>--verbose</c> via <see cref="DockerSystemDfSettings.Verbose"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerSystemDfSettings Settings, IReadOnlyCollection<Output> Output)> DockerSystemDf(CombinatorialConfigure<DockerSystemDfSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerSystemDf, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Revert changes to a service's configuration.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceRollbackSettings.CliSettings"/></li>
        ///     <li><c>&lt;service&gt;</c> via <see cref="DockerServiceRollbackSettings.Service"/></li>
        ///     <li><c>--detach</c> via <see cref="DockerServiceRollbackSettings.Detach"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerServiceRollbackSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerServiceRollback(DockerServiceRollbackSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerServiceRollbackSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Revert changes to a service's configuration.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceRollbackSettings.CliSettings"/></li>
        ///     <li><c>&lt;service&gt;</c> via <see cref="DockerServiceRollbackSettings.Service"/></li>
        ///     <li><c>--detach</c> via <see cref="DockerServiceRollbackSettings.Detach"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerServiceRollbackSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerServiceRollback(Configure<DockerServiceRollbackSettings> configurator)
        {
            return DockerServiceRollback(configurator(new DockerServiceRollbackSettings()));
        }
        /// <summary>
        ///   <p>Revert changes to a service's configuration.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerServiceRollbackSettings.CliSettings"/></li>
        ///     <li><c>&lt;service&gt;</c> via <see cref="DockerServiceRollbackSettings.Service"/></li>
        ///     <li><c>--detach</c> via <see cref="DockerServiceRollbackSettings.Detach"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerServiceRollbackSettings.Quiet"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerServiceRollbackSettings Settings, IReadOnlyCollection<Output> Output)> DockerServiceRollback(CombinatorialConfigure<DockerServiceRollbackSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerServiceRollback, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Restart one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerRestartSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerRestartSettings.Containers"/></li>
        ///     <li><c>--time</c> via <see cref="DockerRestartSettings.Time"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerRestart(DockerRestartSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerRestartSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Restart one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerRestartSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerRestartSettings.Containers"/></li>
        ///     <li><c>--time</c> via <see cref="DockerRestartSettings.Time"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerRestart(Configure<DockerRestartSettings> configurator)
        {
            return DockerRestart(configurator(new DockerRestartSettings()));
        }
        /// <summary>
        ///   <p>Restart one or more containers.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerRestartSettings.CliSettings"/></li>
        ///     <li><c>&lt;containers&gt;</c> via <see cref="DockerRestartSettings.Containers"/></li>
        ///     <li><c>--time</c> via <see cref="DockerRestartSettings.Time"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerRestartSettings Settings, IReadOnlyCollection<Output> Output)> DockerRestart(CombinatorialConfigure<DockerRestartSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerRestart, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Remove a signer.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustSignerRemoveSettings.CliSettings"/></li>
        ///     <li><c>&lt;name&gt;</c> via <see cref="DockerTrustSignerRemoveSettings.Name"/></li>
        ///     <li><c>&lt;repositories&gt;</c> via <see cref="DockerTrustSignerRemoveSettings.Repositories"/></li>
        ///     <li><c>--force</c> via <see cref="DockerTrustSignerRemoveSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerTrustSignerRemove(DockerTrustSignerRemoveSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerTrustSignerRemoveSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove a signer.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustSignerRemoveSettings.CliSettings"/></li>
        ///     <li><c>&lt;name&gt;</c> via <see cref="DockerTrustSignerRemoveSettings.Name"/></li>
        ///     <li><c>&lt;repositories&gt;</c> via <see cref="DockerTrustSignerRemoveSettings.Repositories"/></li>
        ///     <li><c>--force</c> via <see cref="DockerTrustSignerRemoveSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerTrustSignerRemove(Configure<DockerTrustSignerRemoveSettings> configurator)
        {
            return DockerTrustSignerRemove(configurator(new DockerTrustSignerRemoveSettings()));
        }
        /// <summary>
        ///   <p>Remove a signer.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerTrustSignerRemoveSettings.CliSettings"/></li>
        ///     <li><c>&lt;name&gt;</c> via <see cref="DockerTrustSignerRemoveSettings.Name"/></li>
        ///     <li><c>&lt;repositories&gt;</c> via <see cref="DockerTrustSignerRemoveSettings.Repositories"/></li>
        ///     <li><c>--force</c> via <see cref="DockerTrustSignerRemoveSettings.Force"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerTrustSignerRemoveSettings Settings, IReadOnlyCollection<Output> Output)> DockerTrustSignerRemove(CombinatorialConfigure<DockerTrustSignerRemoveSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerTrustSignerRemove, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Remove one or more stacks.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStackRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;stacks&gt;</c> via <see cref="DockerStackRmSettings.Stacks"/></li>
        ///     <li><c>--namespace</c> via <see cref="DockerStackRmSettings.Namespace"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerStackRm(DockerStackRmSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerStackRmSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Remove one or more stacks.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStackRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;stacks&gt;</c> via <see cref="DockerStackRmSettings.Stacks"/></li>
        ///     <li><c>--namespace</c> via <see cref="DockerStackRmSettings.Namespace"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerStackRm(Configure<DockerStackRmSettings> configurator)
        {
            return DockerStackRm(configurator(new DockerStackRmSettings()));
        }
        /// <summary>
        ///   <p>Remove one or more stacks.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerStackRmSettings.CliSettings"/></li>
        ///     <li><c>&lt;stacks&gt;</c> via <see cref="DockerStackRmSettings.Stacks"/></li>
        ///     <li><c>--namespace</c> via <see cref="DockerStackRmSettings.Namespace"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerStackRmSettings Settings, IReadOnlyCollection<Output> Output)> DockerStackRm(CombinatorialConfigure<DockerStackRmSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerStackRm, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
        /// <summary>
        ///   <p>Build an image from a Dockerfile.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerBuildSettings.CliSettings"/></li>
        ///     <li><c>&lt;path&gt;</c> via <see cref="DockerBuildSettings.Path"/></li>
        ///     <li><c>--add-host</c> via <see cref="DockerBuildSettings.AddHost"/></li>
        ///     <li><c>--build-arg</c> via <see cref="DockerBuildSettings.BuildArg"/></li>
        ///     <li><c>--cache-from</c> via <see cref="DockerBuildSettings.CacheFrom"/></li>
        ///     <li><c>--cgroup-parent</c> via <see cref="DockerBuildSettings.CgroupParent"/></li>
        ///     <li><c>--compress</c> via <see cref="DockerBuildSettings.Compress"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerBuildSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerBuildSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerBuildSettings.CpuShares"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerBuildSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerBuildSettings.CpusetMems"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerBuildSettings.DisableContentTrust"/></li>
        ///     <li><c>--file</c> via <see cref="DockerBuildSettings.File"/></li>
        ///     <li><c>--force-rm</c> via <see cref="DockerBuildSettings.ForceRm"/></li>
        ///     <li><c>--iidfile</c> via <see cref="DockerBuildSettings.Iidfile"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerBuildSettings.Isolation"/></li>
        ///     <li><c>--label</c> via <see cref="DockerBuildSettings.Label"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerBuildSettings.Memory"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerBuildSettings.MemorySwap"/></li>
        ///     <li><c>--network</c> via <see cref="DockerBuildSettings.Network"/></li>
        ///     <li><c>--no-cache</c> via <see cref="DockerBuildSettings.NoCache"/></li>
        ///     <li><c>--output</c> via <see cref="DockerBuildSettings.Output"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerBuildSettings.Platform"/></li>
        ///     <li><c>--progress</c> via <see cref="DockerBuildSettings.Progress"/></li>
        ///     <li><c>--pull</c> via <see cref="DockerBuildSettings.Pull"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerBuildSettings.Quiet"/></li>
        ///     <li><c>--rm</c> via <see cref="DockerBuildSettings.Rm"/></li>
        ///     <li><c>--secret</c> via <see cref="DockerBuildSettings.Secret"/></li>
        ///     <li><c>--security-opt</c> via <see cref="DockerBuildSettings.SecurityOpt"/></li>
        ///     <li><c>--shm-size</c> via <see cref="DockerBuildSettings.ShmSize"/></li>
        ///     <li><c>--squash</c> via <see cref="DockerBuildSettings.Squash"/></li>
        ///     <li><c>--ssh</c> via <see cref="DockerBuildSettings.Ssh"/></li>
        ///     <li><c>--stream</c> via <see cref="DockerBuildSettings.Stream"/></li>
        ///     <li><c>--tag</c> via <see cref="DockerBuildSettings.Tag"/></li>
        ///     <li><c>--target</c> via <see cref="DockerBuildSettings.Target"/></li>
        ///     <li><c>--ulimit</c> via <see cref="DockerBuildSettings.Ulimit"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerBuild(DockerBuildSettings toolSettings = null)
        {
            toolSettings = toolSettings ?? new DockerBuildSettings();
            var process = ProcessTasks.StartProcess(toolSettings);
            process.AssertZeroExitCode();
            return process.Output;
        }
        /// <summary>
        ///   <p>Build an image from a Dockerfile.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerBuildSettings.CliSettings"/></li>
        ///     <li><c>&lt;path&gt;</c> via <see cref="DockerBuildSettings.Path"/></li>
        ///     <li><c>--add-host</c> via <see cref="DockerBuildSettings.AddHost"/></li>
        ///     <li><c>--build-arg</c> via <see cref="DockerBuildSettings.BuildArg"/></li>
        ///     <li><c>--cache-from</c> via <see cref="DockerBuildSettings.CacheFrom"/></li>
        ///     <li><c>--cgroup-parent</c> via <see cref="DockerBuildSettings.CgroupParent"/></li>
        ///     <li><c>--compress</c> via <see cref="DockerBuildSettings.Compress"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerBuildSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerBuildSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerBuildSettings.CpuShares"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerBuildSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerBuildSettings.CpusetMems"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerBuildSettings.DisableContentTrust"/></li>
        ///     <li><c>--file</c> via <see cref="DockerBuildSettings.File"/></li>
        ///     <li><c>--force-rm</c> via <see cref="DockerBuildSettings.ForceRm"/></li>
        ///     <li><c>--iidfile</c> via <see cref="DockerBuildSettings.Iidfile"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerBuildSettings.Isolation"/></li>
        ///     <li><c>--label</c> via <see cref="DockerBuildSettings.Label"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerBuildSettings.Memory"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerBuildSettings.MemorySwap"/></li>
        ///     <li><c>--network</c> via <see cref="DockerBuildSettings.Network"/></li>
        ///     <li><c>--no-cache</c> via <see cref="DockerBuildSettings.NoCache"/></li>
        ///     <li><c>--output</c> via <see cref="DockerBuildSettings.Output"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerBuildSettings.Platform"/></li>
        ///     <li><c>--progress</c> via <see cref="DockerBuildSettings.Progress"/></li>
        ///     <li><c>--pull</c> via <see cref="DockerBuildSettings.Pull"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerBuildSettings.Quiet"/></li>
        ///     <li><c>--rm</c> via <see cref="DockerBuildSettings.Rm"/></li>
        ///     <li><c>--secret</c> via <see cref="DockerBuildSettings.Secret"/></li>
        ///     <li><c>--security-opt</c> via <see cref="DockerBuildSettings.SecurityOpt"/></li>
        ///     <li><c>--shm-size</c> via <see cref="DockerBuildSettings.ShmSize"/></li>
        ///     <li><c>--squash</c> via <see cref="DockerBuildSettings.Squash"/></li>
        ///     <li><c>--ssh</c> via <see cref="DockerBuildSettings.Ssh"/></li>
        ///     <li><c>--stream</c> via <see cref="DockerBuildSettings.Stream"/></li>
        ///     <li><c>--tag</c> via <see cref="DockerBuildSettings.Tag"/></li>
        ///     <li><c>--target</c> via <see cref="DockerBuildSettings.Target"/></li>
        ///     <li><c>--ulimit</c> via <see cref="DockerBuildSettings.Ulimit"/></li>
        ///   </ul>
        /// </remarks>
        public static IReadOnlyCollection<Output> DockerBuild(Configure<DockerBuildSettings> configurator)
        {
            return DockerBuild(configurator(new DockerBuildSettings()));
        }
        /// <summary>
        ///   <p>Build an image from a Dockerfile.</p>
        ///   <p>For more details, visit the <a href="https://www.docker.com/">official website</a>.</p>
        /// </summary>
        /// <remarks>
        ///   <p>This is a <a href="http://www.nuke.build/docs/authoring-builds/cli-tools.html#fluent-apis">CLI wrapper with fluent API</a> that allows to modify the following arguments:</p>
        ///   <ul>
        ///     <li><c>&lt;cliSettings&gt;</c> via <see cref="DockerBuildSettings.CliSettings"/></li>
        ///     <li><c>&lt;path&gt;</c> via <see cref="DockerBuildSettings.Path"/></li>
        ///     <li><c>--add-host</c> via <see cref="DockerBuildSettings.AddHost"/></li>
        ///     <li><c>--build-arg</c> via <see cref="DockerBuildSettings.BuildArg"/></li>
        ///     <li><c>--cache-from</c> via <see cref="DockerBuildSettings.CacheFrom"/></li>
        ///     <li><c>--cgroup-parent</c> via <see cref="DockerBuildSettings.CgroupParent"/></li>
        ///     <li><c>--compress</c> via <see cref="DockerBuildSettings.Compress"/></li>
        ///     <li><c>--cpu-period</c> via <see cref="DockerBuildSettings.CpuPeriod"/></li>
        ///     <li><c>--cpu-quota</c> via <see cref="DockerBuildSettings.CpuQuota"/></li>
        ///     <li><c>--cpu-shares</c> via <see cref="DockerBuildSettings.CpuShares"/></li>
        ///     <li><c>--cpuset-cpus</c> via <see cref="DockerBuildSettings.CpusetCpus"/></li>
        ///     <li><c>--cpuset-mems</c> via <see cref="DockerBuildSettings.CpusetMems"/></li>
        ///     <li><c>--disable-content-trust</c> via <see cref="DockerBuildSettings.DisableContentTrust"/></li>
        ///     <li><c>--file</c> via <see cref="DockerBuildSettings.File"/></li>
        ///     <li><c>--force-rm</c> via <see cref="DockerBuildSettings.ForceRm"/></li>
        ///     <li><c>--iidfile</c> via <see cref="DockerBuildSettings.Iidfile"/></li>
        ///     <li><c>--isolation</c> via <see cref="DockerBuildSettings.Isolation"/></li>
        ///     <li><c>--label</c> via <see cref="DockerBuildSettings.Label"/></li>
        ///     <li><c>--memory</c> via <see cref="DockerBuildSettings.Memory"/></li>
        ///     <li><c>--memory-swap</c> via <see cref="DockerBuildSettings.MemorySwap"/></li>
        ///     <li><c>--network</c> via <see cref="DockerBuildSettings.Network"/></li>
        ///     <li><c>--no-cache</c> via <see cref="DockerBuildSettings.NoCache"/></li>
        ///     <li><c>--output</c> via <see cref="DockerBuildSettings.Output"/></li>
        ///     <li><c>--platform</c> via <see cref="DockerBuildSettings.Platform"/></li>
        ///     <li><c>--progress</c> via <see cref="DockerBuildSettings.Progress"/></li>
        ///     <li><c>--pull</c> via <see cref="DockerBuildSettings.Pull"/></li>
        ///     <li><c>--quiet</c> via <see cref="DockerBuildSettings.Quiet"/></li>
        ///     <li><c>--rm</c> via <see cref="DockerBuildSettings.Rm"/></li>
        ///     <li><c>--secret</c> via <see cref="DockerBuildSettings.Secret"/></li>
        ///     <li><c>--security-opt</c> via <see cref="DockerBuildSettings.SecurityOpt"/></li>
        ///     <li><c>--shm-size</c> via <see cref="DockerBuildSettings.ShmSize"/></li>
        ///     <li><c>--squash</c> via <see cref="DockerBuildSettings.Squash"/></li>
        ///     <li><c>--ssh</c> via <see cref="DockerBuildSettings.Ssh"/></li>
        ///     <li><c>--stream</c> via <see cref="DockerBuildSettings.Stream"/></li>
        ///     <li><c>--tag</c> via <see cref="DockerBuildSettings.Tag"/></li>
        ///     <li><c>--target</c> via <see cref="DockerBuildSettings.Target"/></li>
        ///     <li><c>--ulimit</c> via <see cref="DockerBuildSettings.Ulimit"/></li>
        ///   </ul>
        /// </remarks>
        public static IEnumerable<(DockerBuildSettings Settings, IReadOnlyCollection<Output> Output)> DockerBuild(CombinatorialConfigure<DockerBuildSettings> configurator, int degreeOfParallelism = 1, bool completeOnFailure = false)
        {
            return configurator.Invoke(DockerBuild, DockerLogger, degreeOfParallelism, completeOnFailure);
        }
    }
    #region DockerConfigRmSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerConfigRmSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   CONFIG
        /// </summary>
        public virtual IReadOnlyList<string> Configs => ConfigsInternal.AsReadOnly();
        internal List<string> ConfigsInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("config rm")
              .Add("{value}", Configs, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerLoadSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerLoadSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Read from tar archive file, instead of STDIN.
        /// </summary>
        public virtual string Input { get; internal set; }
        /// <summary>
        ///   Suppress the load output.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("load")
              .Add("--input {value}", Input)
              .Add("--quiet", Quiet)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContainerPruneSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContainerPruneSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Provide filter values (e.g. 'until=&lt;timestamp&gt;').
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Do not prompt for confirmation.
        /// </summary>
        public virtual bool? Force { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("container prune")
              .Add("--filter {value}", Filter)
              .Add("--force", Force)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerTrustSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerTrustSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("trust")
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerStackSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerStackSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Kubernetes config file.
        /// </summary>
        public virtual string Kubeconfig { get; internal set; }
        /// <summary>
        ///   Orchestrator to use (swarm|kubernetes|all).
        /// </summary>
        public virtual string Orchestrator { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("stack")
              .Add("--kubeconfig {value}", Kubeconfig)
              .Add("--orchestrator {value}", Orchestrator)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerTopSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerTopSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual string Container { get; internal set; }
        /// <summary>
        ///   OPTIONS]
        /// </summary>
        public virtual string Options { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("top [ps")
              .Add("{value}", Container)
              .Add("{value}", Options)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerPullSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerPullSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Download all tagged images in the repository.
        /// </summary>
        public virtual bool? AllTags { get; internal set; }
        /// <summary>
        ///   Skip image verification.
        /// </summary>
        public virtual bool? DisableContentTrust { get; internal set; }
        /// <summary>
        ///   Set platform if server is multi-platform capable.
        /// </summary>
        public virtual string Platform { get; internal set; }
        /// <summary>
        ///   Suppress verbose output.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        /// <summary>
        ///   NAME[:TAG|@DIGEST]
        /// </summary>
        public virtual string Name { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("pull")
              .Add("--all-tags", AllTags)
              .Add("--disable-content-trust", DisableContentTrust)
              .Add("--platform {value}", Platform)
              .Add("--quiet", Quiet)
              .Add("{value}", Name)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerTrustSignSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerTrustSignSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("trust sign IMAGE:TAG")
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerCheckpointSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerCheckpointSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("checkpoint")
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerTrustSignerSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerTrustSignerSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("trust signer")
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerConfigInspectSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerConfigInspectSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Format the output using the given Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Print the information in a human friendly format.
        /// </summary>
        public virtual bool? Pretty { get; internal set; }
        /// <summary>
        ///   CONFIG
        /// </summary>
        public virtual IReadOnlyList<string> Configs => ConfigsInternal.AsReadOnly();
        internal List<string> ConfigsInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("config inspect")
              .Add("--format {value}", Format)
              .Add("--pretty", Pretty)
              .Add("{value}", Configs, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerServiceSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerServiceSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("service")
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerTrustKeyGenerateSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerTrustKeyGenerateSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   NAME
        /// </summary>
        public virtual string Name { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("trust key generate")
              .Add("{value}", Name)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerSystemSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerSystemSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("system")
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerConfigLsSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerConfigLsSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Filter output based on conditions provided.
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Pretty-print configs using a Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Only display IDs.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("config ls")
              .Add("--filter {value}", Filter)
              .Add("--format {value}", Format)
              .Add("--quiet", Quiet)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContextUpdateSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContextUpdateSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Default orchestrator for stack operations to use with this context (swarm|kubernetes|all).
        /// </summary>
        public virtual string DefaultStackOrchestrator { get; internal set; }
        /// <summary>
        ///   Description of the context.
        /// </summary>
        public virtual string Description { get; internal set; }
        /// <summary>
        ///   set the docker endpoint.
        /// </summary>
        public virtual string Docker { get; internal set; }
        /// <summary>
        ///   set the kubernetes endpoint.
        /// </summary>
        public virtual string Kubernetes { get; internal set; }
        /// <summary>
        ///   CONTEXT
        /// </summary>
        public virtual string Context { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("context update")
              .Add("--default-stack-orchestrator {value}", DefaultStackOrchestrator)
              .Add("--description {value}", Description)
              .Add("--docker {value}", Docker)
              .Add("--kubernetes {value}", Kubernetes)
              .Add("{value}", Context)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerStackServicesSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerStackServicesSettings : DockerStackSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Filter output based on conditions provided.
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Pretty-print services using a Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Kubernetes namespace to use.
        /// </summary>
        public virtual string Namespace { get; internal set; }
        /// <summary>
        ///   Only display IDs.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        /// <summary>
        ///   STACK
        /// </summary>
        public virtual string Stack { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("stack services")
              .Add("--filter {value}", Filter)
              .Add("--format {value}", Format)
              .Add("--namespace {value}", Namespace)
              .Add("--quiet", Quiet)
              .Add("{value}", Stack)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContainerPortSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContainerPortSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual string Container { get; internal set; }
        /// <summary>
        ///   [PRIVATE_PORT[/PROTO]]
        /// </summary>
        public virtual string PrivatePort { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("container port")
              .Add("{value}", Container)
              .Add("{value}", PrivatePort)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerRenameSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerRenameSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual string Container { get; internal set; }
        /// <summary>
        ///   NEW_NAME
        /// </summary>
        public virtual string NewName { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("rename")
              .Add("{value}", Container)
              .Add("{value}", NewName)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerTagSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerTagSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   SOURCE_IMAGE[:TAG]
        /// </summary>
        public virtual string SourceImage { get; internal set; }
        /// <summary>
        ///   TARGET_IMAGE[:TAG]
        /// </summary>
        public virtual string TargetImage { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("tag")
              .Add("{value}", SourceImage)
              .Add("{value}", TargetImage)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerSecretInspectSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerSecretInspectSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Format the output using the given Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Print the information in a human friendly format.
        /// </summary>
        public virtual bool? Pretty { get; internal set; }
        /// <summary>
        ///   SECRET
        /// </summary>
        public virtual IReadOnlyList<string> Secrets => SecretsInternal.AsReadOnly();
        internal List<string> SecretsInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("secret inspect")
              .Add("--format {value}", Format)
              .Add("--pretty", Pretty)
              .Add("{value}", Secrets, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerSecretSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerSecretSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("secret")
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContainerExportSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContainerExportSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Write to a file, instead of STDOUT.
        /// </summary>
        public virtual string Output { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual string Container { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("container export")
              .Add("--output {value}", Output)
              .Add("{value}", Container)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerHistorySettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerHistorySettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Pretty-print images using a Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Print sizes and dates in human readable format.
        /// </summary>
        public virtual bool? Human { get; internal set; }
        /// <summary>
        ///   Don't truncate output.
        /// </summary>
        public virtual bool? NoTrunc { get; internal set; }
        /// <summary>
        ///   Only show numeric IDs.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        /// <summary>
        ///   IMAGE
        /// </summary>
        public virtual string Image { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("history")
              .Add("--format {value}", Format)
              .Add("--human", Human)
              .Add("--no-trunc", NoTrunc)
              .Add("--quiet", Quiet)
              .Add("{value}", Image)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerServiceCreateSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerServiceCreateSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Specify configurations to expose to the service.
        /// </summary>
        public virtual string Config { get; internal set; }
        /// <summary>
        ///   Placement constraints.
        /// </summary>
        public virtual IReadOnlyList<string> Constraint => ConstraintInternal.AsReadOnly();
        internal List<string> ConstraintInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Container labels.
        /// </summary>
        public virtual IReadOnlyList<string> ContainerLabel => ContainerLabelInternal.AsReadOnly();
        internal List<string> ContainerLabelInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Credential spec for managed service account (Windows only).
        /// </summary>
        public virtual string CredentialSpec { get; internal set; }
        /// <summary>
        ///   Exit immediately instead of waiting for the service to converge.
        /// </summary>
        public virtual bool? Detach { get; internal set; }
        /// <summary>
        ///   Set custom DNS servers.
        /// </summary>
        public virtual IReadOnlyList<string> Dns => DnsInternal.AsReadOnly();
        internal List<string> DnsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Set DNS options.
        /// </summary>
        public virtual IReadOnlyList<string> DnsOption => DnsOptionInternal.AsReadOnly();
        internal List<string> DnsOptionInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Set custom DNS search domains.
        /// </summary>
        public virtual IReadOnlyList<string> DnsSearch => DnsSearchInternal.AsReadOnly();
        internal List<string> DnsSearchInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Endpoint mode (vip or dnsrr).
        /// </summary>
        public virtual string EndpointMode { get; internal set; }
        /// <summary>
        ///   Overwrite the default ENTRYPOINT of the image.
        /// </summary>
        public virtual string Entrypoint { get; internal set; }
        /// <summary>
        ///   Set environment variables.
        /// </summary>
        public virtual IReadOnlyList<string> Env => EnvInternal.AsReadOnly();
        internal List<string> EnvInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Read in a file of environment variables.
        /// </summary>
        public virtual IReadOnlyList<string> EnvFile => EnvFileInternal.AsReadOnly();
        internal List<string> EnvFileInternal { get; set; } = new List<string>();
        /// <summary>
        ///   User defined resources.
        /// </summary>
        public virtual IReadOnlyList<string> GenericResource => GenericResourceInternal.AsReadOnly();
        internal List<string> GenericResourceInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Set one or more supplementary user groups for the container.
        /// </summary>
        public virtual IReadOnlyList<string> Group => GroupInternal.AsReadOnly();
        internal List<string> GroupInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Command to run to check health.
        /// </summary>
        public virtual string HealthCmd { get; internal set; }
        /// <summary>
        ///   Time between running the check (ms|s|m|h).
        /// </summary>
        public virtual string HealthInterval { get; internal set; }
        /// <summary>
        ///   Consecutive failures needed to report unhealthy.
        /// </summary>
        public virtual int? HealthRetries { get; internal set; }
        /// <summary>
        ///   Start period for the container to initialize before counting retries towards unstable (ms|s|m|h).
        /// </summary>
        public virtual string HealthStartPeriod { get; internal set; }
        /// <summary>
        ///   Maximum time to allow one check to run (ms|s|m|h).
        /// </summary>
        public virtual string HealthTimeout { get; internal set; }
        /// <summary>
        ///   Set one or more custom host-to-IP mappings (host:ip).
        /// </summary>
        public virtual IReadOnlyList<string> Host => HostInternal.AsReadOnly();
        internal List<string> HostInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Container hostname.
        /// </summary>
        public virtual string Hostname { get; internal set; }
        /// <summary>
        ///   Use an init inside each service container to forward signals and reap processes.
        /// </summary>
        public virtual bool? Init { get; internal set; }
        /// <summary>
        ///   Service container isolation mode.
        /// </summary>
        public virtual string Isolation { get; internal set; }
        /// <summary>
        ///   Service labels.
        /// </summary>
        public virtual IReadOnlyList<string> Label => LabelInternal.AsReadOnly();
        internal List<string> LabelInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Limit CPUs.
        /// </summary>
        public virtual decimal? LimitCpu { get; internal set; }
        /// <summary>
        ///   Limit Memory.
        /// </summary>
        public virtual long? LimitMemory { get; internal set; }
        /// <summary>
        ///   Logging driver for service.
        /// </summary>
        public virtual string LogDriver { get; internal set; }
        /// <summary>
        ///   Logging driver options.
        /// </summary>
        public virtual IReadOnlyList<string> LogOpt => LogOptInternal.AsReadOnly();
        internal List<string> LogOptInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Service mode (replicated or global).
        /// </summary>
        public virtual string Mode { get; internal set; }
        /// <summary>
        ///   Attach a filesystem mount to the service.
        /// </summary>
        public virtual string Mount { get; internal set; }
        /// <summary>
        ///   Service name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Network attachments.
        /// </summary>
        public virtual string Network { get; internal set; }
        /// <summary>
        ///   Disable any container-specified HEALTHCHECK.
        /// </summary>
        public virtual bool? NoHealthcheck { get; internal set; }
        /// <summary>
        ///   Do not query the registry to resolve image digest and supported platforms.
        /// </summary>
        public virtual bool? NoResolveImage { get; internal set; }
        /// <summary>
        ///   Add a placement preference.
        /// </summary>
        public virtual string PlacementPref { get; internal set; }
        /// <summary>
        ///   Publish a port as a node port.
        /// </summary>
        public virtual string Publish { get; internal set; }
        /// <summary>
        ///   Suppress progress output.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        /// <summary>
        ///   Mount the container's root filesystem as read only.
        /// </summary>
        public virtual bool? ReadOnly { get; internal set; }
        /// <summary>
        ///   Number of tasks.
        /// </summary>
        public virtual int? Replicas { get; internal set; }
        /// <summary>
        ///   Maximum number of tasks per node (default 0 = unlimited).
        /// </summary>
        public virtual int? ReplicasMaxPerNode { get; internal set; }
        /// <summary>
        ///   Reserve CPUs.
        /// </summary>
        public virtual decimal? ReserveCpu { get; internal set; }
        /// <summary>
        ///   Reserve Memory.
        /// </summary>
        public virtual long? ReserveMemory { get; internal set; }
        /// <summary>
        ///   Restart when condition is met ("none"|"on-failure"|"any") (default "any").
        /// </summary>
        public virtual RestartCondition RestartCondition { get; internal set; }
        /// <summary>
        ///   Delay between restart attempts (ns|us|ms|s|m|h) (default 5s).
        /// </summary>
        public virtual string RestartDelay { get; internal set; }
        /// <summary>
        ///   Maximum number of restarts before giving up.
        /// </summary>
        public virtual int? RestartMaxAttempts { get; internal set; }
        /// <summary>
        ///   Window used to evaluate the restart policy (ns|us|ms|s|m|h).
        /// </summary>
        public virtual string RestartWindow { get; internal set; }
        /// <summary>
        ///   Delay between task rollbacks (ns|us|ms|s|m|h) (default 0s).
        /// </summary>
        public virtual string RollbackDelay { get; internal set; }
        /// <summary>
        ///   Action on rollback failure ("pause"|"continue") (default "pause").
        /// </summary>
        public virtual RollbackFailureAction RollbackFailureAction { get; internal set; }
        /// <summary>
        ///   Failure rate to tolerate during a rollback (default 0).
        /// </summary>
        public virtual float? RollbackMaxFailureRatio { get; internal set; }
        /// <summary>
        ///   Duration after each task rollback to monitor for failure (ns|us|ms|s|m|h) (default 5s).
        /// </summary>
        public virtual string RollbackMonitor { get; internal set; }
        /// <summary>
        ///   Rollback order ("start-first"|"stop-first") (default "stop-first").
        /// </summary>
        public virtual RollbackOrder RollbackOrder { get; internal set; }
        /// <summary>
        ///   Maximum number of tasks rolled back simultaneously (0 to roll back all at once).
        /// </summary>
        public virtual int? RollbackParallelism { get; internal set; }
        /// <summary>
        ///   Specify secrets to expose to the service.
        /// </summary>
        public virtual string Secret { get; internal set; }
        /// <summary>
        ///   Time to wait before force killing a container (ns|us|ms|s|m|h) (default 10s).
        /// </summary>
        public virtual string StopGracePeriod { get; internal set; }
        /// <summary>
        ///   Signal to stop the container.
        /// </summary>
        public virtual string StopSignal { get; internal set; }
        /// <summary>
        ///   Sysctl options.
        /// </summary>
        public virtual IReadOnlyList<string> Sysctl => SysctlInternal.AsReadOnly();
        internal List<string> SysctlInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Allocate a pseudo-TTY.
        /// </summary>
        public virtual bool? Tty { get; internal set; }
        /// <summary>
        ///   Delay between updates (ns|us|ms|s|m|h) (default 0s).
        /// </summary>
        public virtual string UpdateDelay { get; internal set; }
        /// <summary>
        ///   Action on update failure ("pause"|"continue"|"rollback") (default "pause").
        /// </summary>
        public virtual UpdateFailureAction UpdateFailureAction { get; internal set; }
        /// <summary>
        ///   Failure rate to tolerate during an update (default 0).
        /// </summary>
        public virtual float? UpdateMaxFailureRatio { get; internal set; }
        /// <summary>
        ///   Duration after each task update to monitor for failure (ns|us|ms|s|m|h) (default 5s).
        /// </summary>
        public virtual string UpdateMonitor { get; internal set; }
        /// <summary>
        ///   Update order ("start-first"|"stop-first") (default "stop-first").
        /// </summary>
        public virtual UpdateOrder UpdateOrder { get; internal set; }
        /// <summary>
        ///   Maximum number of tasks updated simultaneously (0 to update all at once).
        /// </summary>
        public virtual int? UpdateParallelism { get; internal set; }
        /// <summary>
        ///   Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).
        /// </summary>
        public virtual string User { get; internal set; }
        /// <summary>
        ///   Send registry authentication details to swarm agents.
        /// </summary>
        public virtual bool? WithRegistryAuth { get; internal set; }
        /// <summary>
        ///   Working directory inside the container.
        /// </summary>
        public virtual string Workdir { get; internal set; }
        /// <summary>
        ///   IMAGE
        /// </summary>
        public virtual string Image { get; internal set; }
        /// <summary>
        ///   [COMMAND]
        /// </summary>
        public virtual string Command { get; internal set; }
        /// <summary>
        ///   [ARG...]
        /// </summary>
        public virtual IReadOnlyList<string> Args => ArgsInternal.AsReadOnly();
        internal List<string> ArgsInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("service create")
              .Add("--config {value}", Config)
              .Add("--constraint {value}", Constraint)
              .Add("--container-label {value}", ContainerLabel)
              .Add("--credential-spec {value}", CredentialSpec)
              .Add("--detach", Detach)
              .Add("--dns {value}", Dns)
              .Add("--dns-option {value}", DnsOption)
              .Add("--dns-search {value}", DnsSearch)
              .Add("--endpoint-mode {value}", EndpointMode)
              .Add("--entrypoint {value}", Entrypoint)
              .Add("--env {value}", Env)
              .Add("--env-file {value}", EnvFile)
              .Add("--generic-resource {value}", GenericResource)
              .Add("--group {value}", Group)
              .Add("--health-cmd {value}", HealthCmd)
              .Add("--health-interval {value}", HealthInterval)
              .Add("--health-retries {value}", HealthRetries)
              .Add("--health-start-period {value}", HealthStartPeriod)
              .Add("--health-timeout {value}", HealthTimeout)
              .Add("--host {value}", Host)
              .Add("--hostname {value}", Hostname)
              .Add("--init", Init)
              .Add("--isolation {value}", Isolation)
              .Add("--label {value}", Label)
              .Add("--limit-cpu {value}", LimitCpu)
              .Add("--limit-memory {value}", LimitMemory)
              .Add("--log-driver {value}", LogDriver)
              .Add("--log-opt {value}", LogOpt)
              .Add("--mode {value}", Mode)
              .Add("--mount {value}", Mount)
              .Add("--name {value}", Name)
              .Add("--network {value}", Network)
              .Add("--no-healthcheck", NoHealthcheck)
              .Add("--no-resolve-image", NoResolveImage)
              .Add("--placement-pref {value}", PlacementPref)
              .Add("--publish {value}", Publish)
              .Add("--quiet", Quiet)
              .Add("--read-only", ReadOnly)
              .Add("--replicas {value}", Replicas)
              .Add("--replicas-max-per-node {value}", ReplicasMaxPerNode)
              .Add("--reserve-cpu {value}", ReserveCpu)
              .Add("--reserve-memory {value}", ReserveMemory)
              .Add("--restart-condition {value}", RestartCondition)
              .Add("--restart-delay {value}", RestartDelay)
              .Add("--restart-max-attempts {value}", RestartMaxAttempts)
              .Add("--restart-window {value}", RestartWindow)
              .Add("--rollback-delay {value}", RollbackDelay)
              .Add("--rollback-failure-action {value}", RollbackFailureAction)
              .Add("--rollback-max-failure-ratio {value}", RollbackMaxFailureRatio)
              .Add("--rollback-monitor {value}", RollbackMonitor)
              .Add("--rollback-order {value}", RollbackOrder)
              .Add("--rollback-parallelism {value}", RollbackParallelism)
              .Add("--secret {value}", Secret)
              .Add("--stop-grace-period {value}", StopGracePeriod)
              .Add("--stop-signal {value}", StopSignal)
              .Add("--sysctl {value}", Sysctl)
              .Add("--tty", Tty)
              .Add("--update-delay {value}", UpdateDelay)
              .Add("--update-failure-action {value}", UpdateFailureAction)
              .Add("--update-max-failure-ratio {value}", UpdateMaxFailureRatio)
              .Add("--update-monitor {value}", UpdateMonitor)
              .Add("--update-order {value}", UpdateOrder)
              .Add("--update-parallelism {value}", UpdateParallelism)
              .Add("--user {value}", User)
              .Add("--with-registry-auth", WithRegistryAuth)
              .Add("--workdir {value}", Workdir)
              .Add("{value}", Image)
              .Add("{value}", Command)
              .Add("{value}", Args, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerServicePsSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerServicePsSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Filter output based on conditions provided.
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Pretty-print tasks using a Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Do not map IDs to Names.
        /// </summary>
        public virtual bool? NoResolve { get; internal set; }
        /// <summary>
        ///   Do not truncate output.
        /// </summary>
        public virtual bool? NoTrunc { get; internal set; }
        /// <summary>
        ///   Only display task IDs.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        /// <summary>
        ///   SERVICE
        /// </summary>
        public virtual IReadOnlyList<string> Services => ServicesInternal.AsReadOnly();
        internal List<string> ServicesInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("service ps")
              .Add("--filter {value}", Filter)
              .Add("--format {value}", Format)
              .Add("--no-resolve", NoResolve)
              .Add("--no-trunc", NoTrunc)
              .Add("--quiet", Quiet)
              .Add("{value}", Services, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerStopSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerStopSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Seconds to wait for stop before killing it.
        /// </summary>
        public virtual int? Time { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual IReadOnlyList<string> Containers => ContainersInternal.AsReadOnly();
        internal List<string> ContainersInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("stop")
              .Add("--time {value}", Time)
              .Add("{value}", Containers, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerNodeSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerNodeSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("node")
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerUpdateSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerUpdateSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0).
        /// </summary>
        public virtual int? BlkioWeight { get; internal set; }
        /// <summary>
        ///   Limit CPU CFS (Completely Fair Scheduler) period.
        /// </summary>
        public virtual long? CpuPeriod { get; internal set; }
        /// <summary>
        ///   Limit CPU CFS (Completely Fair Scheduler) quota.
        /// </summary>
        public virtual long? CpuQuota { get; internal set; }
        /// <summary>
        ///   Limit the CPU real-time period in microseconds.
        /// </summary>
        public virtual long? CpuRtPeriod { get; internal set; }
        /// <summary>
        ///   Limit the CPU real-time runtime in microseconds.
        /// </summary>
        public virtual long? CpuRtRuntime { get; internal set; }
        /// <summary>
        ///   CPU shares (relative weight).
        /// </summary>
        public virtual long? CpuShares { get; internal set; }
        /// <summary>
        ///   Number of CPUs.
        /// </summary>
        public virtual decimal? Cpus { get; internal set; }
        /// <summary>
        ///   CPUs in which to allow execution (0-3, 0,1).
        /// </summary>
        public virtual string CpusetCpus { get; internal set; }
        /// <summary>
        ///   MEMs in which to allow execution (0-3, 0,1).
        /// </summary>
        public virtual string CpusetMems { get; internal set; }
        /// <summary>
        ///   Kernel memory limit.
        /// </summary>
        public virtual long? KernelMemory { get; internal set; }
        /// <summary>
        ///   Memory limit.
        /// </summary>
        public virtual long? Memory { get; internal set; }
        /// <summary>
        ///   Memory soft limit.
        /// </summary>
        public virtual long? MemoryReservation { get; internal set; }
        /// <summary>
        ///   Swap limit equal to memory plus swap: '-1' to enable unlimited swap.
        /// </summary>
        public virtual long? MemorySwap { get; internal set; }
        /// <summary>
        ///   Tune container pids limit (set -1 for unlimited).
        /// </summary>
        public virtual long? PidsLimit { get; internal set; }
        /// <summary>
        ///   Restart policy to apply when a container exits.
        /// </summary>
        public virtual string Restart { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual IReadOnlyList<string> Containers => ContainersInternal.AsReadOnly();
        internal List<string> ContainersInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("update")
              .Add("--blkio-weight {value}", BlkioWeight)
              .Add("--cpu-period {value}", CpuPeriod)
              .Add("--cpu-quota {value}", CpuQuota)
              .Add("--cpu-rt-period {value}", CpuRtPeriod)
              .Add("--cpu-rt-runtime {value}", CpuRtRuntime)
              .Add("--cpu-shares {value}", CpuShares)
              .Add("--cpus {value}", Cpus)
              .Add("--cpuset-cpus {value}", CpusetCpus)
              .Add("--cpuset-mems {value}", CpusetMems)
              .Add("--kernel-memory {value}", KernelMemory)
              .Add("--memory {value}", Memory)
              .Add("--memory-reservation {value}", MemoryReservation)
              .Add("--memory-swap {value}", MemorySwap)
              .Add("--pids-limit {value}", PidsLimit)
              .Add("--restart {value}", Restart)
              .Add("{value}", Containers, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerPluginCreateSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerPluginCreateSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Compress the context using gzip.
        /// </summary>
        public virtual bool? Compress { get; internal set; }
        /// <summary>
        ///   PLUGIN
        /// </summary>
        public virtual string Plugin { get; internal set; }
        /// <summary>
        ///   PLUGIN-DATA-DIR
        /// </summary>
        public virtual string PluginDataDir { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("plugin create")
              .Add("--compress", Compress)
              .Add("{value}", Plugin)
              .Add("{value}", PluginDataDir)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerSystemInfoSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerSystemInfoSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Format the output using the given Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("system info")
              .Add("--format {value}", Format)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerVolumePruneSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerVolumePruneSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Provide filter values (e.g. 'label=&lt;label&gt;').
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Do not prompt for confirmation.
        /// </summary>
        public virtual bool? Force { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("volume prune")
              .Add("--filter {value}", Filter)
              .Add("--force", Force)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerPluginUpgradeSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerPluginUpgradeSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Skip image verification.
        /// </summary>
        public virtual bool? DisableContentTrust { get; internal set; }
        /// <summary>
        ///   Grant all permissions necessary to run the plugin.
        /// </summary>
        public virtual bool? GrantAllPermissions { get; internal set; }
        /// <summary>
        ///   Do not check if specified remote plugin matches existing plugin image.
        /// </summary>
        public virtual bool? SkipRemoteCheck { get; internal set; }
        /// <summary>
        ///   PLUGIN
        /// </summary>
        public virtual string Plugin { get; internal set; }
        /// <summary>
        ///   [REMOTE]
        /// </summary>
        public virtual string Remote { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("plugin upgrade")
              .Add("--disable-content-trust", DisableContentTrust)
              .Add("--grant-all-permissions", GrantAllPermissions)
              .Add("--skip-remote-check", SkipRemoteCheck)
              .Add("{value}", Plugin)
              .Add("{value}", Remote)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerBuilderPruneSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerBuilderPruneSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("builder prune")
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerSwarmJoinTokenSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerSwarmJoinTokenSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Only display token.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        /// <summary>
        ///   Rotate join token.
        /// </summary>
        public virtual bool? Rotate { get; internal set; }
        /// <summary>
        ///   (worker|manager)
        /// </summary>
        public virtual string Worker { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("swarm join-token")
              .Add("--quiet", Quiet)
              .Add("--rotate", Rotate)
              .Add("{value}", Worker)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerNodeUpdateSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerNodeUpdateSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Availability of the node ("active"|"pause"|"drain").
        /// </summary>
        public virtual Availability Availability { get; internal set; }
        /// <summary>
        ///   Add or update a node label (key=value).
        /// </summary>
        public virtual IReadOnlyList<string> LabelAdd => LabelAddInternal.AsReadOnly();
        internal List<string> LabelAddInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Remove a node label if exists.
        /// </summary>
        public virtual IReadOnlyList<string> LabelRm => LabelRmInternal.AsReadOnly();
        internal List<string> LabelRmInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Role of the node ("worker"|"manager").
        /// </summary>
        public virtual Role Role { get; internal set; }
        /// <summary>
        ///   NODE
        /// </summary>
        public virtual string Node { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("node update")
              .Add("--availability {value}", Availability)
              .Add("--label-add {value}", LabelAdd)
              .Add("--label-rm {value}", LabelRm)
              .Add("--role {value}", Role)
              .Add("{value}", Node)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerTrustSignerAddSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerTrustSignerAddSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   OPTIONS
        /// </summary>
        public virtual string Options { get; internal set; }
        /// <summary>
        ///   NAME
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   REPOSITORY
        /// </summary>
        public virtual IReadOnlyList<string> Repositories => RepositoriesInternal.AsReadOnly();
        internal List<string> RepositoriesInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("trust signer add")
              .Add("{value}", Options)
              .Add("{value}", Name)
              .Add("{value}", Repositories, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerSwarmUpdateSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerSwarmUpdateSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Change manager autolocking setting (true|false).
        /// </summary>
        public virtual bool? Autolock { get; internal set; }
        /// <summary>
        ///   Validity period for node certificates (ns|us|ms|s|m|h).
        /// </summary>
        public virtual string CertExpiry { get; internal set; }
        /// <summary>
        ///   Dispatcher heartbeat period (ns|us|ms|s|m|h).
        /// </summary>
        public virtual string DispatcherHeartbeat { get; internal set; }
        /// <summary>
        ///   Specifications of one or more certificate signing endpoints.
        /// </summary>
        public virtual string ExternalCa { get; internal set; }
        /// <summary>
        ///   Number of additional Raft snapshots to retain.
        /// </summary>
        public virtual int? MaxSnapshots { get; internal set; }
        /// <summary>
        ///   Number of log entries between Raft snapshots.
        /// </summary>
        public virtual int? SnapshotInterval { get; internal set; }
        /// <summary>
        ///   Task history retention limit.
        /// </summary>
        public virtual long? TaskHistoryLimit { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("swarm update")
              .Add("--autolock", Autolock)
              .Add("--cert-expiry {value}", CertExpiry)
              .Add("--dispatcher-heartbeat {value}", DispatcherHeartbeat)
              .Add("--external-ca {value}", ExternalCa)
              .Add("--max-snapshots {value}", MaxSnapshots)
              .Add("--snapshot-interval {value}", SnapshotInterval)
              .Add("--task-history-limit {value}", TaskHistoryLimit)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerServiceLogsSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerServiceLogsSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Show extra details provided to logs.
        /// </summary>
        public virtual bool? Details { get; internal set; }
        /// <summary>
        ///   Follow log output.
        /// </summary>
        public virtual bool? Follow { get; internal set; }
        /// <summary>
        ///   Do not map IDs to Names in output.
        /// </summary>
        public virtual bool? NoResolve { get; internal set; }
        /// <summary>
        ///   Do not include task IDs in output.
        /// </summary>
        public virtual bool? NoTaskIds { get; internal set; }
        /// <summary>
        ///   Do not truncate output.
        /// </summary>
        public virtual bool? NoTrunc { get; internal set; }
        /// <summary>
        ///   Do not neatly format logs.
        /// </summary>
        public virtual bool? Raw { get; internal set; }
        /// <summary>
        ///   Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes).
        /// </summary>
        public virtual string Since { get; internal set; }
        /// <summary>
        ///   Number of lines to show from the end of the logs.
        /// </summary>
        public virtual string Tail { get; internal set; }
        /// <summary>
        ///   Show timestamps.
        /// </summary>
        public virtual bool? Timestamps { get; internal set; }
        /// <summary>
        ///   SERVICE|TASK
        /// </summary>
        public virtual string Service { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("service logs")
              .Add("--details", Details)
              .Add("--follow", Follow)
              .Add("--no-resolve", NoResolve)
              .Add("--no-task-ids", NoTaskIds)
              .Add("--no-trunc", NoTrunc)
              .Add("--raw", Raw)
              .Add("--since {value}", Since)
              .Add("--tail {value}", Tail)
              .Add("--timestamps", Timestamps)
              .Add("{value}", Service)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerServiceLsSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerServiceLsSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Filter output based on conditions provided.
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Pretty-print services using a Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Only display IDs.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("service ls")
              .Add("--filter {value}", Filter)
              .Add("--format {value}", Format)
              .Add("--quiet", Quiet)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerSwarmUnlockSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerSwarmUnlockSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("swarm unlock")
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerNetworkLsSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerNetworkLsSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Provide filter values (e.g. 'driver=bridge').
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Pretty-print networks using a Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Do not truncate the output.
        /// </summary>
        public virtual bool? NoTrunc { get; internal set; }
        /// <summary>
        ///   Only display network IDs.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("network ls")
              .Add("--filter {value}", Filter)
              .Add("--format {value}", Format)
              .Add("--no-trunc", NoTrunc)
              .Add("--quiet", Quiet)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerPluginLsSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerPluginLsSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Provide filter values (e.g. 'enabled=true').
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Pretty-print plugins using a Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Don't truncate output.
        /// </summary>
        public virtual bool? NoTrunc { get; internal set; }
        /// <summary>
        ///   Only display plugin IDs.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("plugin ls")
              .Add("--filter {value}", Filter)
              .Add("--format {value}", Format)
              .Add("--no-trunc", NoTrunc)
              .Add("--quiet", Quiet)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerPluginRmSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerPluginRmSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Force the removal of an active plugin.
        /// </summary>
        public virtual bool? Force { get; internal set; }
        /// <summary>
        ///   PLUGIN
        /// </summary>
        public virtual IReadOnlyList<string> Plugins => PluginsInternal.AsReadOnly();
        internal List<string> PluginsInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("plugin rm")
              .Add("--force", Force)
              .Add("{value}", Plugins, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerImageBuildSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerImageBuildSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Add a custom host-to-IP mapping (host:ip).
        /// </summary>
        public virtual IReadOnlyList<string> AddHost => AddHostInternal.AsReadOnly();
        internal List<string> AddHostInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Set build-time variables.
        /// </summary>
        public virtual IReadOnlyList<string> BuildArg => BuildArgInternal.AsReadOnly();
        internal List<string> BuildArgInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Images to consider as cache sources.
        /// </summary>
        public virtual IReadOnlyList<string> CacheFrom => CacheFromInternal.AsReadOnly();
        internal List<string> CacheFromInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Optional parent cgroup for the container.
        /// </summary>
        public virtual string CgroupParent { get; internal set; }
        /// <summary>
        ///   Compress the build context using gzip.
        /// </summary>
        public virtual bool? Compress { get; internal set; }
        /// <summary>
        ///   Limit the CPU CFS (Completely Fair Scheduler) period.
        /// </summary>
        public virtual long? CpuPeriod { get; internal set; }
        /// <summary>
        ///   Limit the CPU CFS (Completely Fair Scheduler) quota.
        /// </summary>
        public virtual long? CpuQuota { get; internal set; }
        /// <summary>
        ///   CPU shares (relative weight).
        /// </summary>
        public virtual long? CpuShares { get; internal set; }
        /// <summary>
        ///   CPUs in which to allow execution (0-3, 0,1).
        /// </summary>
        public virtual string CpusetCpus { get; internal set; }
        /// <summary>
        ///   MEMs in which to allow execution (0-3, 0,1).
        /// </summary>
        public virtual string CpusetMems { get; internal set; }
        /// <summary>
        ///   Skip image verification.
        /// </summary>
        public virtual bool? DisableContentTrust { get; internal set; }
        /// <summary>
        ///   Name of the Dockerfile (Default is 'PATH/Dockerfile').
        /// </summary>
        public virtual string File { get; internal set; }
        /// <summary>
        ///   Always remove intermediate containers.
        /// </summary>
        public virtual bool? ForceRm { get; internal set; }
        /// <summary>
        ///   Write the image ID to the file.
        /// </summary>
        public virtual string Iidfile { get; internal set; }
        /// <summary>
        ///   Container isolation technology.
        /// </summary>
        public virtual string Isolation { get; internal set; }
        /// <summary>
        ///   Set metadata for an image.
        /// </summary>
        public virtual IReadOnlyList<string> Label => LabelInternal.AsReadOnly();
        internal List<string> LabelInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Memory limit.
        /// </summary>
        public virtual long? Memory { get; internal set; }
        /// <summary>
        ///   Swap limit equal to memory plus swap: '-1' to enable unlimited swap.
        /// </summary>
        public virtual long? MemorySwap { get; internal set; }
        /// <summary>
        ///   Set the networking mode for the RUN instructions during build.
        /// </summary>
        public virtual string Network { get; internal set; }
        /// <summary>
        ///   Do not use cache when building the image.
        /// </summary>
        public virtual bool? NoCache { get; internal set; }
        /// <summary>
        ///   Output destination (format: type=local,dest=path).
        /// </summary>
        public virtual string Output { get; internal set; }
        /// <summary>
        ///   Set platform if server is multi-platform capable.
        /// </summary>
        public virtual string Platform { get; internal set; }
        /// <summary>
        ///   Set type of progress output (auto, plain, tty). Use plain to show container output.
        /// </summary>
        public virtual string Progress { get; internal set; }
        /// <summary>
        ///   Always attempt to pull a newer version of the image.
        /// </summary>
        public virtual bool? Pull { get; internal set; }
        /// <summary>
        ///   Suppress the build output and print image ID on success.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        /// <summary>
        ///   Remove intermediate containers after a successful build.
        /// </summary>
        public virtual bool? Rm { get; internal set; }
        /// <summary>
        ///   Secret file to expose to the build (only if BuildKit enabled): id=mysecret,src=/local/secret.
        /// </summary>
        public virtual string Secret { get; internal set; }
        /// <summary>
        ///   Security options.
        /// </summary>
        public virtual IReadOnlyList<string> SecurityOpt => SecurityOptInternal.AsReadOnly();
        internal List<string> SecurityOptInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Size of /dev/shm.
        /// </summary>
        public virtual long? ShmSize { get; internal set; }
        /// <summary>
        ///   Squash newly built layers into a single new layer.
        /// </summary>
        public virtual bool? Squash { get; internal set; }
        /// <summary>
        ///   SSH agent socket or keys to expose to the build (only if BuildKit enabled) (format: default|&lt;id&gt;[=&lt;socket&gt;|&lt;key&gt;[,&lt;key&gt;]]).
        /// </summary>
        public virtual string Ssh { get; internal set; }
        /// <summary>
        ///   Stream attaches to server to negotiate build context.
        /// </summary>
        public virtual bool? Stream { get; internal set; }
        /// <summary>
        ///   Name and optionally a tag in the 'name:tag' format.
        /// </summary>
        public virtual IReadOnlyList<string> Tag => TagInternal.AsReadOnly();
        internal List<string> TagInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Set the target build stage to build.
        /// </summary>
        public virtual string Target { get; internal set; }
        /// <summary>
        ///   Ulimit options.
        /// </summary>
        public virtual string Ulimit { get; internal set; }
        /// <summary>
        ///   Path or url where the build context is located.
        /// </summary>
        public virtual string Path { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("image build")
              .Add("--add-host {value}", AddHost)
              .Add("--build-arg {value}", BuildArg)
              .Add("--cache-from {value}", CacheFrom)
              .Add("--cgroup-parent {value}", CgroupParent)
              .Add("--compress", Compress)
              .Add("--cpu-period {value}", CpuPeriod)
              .Add("--cpu-quota {value}", CpuQuota)
              .Add("--cpu-shares {value}", CpuShares)
              .Add("--cpuset-cpus {value}", CpusetCpus)
              .Add("--cpuset-mems {value}", CpusetMems)
              .Add("--disable-content-trust", DisableContentTrust)
              .Add("--file {value}", File)
              .Add("--force-rm", ForceRm)
              .Add("--iidfile {value}", Iidfile)
              .Add("--isolation {value}", Isolation)
              .Add("--label {value}", Label)
              .Add("--memory {value}", Memory)
              .Add("--memory-swap {value}", MemorySwap)
              .Add("--network {value}", Network)
              .Add("--no-cache", NoCache)
              .Add("--output {value}", Output)
              .Add("--platform {value}", Platform)
              .Add("--progress {value}", Progress)
              .Add("--pull", Pull)
              .Add("--quiet", Quiet)
              .Add("--rm", Rm)
              .Add("--secret {value}", Secret)
              .Add("--security-opt {value}", SecurityOpt)
              .Add("--shm-size {value}", ShmSize)
              .Add("--squash", Squash)
              .Add("--ssh {value}", Ssh)
              .Add("--stream", Stream)
              .Add("--tag {value}", Tag)
              .Add("--target {value}", Target)
              .Add("--ulimit {value}", Ulimit)
              .Add("{value}", Path)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerTrustRevokeSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerTrustRevokeSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Do not prompt for confirmation.
        /// </summary>
        public virtual bool? Yes { get; internal set; }
        /// <summary>
        ///   IMAGE[:TAG]
        /// </summary>
        public virtual string Image { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("trust revoke")
              .Add("--yes", Yes)
              .Add("{value}", Image)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerRmiSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerRmiSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Force removal of the image.
        /// </summary>
        public virtual bool? Force { get; internal set; }
        /// <summary>
        ///   Do not delete untagged parents.
        /// </summary>
        public virtual bool? NoPrune { get; internal set; }
        /// <summary>
        ///   IMAGE
        /// </summary>
        public virtual IReadOnlyList<string> Images => ImagesInternal.AsReadOnly();
        internal List<string> ImagesInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("rmi")
              .Add("--force", Force)
              .Add("--no-prune", NoPrune)
              .Add("{value}", Images, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerNetworkRmSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerNetworkRmSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   NETWORK
        /// </summary>
        public virtual IReadOnlyList<string> Networks => NetworksInternal.AsReadOnly();
        internal List<string> NetworksInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("network rm")
              .Add("{value}", Networks, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerVersionSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerVersionSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Format the output using the given Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Kubernetes config file.
        /// </summary>
        public virtual string Kubeconfig { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("version")
              .Add("--format {value}", Format)
              .Add("--kubeconfig {value}", Kubeconfig)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerSecretCreateSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerSecretCreateSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Secret driver.
        /// </summary>
        public virtual string Driver { get; internal set; }
        /// <summary>
        ///   Secret labels.
        /// </summary>
        public virtual IReadOnlyList<string> Label => LabelInternal.AsReadOnly();
        internal List<string> LabelInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Template driver.
        /// </summary>
        public virtual string TemplateDriver { get; internal set; }
        /// <summary>
        ///   SECRET
        /// </summary>
        public virtual string Secret { get; internal set; }
        /// <summary>
        ///   Path to file to create the secret from.
        /// </summary>
        public virtual string File { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("secret create")
              .Add("--driver {value}", Driver)
              .Add("--label {value}", Label)
              .Add("--template-driver {value}", TemplateDriver)
              .Add("{value}", Secret)
              .Add("{value}", File)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerServiceRmSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerServiceRmSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   SERVICE
        /// </summary>
        public virtual IReadOnlyList<string> Services => ServicesInternal.AsReadOnly();
        internal List<string> ServicesInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("service rm")
              .Add("{value}", Services, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerTrustKeyLoadSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerTrustKeyLoadSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Name for the loaded key.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   KEYFILE
        /// </summary>
        public virtual string Keyfile { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("trust key load")
              .Add("--name {value}", Name)
              .Add("{value}", Keyfile)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerSecretRmSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerSecretRmSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   SECRET
        /// </summary>
        public virtual IReadOnlyList<string> Secrets => SecretsInternal.AsReadOnly();
        internal List<string> SecretsInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("secret rm")
              .Add("{value}", Secrets, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerImageInspectSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerImageInspectSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Format the output using the given Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   IMAGE
        /// </summary>
        public virtual IReadOnlyList<string> Images => ImagesInternal.AsReadOnly();
        internal List<string> ImagesInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("image inspect")
              .Add("--format {value}", Format)
              .Add("{value}", Images, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerImageSaveSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerImageSaveSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Write to a file, instead of STDOUT.
        /// </summary>
        public virtual string Output { get; internal set; }
        /// <summary>
        ///   IMAGE
        /// </summary>
        public virtual IReadOnlyList<string> Images => ImagesInternal.AsReadOnly();
        internal List<string> ImagesInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("image save")
              .Add("--output {value}", Output)
              .Add("{value}", Images, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerTrustKeySettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerTrustKeySettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("trust key")
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContainerAttachSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContainerAttachSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Override the key sequence for detaching a container.
        /// </summary>
        public virtual string DetachKeys { get; internal set; }
        /// <summary>
        ///   Do not attach STDIN.
        /// </summary>
        public virtual bool? NoStdin { get; internal set; }
        /// <summary>
        ///   Proxy all received signals to the process.
        /// </summary>
        public virtual bool? SigProxy { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual string Container { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("container attach")
              .Add("--detach-keys {value}", DetachKeys)
              .Add("--no-stdin", NoStdin)
              .Add("--sig-proxy", SigProxy)
              .Add("{value}", Container)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContextCreateSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContextCreateSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Default orchestrator for stack operations to use with this context (swarm|kubernetes|all).
        /// </summary>
        public virtual string DefaultStackOrchestrator { get; internal set; }
        /// <summary>
        ///   Description of the context.
        /// </summary>
        public virtual string Description { get; internal set; }
        /// <summary>
        ///   set the docker endpoint.
        /// </summary>
        public virtual string Docker { get; internal set; }
        /// <summary>
        ///   create context from a named context.
        /// </summary>
        public virtual string From { get; internal set; }
        /// <summary>
        ///   set the kubernetes endpoint.
        /// </summary>
        public virtual string Kubernetes { get; internal set; }
        /// <summary>
        ///   CONTEXT
        /// </summary>
        public virtual string Context { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("context create")
              .Add("--default-stack-orchestrator {value}", DefaultStackOrchestrator)
              .Add("--description {value}", Description)
              .Add("--docker {value}", Docker)
              .Add("--from {value}", From)
              .Add("--kubernetes {value}", Kubernetes)
              .Add("{value}", Context)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerConfigCreateSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerConfigCreateSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Config labels.
        /// </summary>
        public virtual IReadOnlyList<string> Label => LabelInternal.AsReadOnly();
        internal List<string> LabelInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Template driver.
        /// </summary>
        public virtual string TemplateDriver { get; internal set; }
        /// <summary>
        ///   CONFIG
        /// </summary>
        public virtual string Config { get; internal set; }
        /// <summary>
        ///   file|-
        /// </summary>
        public virtual string File { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("config create")
              .Add("--label {value}", Label)
              .Add("--template-driver {value}", TemplateDriver)
              .Add("{value}", Config)
              .Add("{value}", File)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerVolumeInspectSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerVolumeInspectSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Format the output using the given Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   VOLUME
        /// </summary>
        public virtual IReadOnlyList<string> Volumes => VolumesInternal.AsReadOnly();
        internal List<string> VolumesInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("volume inspect")
              .Add("--format {value}", Format)
              .Add("{value}", Volumes, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContainerStopSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContainerStopSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Seconds to wait for stop before killing it.
        /// </summary>
        public virtual int? Time { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual IReadOnlyList<string> Containers => ContainersInternal.AsReadOnly();
        internal List<string> ContainersInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("container stop")
              .Add("--time {value}", Time)
              .Add("{value}", Containers, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerNetworkPruneSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerNetworkPruneSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Provide filter values (e.g. 'until=&lt;timestamp&gt;').
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Do not prompt for confirmation.
        /// </summary>
        public virtual bool? Force { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("network prune")
              .Add("--filter {value}", Filter)
              .Add("--force", Force)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerManifestInspectSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerManifestInspectSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Allow communication with an insecure registry.
        /// </summary>
        public virtual bool? Insecure { get; internal set; }
        /// <summary>
        ///   Output additional info including layers and platform.
        /// </summary>
        public virtual bool? Verbose { get; internal set; }
        /// <summary>
        ///   [MANIFEST_LIST]
        /// </summary>
        public virtual string ManifestList { get; internal set; }
        /// <summary>
        ///   MANIFEST
        /// </summary>
        public virtual string Manifest { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("manifest inspect")
              .Add("--insecure", Insecure)
              .Add("--verbose", Verbose)
              .Add("{value}", ManifestList)
              .Add("{value}", Manifest)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerInfoSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerInfoSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Format the output using the given Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("info")
              .Add("--format {value}", Format)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerCommitSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerCommitSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Author (e.g., "John Hannibal Smith &lt;hannibal@a-team.com&gt;").
        /// </summary>
        public virtual string Author { get; internal set; }
        /// <summary>
        ///   Apply Dockerfile instruction to the created image.
        /// </summary>
        public virtual IReadOnlyList<string> Change => ChangeInternal.AsReadOnly();
        internal List<string> ChangeInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Commit message.
        /// </summary>
        public virtual string Message { get; internal set; }
        /// <summary>
        ///   Pause container during commit.
        /// </summary>
        public virtual bool? Pause { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual string Container { get; internal set; }
        /// <summary>
        ///   [REPOSITORY[:TAG]]
        /// </summary>
        public virtual string Repository { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("commit")
              .Add("--author {value}", Author)
              .Add("--change {value}", Change)
              .Add("--message {value}", Message)
              .Add("--pause", Pause)
              .Add("{value}", Container)
              .Add("{value}", Repository)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerStackDeploySettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerStackDeploySettings : DockerStackSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Path to a Distributed Application Bundle file.
        /// </summary>
        public virtual string BundleFile { get; internal set; }
        /// <summary>
        ///   Path to a Compose file, or "-" to read from stdin.
        /// </summary>
        public virtual IReadOnlyList<string> ComposeFile => ComposeFileInternal.AsReadOnly();
        internal List<string> ComposeFileInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Kubernetes namespace to use.
        /// </summary>
        public virtual string Namespace { get; internal set; }
        /// <summary>
        ///   Prune services that are no longer referenced.
        /// </summary>
        public virtual bool? Prune { get; internal set; }
        /// <summary>
        ///   Query the registry to resolve image digest and supported platforms ("always"|"changed"|"never").
        /// </summary>
        public virtual ResolveImage ResolveImage { get; internal set; }
        /// <summary>
        ///   Send registry authentication details to Swarm agents.
        /// </summary>
        public virtual bool? WithRegistryAuth { get; internal set; }
        /// <summary>
        ///   STACK
        /// </summary>
        public virtual string Stack { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("stack deploy")
              .Add("--bundle-file {value}", BundleFile)
              .Add("--compose-file {value}", ComposeFile)
              .Add("--namespace {value}", Namespace)
              .Add("--prune", Prune)
              .Add("--resolve-image {value}", ResolveImage)
              .Add("--with-registry-auth", WithRegistryAuth)
              .Add("{value}", Stack)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerServiceScaleSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerServiceScaleSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   SERVICE=REPLICAS
        /// </summary>
        public virtual IReadOnlyDictionary<string, string> ServiceReplicas => ServiceReplicasInternal.AsReadOnly();
        internal Dictionary<string,string> ServiceReplicasInternal { get; set; } = new Dictionary<string,string>(StringComparer.OrdinalIgnoreCase);
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("service scale")
              .Add("{value}", ServiceReplicas, "{key=value}")
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerRunSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerRunSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Add a custom host-to-IP mapping (host:ip).
        /// </summary>
        public virtual IReadOnlyList<string> AddHost => AddHostInternal.AsReadOnly();
        internal List<string> AddHostInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Attach to STDIN, STDOUT or STDERR.
        /// </summary>
        public virtual IReadOnlyList<string> Attach => AttachInternal.AsReadOnly();
        internal List<string> AttachInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0).
        /// </summary>
        public virtual int? BlkioWeight { get; internal set; }
        /// <summary>
        ///   Block IO weight (relative device weight).
        /// </summary>
        public virtual IReadOnlyList<string> BlkioWeightDevice => BlkioWeightDeviceInternal.AsReadOnly();
        internal List<string> BlkioWeightDeviceInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Add Linux capabilities.
        /// </summary>
        public virtual IReadOnlyList<string> CapAdd => CapAddInternal.AsReadOnly();
        internal List<string> CapAddInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Drop Linux capabilities.
        /// </summary>
        public virtual IReadOnlyList<string> CapDrop => CapDropInternal.AsReadOnly();
        internal List<string> CapDropInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Optional parent cgroup for the container.
        /// </summary>
        public virtual string CgroupParent { get; internal set; }
        /// <summary>
        ///   Write the container ID to the file.
        /// </summary>
        public virtual string Cidfile { get; internal set; }
        /// <summary>
        ///   CPU count (Windows only).
        /// </summary>
        public virtual long? CpuCount { get; internal set; }
        /// <summary>
        ///   CPU percent (Windows only).
        /// </summary>
        public virtual long? CpuPercent { get; internal set; }
        /// <summary>
        ///   Limit CPU CFS (Completely Fair Scheduler) period.
        /// </summary>
        public virtual long? CpuPeriod { get; internal set; }
        /// <summary>
        ///   Limit CPU CFS (Completely Fair Scheduler) quota.
        /// </summary>
        public virtual long? CpuQuota { get; internal set; }
        /// <summary>
        ///   Limit CPU real-time period in microseconds.
        /// </summary>
        public virtual long? CpuRtPeriod { get; internal set; }
        /// <summary>
        ///   Limit CPU real-time runtime in microseconds.
        /// </summary>
        public virtual long? CpuRtRuntime { get; internal set; }
        /// <summary>
        ///   CPU shares (relative weight).
        /// </summary>
        public virtual long? CpuShares { get; internal set; }
        /// <summary>
        ///   Number of CPUs.
        /// </summary>
        public virtual decimal? Cpus { get; internal set; }
        /// <summary>
        ///   CPUs in which to allow execution (0-3, 0,1).
        /// </summary>
        public virtual string CpusetCpus { get; internal set; }
        /// <summary>
        ///   MEMs in which to allow execution (0-3, 0,1).
        /// </summary>
        public virtual string CpusetMems { get; internal set; }
        /// <summary>
        ///   Run container in background and print container ID.
        /// </summary>
        public virtual bool? Detach { get; internal set; }
        /// <summary>
        ///   Override the key sequence for detaching a container.
        /// </summary>
        public virtual string DetachKeys { get; internal set; }
        /// <summary>
        ///   Add a host device to the container.
        /// </summary>
        public virtual IReadOnlyList<string> Device => DeviceInternal.AsReadOnly();
        internal List<string> DeviceInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Add a rule to the cgroup allowed devices list.
        /// </summary>
        public virtual IReadOnlyList<string> DeviceCgroupRule => DeviceCgroupRuleInternal.AsReadOnly();
        internal List<string> DeviceCgroupRuleInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Limit read rate (bytes per second) from a device.
        /// </summary>
        public virtual IReadOnlyList<string> DeviceReadBps => DeviceReadBpsInternal.AsReadOnly();
        internal List<string> DeviceReadBpsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Limit read rate (IO per second) from a device.
        /// </summary>
        public virtual IReadOnlyList<string> DeviceReadIops => DeviceReadIopsInternal.AsReadOnly();
        internal List<string> DeviceReadIopsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Limit write rate (bytes per second) to a device.
        /// </summary>
        public virtual IReadOnlyList<string> DeviceWriteBps => DeviceWriteBpsInternal.AsReadOnly();
        internal List<string> DeviceWriteBpsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Limit write rate (IO per second) to a device.
        /// </summary>
        public virtual IReadOnlyList<string> DeviceWriteIops => DeviceWriteIopsInternal.AsReadOnly();
        internal List<string> DeviceWriteIopsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Skip image verification.
        /// </summary>
        public virtual bool? DisableContentTrust { get; internal set; }
        /// <summary>
        ///   Set custom DNS servers.
        /// </summary>
        public virtual IReadOnlyList<string> Dns => DnsInternal.AsReadOnly();
        internal List<string> DnsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Set DNS options.
        /// </summary>
        public virtual IReadOnlyList<string> DnsOpt => DnsOptInternal.AsReadOnly();
        internal List<string> DnsOptInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Set DNS options.
        /// </summary>
        public virtual IReadOnlyList<string> DnsOption => DnsOptionInternal.AsReadOnly();
        internal List<string> DnsOptionInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Set custom DNS search domains.
        /// </summary>
        public virtual IReadOnlyList<string> DnsSearch => DnsSearchInternal.AsReadOnly();
        internal List<string> DnsSearchInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Container NIS domain name.
        /// </summary>
        public virtual string Domainname { get; internal set; }
        /// <summary>
        ///   Overwrite the default ENTRYPOINT of the image.
        /// </summary>
        public virtual string Entrypoint { get; internal set; }
        /// <summary>
        ///   Set environment variables.
        /// </summary>
        public virtual IReadOnlyList<string> Env => EnvInternal.AsReadOnly();
        internal List<string> EnvInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Read in a file of environment variables.
        /// </summary>
        public virtual IReadOnlyList<string> EnvFile => EnvFileInternal.AsReadOnly();
        internal List<string> EnvFileInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Expose a port or a range of ports.
        /// </summary>
        public virtual IReadOnlyList<string> Expose => ExposeInternal.AsReadOnly();
        internal List<string> ExposeInternal { get; set; } = new List<string>();
        /// <summary>
        ///   GPU devices to add to the container ('all' to pass all GPUs).
        /// </summary>
        public virtual string Gpus { get; internal set; }
        /// <summary>
        ///   Add additional groups to join.
        /// </summary>
        public virtual IReadOnlyList<string> GroupAdd => GroupAddInternal.AsReadOnly();
        internal List<string> GroupAddInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Command to run to check health.
        /// </summary>
        public virtual string HealthCmd { get; internal set; }
        /// <summary>
        ///   Time between running the check (ms|s|m|h) (default 0s).
        /// </summary>
        public virtual string HealthInterval { get; internal set; }
        /// <summary>
        ///   Consecutive failures needed to report unhealthy.
        /// </summary>
        public virtual int? HealthRetries { get; internal set; }
        /// <summary>
        ///   Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s).
        /// </summary>
        public virtual string HealthStartPeriod { get; internal set; }
        /// <summary>
        ///   Maximum time to allow one check to run (ms|s|m|h) (default 0s).
        /// </summary>
        public virtual string HealthTimeout { get; internal set; }
        /// <summary>
        ///   Print usage.
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Container host name.
        /// </summary>
        public virtual string Hostname { get; internal set; }
        /// <summary>
        ///   Run an init inside the container that forwards signals and reaps processes.
        /// </summary>
        public virtual bool? Init { get; internal set; }
        /// <summary>
        ///   Keep STDIN open even if not attached.
        /// </summary>
        public virtual bool? Interactive { get; internal set; }
        /// <summary>
        ///   Maximum IO bandwidth limit for the system drive (Windows only).
        /// </summary>
        public virtual long? IoMaxbandwidth { get; internal set; }
        /// <summary>
        ///   Maximum IOps limit for the system drive (Windows only).
        /// </summary>
        public virtual int? IoMaxiops { get; internal set; }
        /// <summary>
        ///   IPv4 address (e.g., 172.30.100.104).
        /// </summary>
        public virtual string Ip { get; internal set; }
        /// <summary>
        ///   IPv6 address (e.g., 2001:db8::33).
        /// </summary>
        public virtual string Ip6 { get; internal set; }
        /// <summary>
        ///   IPC mode to use.
        /// </summary>
        public virtual string Ipc { get; internal set; }
        /// <summary>
        ///   Container isolation technology.
        /// </summary>
        public virtual string Isolation { get; internal set; }
        /// <summary>
        ///   Kernel memory limit.
        /// </summary>
        public virtual long? KernelMemory { get; internal set; }
        /// <summary>
        ///   Set meta data on a container.
        /// </summary>
        public virtual IReadOnlyList<string> Label => LabelInternal.AsReadOnly();
        internal List<string> LabelInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Read in a line delimited file of labels.
        /// </summary>
        public virtual IReadOnlyList<string> LabelFile => LabelFileInternal.AsReadOnly();
        internal List<string> LabelFileInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Add link to another container.
        /// </summary>
        public virtual IReadOnlyList<string> Link => LinkInternal.AsReadOnly();
        internal List<string> LinkInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Container IPv4/IPv6 link-local addresses.
        /// </summary>
        public virtual IReadOnlyList<string> LinkLocalIp => LinkLocalIpInternal.AsReadOnly();
        internal List<string> LinkLocalIpInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Logging driver for the container.
        /// </summary>
        public virtual string LogDriver { get; internal set; }
        /// <summary>
        ///   Log driver options.
        /// </summary>
        public virtual IReadOnlyList<string> LogOpt => LogOptInternal.AsReadOnly();
        internal List<string> LogOptInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Container MAC address (e.g., 92:d0:c6:0a:29:33).
        /// </summary>
        public virtual string MacAddress { get; internal set; }
        /// <summary>
        ///   Memory limit.
        /// </summary>
        public virtual long? Memory { get; internal set; }
        /// <summary>
        ///   Memory soft limit.
        /// </summary>
        public virtual long? MemoryReservation { get; internal set; }
        /// <summary>
        ///   Swap limit equal to memory plus swap: '-1' to enable unlimited swap.
        /// </summary>
        public virtual long? MemorySwap { get; internal set; }
        /// <summary>
        ///   Tune container memory swappiness (0 to 100).
        /// </summary>
        public virtual long? MemorySwappiness { get; internal set; }
        /// <summary>
        ///   Attach a filesystem mount to the container.
        /// </summary>
        public virtual string Mount { get; internal set; }
        /// <summary>
        ///   Assign a name to the container.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Connect a container to a network.
        /// </summary>
        public virtual string Net { get; internal set; }
        /// <summary>
        ///   Add network-scoped alias for the container.
        /// </summary>
        public virtual IReadOnlyList<string> NetAlias => NetAliasInternal.AsReadOnly();
        internal List<string> NetAliasInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Connect a container to a network.
        /// </summary>
        public virtual string Network { get; internal set; }
        /// <summary>
        ///   Add network-scoped alias for the container.
        /// </summary>
        public virtual IReadOnlyList<string> NetworkAlias => NetworkAliasInternal.AsReadOnly();
        internal List<string> NetworkAliasInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Disable any container-specified HEALTHCHECK.
        /// </summary>
        public virtual bool? NoHealthcheck { get; internal set; }
        /// <summary>
        ///   Disable OOM Killer.
        /// </summary>
        public virtual bool? OomKillDisable { get; internal set; }
        /// <summary>
        ///   Tune host's OOM preferences (-1000 to 1000).
        /// </summary>
        public virtual int? OomScoreAdj { get; internal set; }
        /// <summary>
        ///   PID namespace to use.
        /// </summary>
        public virtual string Pid { get; internal set; }
        /// <summary>
        ///   Tune container pids limit (set -1 for unlimited).
        /// </summary>
        public virtual long? PidsLimit { get; internal set; }
        /// <summary>
        ///   Set platform if server is multi-platform capable.
        /// </summary>
        public virtual string Platform { get; internal set; }
        /// <summary>
        ///   Give extended privileges to this container.
        /// </summary>
        public virtual bool? Privileged { get; internal set; }
        /// <summary>
        ///   Publish a container's port(s) to the host.
        /// </summary>
        public virtual IReadOnlyList<string> Publish => PublishInternal.AsReadOnly();
        internal List<string> PublishInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Publish all exposed ports to random ports.
        /// </summary>
        public virtual bool? PublishAll { get; internal set; }
        /// <summary>
        ///   Mount the container's root filesystem as read only.
        /// </summary>
        public virtual bool? ReadOnly { get; internal set; }
        /// <summary>
        ///   Restart policy to apply when a container exits.
        /// </summary>
        public virtual string Restart { get; internal set; }
        /// <summary>
        ///   Automatically remove the container when it exits.
        /// </summary>
        public virtual bool? Rm { get; internal set; }
        /// <summary>
        ///   Runtime to use for this container.
        /// </summary>
        public virtual string Runtime { get; internal set; }
        /// <summary>
        ///   Security Options.
        /// </summary>
        public virtual IReadOnlyList<string> SecurityOpt => SecurityOptInternal.AsReadOnly();
        internal List<string> SecurityOptInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Size of /dev/shm.
        /// </summary>
        public virtual long? ShmSize { get; internal set; }
        /// <summary>
        ///   Proxy received signals to the process.
        /// </summary>
        public virtual bool? SigProxy { get; internal set; }
        /// <summary>
        ///   Signal to stop a container.
        /// </summary>
        public virtual string StopSignal { get; internal set; }
        /// <summary>
        ///   Timeout (in seconds) to stop a container.
        /// </summary>
        public virtual int? StopTimeout { get; internal set; }
        /// <summary>
        ///   Storage driver options for the container.
        /// </summary>
        public virtual IReadOnlyList<string> StorageOpt => StorageOptInternal.AsReadOnly();
        internal List<string> StorageOptInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Sysctl options.
        /// </summary>
        public virtual IReadOnlyDictionary<string, string> Sysctl => SysctlInternal.AsReadOnly();
        internal Dictionary<string,string> SysctlInternal { get; set; } = new Dictionary<string,string>(StringComparer.OrdinalIgnoreCase);
        /// <summary>
        ///   Mount a tmpfs directory.
        /// </summary>
        public virtual IReadOnlyList<string> Tmpfs => TmpfsInternal.AsReadOnly();
        internal List<string> TmpfsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Allocate a pseudo-TTY.
        /// </summary>
        public virtual bool? Tty { get; internal set; }
        /// <summary>
        ///   Ulimit options.
        /// </summary>
        public virtual string Ulimit { get; internal set; }
        /// <summary>
        ///   Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).
        /// </summary>
        public virtual string User { get; internal set; }
        /// <summary>
        ///   User namespace to use.
        /// </summary>
        public virtual string Userns { get; internal set; }
        /// <summary>
        ///   UTS namespace to use.
        /// </summary>
        public virtual string Uts { get; internal set; }
        /// <summary>
        ///   Bind mount a volume.
        /// </summary>
        public virtual IReadOnlyList<string> Volume => VolumeInternal.AsReadOnly();
        internal List<string> VolumeInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Optional volume driver for the container.
        /// </summary>
        public virtual string VolumeDriver { get; internal set; }
        /// <summary>
        ///   Mount volumes from the specified container(s).
        /// </summary>
        public virtual IReadOnlyList<string> VolumesFrom => VolumesFromInternal.AsReadOnly();
        internal List<string> VolumesFromInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Working directory inside the container.
        /// </summary>
        public virtual string Workdir { get; internal set; }
        /// <summary>
        ///   IMAGE
        /// </summary>
        public virtual string Image { get; internal set; }
        /// <summary>
        ///   [COMMAND]
        /// </summary>
        public virtual string Command { get; internal set; }
        /// <summary>
        ///   [ARG...]
        /// </summary>
        public virtual IReadOnlyList<string> Args => ArgsInternal.AsReadOnly();
        internal List<string> ArgsInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("run")
              .Add("--add-host {value}", AddHost)
              .Add("--attach {value}", Attach)
              .Add("--blkio-weight {value}", BlkioWeight)
              .Add("--blkio-weight-device {value}", BlkioWeightDevice)
              .Add("--cap-add {value}", CapAdd)
              .Add("--cap-drop {value}", CapDrop)
              .Add("--cgroup-parent {value}", CgroupParent)
              .Add("--cidfile {value}", Cidfile)
              .Add("--cpu-count {value}", CpuCount)
              .Add("--cpu-percent {value}", CpuPercent)
              .Add("--cpu-period {value}", CpuPeriod)
              .Add("--cpu-quota {value}", CpuQuota)
              .Add("--cpu-rt-period {value}", CpuRtPeriod)
              .Add("--cpu-rt-runtime {value}", CpuRtRuntime)
              .Add("--cpu-shares {value}", CpuShares)
              .Add("--cpus {value}", Cpus)
              .Add("--cpuset-cpus {value}", CpusetCpus)
              .Add("--cpuset-mems {value}", CpusetMems)
              .Add("--detach", Detach)
              .Add("--detach-keys {value}", DetachKeys)
              .Add("--device {value}", Device)
              .Add("--device-cgroup-rule {value}", DeviceCgroupRule)
              .Add("--device-read-bps {value}", DeviceReadBps)
              .Add("--device-read-iops {value}", DeviceReadIops)
              .Add("--device-write-bps {value}", DeviceWriteBps)
              .Add("--device-write-iops {value}", DeviceWriteIops)
              .Add("--disable-content-trust", DisableContentTrust)
              .Add("--dns {value}", Dns)
              .Add("--dns-opt {value}", DnsOpt)
              .Add("--dns-option {value}", DnsOption)
              .Add("--dns-search {value}", DnsSearch)
              .Add("--domainname {value}", Domainname)
              .Add("--entrypoint {value}", Entrypoint)
              .Add("--env {value}", Env)
              .Add("--env-file {value}", EnvFile)
              .Add("--expose {value}", Expose)
              .Add("--gpus {value}", Gpus)
              .Add("--group-add {value}", GroupAdd)
              .Add("--health-cmd {value}", HealthCmd)
              .Add("--health-interval {value}", HealthInterval)
              .Add("--health-retries {value}", HealthRetries)
              .Add("--health-start-period {value}", HealthStartPeriod)
              .Add("--health-timeout {value}", HealthTimeout)
              .Add("--help", Help)
              .Add("--hostname {value}", Hostname)
              .Add("--init", Init)
              .Add("--interactive", Interactive)
              .Add("--io-maxbandwidth {value}", IoMaxbandwidth)
              .Add("--io-maxiops {value}", IoMaxiops)
              .Add("--ip {value}", Ip)
              .Add("--ip6 {value}", Ip6)
              .Add("--ipc {value}", Ipc)
              .Add("--isolation {value}", Isolation)
              .Add("--kernel-memory {value}", KernelMemory)
              .Add("--label {value}", Label)
              .Add("--label-file {value}", LabelFile)
              .Add("--link {value}", Link)
              .Add("--link-local-ip {value}", LinkLocalIp)
              .Add("--log-driver {value}", LogDriver)
              .Add("--log-opt {value}", LogOpt)
              .Add("--mac-address {value}", MacAddress)
              .Add("--memory {value}", Memory)
              .Add("--memory-reservation {value}", MemoryReservation)
              .Add("--memory-swap {value}", MemorySwap)
              .Add("--memory-swappiness {value}", MemorySwappiness)
              .Add("--mount {value}", Mount)
              .Add("--name {value}", Name)
              .Add("--net {value}", Net)
              .Add("--net-alias {value}", NetAlias)
              .Add("--network {value}", Network)
              .Add("--network-alias {value}", NetworkAlias)
              .Add("--no-healthcheck", NoHealthcheck)
              .Add("--oom-kill-disable", OomKillDisable)
              .Add("--oom-score-adj {value}", OomScoreAdj)
              .Add("--pid {value}", Pid)
              .Add("--pids-limit {value}", PidsLimit)
              .Add("--platform {value}", Platform)
              .Add("--privileged", Privileged)
              .Add("--publish {value}", Publish)
              .Add("--publish-all", PublishAll)
              .Add("--read-only", ReadOnly)
              .Add("--restart {value}", Restart)
              .Add("--rm", Rm)
              .Add("--runtime {value}", Runtime)
              .Add("--security-opt {value}", SecurityOpt)
              .Add("--shm-size {value}", ShmSize)
              .Add("--sig-proxy", SigProxy)
              .Add("--stop-signal {value}", StopSignal)
              .Add("--stop-timeout {value}", StopTimeout)
              .Add("--storage-opt {value}", StorageOpt)
              .Add("--sysctl {value}", Sysctl, "{key}:{value}")
              .Add("--tmpfs {value}", Tmpfs)
              .Add("--tty", Tty)
              .Add("--ulimit {value}", Ulimit)
              .Add("--user {value}", User)
              .Add("--userns {value}", Userns)
              .Add("--uts {value}", Uts)
              .Add("--volume {value}", Volume)
              .Add("--volume-driver {value}", VolumeDriver)
              .Add("--volumes-from {value}", VolumesFrom)
              .Add("--workdir {value}", Workdir)
              .Add("{value}", Image)
              .Add("{value}", Command)
              .Add("{value}", Args, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerCreateSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerCreateSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Add a custom host-to-IP mapping (host:ip).
        /// </summary>
        public virtual IReadOnlyList<string> AddHost => AddHostInternal.AsReadOnly();
        internal List<string> AddHostInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Attach to STDIN, STDOUT or STDERR.
        /// </summary>
        public virtual IReadOnlyList<string> Attach => AttachInternal.AsReadOnly();
        internal List<string> AttachInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0).
        /// </summary>
        public virtual int? BlkioWeight { get; internal set; }
        /// <summary>
        ///   Block IO weight (relative device weight).
        /// </summary>
        public virtual IReadOnlyList<string> BlkioWeightDevice => BlkioWeightDeviceInternal.AsReadOnly();
        internal List<string> BlkioWeightDeviceInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Add Linux capabilities.
        /// </summary>
        public virtual IReadOnlyList<string> CapAdd => CapAddInternal.AsReadOnly();
        internal List<string> CapAddInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Drop Linux capabilities.
        /// </summary>
        public virtual IReadOnlyList<string> CapDrop => CapDropInternal.AsReadOnly();
        internal List<string> CapDropInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Optional parent cgroup for the container.
        /// </summary>
        public virtual string CgroupParent { get; internal set; }
        /// <summary>
        ///   Write the container ID to the file.
        /// </summary>
        public virtual string Cidfile { get; internal set; }
        /// <summary>
        ///   CPU count (Windows only).
        /// </summary>
        public virtual long? CpuCount { get; internal set; }
        /// <summary>
        ///   CPU percent (Windows only).
        /// </summary>
        public virtual long? CpuPercent { get; internal set; }
        /// <summary>
        ///   Limit CPU CFS (Completely Fair Scheduler) period.
        /// </summary>
        public virtual long? CpuPeriod { get; internal set; }
        /// <summary>
        ///   Limit CPU CFS (Completely Fair Scheduler) quota.
        /// </summary>
        public virtual long? CpuQuota { get; internal set; }
        /// <summary>
        ///   Limit CPU real-time period in microseconds.
        /// </summary>
        public virtual long? CpuRtPeriod { get; internal set; }
        /// <summary>
        ///   Limit CPU real-time runtime in microseconds.
        /// </summary>
        public virtual long? CpuRtRuntime { get; internal set; }
        /// <summary>
        ///   CPU shares (relative weight).
        /// </summary>
        public virtual long? CpuShares { get; internal set; }
        /// <summary>
        ///   Number of CPUs.
        /// </summary>
        public virtual decimal? Cpus { get; internal set; }
        /// <summary>
        ///   CPUs in which to allow execution (0-3, 0,1).
        /// </summary>
        public virtual string CpusetCpus { get; internal set; }
        /// <summary>
        ///   MEMs in which to allow execution (0-3, 0,1).
        /// </summary>
        public virtual string CpusetMems { get; internal set; }
        /// <summary>
        ///   Add a host device to the container.
        /// </summary>
        public virtual IReadOnlyList<string> Device => DeviceInternal.AsReadOnly();
        internal List<string> DeviceInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Add a rule to the cgroup allowed devices list.
        /// </summary>
        public virtual IReadOnlyList<string> DeviceCgroupRule => DeviceCgroupRuleInternal.AsReadOnly();
        internal List<string> DeviceCgroupRuleInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Limit read rate (bytes per second) from a device.
        /// </summary>
        public virtual IReadOnlyList<string> DeviceReadBps => DeviceReadBpsInternal.AsReadOnly();
        internal List<string> DeviceReadBpsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Limit read rate (IO per second) from a device.
        /// </summary>
        public virtual IReadOnlyList<string> DeviceReadIops => DeviceReadIopsInternal.AsReadOnly();
        internal List<string> DeviceReadIopsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Limit write rate (bytes per second) to a device.
        /// </summary>
        public virtual IReadOnlyList<string> DeviceWriteBps => DeviceWriteBpsInternal.AsReadOnly();
        internal List<string> DeviceWriteBpsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Limit write rate (IO per second) to a device.
        /// </summary>
        public virtual IReadOnlyList<string> DeviceWriteIops => DeviceWriteIopsInternal.AsReadOnly();
        internal List<string> DeviceWriteIopsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Skip image verification.
        /// </summary>
        public virtual bool? DisableContentTrust { get; internal set; }
        /// <summary>
        ///   Set custom DNS servers.
        /// </summary>
        public virtual IReadOnlyList<string> Dns => DnsInternal.AsReadOnly();
        internal List<string> DnsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Set DNS options.
        /// </summary>
        public virtual IReadOnlyList<string> DnsOpt => DnsOptInternal.AsReadOnly();
        internal List<string> DnsOptInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Set DNS options.
        /// </summary>
        public virtual IReadOnlyList<string> DnsOption => DnsOptionInternal.AsReadOnly();
        internal List<string> DnsOptionInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Set custom DNS search domains.
        /// </summary>
        public virtual IReadOnlyList<string> DnsSearch => DnsSearchInternal.AsReadOnly();
        internal List<string> DnsSearchInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Container NIS domain name.
        /// </summary>
        public virtual string Domainname { get; internal set; }
        /// <summary>
        ///   Overwrite the default ENTRYPOINT of the image.
        /// </summary>
        public virtual string Entrypoint { get; internal set; }
        /// <summary>
        ///   Set environment variables.
        /// </summary>
        public virtual IReadOnlyList<string> Env => EnvInternal.AsReadOnly();
        internal List<string> EnvInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Read in a file of environment variables.
        /// </summary>
        public virtual IReadOnlyList<string> EnvFile => EnvFileInternal.AsReadOnly();
        internal List<string> EnvFileInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Expose a port or a range of ports.
        /// </summary>
        public virtual IReadOnlyList<string> Expose => ExposeInternal.AsReadOnly();
        internal List<string> ExposeInternal { get; set; } = new List<string>();
        /// <summary>
        ///   GPU devices to add to the container ('all' to pass all GPUs).
        /// </summary>
        public virtual string Gpus { get; internal set; }
        /// <summary>
        ///   Add additional groups to join.
        /// </summary>
        public virtual IReadOnlyList<string> GroupAdd => GroupAddInternal.AsReadOnly();
        internal List<string> GroupAddInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Command to run to check health.
        /// </summary>
        public virtual string HealthCmd { get; internal set; }
        /// <summary>
        ///   Time between running the check (ms|s|m|h) (default 0s).
        /// </summary>
        public virtual string HealthInterval { get; internal set; }
        /// <summary>
        ///   Consecutive failures needed to report unhealthy.
        /// </summary>
        public virtual int? HealthRetries { get; internal set; }
        /// <summary>
        ///   Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s).
        /// </summary>
        public virtual string HealthStartPeriod { get; internal set; }
        /// <summary>
        ///   Maximum time to allow one check to run (ms|s|m|h) (default 0s).
        /// </summary>
        public virtual string HealthTimeout { get; internal set; }
        /// <summary>
        ///   Print usage.
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Container host name.
        /// </summary>
        public virtual string Hostname { get; internal set; }
        /// <summary>
        ///   Run an init inside the container that forwards signals and reaps processes.
        /// </summary>
        public virtual bool? Init { get; internal set; }
        /// <summary>
        ///   Keep STDIN open even if not attached.
        /// </summary>
        public virtual bool? Interactive { get; internal set; }
        /// <summary>
        ///   Maximum IO bandwidth limit for the system drive (Windows only).
        /// </summary>
        public virtual long? IoMaxbandwidth { get; internal set; }
        /// <summary>
        ///   Maximum IOps limit for the system drive (Windows only).
        /// </summary>
        public virtual int? IoMaxiops { get; internal set; }
        /// <summary>
        ///   IPv4 address (e.g., 172.30.100.104).
        /// </summary>
        public virtual string Ip { get; internal set; }
        /// <summary>
        ///   IPv6 address (e.g., 2001:db8::33).
        /// </summary>
        public virtual string Ip6 { get; internal set; }
        /// <summary>
        ///   IPC mode to use.
        /// </summary>
        public virtual string Ipc { get; internal set; }
        /// <summary>
        ///   Container isolation technology.
        /// </summary>
        public virtual string Isolation { get; internal set; }
        /// <summary>
        ///   Kernel memory limit.
        /// </summary>
        public virtual long? KernelMemory { get; internal set; }
        /// <summary>
        ///   Set meta data on a container.
        /// </summary>
        public virtual IReadOnlyList<string> Label => LabelInternal.AsReadOnly();
        internal List<string> LabelInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Read in a line delimited file of labels.
        /// </summary>
        public virtual IReadOnlyList<string> LabelFile => LabelFileInternal.AsReadOnly();
        internal List<string> LabelFileInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Add link to another container.
        /// </summary>
        public virtual IReadOnlyList<string> Link => LinkInternal.AsReadOnly();
        internal List<string> LinkInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Container IPv4/IPv6 link-local addresses.
        /// </summary>
        public virtual IReadOnlyList<string> LinkLocalIp => LinkLocalIpInternal.AsReadOnly();
        internal List<string> LinkLocalIpInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Logging driver for the container.
        /// </summary>
        public virtual string LogDriver { get; internal set; }
        /// <summary>
        ///   Log driver options.
        /// </summary>
        public virtual IReadOnlyList<string> LogOpt => LogOptInternal.AsReadOnly();
        internal List<string> LogOptInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Container MAC address (e.g., 92:d0:c6:0a:29:33).
        /// </summary>
        public virtual string MacAddress { get; internal set; }
        /// <summary>
        ///   Memory limit.
        /// </summary>
        public virtual long? Memory { get; internal set; }
        /// <summary>
        ///   Memory soft limit.
        /// </summary>
        public virtual long? MemoryReservation { get; internal set; }
        /// <summary>
        ///   Swap limit equal to memory plus swap: '-1' to enable unlimited swap.
        /// </summary>
        public virtual long? MemorySwap { get; internal set; }
        /// <summary>
        ///   Tune container memory swappiness (0 to 100).
        /// </summary>
        public virtual long? MemorySwappiness { get; internal set; }
        /// <summary>
        ///   Attach a filesystem mount to the container.
        /// </summary>
        public virtual string Mount { get; internal set; }
        /// <summary>
        ///   Assign a name to the container.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Connect a container to a network.
        /// </summary>
        public virtual string Net { get; internal set; }
        /// <summary>
        ///   Add network-scoped alias for the container.
        /// </summary>
        public virtual IReadOnlyList<string> NetAlias => NetAliasInternal.AsReadOnly();
        internal List<string> NetAliasInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Connect a container to a network.
        /// </summary>
        public virtual string Network { get; internal set; }
        /// <summary>
        ///   Add network-scoped alias for the container.
        /// </summary>
        public virtual IReadOnlyList<string> NetworkAlias => NetworkAliasInternal.AsReadOnly();
        internal List<string> NetworkAliasInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Disable any container-specified HEALTHCHECK.
        /// </summary>
        public virtual bool? NoHealthcheck { get; internal set; }
        /// <summary>
        ///   Disable OOM Killer.
        /// </summary>
        public virtual bool? OomKillDisable { get; internal set; }
        /// <summary>
        ///   Tune host's OOM preferences (-1000 to 1000).
        /// </summary>
        public virtual int? OomScoreAdj { get; internal set; }
        /// <summary>
        ///   PID namespace to use.
        /// </summary>
        public virtual string Pid { get; internal set; }
        /// <summary>
        ///   Tune container pids limit (set -1 for unlimited).
        /// </summary>
        public virtual long? PidsLimit { get; internal set; }
        /// <summary>
        ///   Set platform if server is multi-platform capable.
        /// </summary>
        public virtual string Platform { get; internal set; }
        /// <summary>
        ///   Give extended privileges to this container.
        /// </summary>
        public virtual bool? Privileged { get; internal set; }
        /// <summary>
        ///   Publish a container's port(s) to the host.
        /// </summary>
        public virtual IReadOnlyList<string> Publish => PublishInternal.AsReadOnly();
        internal List<string> PublishInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Publish all exposed ports to random ports.
        /// </summary>
        public virtual bool? PublishAll { get; internal set; }
        /// <summary>
        ///   Mount the container's root filesystem as read only.
        /// </summary>
        public virtual bool? ReadOnly { get; internal set; }
        /// <summary>
        ///   Restart policy to apply when a container exits.
        /// </summary>
        public virtual string Restart { get; internal set; }
        /// <summary>
        ///   Automatically remove the container when it exits.
        /// </summary>
        public virtual bool? Rm { get; internal set; }
        /// <summary>
        ///   Runtime to use for this container.
        /// </summary>
        public virtual string Runtime { get; internal set; }
        /// <summary>
        ///   Security Options.
        /// </summary>
        public virtual IReadOnlyList<string> SecurityOpt => SecurityOptInternal.AsReadOnly();
        internal List<string> SecurityOptInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Size of /dev/shm.
        /// </summary>
        public virtual long? ShmSize { get; internal set; }
        /// <summary>
        ///   Signal to stop a container.
        /// </summary>
        public virtual string StopSignal { get; internal set; }
        /// <summary>
        ///   Timeout (in seconds) to stop a container.
        /// </summary>
        public virtual int? StopTimeout { get; internal set; }
        /// <summary>
        ///   Storage driver options for the container.
        /// </summary>
        public virtual IReadOnlyList<string> StorageOpt => StorageOptInternal.AsReadOnly();
        internal List<string> StorageOptInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Sysctl options.
        /// </summary>
        public virtual IReadOnlyDictionary<string, string> Sysctl => SysctlInternal.AsReadOnly();
        internal Dictionary<string,string> SysctlInternal { get; set; } = new Dictionary<string,string>(StringComparer.OrdinalIgnoreCase);
        /// <summary>
        ///   Mount a tmpfs directory.
        /// </summary>
        public virtual IReadOnlyList<string> Tmpfs => TmpfsInternal.AsReadOnly();
        internal List<string> TmpfsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Allocate a pseudo-TTY.
        /// </summary>
        public virtual bool? Tty { get; internal set; }
        /// <summary>
        ///   Ulimit options.
        /// </summary>
        public virtual string Ulimit { get; internal set; }
        /// <summary>
        ///   Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).
        /// </summary>
        public virtual string User { get; internal set; }
        /// <summary>
        ///   User namespace to use.
        /// </summary>
        public virtual string Userns { get; internal set; }
        /// <summary>
        ///   UTS namespace to use.
        /// </summary>
        public virtual string Uts { get; internal set; }
        /// <summary>
        ///   Bind mount a volume.
        /// </summary>
        public virtual IReadOnlyList<string> Volume => VolumeInternal.AsReadOnly();
        internal List<string> VolumeInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Optional volume driver for the container.
        /// </summary>
        public virtual string VolumeDriver { get; internal set; }
        /// <summary>
        ///   Mount volumes from the specified container(s).
        /// </summary>
        public virtual IReadOnlyList<string> VolumesFrom => VolumesFromInternal.AsReadOnly();
        internal List<string> VolumesFromInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Working directory inside the container.
        /// </summary>
        public virtual string Workdir { get; internal set; }
        /// <summary>
        ///   IMAGE
        /// </summary>
        public virtual string Image { get; internal set; }
        /// <summary>
        ///   [COMMAND]
        /// </summary>
        public virtual string Command { get; internal set; }
        /// <summary>
        ///   [ARG...]
        /// </summary>
        public virtual IReadOnlyList<string> Args => ArgsInternal.AsReadOnly();
        internal List<string> ArgsInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("create")
              .Add("--add-host {value}", AddHost)
              .Add("--attach {value}", Attach)
              .Add("--blkio-weight {value}", BlkioWeight)
              .Add("--blkio-weight-device {value}", BlkioWeightDevice)
              .Add("--cap-add {value}", CapAdd)
              .Add("--cap-drop {value}", CapDrop)
              .Add("--cgroup-parent {value}", CgroupParent)
              .Add("--cidfile {value}", Cidfile)
              .Add("--cpu-count {value}", CpuCount)
              .Add("--cpu-percent {value}", CpuPercent)
              .Add("--cpu-period {value}", CpuPeriod)
              .Add("--cpu-quota {value}", CpuQuota)
              .Add("--cpu-rt-period {value}", CpuRtPeriod)
              .Add("--cpu-rt-runtime {value}", CpuRtRuntime)
              .Add("--cpu-shares {value}", CpuShares)
              .Add("--cpus {value}", Cpus)
              .Add("--cpuset-cpus {value}", CpusetCpus)
              .Add("--cpuset-mems {value}", CpusetMems)
              .Add("--device {value}", Device)
              .Add("--device-cgroup-rule {value}", DeviceCgroupRule)
              .Add("--device-read-bps {value}", DeviceReadBps)
              .Add("--device-read-iops {value}", DeviceReadIops)
              .Add("--device-write-bps {value}", DeviceWriteBps)
              .Add("--device-write-iops {value}", DeviceWriteIops)
              .Add("--disable-content-trust", DisableContentTrust)
              .Add("--dns {value}", Dns)
              .Add("--dns-opt {value}", DnsOpt)
              .Add("--dns-option {value}", DnsOption)
              .Add("--dns-search {value}", DnsSearch)
              .Add("--domainname {value}", Domainname)
              .Add("--entrypoint {value}", Entrypoint)
              .Add("--env {value}", Env)
              .Add("--env-file {value}", EnvFile)
              .Add("--expose {value}", Expose)
              .Add("--gpus {value}", Gpus)
              .Add("--group-add {value}", GroupAdd)
              .Add("--health-cmd {value}", HealthCmd)
              .Add("--health-interval {value}", HealthInterval)
              .Add("--health-retries {value}", HealthRetries)
              .Add("--health-start-period {value}", HealthStartPeriod)
              .Add("--health-timeout {value}", HealthTimeout)
              .Add("--help", Help)
              .Add("--hostname {value}", Hostname)
              .Add("--init", Init)
              .Add("--interactive", Interactive)
              .Add("--io-maxbandwidth {value}", IoMaxbandwidth)
              .Add("--io-maxiops {value}", IoMaxiops)
              .Add("--ip {value}", Ip)
              .Add("--ip6 {value}", Ip6)
              .Add("--ipc {value}", Ipc)
              .Add("--isolation {value}", Isolation)
              .Add("--kernel-memory {value}", KernelMemory)
              .Add("--label {value}", Label)
              .Add("--label-file {value}", LabelFile)
              .Add("--link {value}", Link)
              .Add("--link-local-ip {value}", LinkLocalIp)
              .Add("--log-driver {value}", LogDriver)
              .Add("--log-opt {value}", LogOpt)
              .Add("--mac-address {value}", MacAddress)
              .Add("--memory {value}", Memory)
              .Add("--memory-reservation {value}", MemoryReservation)
              .Add("--memory-swap {value}", MemorySwap)
              .Add("--memory-swappiness {value}", MemorySwappiness)
              .Add("--mount {value}", Mount)
              .Add("--name {value}", Name)
              .Add("--net {value}", Net)
              .Add("--net-alias {value}", NetAlias)
              .Add("--network {value}", Network)
              .Add("--network-alias {value}", NetworkAlias)
              .Add("--no-healthcheck", NoHealthcheck)
              .Add("--oom-kill-disable", OomKillDisable)
              .Add("--oom-score-adj {value}", OomScoreAdj)
              .Add("--pid {value}", Pid)
              .Add("--pids-limit {value}", PidsLimit)
              .Add("--platform {value}", Platform)
              .Add("--privileged", Privileged)
              .Add("--publish {value}", Publish)
              .Add("--publish-all", PublishAll)
              .Add("--read-only", ReadOnly)
              .Add("--restart {value}", Restart)
              .Add("--rm", Rm)
              .Add("--runtime {value}", Runtime)
              .Add("--security-opt {value}", SecurityOpt)
              .Add("--shm-size {value}", ShmSize)
              .Add("--stop-signal {value}", StopSignal)
              .Add("--stop-timeout {value}", StopTimeout)
              .Add("--storage-opt {value}", StorageOpt)
              .Add("--sysctl {value}", Sysctl, "{key}:{value}")
              .Add("--tmpfs {value}", Tmpfs)
              .Add("--tty", Tty)
              .Add("--ulimit {value}", Ulimit)
              .Add("--user {value}", User)
              .Add("--userns {value}", Userns)
              .Add("--uts {value}", Uts)
              .Add("--volume {value}", Volume)
              .Add("--volume-driver {value}", VolumeDriver)
              .Add("--volumes-from {value}", VolumesFrom)
              .Add("--workdir {value}", Workdir)
              .Add("{value}", Image)
              .Add("{value}", Command)
              .Add("{value}", Args, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerServiceUpdateSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerServiceUpdateSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Service command args.
        /// </summary>
        public virtual string Args { get; internal set; }
        /// <summary>
        ///   Add or update a config file on a service.
        /// </summary>
        public virtual string ConfigAdd { get; internal set; }
        /// <summary>
        ///   Remove a configuration file.
        /// </summary>
        public virtual IReadOnlyList<string> ConfigRm => ConfigRmInternal.AsReadOnly();
        internal List<string> ConfigRmInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Add or update a placement constraint.
        /// </summary>
        public virtual IReadOnlyList<string> ConstraintAdd => ConstraintAddInternal.AsReadOnly();
        internal List<string> ConstraintAddInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Remove a constraint.
        /// </summary>
        public virtual IReadOnlyList<string> ConstraintRm => ConstraintRmInternal.AsReadOnly();
        internal List<string> ConstraintRmInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Add or update a container label.
        /// </summary>
        public virtual IReadOnlyList<string> ContainerLabelAdd => ContainerLabelAddInternal.AsReadOnly();
        internal List<string> ContainerLabelAddInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Remove a container label by its key.
        /// </summary>
        public virtual IReadOnlyList<string> ContainerLabelRm => ContainerLabelRmInternal.AsReadOnly();
        internal List<string> ContainerLabelRmInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Credential spec for managed service account (Windows only).
        /// </summary>
        public virtual string CredentialSpec { get; internal set; }
        /// <summary>
        ///   Exit immediately instead of waiting for the service to converge.
        /// </summary>
        public virtual bool? Detach { get; internal set; }
        /// <summary>
        ///   Add or update a custom DNS server.
        /// </summary>
        public virtual IReadOnlyList<string> DnsAdd => DnsAddInternal.AsReadOnly();
        internal List<string> DnsAddInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Add or update a DNS option.
        /// </summary>
        public virtual IReadOnlyList<string> DnsOptionAdd => DnsOptionAddInternal.AsReadOnly();
        internal List<string> DnsOptionAddInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Remove a DNS option.
        /// </summary>
        public virtual IReadOnlyList<string> DnsOptionRm => DnsOptionRmInternal.AsReadOnly();
        internal List<string> DnsOptionRmInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Remove a custom DNS server.
        /// </summary>
        public virtual IReadOnlyList<string> DnsRm => DnsRmInternal.AsReadOnly();
        internal List<string> DnsRmInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Add or update a custom DNS search domain.
        /// </summary>
        public virtual IReadOnlyList<string> DnsSearchAdd => DnsSearchAddInternal.AsReadOnly();
        internal List<string> DnsSearchAddInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Remove a DNS search domain.
        /// </summary>
        public virtual IReadOnlyList<string> DnsSearchRm => DnsSearchRmInternal.AsReadOnly();
        internal List<string> DnsSearchRmInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Endpoint mode (vip or dnsrr).
        /// </summary>
        public virtual string EndpointMode { get; internal set; }
        /// <summary>
        ///   Overwrite the default ENTRYPOINT of the image.
        /// </summary>
        public virtual string Entrypoint { get; internal set; }
        /// <summary>
        ///   Add or update an environment variable.
        /// </summary>
        public virtual IReadOnlyList<string> EnvAdd => EnvAddInternal.AsReadOnly();
        internal List<string> EnvAddInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Remove an environment variable.
        /// </summary>
        public virtual IReadOnlyList<string> EnvRm => EnvRmInternal.AsReadOnly();
        internal List<string> EnvRmInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Force update even if no changes require it.
        /// </summary>
        public virtual bool? Force { get; internal set; }
        /// <summary>
        ///   Add a Generic resource.
        /// </summary>
        public virtual IReadOnlyList<string> GenericResourceAdd => GenericResourceAddInternal.AsReadOnly();
        internal List<string> GenericResourceAddInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Remove a Generic resource.
        /// </summary>
        public virtual IReadOnlyList<string> GenericResourceRm => GenericResourceRmInternal.AsReadOnly();
        internal List<string> GenericResourceRmInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Add an additional supplementary user group to the container.
        /// </summary>
        public virtual IReadOnlyList<string> GroupAdd => GroupAddInternal.AsReadOnly();
        internal List<string> GroupAddInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Remove a previously added supplementary user group from the container.
        /// </summary>
        public virtual IReadOnlyList<string> GroupRm => GroupRmInternal.AsReadOnly();
        internal List<string> GroupRmInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Command to run to check health.
        /// </summary>
        public virtual string HealthCmd { get; internal set; }
        /// <summary>
        ///   Time between running the check (ms|s|m|h).
        /// </summary>
        public virtual string HealthInterval { get; internal set; }
        /// <summary>
        ///   Consecutive failures needed to report unhealthy.
        /// </summary>
        public virtual int? HealthRetries { get; internal set; }
        /// <summary>
        ///   Start period for the container to initialize before counting retries towards unstable (ms|s|m|h).
        /// </summary>
        public virtual string HealthStartPeriod { get; internal set; }
        /// <summary>
        ///   Maximum time to allow one check to run (ms|s|m|h).
        /// </summary>
        public virtual string HealthTimeout { get; internal set; }
        /// <summary>
        ///   Add a custom host-to-IP mapping (host:ip).
        /// </summary>
        public virtual IReadOnlyList<string> HostAdd => HostAddInternal.AsReadOnly();
        internal List<string> HostAddInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Remove a custom host-to-IP mapping (host:ip).
        /// </summary>
        public virtual IReadOnlyList<string> HostRm => HostRmInternal.AsReadOnly();
        internal List<string> HostRmInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Container hostname.
        /// </summary>
        public virtual string Hostname { get; internal set; }
        /// <summary>
        ///   Service image tag.
        /// </summary>
        public virtual string Image { get; internal set; }
        /// <summary>
        ///   Use an init inside each service container to forward signals and reap processes.
        /// </summary>
        public virtual bool? Init { get; internal set; }
        /// <summary>
        ///   Service container isolation mode.
        /// </summary>
        public virtual string Isolation { get; internal set; }
        /// <summary>
        ///   Add or update a service label.
        /// </summary>
        public virtual IReadOnlyList<string> LabelAdd => LabelAddInternal.AsReadOnly();
        internal List<string> LabelAddInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Remove a label by its key.
        /// </summary>
        public virtual IReadOnlyList<string> LabelRm => LabelRmInternal.AsReadOnly();
        internal List<string> LabelRmInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Limit CPUs.
        /// </summary>
        public virtual decimal? LimitCpu { get; internal set; }
        /// <summary>
        ///   Limit Memory.
        /// </summary>
        public virtual long? LimitMemory { get; internal set; }
        /// <summary>
        ///   Logging driver for service.
        /// </summary>
        public virtual string LogDriver { get; internal set; }
        /// <summary>
        ///   Logging driver options.
        /// </summary>
        public virtual IReadOnlyList<string> LogOpt => LogOptInternal.AsReadOnly();
        internal List<string> LogOptInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Add or update a mount on a service.
        /// </summary>
        public virtual string MountAdd { get; internal set; }
        /// <summary>
        ///   Remove a mount by its target path.
        /// </summary>
        public virtual IReadOnlyList<string> MountRm => MountRmInternal.AsReadOnly();
        internal List<string> MountRmInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Add a network.
        /// </summary>
        public virtual string NetworkAdd { get; internal set; }
        /// <summary>
        ///   Remove a network.
        /// </summary>
        public virtual IReadOnlyList<string> NetworkRm => NetworkRmInternal.AsReadOnly();
        internal List<string> NetworkRmInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Disable any container-specified HEALTHCHECK.
        /// </summary>
        public virtual bool? NoHealthcheck { get; internal set; }
        /// <summary>
        ///   Do not query the registry to resolve image digest and supported platforms.
        /// </summary>
        public virtual bool? NoResolveImage { get; internal set; }
        /// <summary>
        ///   Add a placement preference.
        /// </summary>
        public virtual string PlacementPrefAdd { get; internal set; }
        /// <summary>
        ///   Remove a placement preference.
        /// </summary>
        public virtual string PlacementPrefRm { get; internal set; }
        /// <summary>
        ///   Add or update a published port.
        /// </summary>
        public virtual string PublishAdd { get; internal set; }
        /// <summary>
        ///   Remove a published port by its target port.
        /// </summary>
        public virtual string PublishRm { get; internal set; }
        /// <summary>
        ///   Suppress progress output.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        /// <summary>
        ///   Mount the container's root filesystem as read only.
        /// </summary>
        public virtual bool? ReadOnly { get; internal set; }
        /// <summary>
        ///   Number of tasks.
        /// </summary>
        public virtual int? Replicas { get; internal set; }
        /// <summary>
        ///   Maximum number of tasks per node (default 0 = unlimited).
        /// </summary>
        public virtual int? ReplicasMaxPerNode { get; internal set; }
        /// <summary>
        ///   Reserve CPUs.
        /// </summary>
        public virtual decimal? ReserveCpu { get; internal set; }
        /// <summary>
        ///   Reserve Memory.
        /// </summary>
        public virtual long? ReserveMemory { get; internal set; }
        /// <summary>
        ///   Restart when condition is met ("none"|"on-failure"|"any").
        /// </summary>
        public virtual RestartCondition RestartCondition { get; internal set; }
        /// <summary>
        ///   Delay between restart attempts (ns|us|ms|s|m|h).
        /// </summary>
        public virtual string RestartDelay { get; internal set; }
        /// <summary>
        ///   Maximum number of restarts before giving up.
        /// </summary>
        public virtual int? RestartMaxAttempts { get; internal set; }
        /// <summary>
        ///   Window used to evaluate the restart policy (ns|us|ms|s|m|h).
        /// </summary>
        public virtual string RestartWindow { get; internal set; }
        /// <summary>
        ///   Rollback to previous specification.
        /// </summary>
        public virtual bool? Rollback { get; internal set; }
        /// <summary>
        ///   Delay between task rollbacks (ns|us|ms|s|m|h).
        /// </summary>
        public virtual string RollbackDelay { get; internal set; }
        /// <summary>
        ///   Action on rollback failure ("pause"|"continue").
        /// </summary>
        public virtual RollbackFailureAction RollbackFailureAction { get; internal set; }
        /// <summary>
        ///   Failure rate to tolerate during a rollback.
        /// </summary>
        public virtual float? RollbackMaxFailureRatio { get; internal set; }
        /// <summary>
        ///   Duration after each task rollback to monitor for failure (ns|us|ms|s|m|h).
        /// </summary>
        public virtual string RollbackMonitor { get; internal set; }
        /// <summary>
        ///   Rollback order ("start-first"|"stop-first").
        /// </summary>
        public virtual RollbackOrder RollbackOrder { get; internal set; }
        /// <summary>
        ///   Maximum number of tasks rolled back simultaneously (0 to roll back all at once).
        /// </summary>
        public virtual int? RollbackParallelism { get; internal set; }
        /// <summary>
        ///   Add or update a secret on a service.
        /// </summary>
        public virtual string SecretAdd { get; internal set; }
        /// <summary>
        ///   Remove a secret.
        /// </summary>
        public virtual IReadOnlyList<string> SecretRm => SecretRmInternal.AsReadOnly();
        internal List<string> SecretRmInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Time to wait before force killing a container (ns|us|ms|s|m|h).
        /// </summary>
        public virtual string StopGracePeriod { get; internal set; }
        /// <summary>
        ///   Signal to stop the container.
        /// </summary>
        public virtual string StopSignal { get; internal set; }
        /// <summary>
        ///   Add or update a Sysctl option.
        /// </summary>
        public virtual IReadOnlyList<string> SysctlAdd => SysctlAddInternal.AsReadOnly();
        internal List<string> SysctlAddInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Remove a Sysctl option.
        /// </summary>
        public virtual IReadOnlyList<string> SysctlRm => SysctlRmInternal.AsReadOnly();
        internal List<string> SysctlRmInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Allocate a pseudo-TTY.
        /// </summary>
        public virtual bool? Tty { get; internal set; }
        /// <summary>
        ///   Delay between updates (ns|us|ms|s|m|h).
        /// </summary>
        public virtual string UpdateDelay { get; internal set; }
        /// <summary>
        ///   Action on update failure ("pause"|"continue"|"rollback").
        /// </summary>
        public virtual UpdateFailureAction UpdateFailureAction { get; internal set; }
        /// <summary>
        ///   Failure rate to tolerate during an update.
        /// </summary>
        public virtual float? UpdateMaxFailureRatio { get; internal set; }
        /// <summary>
        ///   Duration after each task update to monitor for failure (ns|us|ms|s|m|h).
        /// </summary>
        public virtual string UpdateMonitor { get; internal set; }
        /// <summary>
        ///   Update order ("start-first"|"stop-first").
        /// </summary>
        public virtual UpdateOrder UpdateOrder { get; internal set; }
        /// <summary>
        ///   Maximum number of tasks updated simultaneously (0 to update all at once).
        /// </summary>
        public virtual int? UpdateParallelism { get; internal set; }
        /// <summary>
        ///   Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).
        /// </summary>
        public virtual string User { get; internal set; }
        /// <summary>
        ///   Send registry authentication details to swarm agents.
        /// </summary>
        public virtual bool? WithRegistryAuth { get; internal set; }
        /// <summary>
        ///   Working directory inside the container.
        /// </summary>
        public virtual string Workdir { get; internal set; }
        /// <summary>
        ///   SERVICE
        /// </summary>
        public virtual string Service { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("service update")
              .Add("--args {value}", Args)
              .Add("--config-add {value}", ConfigAdd)
              .Add("--config-rm {value}", ConfigRm)
              .Add("--constraint-add {value}", ConstraintAdd)
              .Add("--constraint-rm {value}", ConstraintRm)
              .Add("--container-label-add {value}", ContainerLabelAdd)
              .Add("--container-label-rm {value}", ContainerLabelRm)
              .Add("--credential-spec {value}", CredentialSpec)
              .Add("--detach", Detach)
              .Add("--dns-add {value}", DnsAdd)
              .Add("--dns-option-add {value}", DnsOptionAdd)
              .Add("--dns-option-rm {value}", DnsOptionRm)
              .Add("--dns-rm {value}", DnsRm)
              .Add("--dns-search-add {value}", DnsSearchAdd)
              .Add("--dns-search-rm {value}", DnsSearchRm)
              .Add("--endpoint-mode {value}", EndpointMode)
              .Add("--entrypoint {value}", Entrypoint)
              .Add("--env-add {value}", EnvAdd)
              .Add("--env-rm {value}", EnvRm)
              .Add("--force", Force)
              .Add("--generic-resource-add {value}", GenericResourceAdd)
              .Add("--generic-resource-rm {value}", GenericResourceRm)
              .Add("--group-add {value}", GroupAdd)
              .Add("--group-rm {value}", GroupRm)
              .Add("--health-cmd {value}", HealthCmd)
              .Add("--health-interval {value}", HealthInterval)
              .Add("--health-retries {value}", HealthRetries)
              .Add("--health-start-period {value}", HealthStartPeriod)
              .Add("--health-timeout {value}", HealthTimeout)
              .Add("--host-add {value}", HostAdd)
              .Add("--host-rm {value}", HostRm)
              .Add("--hostname {value}", Hostname)
              .Add("--image {value}", Image)
              .Add("--init", Init)
              .Add("--isolation {value}", Isolation)
              .Add("--label-add {value}", LabelAdd)
              .Add("--label-rm {value}", LabelRm)
              .Add("--limit-cpu {value}", LimitCpu)
              .Add("--limit-memory {value}", LimitMemory)
              .Add("--log-driver {value}", LogDriver)
              .Add("--log-opt {value}", LogOpt)
              .Add("--mount-add {value}", MountAdd)
              .Add("--mount-rm {value}", MountRm)
              .Add("--network-add {value}", NetworkAdd)
              .Add("--network-rm {value}", NetworkRm)
              .Add("--no-healthcheck", NoHealthcheck)
              .Add("--no-resolve-image", NoResolveImage)
              .Add("--placement-pref-add {value}", PlacementPrefAdd)
              .Add("--placement-pref-rm {value}", PlacementPrefRm)
              .Add("--publish-add {value}", PublishAdd)
              .Add("--publish-rm {value}", PublishRm)
              .Add("--quiet", Quiet)
              .Add("--read-only", ReadOnly)
              .Add("--replicas {value}", Replicas)
              .Add("--replicas-max-per-node {value}", ReplicasMaxPerNode)
              .Add("--reserve-cpu {value}", ReserveCpu)
              .Add("--reserve-memory {value}", ReserveMemory)
              .Add("--restart-condition {value}", RestartCondition)
              .Add("--restart-delay {value}", RestartDelay)
              .Add("--restart-max-attempts {value}", RestartMaxAttempts)
              .Add("--restart-window {value}", RestartWindow)
              .Add("--rollback", Rollback)
              .Add("--rollback-delay {value}", RollbackDelay)
              .Add("--rollback-failure-action {value}", RollbackFailureAction)
              .Add("--rollback-max-failure-ratio {value}", RollbackMaxFailureRatio)
              .Add("--rollback-monitor {value}", RollbackMonitor)
              .Add("--rollback-order {value}", RollbackOrder)
              .Add("--rollback-parallelism {value}", RollbackParallelism)
              .Add("--secret-add {value}", SecretAdd)
              .Add("--secret-rm {value}", SecretRm)
              .Add("--stop-grace-period {value}", StopGracePeriod)
              .Add("--stop-signal {value}", StopSignal)
              .Add("--sysctl-add {value}", SysctlAdd)
              .Add("--sysctl-rm {value}", SysctlRm)
              .Add("--tty", Tty)
              .Add("--update-delay {value}", UpdateDelay)
              .Add("--update-failure-action {value}", UpdateFailureAction)
              .Add("--update-max-failure-ratio {value}", UpdateMaxFailureRatio)
              .Add("--update-monitor {value}", UpdateMonitor)
              .Add("--update-order {value}", UpdateOrder)
              .Add("--update-parallelism {value}", UpdateParallelism)
              .Add("--user {value}", User)
              .Add("--with-registry-auth", WithRegistryAuth)
              .Add("--workdir {value}", Workdir)
              .Add("{value}", Service)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerPortSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerPortSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual string Container { get; internal set; }
        /// <summary>
        ///   [PRIVATE_PORT[/PROTO]]
        /// </summary>
        public virtual string PrivatePort { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("port")
              .Add("{value}", Container)
              .Add("{value}", PrivatePort)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContainerSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContainerSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("container")
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerImagePushSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerImagePushSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Skip image signing.
        /// </summary>
        public virtual bool? DisableContentTrust { get; internal set; }
        /// <summary>
        ///   NAME[:TAG]
        /// </summary>
        public virtual string Name { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("image push")
              .Add("--disable-content-trust", DisableContentTrust)
              .Add("{value}", Name)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerServiceInspectSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerServiceInspectSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Format the output using the given Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Print the information in a human friendly format.
        /// </summary>
        public virtual bool? Pretty { get; internal set; }
        /// <summary>
        ///   SERVICE
        /// </summary>
        public virtual IReadOnlyList<string> Services => ServicesInternal.AsReadOnly();
        internal List<string> ServicesInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("service inspect")
              .Add("--format {value}", Format)
              .Add("--pretty", Pretty)
              .Add("{value}", Services, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerNetworkConnectSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerNetworkConnectSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Add network-scoped alias for the container.
        /// </summary>
        public virtual IReadOnlyList<string> Alias => AliasInternal.AsReadOnly();
        internal List<string> AliasInternal { get; set; } = new List<string>();
        /// <summary>
        ///   driver options for the network.
        /// </summary>
        public virtual IReadOnlyList<string> DriverOpt => DriverOptInternal.AsReadOnly();
        internal List<string> DriverOptInternal { get; set; } = new List<string>();
        /// <summary>
        ///   IPv4 address (e.g., 172.30.100.104).
        /// </summary>
        public virtual string Ip { get; internal set; }
        /// <summary>
        ///   IPv6 address (e.g., 2001:db8::33).
        /// </summary>
        public virtual string Ip6 { get; internal set; }
        /// <summary>
        ///   Add link to another container.
        /// </summary>
        public virtual IReadOnlyList<string> Link => LinkInternal.AsReadOnly();
        internal List<string> LinkInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Add a link-local address for the container.
        /// </summary>
        public virtual IReadOnlyList<string> LinkLocalIp => LinkLocalIpInternal.AsReadOnly();
        internal List<string> LinkLocalIpInternal { get; set; } = new List<string>();
        /// <summary>
        ///   NETWORK
        /// </summary>
        public virtual string Network { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual string Container { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("network connect")
              .Add("--alias {value}", Alias)
              .Add("--driver-opt {value}", DriverOpt)
              .Add("--ip {value}", Ip)
              .Add("--ip6 {value}", Ip6)
              .Add("--link {value}", Link)
              .Add("--link-local-ip {value}", LinkLocalIp)
              .Add("{value}", Network)
              .Add("{value}", Container)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerSecretLsSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerSecretLsSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Filter output based on conditions provided.
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Pretty-print secrets using a Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Only display IDs.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("secret ls")
              .Add("--filter {value}", Filter)
              .Add("--format {value}", Format)
              .Add("--quiet", Quiet)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerSwarmLeaveSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerSwarmLeaveSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Force this node to leave the swarm, ignoring warnings.
        /// </summary>
        public virtual bool? Force { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("swarm leave")
              .Add("--force", Force)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerImagesSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerImagesSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Show all images (default hides intermediate images).
        /// </summary>
        public virtual bool? All { get; internal set; }
        /// <summary>
        ///   Show digests.
        /// </summary>
        public virtual bool? Digests { get; internal set; }
        /// <summary>
        ///   Filter output based on conditions provided.
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Pretty-print images using a Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Don't truncate output.
        /// </summary>
        public virtual bool? NoTrunc { get; internal set; }
        /// <summary>
        ///   Only show numeric IDs.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        /// <summary>
        ///   [REPOSITORY[:TAG]]
        /// </summary>
        public virtual string Repository { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("images")
              .Add("--all", All)
              .Add("--digests", Digests)
              .Add("--filter {value}", Filter)
              .Add("--format {value}", Format)
              .Add("--no-trunc", NoTrunc)
              .Add("--quiet", Quiet)
              .Add("{value}", Repository)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerEngineUpdateSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerEngineUpdateSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   override default location of containerd endpoint.
        /// </summary>
        public virtual string Containerd { get; internal set; }
        /// <summary>
        ///   Specify engine image (default uses the same image as currently running).
        /// </summary>
        public virtual string EngineImage { get; internal set; }
        /// <summary>
        ///   Override the current location where engine images are pulled.
        /// </summary>
        public virtual string RegistryPrefix { get; internal set; }
        /// <summary>
        ///   Specify engine version.
        /// </summary>
        public virtual string Version { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("engine update")
              .Add("--containerd {value}", Containerd)
              .Add("--engine-image {value}", EngineImage)
              .Add("--registry-prefix {value}", RegistryPrefix)
              .Add("--version {value}", Version)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerSystemEventsSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerSystemEventsSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Filter output based on conditions provided.
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Format the output using the given Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Show all events created since timestamp.
        /// </summary>
        public virtual string Since { get; internal set; }
        /// <summary>
        ///   Stream events until this timestamp.
        /// </summary>
        public virtual string Until { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("system events")
              .Add("--filter {value}", Filter)
              .Add("--format {value}", Format)
              .Add("--since {value}", Since)
              .Add("--until {value}", Until)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerInspectSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerInspectSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Format the output using the given Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Display total file sizes if the type is container.
        /// </summary>
        public virtual bool? Size { get; internal set; }
        /// <summary>
        ///   Return JSON for specified type.
        /// </summary>
        public virtual string Type { get; internal set; }
        /// <summary>
        ///   NAME|ID
        /// </summary>
        public virtual IReadOnlyList<string> Names => NamesInternal.AsReadOnly();
        internal List<string> NamesInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("inspect")
              .Add("--format {value}", Format)
              .Add("--size", Size)
              .Add("--type {value}", Type)
              .Add("{value}", Names, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerEngineCheckSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerEngineCheckSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   override default location of containerd endpoint.
        /// </summary>
        public virtual string Containerd { get; internal set; }
        /// <summary>
        ///   Report downgrades (default omits older versions).
        /// </summary>
        public virtual bool? Downgrades { get; internal set; }
        /// <summary>
        ///   Specify engine image (default uses the same image as currently running).
        /// </summary>
        public virtual string EngineImage { get; internal set; }
        /// <summary>
        ///   Pretty-print updates using a Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Include pre-release versions.
        /// </summary>
        public virtual bool? PreReleases { get; internal set; }
        /// <summary>
        ///   Only display available versions.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        /// <summary>
        ///   Override the existing location where engine images are pulled.
        /// </summary>
        public virtual string RegistryPrefix { get; internal set; }
        /// <summary>
        ///   Report available upgrades.
        /// </summary>
        public virtual bool? Upgrades { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("engine check")
              .Add("--containerd {value}", Containerd)
              .Add("--downgrades", Downgrades)
              .Add("--engine-image {value}", EngineImage)
              .Add("--format {value}", Format)
              .Add("--pre-releases", PreReleases)
              .Add("--quiet", Quiet)
              .Add("--registry-prefix {value}", RegistryPrefix)
              .Add("--upgrades", Upgrades)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerAttachSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerAttachSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Override the key sequence for detaching a container.
        /// </summary>
        public virtual string DetachKeys { get; internal set; }
        /// <summary>
        ///   Do not attach STDIN.
        /// </summary>
        public virtual bool? NoStdin { get; internal set; }
        /// <summary>
        ///   Proxy all received signals to the process.
        /// </summary>
        public virtual bool? SigProxy { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual string Container { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("attach")
              .Add("--detach-keys {value}", DetachKeys)
              .Add("--no-stdin", NoStdin)
              .Add("--sig-proxy", SigProxy)
              .Add("{value}", Container)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContainerWaitSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContainerWaitSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual IReadOnlyList<string> Containers => ContainersInternal.AsReadOnly();
        internal List<string> ContainersInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("container wait")
              .Add("{value}", Containers, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerSwarmCaSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerSwarmCaSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Path to the PEM-formatted root CA certificate to use for the new cluster.
        /// </summary>
        public virtual string CaCert { get; internal set; }
        /// <summary>
        ///   Path to the PEM-formatted root CA key to use for the new cluster.
        /// </summary>
        public virtual string CaKey { get; internal set; }
        /// <summary>
        ///   Validity period for node certificates (ns|us|ms|s|m|h).
        /// </summary>
        public virtual string CertExpiry { get; internal set; }
        /// <summary>
        ///   Exit immediately instead of waiting for the root rotation to converge.
        /// </summary>
        public virtual bool? Detach { get; internal set; }
        /// <summary>
        ///   Specifications of one or more certificate signing endpoints.
        /// </summary>
        public virtual string ExternalCa { get; internal set; }
        /// <summary>
        ///   Suppress progress output.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        /// <summary>
        ///   Rotate the swarm CA - if no certificate or key are provided, new ones will be generated.
        /// </summary>
        public virtual bool? Rotate { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("swarm ca")
              .Add("--ca-cert {value}", CaCert)
              .Add("--ca-key {value}", CaKey)
              .Add("--cert-expiry {value}", CertExpiry)
              .Add("--detach", Detach)
              .Add("--external-ca {value}", ExternalCa)
              .Add("--quiet", Quiet)
              .Add("--rotate", Rotate)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerEngineSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerEngineSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   COMMAND
        /// </summary>
        public virtual string Command { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("engine")
              .Add("{value}", Command)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerSystemPruneSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerSystemPruneSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Remove all unused images not just dangling ones.
        /// </summary>
        public virtual bool? All { get; internal set; }
        /// <summary>
        ///   Provide filter values (e.g. 'label=&lt;key&gt;=&lt;value&gt;').
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Do not prompt for confirmation.
        /// </summary>
        public virtual bool? Force { get; internal set; }
        /// <summary>
        ///   Prune volumes.
        /// </summary>
        public virtual bool? Volumes { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("system prune")
              .Add("--all", All)
              .Add("--filter {value}", Filter)
              .Add("--force", Force)
              .Add("--volumes", Volumes)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerBuilderSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerBuilderSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("builder")
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContainerPauseSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContainerPauseSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual IReadOnlyList<string> Containers => ContainersInternal.AsReadOnly();
        internal List<string> ContainersInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("container pause")
              .Add("{value}", Containers, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContainerCommitSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContainerCommitSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Author (e.g., "John Hannibal Smith &lt;hannibal@a-team.com&gt;").
        /// </summary>
        public virtual string Author { get; internal set; }
        /// <summary>
        ///   Apply Dockerfile instruction to the created image.
        /// </summary>
        public virtual IReadOnlyList<string> Change => ChangeInternal.AsReadOnly();
        internal List<string> ChangeInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Commit message.
        /// </summary>
        public virtual string Message { get; internal set; }
        /// <summary>
        ///   Pause container during commit.
        /// </summary>
        public virtual bool? Pause { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual string Container { get; internal set; }
        /// <summary>
        ///   [REPOSITORY[:TAG]]
        /// </summary>
        public virtual string Repository { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("container commit")
              .Add("--author {value}", Author)
              .Add("--change {value}", Change)
              .Add("--message {value}", Message)
              .Add("--pause", Pause)
              .Add("{value}", Container)
              .Add("{value}", Repository)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContextLsSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContextLsSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Pretty-print contexts using a Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Only show context names.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("context ls")
              .Add("--format {value}", Format)
              .Add("--quiet", Quiet)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContextRmSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContextRmSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   CONTEXT
        /// </summary>
        public virtual IReadOnlyList<string> Contexts => ContextsInternal.AsReadOnly();
        internal List<string> ContextsInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("context rm")
              .Add("{value}", Contexts, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerStackPsSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerStackPsSettings : DockerStackSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Filter output based on conditions provided.
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Pretty-print tasks using a Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Kubernetes namespace to use.
        /// </summary>
        public virtual string Namespace { get; internal set; }
        /// <summary>
        ///   Do not map IDs to Names.
        /// </summary>
        public virtual bool? NoResolve { get; internal set; }
        /// <summary>
        ///   Do not truncate output.
        /// </summary>
        public virtual bool? NoTrunc { get; internal set; }
        /// <summary>
        ///   Only display task IDs.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        /// <summary>
        ///   STACK
        /// </summary>
        public virtual string Stack { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("stack ps")
              .Add("--filter {value}", Filter)
              .Add("--format {value}", Format)
              .Add("--namespace {value}", Namespace)
              .Add("--no-resolve", NoResolve)
              .Add("--no-trunc", NoTrunc)
              .Add("--quiet", Quiet)
              .Add("{value}", Stack)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContainerCreateSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContainerCreateSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Add a custom host-to-IP mapping (host:ip).
        /// </summary>
        public virtual IReadOnlyList<string> AddHost => AddHostInternal.AsReadOnly();
        internal List<string> AddHostInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Attach to STDIN, STDOUT or STDERR.
        /// </summary>
        public virtual IReadOnlyList<string> Attach => AttachInternal.AsReadOnly();
        internal List<string> AttachInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0).
        /// </summary>
        public virtual int? BlkioWeight { get; internal set; }
        /// <summary>
        ///   Block IO weight (relative device weight).
        /// </summary>
        public virtual IReadOnlyList<string> BlkioWeightDevice => BlkioWeightDeviceInternal.AsReadOnly();
        internal List<string> BlkioWeightDeviceInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Add Linux capabilities.
        /// </summary>
        public virtual IReadOnlyList<string> CapAdd => CapAddInternal.AsReadOnly();
        internal List<string> CapAddInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Drop Linux capabilities.
        /// </summary>
        public virtual IReadOnlyList<string> CapDrop => CapDropInternal.AsReadOnly();
        internal List<string> CapDropInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Optional parent cgroup for the container.
        /// </summary>
        public virtual string CgroupParent { get; internal set; }
        /// <summary>
        ///   Write the container ID to the file.
        /// </summary>
        public virtual string Cidfile { get; internal set; }
        /// <summary>
        ///   CPU count (Windows only).
        /// </summary>
        public virtual long? CpuCount { get; internal set; }
        /// <summary>
        ///   CPU percent (Windows only).
        /// </summary>
        public virtual long? CpuPercent { get; internal set; }
        /// <summary>
        ///   Limit CPU CFS (Completely Fair Scheduler) period.
        /// </summary>
        public virtual long? CpuPeriod { get; internal set; }
        /// <summary>
        ///   Limit CPU CFS (Completely Fair Scheduler) quota.
        /// </summary>
        public virtual long? CpuQuota { get; internal set; }
        /// <summary>
        ///   Limit CPU real-time period in microseconds.
        /// </summary>
        public virtual long? CpuRtPeriod { get; internal set; }
        /// <summary>
        ///   Limit CPU real-time runtime in microseconds.
        /// </summary>
        public virtual long? CpuRtRuntime { get; internal set; }
        /// <summary>
        ///   CPU shares (relative weight).
        /// </summary>
        public virtual long? CpuShares { get; internal set; }
        /// <summary>
        ///   Number of CPUs.
        /// </summary>
        public virtual decimal? Cpus { get; internal set; }
        /// <summary>
        ///   CPUs in which to allow execution (0-3, 0,1).
        /// </summary>
        public virtual string CpusetCpus { get; internal set; }
        /// <summary>
        ///   MEMs in which to allow execution (0-3, 0,1).
        /// </summary>
        public virtual string CpusetMems { get; internal set; }
        /// <summary>
        ///   Add a host device to the container.
        /// </summary>
        public virtual IReadOnlyList<string> Device => DeviceInternal.AsReadOnly();
        internal List<string> DeviceInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Add a rule to the cgroup allowed devices list.
        /// </summary>
        public virtual IReadOnlyList<string> DeviceCgroupRule => DeviceCgroupRuleInternal.AsReadOnly();
        internal List<string> DeviceCgroupRuleInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Limit read rate (bytes per second) from a device.
        /// </summary>
        public virtual IReadOnlyList<string> DeviceReadBps => DeviceReadBpsInternal.AsReadOnly();
        internal List<string> DeviceReadBpsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Limit read rate (IO per second) from a device.
        /// </summary>
        public virtual IReadOnlyList<string> DeviceReadIops => DeviceReadIopsInternal.AsReadOnly();
        internal List<string> DeviceReadIopsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Limit write rate (bytes per second) to a device.
        /// </summary>
        public virtual IReadOnlyList<string> DeviceWriteBps => DeviceWriteBpsInternal.AsReadOnly();
        internal List<string> DeviceWriteBpsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Limit write rate (IO per second) to a device.
        /// </summary>
        public virtual IReadOnlyList<string> DeviceWriteIops => DeviceWriteIopsInternal.AsReadOnly();
        internal List<string> DeviceWriteIopsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Skip image verification.
        /// </summary>
        public virtual bool? DisableContentTrust { get; internal set; }
        /// <summary>
        ///   Set custom DNS servers.
        /// </summary>
        public virtual IReadOnlyList<string> Dns => DnsInternal.AsReadOnly();
        internal List<string> DnsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Set DNS options.
        /// </summary>
        public virtual IReadOnlyList<string> DnsOpt => DnsOptInternal.AsReadOnly();
        internal List<string> DnsOptInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Set DNS options.
        /// </summary>
        public virtual IReadOnlyList<string> DnsOption => DnsOptionInternal.AsReadOnly();
        internal List<string> DnsOptionInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Set custom DNS search domains.
        /// </summary>
        public virtual IReadOnlyList<string> DnsSearch => DnsSearchInternal.AsReadOnly();
        internal List<string> DnsSearchInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Container NIS domain name.
        /// </summary>
        public virtual string Domainname { get; internal set; }
        /// <summary>
        ///   Overwrite the default ENTRYPOINT of the image.
        /// </summary>
        public virtual string Entrypoint { get; internal set; }
        /// <summary>
        ///   Set environment variables.
        /// </summary>
        public virtual IReadOnlyList<string> Env => EnvInternal.AsReadOnly();
        internal List<string> EnvInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Read in a file of environment variables.
        /// </summary>
        public virtual IReadOnlyList<string> EnvFile => EnvFileInternal.AsReadOnly();
        internal List<string> EnvFileInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Expose a port or a range of ports.
        /// </summary>
        public virtual IReadOnlyList<string> Expose => ExposeInternal.AsReadOnly();
        internal List<string> ExposeInternal { get; set; } = new List<string>();
        /// <summary>
        ///   GPU devices to add to the container ('all' to pass all GPUs).
        /// </summary>
        public virtual string Gpus { get; internal set; }
        /// <summary>
        ///   Add additional groups to join.
        /// </summary>
        public virtual IReadOnlyList<string> GroupAdd => GroupAddInternal.AsReadOnly();
        internal List<string> GroupAddInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Command to run to check health.
        /// </summary>
        public virtual string HealthCmd { get; internal set; }
        /// <summary>
        ///   Time between running the check (ms|s|m|h) (default 0s).
        /// </summary>
        public virtual string HealthInterval { get; internal set; }
        /// <summary>
        ///   Consecutive failures needed to report unhealthy.
        /// </summary>
        public virtual int? HealthRetries { get; internal set; }
        /// <summary>
        ///   Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s).
        /// </summary>
        public virtual string HealthStartPeriod { get; internal set; }
        /// <summary>
        ///   Maximum time to allow one check to run (ms|s|m|h) (default 0s).
        /// </summary>
        public virtual string HealthTimeout { get; internal set; }
        /// <summary>
        ///   Print usage.
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Container host name.
        /// </summary>
        public virtual string Hostname { get; internal set; }
        /// <summary>
        ///   Run an init inside the container that forwards signals and reaps processes.
        /// </summary>
        public virtual bool? Init { get; internal set; }
        /// <summary>
        ///   Keep STDIN open even if not attached.
        /// </summary>
        public virtual bool? Interactive { get; internal set; }
        /// <summary>
        ///   Maximum IO bandwidth limit for the system drive (Windows only).
        /// </summary>
        public virtual long? IoMaxbandwidth { get; internal set; }
        /// <summary>
        ///   Maximum IOps limit for the system drive (Windows only).
        /// </summary>
        public virtual int? IoMaxiops { get; internal set; }
        /// <summary>
        ///   IPv4 address (e.g., 172.30.100.104).
        /// </summary>
        public virtual string Ip { get; internal set; }
        /// <summary>
        ///   IPv6 address (e.g., 2001:db8::33).
        /// </summary>
        public virtual string Ip6 { get; internal set; }
        /// <summary>
        ///   IPC mode to use.
        /// </summary>
        public virtual string Ipc { get; internal set; }
        /// <summary>
        ///   Container isolation technology.
        /// </summary>
        public virtual string Isolation { get; internal set; }
        /// <summary>
        ///   Kernel memory limit.
        /// </summary>
        public virtual long? KernelMemory { get; internal set; }
        /// <summary>
        ///   Set meta data on a container.
        /// </summary>
        public virtual IReadOnlyList<string> Label => LabelInternal.AsReadOnly();
        internal List<string> LabelInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Read in a line delimited file of labels.
        /// </summary>
        public virtual IReadOnlyList<string> LabelFile => LabelFileInternal.AsReadOnly();
        internal List<string> LabelFileInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Add link to another container.
        /// </summary>
        public virtual IReadOnlyList<string> Link => LinkInternal.AsReadOnly();
        internal List<string> LinkInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Container IPv4/IPv6 link-local addresses.
        /// </summary>
        public virtual IReadOnlyList<string> LinkLocalIp => LinkLocalIpInternal.AsReadOnly();
        internal List<string> LinkLocalIpInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Logging driver for the container.
        /// </summary>
        public virtual string LogDriver { get; internal set; }
        /// <summary>
        ///   Log driver options.
        /// </summary>
        public virtual IReadOnlyList<string> LogOpt => LogOptInternal.AsReadOnly();
        internal List<string> LogOptInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Container MAC address (e.g., 92:d0:c6:0a:29:33).
        /// </summary>
        public virtual string MacAddress { get; internal set; }
        /// <summary>
        ///   Memory limit.
        /// </summary>
        public virtual long? Memory { get; internal set; }
        /// <summary>
        ///   Memory soft limit.
        /// </summary>
        public virtual long? MemoryReservation { get; internal set; }
        /// <summary>
        ///   Swap limit equal to memory plus swap: '-1' to enable unlimited swap.
        /// </summary>
        public virtual long? MemorySwap { get; internal set; }
        /// <summary>
        ///   Tune container memory swappiness (0 to 100).
        /// </summary>
        public virtual long? MemorySwappiness { get; internal set; }
        /// <summary>
        ///   Attach a filesystem mount to the container.
        /// </summary>
        public virtual string Mount { get; internal set; }
        /// <summary>
        ///   Assign a name to the container.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Connect a container to a network.
        /// </summary>
        public virtual string Net { get; internal set; }
        /// <summary>
        ///   Add network-scoped alias for the container.
        /// </summary>
        public virtual IReadOnlyList<string> NetAlias => NetAliasInternal.AsReadOnly();
        internal List<string> NetAliasInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Connect a container to a network.
        /// </summary>
        public virtual string Network { get; internal set; }
        /// <summary>
        ///   Add network-scoped alias for the container.
        /// </summary>
        public virtual IReadOnlyList<string> NetworkAlias => NetworkAliasInternal.AsReadOnly();
        internal List<string> NetworkAliasInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Disable any container-specified HEALTHCHECK.
        /// </summary>
        public virtual bool? NoHealthcheck { get; internal set; }
        /// <summary>
        ///   Disable OOM Killer.
        /// </summary>
        public virtual bool? OomKillDisable { get; internal set; }
        /// <summary>
        ///   Tune host's OOM preferences (-1000 to 1000).
        /// </summary>
        public virtual int? OomScoreAdj { get; internal set; }
        /// <summary>
        ///   PID namespace to use.
        /// </summary>
        public virtual string Pid { get; internal set; }
        /// <summary>
        ///   Tune container pids limit (set -1 for unlimited).
        /// </summary>
        public virtual long? PidsLimit { get; internal set; }
        /// <summary>
        ///   Set platform if server is multi-platform capable.
        /// </summary>
        public virtual string Platform { get; internal set; }
        /// <summary>
        ///   Give extended privileges to this container.
        /// </summary>
        public virtual bool? Privileged { get; internal set; }
        /// <summary>
        ///   Publish a container's port(s) to the host.
        /// </summary>
        public virtual IReadOnlyList<string> Publish => PublishInternal.AsReadOnly();
        internal List<string> PublishInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Publish all exposed ports to random ports.
        /// </summary>
        public virtual bool? PublishAll { get; internal set; }
        /// <summary>
        ///   Mount the container's root filesystem as read only.
        /// </summary>
        public virtual bool? ReadOnly { get; internal set; }
        /// <summary>
        ///   Restart policy to apply when a container exits.
        /// </summary>
        public virtual string Restart { get; internal set; }
        /// <summary>
        ///   Automatically remove the container when it exits.
        /// </summary>
        public virtual bool? Rm { get; internal set; }
        /// <summary>
        ///   Runtime to use for this container.
        /// </summary>
        public virtual string Runtime { get; internal set; }
        /// <summary>
        ///   Security Options.
        /// </summary>
        public virtual IReadOnlyList<string> SecurityOpt => SecurityOptInternal.AsReadOnly();
        internal List<string> SecurityOptInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Size of /dev/shm.
        /// </summary>
        public virtual long? ShmSize { get; internal set; }
        /// <summary>
        ///   Signal to stop a container.
        /// </summary>
        public virtual string StopSignal { get; internal set; }
        /// <summary>
        ///   Timeout (in seconds) to stop a container.
        /// </summary>
        public virtual int? StopTimeout { get; internal set; }
        /// <summary>
        ///   Storage driver options for the container.
        /// </summary>
        public virtual IReadOnlyList<string> StorageOpt => StorageOptInternal.AsReadOnly();
        internal List<string> StorageOptInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Sysctl options.
        /// </summary>
        public virtual IReadOnlyDictionary<string, string> Sysctl => SysctlInternal.AsReadOnly();
        internal Dictionary<string,string> SysctlInternal { get; set; } = new Dictionary<string,string>(StringComparer.OrdinalIgnoreCase);
        /// <summary>
        ///   Mount a tmpfs directory.
        /// </summary>
        public virtual IReadOnlyList<string> Tmpfs => TmpfsInternal.AsReadOnly();
        internal List<string> TmpfsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Allocate a pseudo-TTY.
        /// </summary>
        public virtual bool? Tty { get; internal set; }
        /// <summary>
        ///   Ulimit options.
        /// </summary>
        public virtual string Ulimit { get; internal set; }
        /// <summary>
        ///   Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).
        /// </summary>
        public virtual string User { get; internal set; }
        /// <summary>
        ///   User namespace to use.
        /// </summary>
        public virtual string Userns { get; internal set; }
        /// <summary>
        ///   UTS namespace to use.
        /// </summary>
        public virtual string Uts { get; internal set; }
        /// <summary>
        ///   Bind mount a volume.
        /// </summary>
        public virtual IReadOnlyList<string> Volume => VolumeInternal.AsReadOnly();
        internal List<string> VolumeInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Optional volume driver for the container.
        /// </summary>
        public virtual string VolumeDriver { get; internal set; }
        /// <summary>
        ///   Mount volumes from the specified container(s).
        /// </summary>
        public virtual IReadOnlyList<string> VolumesFrom => VolumesFromInternal.AsReadOnly();
        internal List<string> VolumesFromInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Working directory inside the container.
        /// </summary>
        public virtual string Workdir { get; internal set; }
        /// <summary>
        ///   IMAGE
        /// </summary>
        public virtual string Image { get; internal set; }
        /// <summary>
        ///   [COMMAND]
        /// </summary>
        public virtual string Command { get; internal set; }
        /// <summary>
        ///   [ARG...]
        /// </summary>
        public virtual IReadOnlyList<string> Args => ArgsInternal.AsReadOnly();
        internal List<string> ArgsInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("container create")
              .Add("--add-host {value}", AddHost)
              .Add("--attach {value}", Attach)
              .Add("--blkio-weight {value}", BlkioWeight)
              .Add("--blkio-weight-device {value}", BlkioWeightDevice)
              .Add("--cap-add {value}", CapAdd)
              .Add("--cap-drop {value}", CapDrop)
              .Add("--cgroup-parent {value}", CgroupParent)
              .Add("--cidfile {value}", Cidfile)
              .Add("--cpu-count {value}", CpuCount)
              .Add("--cpu-percent {value}", CpuPercent)
              .Add("--cpu-period {value}", CpuPeriod)
              .Add("--cpu-quota {value}", CpuQuota)
              .Add("--cpu-rt-period {value}", CpuRtPeriod)
              .Add("--cpu-rt-runtime {value}", CpuRtRuntime)
              .Add("--cpu-shares {value}", CpuShares)
              .Add("--cpus {value}", Cpus)
              .Add("--cpuset-cpus {value}", CpusetCpus)
              .Add("--cpuset-mems {value}", CpusetMems)
              .Add("--device {value}", Device)
              .Add("--device-cgroup-rule {value}", DeviceCgroupRule)
              .Add("--device-read-bps {value}", DeviceReadBps)
              .Add("--device-read-iops {value}", DeviceReadIops)
              .Add("--device-write-bps {value}", DeviceWriteBps)
              .Add("--device-write-iops {value}", DeviceWriteIops)
              .Add("--disable-content-trust", DisableContentTrust)
              .Add("--dns {value}", Dns)
              .Add("--dns-opt {value}", DnsOpt)
              .Add("--dns-option {value}", DnsOption)
              .Add("--dns-search {value}", DnsSearch)
              .Add("--domainname {value}", Domainname)
              .Add("--entrypoint {value}", Entrypoint)
              .Add("--env {value}", Env)
              .Add("--env-file {value}", EnvFile)
              .Add("--expose {value}", Expose)
              .Add("--gpus {value}", Gpus)
              .Add("--group-add {value}", GroupAdd)
              .Add("--health-cmd {value}", HealthCmd)
              .Add("--health-interval {value}", HealthInterval)
              .Add("--health-retries {value}", HealthRetries)
              .Add("--health-start-period {value}", HealthStartPeriod)
              .Add("--health-timeout {value}", HealthTimeout)
              .Add("--help", Help)
              .Add("--hostname {value}", Hostname)
              .Add("--init", Init)
              .Add("--interactive", Interactive)
              .Add("--io-maxbandwidth {value}", IoMaxbandwidth)
              .Add("--io-maxiops {value}", IoMaxiops)
              .Add("--ip {value}", Ip)
              .Add("--ip6 {value}", Ip6)
              .Add("--ipc {value}", Ipc)
              .Add("--isolation {value}", Isolation)
              .Add("--kernel-memory {value}", KernelMemory)
              .Add("--label {value}", Label)
              .Add("--label-file {value}", LabelFile)
              .Add("--link {value}", Link)
              .Add("--link-local-ip {value}", LinkLocalIp)
              .Add("--log-driver {value}", LogDriver)
              .Add("--log-opt {value}", LogOpt)
              .Add("--mac-address {value}", MacAddress)
              .Add("--memory {value}", Memory)
              .Add("--memory-reservation {value}", MemoryReservation)
              .Add("--memory-swap {value}", MemorySwap)
              .Add("--memory-swappiness {value}", MemorySwappiness)
              .Add("--mount {value}", Mount)
              .Add("--name {value}", Name)
              .Add("--net {value}", Net)
              .Add("--net-alias {value}", NetAlias)
              .Add("--network {value}", Network)
              .Add("--network-alias {value}", NetworkAlias)
              .Add("--no-healthcheck", NoHealthcheck)
              .Add("--oom-kill-disable", OomKillDisable)
              .Add("--oom-score-adj {value}", OomScoreAdj)
              .Add("--pid {value}", Pid)
              .Add("--pids-limit {value}", PidsLimit)
              .Add("--platform {value}", Platform)
              .Add("--privileged", Privileged)
              .Add("--publish {value}", Publish)
              .Add("--publish-all", PublishAll)
              .Add("--read-only", ReadOnly)
              .Add("--restart {value}", Restart)
              .Add("--rm", Rm)
              .Add("--runtime {value}", Runtime)
              .Add("--security-opt {value}", SecurityOpt)
              .Add("--shm-size {value}", ShmSize)
              .Add("--stop-signal {value}", StopSignal)
              .Add("--stop-timeout {value}", StopTimeout)
              .Add("--storage-opt {value}", StorageOpt)
              .Add("--sysctl {value}", Sysctl, "{key}:{value}")
              .Add("--tmpfs {value}", Tmpfs)
              .Add("--tty", Tty)
              .Add("--ulimit {value}", Ulimit)
              .Add("--user {value}", User)
              .Add("--userns {value}", Userns)
              .Add("--uts {value}", Uts)
              .Add("--volume {value}", Volume)
              .Add("--volume-driver {value}", VolumeDriver)
              .Add("--volumes-from {value}", VolumesFrom)
              .Add("--workdir {value}", Workdir)
              .Add("{value}", Image)
              .Add("{value}", Command)
              .Add("{value}", Args, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerVolumeCreateSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerVolumeCreateSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Specify volume driver name.
        /// </summary>
        public virtual string Driver { get; internal set; }
        /// <summary>
        ///   Set metadata for a volume.
        /// </summary>
        public virtual IReadOnlyList<string> Label => LabelInternal.AsReadOnly();
        internal List<string> LabelInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Specify volume name.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Set driver specific options.
        /// </summary>
        public virtual IReadOnlyDictionary<string, string> Opt => OptInternal.AsReadOnly();
        internal Dictionary<string,string> OptInternal { get; set; } = new Dictionary<string,string>(StringComparer.OrdinalIgnoreCase);
        /// <summary>
        ///   [VOLUME]
        /// </summary>
        public virtual string Volume { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("volume create")
              .Add("--driver {value}", Driver)
              .Add("--label {value}", Label)
              .Add("--name {value}", Name)
              .Add("--opt {value}", Opt, "{key}:{value}")
              .Add("{value}", Volume)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerPluginSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerPluginSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("plugin")
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerLoginSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerLoginSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Password.
        /// </summary>
        public virtual string Password { get; internal set; }
        /// <summary>
        ///   Username.
        /// </summary>
        public virtual string Username { get; internal set; }
        /// <summary>
        ///   [SERVER]
        /// </summary>
        public virtual string Server { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("login")
              .Add("--password {value}", Password, secret: true)
              .Add("--username {value}", Username)
              .Add("{value}", Server)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerSwarmUnlockKeySettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerSwarmUnlockKeySettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Only display token.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        /// <summary>
        ///   Rotate unlock key.
        /// </summary>
        public virtual bool? Rotate { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("swarm unlock-key")
              .Add("--quiet", Quiet)
              .Add("--rotate", Rotate)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerStartSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerStartSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Attach STDOUT/STDERR and forward signals.
        /// </summary>
        public virtual bool? Attach { get; internal set; }
        /// <summary>
        ///   Restore from this checkpoint.
        /// </summary>
        public virtual string Checkpoint { get; internal set; }
        /// <summary>
        ///   Use a custom checkpoint storage directory.
        /// </summary>
        public virtual string CheckpointDir { get; internal set; }
        /// <summary>
        ///   Override the key sequence for detaching a container.
        /// </summary>
        public virtual string DetachKeys { get; internal set; }
        /// <summary>
        ///   Attach container's STDIN.
        /// </summary>
        public virtual bool? Interactive { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual IReadOnlyList<string> Containers => ContainersInternal.AsReadOnly();
        internal List<string> ContainersInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("start")
              .Add("--attach", Attach)
              .Add("--checkpoint {value}", Checkpoint)
              .Add("--checkpoint-dir {value}", CheckpointDir)
              .Add("--detach-keys {value}", DetachKeys)
              .Add("--interactive", Interactive)
              .Add("{value}", Containers, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerSwarmInitSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerSwarmInitSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Advertised address (format: &lt;ip|interface&gt;[:port]).
        /// </summary>
        public virtual string AdvertiseAddr { get; internal set; }
        /// <summary>
        ///   Enable manager autolocking (requiring an unlock key to start a stopped manager).
        /// </summary>
        public virtual bool? Autolock { get; internal set; }
        /// <summary>
        ///   Availability of the node ("active"|"pause"|"drain").
        /// </summary>
        public virtual Availability Availability { get; internal set; }
        /// <summary>
        ///   Validity period for node certificates (ns|us|ms|s|m|h).
        /// </summary>
        public virtual string CertExpiry { get; internal set; }
        /// <summary>
        ///   Address or interface to use for data path traffic (format: &lt;ip|interface&gt;).
        /// </summary>
        public virtual string DataPathAddr { get; internal set; }
        /// <summary>
        ///   Port number to use for data path traffic (1024 - 49151). If no value is set or is set to 0, the default port (4789) is used.
        /// </summary>
        public virtual string DataPathPort { get; internal set; }
        /// <summary>
        ///   default address pool in CIDR format.
        /// </summary>
        public virtual string DefaultAddrPool { get; internal set; }
        /// <summary>
        ///   default address pool subnet mask length.
        /// </summary>
        public virtual string DefaultAddrPoolMaskLength { get; internal set; }
        /// <summary>
        ///   Dispatcher heartbeat period (ns|us|ms|s|m|h).
        /// </summary>
        public virtual string DispatcherHeartbeat { get; internal set; }
        /// <summary>
        ///   Specifications of one or more certificate signing endpoints.
        /// </summary>
        public virtual string ExternalCa { get; internal set; }
        /// <summary>
        ///   Force create a new cluster from current state.
        /// </summary>
        public virtual bool? ForceNewCluster { get; internal set; }
        /// <summary>
        ///   Listen address (format: &lt;ip|interface&gt;[:port]).
        /// </summary>
        public virtual string ListenAddr { get; internal set; }
        /// <summary>
        ///   Number of additional Raft snapshots to retain.
        /// </summary>
        public virtual int? MaxSnapshots { get; internal set; }
        /// <summary>
        ///   Number of log entries between Raft snapshots.
        /// </summary>
        public virtual int? SnapshotInterval { get; internal set; }
        /// <summary>
        ///   Task history retention limit.
        /// </summary>
        public virtual long? TaskHistoryLimit { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("swarm init")
              .Add("--advertise-addr {value}", AdvertiseAddr)
              .Add("--autolock", Autolock)
              .Add("--availability {value}", Availability)
              .Add("--cert-expiry {value}", CertExpiry)
              .Add("--data-path-addr {value}", DataPathAddr)
              .Add("--data-path-port {value}", DataPathPort)
              .Add("--default-addr-pool {value}", DefaultAddrPool)
              .Add("--default-addr-pool-mask-length {value}", DefaultAddrPoolMaskLength)
              .Add("--dispatcher-heartbeat {value}", DispatcherHeartbeat)
              .Add("--external-ca {value}", ExternalCa)
              .Add("--force-new-cluster", ForceNewCluster)
              .Add("--listen-addr {value}", ListenAddr)
              .Add("--max-snapshots {value}", MaxSnapshots)
              .Add("--snapshot-interval {value}", SnapshotInterval)
              .Add("--task-history-limit {value}", TaskHistoryLimit)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContainerDiffSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContainerDiffSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual string Container { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("container diff")
              .Add("{value}", Container)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContainerRestartSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContainerRestartSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Seconds to wait for stop before killing the container.
        /// </summary>
        public virtual int? Time { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual IReadOnlyList<string> Containers => ContainersInternal.AsReadOnly();
        internal List<string> ContainersInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("container restart")
              .Add("--time {value}", Time)
              .Add("{value}", Containers, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerConfigSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerConfigSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("config")
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerPluginDisableSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerPluginDisableSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Force the disable of an active plugin.
        /// </summary>
        public virtual bool? Force { get; internal set; }
        /// <summary>
        ///   PLUGIN
        /// </summary>
        public virtual string Plugin { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("plugin disable")
              .Add("--force", Force)
              .Add("{value}", Plugin)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContainerUnpauseSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContainerUnpauseSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual IReadOnlyList<string> Containers => ContainersInternal.AsReadOnly();
        internal List<string> ContainersInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("container unpause")
              .Add("{value}", Containers, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContextImportSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContextImportSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   CONTEXT
        /// </summary>
        public virtual string Context { get; internal set; }
        /// <summary>
        ///   FILE|-
        /// </summary>
        public virtual string File { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("context import")
              .Add("{value}", Context)
              .Add("{value}", File)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerRmSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerRmSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Force the removal of a running container (uses SIGKILL).
        /// </summary>
        public virtual bool? Force { get; internal set; }
        /// <summary>
        ///   Remove the specified link.
        /// </summary>
        public virtual bool? Link { get; internal set; }
        /// <summary>
        ///   Remove the volumes associated with the container.
        /// </summary>
        public virtual bool? Volumes { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual IReadOnlyList<string> Containers => ContainersInternal.AsReadOnly();
        internal List<string> ContainersInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("rm")
              .Add("--force", Force)
              .Add("--link", Link)
              .Add("--volumes", Volumes)
              .Add("{value}", Containers, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerDeploySettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerDeploySettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Path to a Distributed Application Bundle file.
        /// </summary>
        public virtual string BundleFile { get; internal set; }
        /// <summary>
        ///   Path to a Compose file, or "-" to read from stdin.
        /// </summary>
        public virtual IReadOnlyList<string> ComposeFile => ComposeFileInternal.AsReadOnly();
        internal List<string> ComposeFileInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Kubernetes namespace to use.
        /// </summary>
        public virtual string Namespace { get; internal set; }
        /// <summary>
        ///   Prune services that are no longer referenced.
        /// </summary>
        public virtual bool? Prune { get; internal set; }
        /// <summary>
        ///   Query the registry to resolve image digest and supported platforms ("always"|"changed"|"never").
        /// </summary>
        public virtual ResolveImage ResolveImage { get; internal set; }
        /// <summary>
        ///   Send registry authentication details to Swarm agents.
        /// </summary>
        public virtual bool? WithRegistryAuth { get; internal set; }
        /// <summary>
        ///   STACK
        /// </summary>
        public virtual string Stack { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("deploy")
              .Add("--bundle-file {value}", BundleFile)
              .Add("--compose-file {value}", ComposeFile)
              .Add("--namespace {value}", Namespace)
              .Add("--prune", Prune)
              .Add("--resolve-image {value}", ResolveImage)
              .Add("--with-registry-auth", WithRegistryAuth)
              .Add("{value}", Stack)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerNodeRmSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerNodeRmSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Force remove a node from the swarm.
        /// </summary>
        public virtual bool? Force { get; internal set; }
        /// <summary>
        ///   NODE
        /// </summary>
        public virtual IReadOnlyList<string> Nodes => NodesInternal.AsReadOnly();
        internal List<string> NodesInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("node rm")
              .Add("--force", Force)
              .Add("{value}", Nodes, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerCheckpointRmSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerCheckpointRmSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Use a custom checkpoint storage directory.
        /// </summary>
        public virtual string CheckpointDir { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual string Container { get; internal set; }
        /// <summary>
        ///   CHECKPOINT
        /// </summary>
        public virtual string Checkpoint { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("checkpoint rm")
              .Add("--checkpoint-dir {value}", CheckpointDir)
              .Add("{value}", Container)
              .Add("{value}", Checkpoint)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerPushSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerPushSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Skip image signing.
        /// </summary>
        public virtual bool? DisableContentTrust { get; internal set; }
        /// <summary>
        ///   NAME[:TAG]
        /// </summary>
        public virtual string Name { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("push")
              .Add("--disable-content-trust", DisableContentTrust)
              .Add("{value}", Name)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerNetworkCreateSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerNetworkCreateSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Enable manual container attachment.
        /// </summary>
        public virtual bool? Attachable { get; internal set; }
        /// <summary>
        ///   Auxiliary IPv4 or IPv6 addresses used by Network driver.
        /// </summary>
        public virtual IReadOnlyDictionary<string, string> AuxAddress => AuxAddressInternal.AsReadOnly();
        internal Dictionary<string,string> AuxAddressInternal { get; set; } = new Dictionary<string,string>(StringComparer.OrdinalIgnoreCase);
        /// <summary>
        ///   The network from which copying the configuration.
        /// </summary>
        public virtual string ConfigFrom { get; internal set; }
        /// <summary>
        ///   Create a configuration only network.
        /// </summary>
        public virtual bool? ConfigOnly { get; internal set; }
        /// <summary>
        ///   Driver to manage the Network.
        /// </summary>
        public virtual string Driver { get; internal set; }
        /// <summary>
        ///   IPv4 or IPv6 Gateway for the master subnet.
        /// </summary>
        public virtual IReadOnlyList<string> Gateway => GatewayInternal.AsReadOnly();
        internal List<string> GatewayInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Create swarm routing-mesh network.
        /// </summary>
        public virtual bool? Ingress { get; internal set; }
        /// <summary>
        ///   Restrict external access to the network.
        /// </summary>
        public virtual bool? Internal { get; internal set; }
        /// <summary>
        ///   Allocate container ip from a sub-range.
        /// </summary>
        public virtual IReadOnlyList<string> IpRange => IpRangeInternal.AsReadOnly();
        internal List<string> IpRangeInternal { get; set; } = new List<string>();
        /// <summary>
        ///   IP Address Management Driver.
        /// </summary>
        public virtual string IpamDriver { get; internal set; }
        /// <summary>
        ///   Set IPAM driver specific options.
        /// </summary>
        public virtual IReadOnlyDictionary<string, string> IpamOpt => IpamOptInternal.AsReadOnly();
        internal Dictionary<string,string> IpamOptInternal { get; set; } = new Dictionary<string,string>(StringComparer.OrdinalIgnoreCase);
        /// <summary>
        ///   Enable IPv6 networking.
        /// </summary>
        public virtual bool? Ipv6 { get; internal set; }
        /// <summary>
        ///   Set metadata on a network.
        /// </summary>
        public virtual IReadOnlyList<string> Label => LabelInternal.AsReadOnly();
        internal List<string> LabelInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Set driver specific options.
        /// </summary>
        public virtual IReadOnlyDictionary<string, string> Opt => OptInternal.AsReadOnly();
        internal Dictionary<string,string> OptInternal { get; set; } = new Dictionary<string,string>(StringComparer.OrdinalIgnoreCase);
        /// <summary>
        ///   Control the network's scope.
        /// </summary>
        public virtual string Scope { get; internal set; }
        /// <summary>
        ///   Subnet in CIDR format that represents a network segment.
        /// </summary>
        public virtual IReadOnlyList<string> Subnet => SubnetInternal.AsReadOnly();
        internal List<string> SubnetInternal { get; set; } = new List<string>();
        /// <summary>
        ///   NETWORK
        /// </summary>
        public virtual string Network { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("network create")
              .Add("--attachable", Attachable)
              .Add("--aux-address {value}", AuxAddress, "{key}:{value}")
              .Add("--config-from {value}", ConfigFrom)
              .Add("--config-only", ConfigOnly)
              .Add("--driver {value}", Driver)
              .Add("--gateway {value}", Gateway)
              .Add("--ingress", Ingress)
              .Add("--internal", Internal)
              .Add("--ip-range {value}", IpRange)
              .Add("--ipam-driver {value}", IpamDriver)
              .Add("--ipam-opt {value}", IpamOpt, "{key}:{value}")
              .Add("--ipv6", Ipv6)
              .Add("--label {value}", Label)
              .Add("--opt {value}", Opt, "{key}:{value}")
              .Add("--scope {value}", Scope)
              .Add("--subnet {value}", Subnet)
              .Add("{value}", Network)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerVolumeLsSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerVolumeLsSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Provide filter values (e.g. 'dangling=true').
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Pretty-print volumes using a Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Only display volume names.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("volume ls")
              .Add("--filter {value}", Filter)
              .Add("--format {value}", Format)
              .Add("--quiet", Quiet)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerTrustInspectSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerTrustInspectSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   IMAGE[:TAG]
        /// </summary>
        public virtual IReadOnlyList<string> Images => ImagesInternal.AsReadOnly();
        internal List<string> ImagesInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("trust inspect")
              .Add("{value}", Images, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerNetworkInspectSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerNetworkInspectSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Format the output using the given Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Verbose output for diagnostics.
        /// </summary>
        public virtual bool? Verbose { get; internal set; }
        /// <summary>
        ///   NETWORK
        /// </summary>
        public virtual IReadOnlyList<string> Networks => NetworksInternal.AsReadOnly();
        internal List<string> NetworksInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("network inspect")
              .Add("--format {value}", Format)
              .Add("--verbose", Verbose)
              .Add("{value}", Networks, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerEngineActivateSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerEngineActivateSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   override default location of containerd endpoint.
        /// </summary>
        public virtual string Containerd { get; internal set; }
        /// <summary>
        ///   only display license information and exit.
        /// </summary>
        public virtual bool? DisplayOnly { get; internal set; }
        /// <summary>
        ///   Specify engine image.
        /// </summary>
        public virtual string EngineImage { get; internal set; }
        /// <summary>
        ///   Pretty-print licenses using a Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   License File.
        /// </summary>
        public virtual string License { get; internal set; }
        /// <summary>
        ///   Only display available licenses by ID.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        /// <summary>
        ///   Override the default location where engine images are pulled.
        /// </summary>
        public virtual string RegistryPrefix { get; internal set; }
        /// <summary>
        ///   Specify engine version (default is to use currently running version).
        /// </summary>
        public virtual string Version { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("engine activate")
              .Add("--containerd {value}", Containerd)
              .Add("--display-only", DisplayOnly)
              .Add("--engine-image {value}", EngineImage)
              .Add("--format {value}", Format)
              .Add("--license {value}", License)
              .Add("--quiet", Quiet)
              .Add("--registry-prefix {value}", RegistryPrefix)
              .Add("--version {value}", Version)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContextUseSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContextUseSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   CONTEXT
        /// </summary>
        public virtual string Context { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("context use")
              .Add("{value}", Context)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerVolumeRmSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerVolumeRmSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Force the removal of one or more volumes.
        /// </summary>
        public virtual bool? Force { get; internal set; }
        /// <summary>
        ///   VOLUME
        /// </summary>
        public virtual IReadOnlyList<string> Volumes => VolumesInternal.AsReadOnly();
        internal List<string> VolumesInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("volume rm")
              .Add("--force", Force)
              .Add("{value}", Volumes, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerManifestCreateSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerManifestCreateSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   MANIFEST_LIST
        /// </summary>
        public virtual string ManifestList { get; internal set; }
        /// <summary>
        ///   MANIFEST
        /// </summary>
        public virtual IReadOnlyList<string> Manifests => ManifestsInternal.AsReadOnly();
        internal List<string> ManifestsInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("manifest create")
              .Add("{value}", ManifestList)
              .Add("{value}", Manifests, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerManifestPushSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerManifestPushSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Allow push to an insecure registry.
        /// </summary>
        public virtual bool? Insecure { get; internal set; }
        /// <summary>
        ///   Remove the local manifest list after push.
        /// </summary>
        public virtual bool? Purge { get; internal set; }
        /// <summary>
        ///   MANIFEST_LIST
        /// </summary>
        public virtual string ManifestList { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("manifest push")
              .Add("--insecure", Insecure)
              .Add("--purge", Purge)
              .Add("{value}", ManifestList)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerPluginEnableSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerPluginEnableSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   HTTP client timeout (in seconds).
        /// </summary>
        public virtual int? Timeout { get; internal set; }
        /// <summary>
        ///   PLUGIN
        /// </summary>
        public virtual string Plugin { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("plugin enable")
              .Add("--timeout {value}", Timeout)
              .Add("{value}", Plugin)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerImportSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerImportSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Apply Dockerfile instruction to the created image.
        /// </summary>
        public virtual IReadOnlyList<string> Change => ChangeInternal.AsReadOnly();
        internal List<string> ChangeInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Set commit message for imported image.
        /// </summary>
        public virtual string Message { get; internal set; }
        /// <summary>
        ///   Set platform if server is multi-platform capable.
        /// </summary>
        public virtual string Platform { get; internal set; }
        /// <summary>
        ///   file|URL|-
        /// </summary>
        public virtual string File { get; internal set; }
        /// <summary>
        ///   [REPOSITORY[:TAG]]
        /// </summary>
        public virtual string Repository { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("import")
              .Add("--change {value}", Change)
              .Add("--message {value}", Message)
              .Add("--platform {value}", Platform)
              .Add("{value}", File)
              .Add("{value}", Repository)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContainerRunSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContainerRunSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Add a custom host-to-IP mapping (host:ip).
        /// </summary>
        public virtual IReadOnlyList<string> AddHost => AddHostInternal.AsReadOnly();
        internal List<string> AddHostInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Attach to STDIN, STDOUT or STDERR.
        /// </summary>
        public virtual IReadOnlyList<string> Attach => AttachInternal.AsReadOnly();
        internal List<string> AttachInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0).
        /// </summary>
        public virtual int? BlkioWeight { get; internal set; }
        /// <summary>
        ///   Block IO weight (relative device weight).
        /// </summary>
        public virtual IReadOnlyList<string> BlkioWeightDevice => BlkioWeightDeviceInternal.AsReadOnly();
        internal List<string> BlkioWeightDeviceInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Add Linux capabilities.
        /// </summary>
        public virtual IReadOnlyList<string> CapAdd => CapAddInternal.AsReadOnly();
        internal List<string> CapAddInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Drop Linux capabilities.
        /// </summary>
        public virtual IReadOnlyList<string> CapDrop => CapDropInternal.AsReadOnly();
        internal List<string> CapDropInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Optional parent cgroup for the container.
        /// </summary>
        public virtual string CgroupParent { get; internal set; }
        /// <summary>
        ///   Write the container ID to the file.
        /// </summary>
        public virtual string Cidfile { get; internal set; }
        /// <summary>
        ///   CPU count (Windows only).
        /// </summary>
        public virtual long? CpuCount { get; internal set; }
        /// <summary>
        ///   CPU percent (Windows only).
        /// </summary>
        public virtual long? CpuPercent { get; internal set; }
        /// <summary>
        ///   Limit CPU CFS (Completely Fair Scheduler) period.
        /// </summary>
        public virtual long? CpuPeriod { get; internal set; }
        /// <summary>
        ///   Limit CPU CFS (Completely Fair Scheduler) quota.
        /// </summary>
        public virtual long? CpuQuota { get; internal set; }
        /// <summary>
        ///   Limit CPU real-time period in microseconds.
        /// </summary>
        public virtual long? CpuRtPeriod { get; internal set; }
        /// <summary>
        ///   Limit CPU real-time runtime in microseconds.
        /// </summary>
        public virtual long? CpuRtRuntime { get; internal set; }
        /// <summary>
        ///   CPU shares (relative weight).
        /// </summary>
        public virtual long? CpuShares { get; internal set; }
        /// <summary>
        ///   Number of CPUs.
        /// </summary>
        public virtual decimal? Cpus { get; internal set; }
        /// <summary>
        ///   CPUs in which to allow execution (0-3, 0,1).
        /// </summary>
        public virtual string CpusetCpus { get; internal set; }
        /// <summary>
        ///   MEMs in which to allow execution (0-3, 0,1).
        /// </summary>
        public virtual string CpusetMems { get; internal set; }
        /// <summary>
        ///   Run container in background and print container ID.
        /// </summary>
        public virtual bool? Detach { get; internal set; }
        /// <summary>
        ///   Override the key sequence for detaching a container.
        /// </summary>
        public virtual string DetachKeys { get; internal set; }
        /// <summary>
        ///   Add a host device to the container.
        /// </summary>
        public virtual IReadOnlyList<string> Device => DeviceInternal.AsReadOnly();
        internal List<string> DeviceInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Add a rule to the cgroup allowed devices list.
        /// </summary>
        public virtual IReadOnlyList<string> DeviceCgroupRule => DeviceCgroupRuleInternal.AsReadOnly();
        internal List<string> DeviceCgroupRuleInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Limit read rate (bytes per second) from a device.
        /// </summary>
        public virtual IReadOnlyList<string> DeviceReadBps => DeviceReadBpsInternal.AsReadOnly();
        internal List<string> DeviceReadBpsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Limit read rate (IO per second) from a device.
        /// </summary>
        public virtual IReadOnlyList<string> DeviceReadIops => DeviceReadIopsInternal.AsReadOnly();
        internal List<string> DeviceReadIopsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Limit write rate (bytes per second) to a device.
        /// </summary>
        public virtual IReadOnlyList<string> DeviceWriteBps => DeviceWriteBpsInternal.AsReadOnly();
        internal List<string> DeviceWriteBpsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Limit write rate (IO per second) to a device.
        /// </summary>
        public virtual IReadOnlyList<string> DeviceWriteIops => DeviceWriteIopsInternal.AsReadOnly();
        internal List<string> DeviceWriteIopsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Skip image verification.
        /// </summary>
        public virtual bool? DisableContentTrust { get; internal set; }
        /// <summary>
        ///   Set custom DNS servers.
        /// </summary>
        public virtual IReadOnlyList<string> Dns => DnsInternal.AsReadOnly();
        internal List<string> DnsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Set DNS options.
        /// </summary>
        public virtual IReadOnlyList<string> DnsOpt => DnsOptInternal.AsReadOnly();
        internal List<string> DnsOptInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Set DNS options.
        /// </summary>
        public virtual IReadOnlyList<string> DnsOption => DnsOptionInternal.AsReadOnly();
        internal List<string> DnsOptionInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Set custom DNS search domains.
        /// </summary>
        public virtual IReadOnlyList<string> DnsSearch => DnsSearchInternal.AsReadOnly();
        internal List<string> DnsSearchInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Container NIS domain name.
        /// </summary>
        public virtual string Domainname { get; internal set; }
        /// <summary>
        ///   Overwrite the default ENTRYPOINT of the image.
        /// </summary>
        public virtual string Entrypoint { get; internal set; }
        /// <summary>
        ///   Set environment variables.
        /// </summary>
        public virtual IReadOnlyList<string> Env => EnvInternal.AsReadOnly();
        internal List<string> EnvInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Read in a file of environment variables.
        /// </summary>
        public virtual IReadOnlyList<string> EnvFile => EnvFileInternal.AsReadOnly();
        internal List<string> EnvFileInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Expose a port or a range of ports.
        /// </summary>
        public virtual IReadOnlyList<string> Expose => ExposeInternal.AsReadOnly();
        internal List<string> ExposeInternal { get; set; } = new List<string>();
        /// <summary>
        ///   GPU devices to add to the container ('all' to pass all GPUs).
        /// </summary>
        public virtual string Gpus { get; internal set; }
        /// <summary>
        ///   Add additional groups to join.
        /// </summary>
        public virtual IReadOnlyList<string> GroupAdd => GroupAddInternal.AsReadOnly();
        internal List<string> GroupAddInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Command to run to check health.
        /// </summary>
        public virtual string HealthCmd { get; internal set; }
        /// <summary>
        ///   Time between running the check (ms|s|m|h) (default 0s).
        /// </summary>
        public virtual string HealthInterval { get; internal set; }
        /// <summary>
        ///   Consecutive failures needed to report unhealthy.
        /// </summary>
        public virtual int? HealthRetries { get; internal set; }
        /// <summary>
        ///   Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s).
        /// </summary>
        public virtual string HealthStartPeriod { get; internal set; }
        /// <summary>
        ///   Maximum time to allow one check to run (ms|s|m|h) (default 0s).
        /// </summary>
        public virtual string HealthTimeout { get; internal set; }
        /// <summary>
        ///   Print usage.
        /// </summary>
        public virtual bool? Help { get; internal set; }
        /// <summary>
        ///   Container host name.
        /// </summary>
        public virtual string Hostname { get; internal set; }
        /// <summary>
        ///   Run an init inside the container that forwards signals and reaps processes.
        /// </summary>
        public virtual bool? Init { get; internal set; }
        /// <summary>
        ///   Keep STDIN open even if not attached.
        /// </summary>
        public virtual bool? Interactive { get; internal set; }
        /// <summary>
        ///   Maximum IO bandwidth limit for the system drive (Windows only).
        /// </summary>
        public virtual long? IoMaxbandwidth { get; internal set; }
        /// <summary>
        ///   Maximum IOps limit for the system drive (Windows only).
        /// </summary>
        public virtual int? IoMaxiops { get; internal set; }
        /// <summary>
        ///   IPv4 address (e.g., 172.30.100.104).
        /// </summary>
        public virtual string Ip { get; internal set; }
        /// <summary>
        ///   IPv6 address (e.g., 2001:db8::33).
        /// </summary>
        public virtual string Ip6 { get; internal set; }
        /// <summary>
        ///   IPC mode to use.
        /// </summary>
        public virtual string Ipc { get; internal set; }
        /// <summary>
        ///   Container isolation technology.
        /// </summary>
        public virtual string Isolation { get; internal set; }
        /// <summary>
        ///   Kernel memory limit.
        /// </summary>
        public virtual long? KernelMemory { get; internal set; }
        /// <summary>
        ///   Set meta data on a container.
        /// </summary>
        public virtual IReadOnlyList<string> Label => LabelInternal.AsReadOnly();
        internal List<string> LabelInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Read in a line delimited file of labels.
        /// </summary>
        public virtual IReadOnlyList<string> LabelFile => LabelFileInternal.AsReadOnly();
        internal List<string> LabelFileInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Add link to another container.
        /// </summary>
        public virtual IReadOnlyList<string> Link => LinkInternal.AsReadOnly();
        internal List<string> LinkInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Container IPv4/IPv6 link-local addresses.
        /// </summary>
        public virtual IReadOnlyList<string> LinkLocalIp => LinkLocalIpInternal.AsReadOnly();
        internal List<string> LinkLocalIpInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Logging driver for the container.
        /// </summary>
        public virtual string LogDriver { get; internal set; }
        /// <summary>
        ///   Log driver options.
        /// </summary>
        public virtual IReadOnlyList<string> LogOpt => LogOptInternal.AsReadOnly();
        internal List<string> LogOptInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Container MAC address (e.g., 92:d0:c6:0a:29:33).
        /// </summary>
        public virtual string MacAddress { get; internal set; }
        /// <summary>
        ///   Memory limit.
        /// </summary>
        public virtual long? Memory { get; internal set; }
        /// <summary>
        ///   Memory soft limit.
        /// </summary>
        public virtual long? MemoryReservation { get; internal set; }
        /// <summary>
        ///   Swap limit equal to memory plus swap: '-1' to enable unlimited swap.
        /// </summary>
        public virtual long? MemorySwap { get; internal set; }
        /// <summary>
        ///   Tune container memory swappiness (0 to 100).
        /// </summary>
        public virtual long? MemorySwappiness { get; internal set; }
        /// <summary>
        ///   Attach a filesystem mount to the container.
        /// </summary>
        public virtual string Mount { get; internal set; }
        /// <summary>
        ///   Assign a name to the container.
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   Connect a container to a network.
        /// </summary>
        public virtual string Net { get; internal set; }
        /// <summary>
        ///   Add network-scoped alias for the container.
        /// </summary>
        public virtual IReadOnlyList<string> NetAlias => NetAliasInternal.AsReadOnly();
        internal List<string> NetAliasInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Connect a container to a network.
        /// </summary>
        public virtual string Network { get; internal set; }
        /// <summary>
        ///   Add network-scoped alias for the container.
        /// </summary>
        public virtual IReadOnlyList<string> NetworkAlias => NetworkAliasInternal.AsReadOnly();
        internal List<string> NetworkAliasInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Disable any container-specified HEALTHCHECK.
        /// </summary>
        public virtual bool? NoHealthcheck { get; internal set; }
        /// <summary>
        ///   Disable OOM Killer.
        /// </summary>
        public virtual bool? OomKillDisable { get; internal set; }
        /// <summary>
        ///   Tune host's OOM preferences (-1000 to 1000).
        /// </summary>
        public virtual int? OomScoreAdj { get; internal set; }
        /// <summary>
        ///   PID namespace to use.
        /// </summary>
        public virtual string Pid { get; internal set; }
        /// <summary>
        ///   Tune container pids limit (set -1 for unlimited).
        /// </summary>
        public virtual long? PidsLimit { get; internal set; }
        /// <summary>
        ///   Set platform if server is multi-platform capable.
        /// </summary>
        public virtual string Platform { get; internal set; }
        /// <summary>
        ///   Give extended privileges to this container.
        /// </summary>
        public virtual bool? Privileged { get; internal set; }
        /// <summary>
        ///   Publish a container's port(s) to the host.
        /// </summary>
        public virtual IReadOnlyList<string> Publish => PublishInternal.AsReadOnly();
        internal List<string> PublishInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Publish all exposed ports to random ports.
        /// </summary>
        public virtual bool? PublishAll { get; internal set; }
        /// <summary>
        ///   Mount the container's root filesystem as read only.
        /// </summary>
        public virtual bool? ReadOnly { get; internal set; }
        /// <summary>
        ///   Restart policy to apply when a container exits.
        /// </summary>
        public virtual string Restart { get; internal set; }
        /// <summary>
        ///   Automatically remove the container when it exits.
        /// </summary>
        public virtual bool? Rm { get; internal set; }
        /// <summary>
        ///   Runtime to use for this container.
        /// </summary>
        public virtual string Runtime { get; internal set; }
        /// <summary>
        ///   Security Options.
        /// </summary>
        public virtual IReadOnlyList<string> SecurityOpt => SecurityOptInternal.AsReadOnly();
        internal List<string> SecurityOptInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Size of /dev/shm.
        /// </summary>
        public virtual long? ShmSize { get; internal set; }
        /// <summary>
        ///   Proxy received signals to the process.
        /// </summary>
        public virtual bool? SigProxy { get; internal set; }
        /// <summary>
        ///   Signal to stop a container.
        /// </summary>
        public virtual string StopSignal { get; internal set; }
        /// <summary>
        ///   Timeout (in seconds) to stop a container.
        /// </summary>
        public virtual int? StopTimeout { get; internal set; }
        /// <summary>
        ///   Storage driver options for the container.
        /// </summary>
        public virtual IReadOnlyList<string> StorageOpt => StorageOptInternal.AsReadOnly();
        internal List<string> StorageOptInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Sysctl options.
        /// </summary>
        public virtual IReadOnlyDictionary<string, string> Sysctl => SysctlInternal.AsReadOnly();
        internal Dictionary<string,string> SysctlInternal { get; set; } = new Dictionary<string,string>(StringComparer.OrdinalIgnoreCase);
        /// <summary>
        ///   Mount a tmpfs directory.
        /// </summary>
        public virtual IReadOnlyList<string> Tmpfs => TmpfsInternal.AsReadOnly();
        internal List<string> TmpfsInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Allocate a pseudo-TTY.
        /// </summary>
        public virtual bool? Tty { get; internal set; }
        /// <summary>
        ///   Ulimit options.
        /// </summary>
        public virtual string Ulimit { get; internal set; }
        /// <summary>
        ///   Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).
        /// </summary>
        public virtual string User { get; internal set; }
        /// <summary>
        ///   User namespace to use.
        /// </summary>
        public virtual string Userns { get; internal set; }
        /// <summary>
        ///   UTS namespace to use.
        /// </summary>
        public virtual string Uts { get; internal set; }
        /// <summary>
        ///   Bind mount a volume.
        /// </summary>
        public virtual IReadOnlyList<string> Volume => VolumeInternal.AsReadOnly();
        internal List<string> VolumeInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Optional volume driver for the container.
        /// </summary>
        public virtual string VolumeDriver { get; internal set; }
        /// <summary>
        ///   Mount volumes from the specified container(s).
        /// </summary>
        public virtual IReadOnlyList<string> VolumesFrom => VolumesFromInternal.AsReadOnly();
        internal List<string> VolumesFromInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Working directory inside the container.
        /// </summary>
        public virtual string Workdir { get; internal set; }
        /// <summary>
        ///   IMAGE
        /// </summary>
        public virtual string Image { get; internal set; }
        /// <summary>
        ///   [COMMAND]
        /// </summary>
        public virtual string Command { get; internal set; }
        /// <summary>
        ///   [ARG...]
        /// </summary>
        public virtual IReadOnlyList<string> Args => ArgsInternal.AsReadOnly();
        internal List<string> ArgsInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("container run")
              .Add("--add-host {value}", AddHost)
              .Add("--attach {value}", Attach)
              .Add("--blkio-weight {value}", BlkioWeight)
              .Add("--blkio-weight-device {value}", BlkioWeightDevice)
              .Add("--cap-add {value}", CapAdd)
              .Add("--cap-drop {value}", CapDrop)
              .Add("--cgroup-parent {value}", CgroupParent)
              .Add("--cidfile {value}", Cidfile)
              .Add("--cpu-count {value}", CpuCount)
              .Add("--cpu-percent {value}", CpuPercent)
              .Add("--cpu-period {value}", CpuPeriod)
              .Add("--cpu-quota {value}", CpuQuota)
              .Add("--cpu-rt-period {value}", CpuRtPeriod)
              .Add("--cpu-rt-runtime {value}", CpuRtRuntime)
              .Add("--cpu-shares {value}", CpuShares)
              .Add("--cpus {value}", Cpus)
              .Add("--cpuset-cpus {value}", CpusetCpus)
              .Add("--cpuset-mems {value}", CpusetMems)
              .Add("--detach", Detach)
              .Add("--detach-keys {value}", DetachKeys)
              .Add("--device {value}", Device)
              .Add("--device-cgroup-rule {value}", DeviceCgroupRule)
              .Add("--device-read-bps {value}", DeviceReadBps)
              .Add("--device-read-iops {value}", DeviceReadIops)
              .Add("--device-write-bps {value}", DeviceWriteBps)
              .Add("--device-write-iops {value}", DeviceWriteIops)
              .Add("--disable-content-trust", DisableContentTrust)
              .Add("--dns {value}", Dns)
              .Add("--dns-opt {value}", DnsOpt)
              .Add("--dns-option {value}", DnsOption)
              .Add("--dns-search {value}", DnsSearch)
              .Add("--domainname {value}", Domainname)
              .Add("--entrypoint {value}", Entrypoint)
              .Add("--env {value}", Env)
              .Add("--env-file {value}", EnvFile)
              .Add("--expose {value}", Expose)
              .Add("--gpus {value}", Gpus)
              .Add("--group-add {value}", GroupAdd)
              .Add("--health-cmd {value}", HealthCmd)
              .Add("--health-interval {value}", HealthInterval)
              .Add("--health-retries {value}", HealthRetries)
              .Add("--health-start-period {value}", HealthStartPeriod)
              .Add("--health-timeout {value}", HealthTimeout)
              .Add("--help", Help)
              .Add("--hostname {value}", Hostname)
              .Add("--init", Init)
              .Add("--interactive", Interactive)
              .Add("--io-maxbandwidth {value}", IoMaxbandwidth)
              .Add("--io-maxiops {value}", IoMaxiops)
              .Add("--ip {value}", Ip)
              .Add("--ip6 {value}", Ip6)
              .Add("--ipc {value}", Ipc)
              .Add("--isolation {value}", Isolation)
              .Add("--kernel-memory {value}", KernelMemory)
              .Add("--label {value}", Label)
              .Add("--label-file {value}", LabelFile)
              .Add("--link {value}", Link)
              .Add("--link-local-ip {value}", LinkLocalIp)
              .Add("--log-driver {value}", LogDriver)
              .Add("--log-opt {value}", LogOpt)
              .Add("--mac-address {value}", MacAddress)
              .Add("--memory {value}", Memory)
              .Add("--memory-reservation {value}", MemoryReservation)
              .Add("--memory-swap {value}", MemorySwap)
              .Add("--memory-swappiness {value}", MemorySwappiness)
              .Add("--mount {value}", Mount)
              .Add("--name {value}", Name)
              .Add("--net {value}", Net)
              .Add("--net-alias {value}", NetAlias)
              .Add("--network {value}", Network)
              .Add("--network-alias {value}", NetworkAlias)
              .Add("--no-healthcheck", NoHealthcheck)
              .Add("--oom-kill-disable", OomKillDisable)
              .Add("--oom-score-adj {value}", OomScoreAdj)
              .Add("--pid {value}", Pid)
              .Add("--pids-limit {value}", PidsLimit)
              .Add("--platform {value}", Platform)
              .Add("--privileged", Privileged)
              .Add("--publish {value}", Publish)
              .Add("--publish-all", PublishAll)
              .Add("--read-only", ReadOnly)
              .Add("--restart {value}", Restart)
              .Add("--rm", Rm)
              .Add("--runtime {value}", Runtime)
              .Add("--security-opt {value}", SecurityOpt)
              .Add("--shm-size {value}", ShmSize)
              .Add("--sig-proxy", SigProxy)
              .Add("--stop-signal {value}", StopSignal)
              .Add("--stop-timeout {value}", StopTimeout)
              .Add("--storage-opt {value}", StorageOpt)
              .Add("--sysctl {value}", Sysctl, "{key}:{value}")
              .Add("--tmpfs {value}", Tmpfs)
              .Add("--tty", Tty)
              .Add("--ulimit {value}", Ulimit)
              .Add("--user {value}", User)
              .Add("--userns {value}", Userns)
              .Add("--uts {value}", Uts)
              .Add("--volume {value}", Volume)
              .Add("--volume-driver {value}", VolumeDriver)
              .Add("--volumes-from {value}", VolumesFrom)
              .Add("--workdir {value}", Workdir)
              .Add("{value}", Image)
              .Add("{value}", Command)
              .Add("{value}", Args, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerNodeInspectSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerNodeInspectSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Format the output using the given Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Print the information in a human friendly format.
        /// </summary>
        public virtual bool? Pretty { get; internal set; }
        /// <summary>
        ///   self|NODE
        /// </summary>
        public virtual IReadOnlyList<string> Selves => SelvesInternal.AsReadOnly();
        internal List<string> SelvesInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("node inspect")
              .Add("--format {value}", Format)
              .Add("--pretty", Pretty)
              .Add("{value}", Selves, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerSaveSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerSaveSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Write to a file, instead of STDOUT.
        /// </summary>
        public virtual string Output { get; internal set; }
        /// <summary>
        ///   IMAGE
        /// </summary>
        public virtual IReadOnlyList<string> Images => ImagesInternal.AsReadOnly();
        internal List<string> ImagesInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("save")
              .Add("--output {value}", Output)
              .Add("{value}", Images, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContainerStatsSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContainerStatsSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Show all containers (default shows just running).
        /// </summary>
        public virtual bool? All { get; internal set; }
        /// <summary>
        ///   Pretty-print images using a Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Disable streaming stats and only pull the first result.
        /// </summary>
        public virtual bool? NoStream { get; internal set; }
        /// <summary>
        ///   Do not truncate output.
        /// </summary>
        public virtual bool? NoTrunc { get; internal set; }
        /// <summary>
        ///   [CONTAINER...]
        /// </summary>
        public virtual IReadOnlyList<string> Containers => ContainersInternal.AsReadOnly();
        internal List<string> ContainersInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("container stats")
              .Add("--all", All)
              .Add("--format {value}", Format)
              .Add("--no-stream", NoStream)
              .Add("--no-trunc", NoTrunc)
              .Add("{value}", Containers, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContainerExecSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContainerExecSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Detached mode: run command in the background.
        /// </summary>
        public virtual bool? Detach { get; internal set; }
        /// <summary>
        ///   Override the key sequence for detaching a container.
        /// </summary>
        public virtual string DetachKeys { get; internal set; }
        /// <summary>
        ///   Set environment variables.
        /// </summary>
        public virtual IReadOnlyList<string> Env => EnvInternal.AsReadOnly();
        internal List<string> EnvInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Keep STDIN open even if not attached.
        /// </summary>
        public virtual bool? Interactive { get; internal set; }
        /// <summary>
        ///   Give extended privileges to the command.
        /// </summary>
        public virtual bool? Privileged { get; internal set; }
        /// <summary>
        ///   Allocate a pseudo-TTY.
        /// </summary>
        public virtual bool? Tty { get; internal set; }
        /// <summary>
        ///   Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).
        /// </summary>
        public virtual string User { get; internal set; }
        /// <summary>
        ///   Working directory inside the container.
        /// </summary>
        public virtual string Workdir { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual string Container { get; internal set; }
        /// <summary>
        ///   COMMAND
        /// </summary>
        public virtual string Command { get; internal set; }
        /// <summary>
        ///   [ARG...]
        /// </summary>
        public virtual IReadOnlyList<string> Args => ArgsInternal.AsReadOnly();
        internal List<string> ArgsInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("container exec")
              .Add("--detach", Detach)
              .Add("--detach-keys {value}", DetachKeys)
              .Add("--env {value}", Env)
              .Add("--interactive", Interactive)
              .Add("--privileged", Privileged)
              .Add("--tty", Tty)
              .Add("--user {value}", User)
              .Add("--workdir {value}", Workdir)
              .Add("{value}", Container)
              .Add("{value}", Command)
              .Add("{value}", Args, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerNodeLsSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerNodeLsSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Filter output based on conditions provided.
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Pretty-print nodes using a Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Only display IDs.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("node ls")
              .Add("--filter {value}", Filter)
              .Add("--format {value}", Format)
              .Add("--quiet", Quiet)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerSwarmJoinSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerSwarmJoinSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Advertised address (format: &lt;ip|interface&gt;[:port]).
        /// </summary>
        public virtual string AdvertiseAddr { get; internal set; }
        /// <summary>
        ///   Availability of the node ("active"|"pause"|"drain").
        /// </summary>
        public virtual Availability Availability { get; internal set; }
        /// <summary>
        ///   Address or interface to use for data path traffic (format: &lt;ip|interface&gt;).
        /// </summary>
        public virtual string DataPathAddr { get; internal set; }
        /// <summary>
        ///   Listen address (format: &lt;ip|interface&gt;[:port]).
        /// </summary>
        public virtual string ListenAddr { get; internal set; }
        /// <summary>
        ///   Token for entry into the swarm.
        /// </summary>
        public virtual string Token { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("swarm join HOST:PORT")
              .Add("--advertise-addr {value}", AdvertiseAddr)
              .Add("--availability {value}", Availability)
              .Add("--data-path-addr {value}", DataPathAddr)
              .Add("--listen-addr {value}", ListenAddr)
              .Add("--token {value}", Token)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContainerLogsSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContainerLogsSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Show extra details provided to logs.
        /// </summary>
        public virtual bool? Details { get; internal set; }
        /// <summary>
        ///   Follow log output.
        /// </summary>
        public virtual bool? Follow { get; internal set; }
        /// <summary>
        ///   Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes).
        /// </summary>
        public virtual string Since { get; internal set; }
        /// <summary>
        ///   Number of lines to show from the end of the logs.
        /// </summary>
        public virtual string Tail { get; internal set; }
        /// <summary>
        ///   Show timestamps.
        /// </summary>
        public virtual bool? Timestamps { get; internal set; }
        /// <summary>
        ///   Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes).
        /// </summary>
        public virtual string Until { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual string Container { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("container logs")
              .Add("--details", Details)
              .Add("--follow", Follow)
              .Add("--since {value}", Since)
              .Add("--tail {value}", Tail)
              .Add("--timestamps", Timestamps)
              .Add("--until {value}", Until)
              .Add("{value}", Container)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerCheckpointLsSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerCheckpointLsSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Use a custom checkpoint storage directory.
        /// </summary>
        public virtual string CheckpointDir { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual string Container { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("checkpoint ls")
              .Add("--checkpoint-dir {value}", CheckpointDir)
              .Add("{value}", Container)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContainerKillSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContainerKillSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Signal to send to the container.
        /// </summary>
        public virtual string Signal { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual IReadOnlyList<string> Containers => ContainersInternal.AsReadOnly();
        internal List<string> ContainersInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("container kill")
              .Add("--signal {value}", Signal)
              .Add("{value}", Containers, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerPluginInstallSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerPluginInstallSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Local name for plugin.
        /// </summary>
        public virtual string Alias { get; internal set; }
        /// <summary>
        ///   Do not enable the plugin on install.
        /// </summary>
        public virtual bool? Disable { get; internal set; }
        /// <summary>
        ///   Skip image verification.
        /// </summary>
        public virtual bool? DisableContentTrust { get; internal set; }
        /// <summary>
        ///   Grant all permissions necessary to run the plugin.
        /// </summary>
        public virtual bool? GrantAllPermissions { get; internal set; }
        /// <summary>
        ///   PLUGIN
        /// </summary>
        public virtual string Plugin { get; internal set; }
        /// <summary>
        ///   [KEY=VALUE...]
        /// </summary>
        public virtual IReadOnlyDictionary<string, string> KeyValues => KeyValuesInternal.AsReadOnly();
        internal Dictionary<string,string> KeyValuesInternal { get; set; } = new Dictionary<string,string>(StringComparer.OrdinalIgnoreCase);
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("plugin install")
              .Add("--alias {value}", Alias)
              .Add("--disable", Disable)
              .Add("--disable-content-trust", DisableContentTrust)
              .Add("--grant-all-permissions", GrantAllPermissions)
              .Add("{value}", Plugin)
              .Add("{value}", KeyValues, "{key=value}")
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerImagePruneSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerImagePruneSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Remove all unused images, not just dangling ones.
        /// </summary>
        public virtual bool? All { get; internal set; }
        /// <summary>
        ///   Provide filter values (e.g. 'until=&lt;timestamp&gt;').
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Do not prompt for confirmation.
        /// </summary>
        public virtual bool? Force { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("image prune")
              .Add("--all", All)
              .Add("--filter {value}", Filter)
              .Add("--force", Force)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerImageImportSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerImageImportSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Apply Dockerfile instruction to the created image.
        /// </summary>
        public virtual IReadOnlyList<string> Change => ChangeInternal.AsReadOnly();
        internal List<string> ChangeInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Set commit message for imported image.
        /// </summary>
        public virtual string Message { get; internal set; }
        /// <summary>
        ///   Set platform if server is multi-platform capable.
        /// </summary>
        public virtual string Platform { get; internal set; }
        /// <summary>
        ///   file|URL|-
        /// </summary>
        public virtual string File { get; internal set; }
        /// <summary>
        ///   [REPOSITORY[:TAG]]
        /// </summary>
        public virtual string Repository { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("image import")
              .Add("--change {value}", Change)
              .Add("--message {value}", Message)
              .Add("--platform {value}", Platform)
              .Add("{value}", File)
              .Add("{value}", Repository)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerDiffSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerDiffSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual string Container { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("diff")
              .Add("{value}", Container)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerUnpauseSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerUnpauseSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual IReadOnlyList<string> Containers => ContainersInternal.AsReadOnly();
        internal List<string> ContainersInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("unpause")
              .Add("{value}", Containers, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContainerLsSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContainerLsSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Show all containers (default shows just running).
        /// </summary>
        public virtual bool? All { get; internal set; }
        /// <summary>
        ///   Filter output based on conditions provided.
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Pretty-print containers using a Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Show n last created containers (includes all states).
        /// </summary>
        public virtual int? Last { get; internal set; }
        /// <summary>
        ///   Show the latest created container (includes all states).
        /// </summary>
        public virtual bool? Latest { get; internal set; }
        /// <summary>
        ///   Don't truncate output.
        /// </summary>
        public virtual bool? NoTrunc { get; internal set; }
        /// <summary>
        ///   Only display numeric IDs.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        /// <summary>
        ///   Display total file sizes.
        /// </summary>
        public virtual bool? Size { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("container ls")
              .Add("--all", All)
              .Add("--filter {value}", Filter)
              .Add("--format {value}", Format)
              .Add("--last {value}", Last)
              .Add("--latest", Latest)
              .Add("--no-trunc", NoTrunc)
              .Add("--quiet", Quiet)
              .Add("--size", Size)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerNodePsSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerNodePsSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Filter output based on conditions provided.
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Pretty-print tasks using a Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Do not map IDs to Names.
        /// </summary>
        public virtual bool? NoResolve { get; internal set; }
        /// <summary>
        ///   Do not truncate output.
        /// </summary>
        public virtual bool? NoTrunc { get; internal set; }
        /// <summary>
        ///   Only display task IDs.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        /// <summary>
        ///   [NODE...]
        /// </summary>
        public virtual IReadOnlyList<string> Nodes => NodesInternal.AsReadOnly();
        internal List<string> NodesInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("node ps")
              .Add("--filter {value}", Filter)
              .Add("--format {value}", Format)
              .Add("--no-resolve", NoResolve)
              .Add("--no-trunc", NoTrunc)
              .Add("--quiet", Quiet)
              .Add("{value}", Nodes, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContainerTopSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContainerTopSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual string Container { get; internal set; }
        /// <summary>
        ///   OPTIONS]
        /// </summary>
        public virtual string Options { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("container top [ps")
              .Add("{value}", Container)
              .Add("{value}", Options)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContainerRenameSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContainerRenameSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual string Container { get; internal set; }
        /// <summary>
        ///   NEW_NAME
        /// </summary>
        public virtual string NewName { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("container rename")
              .Add("{value}", Container)
              .Add("{value}", NewName)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerImageHistorySettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerImageHistorySettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Pretty-print images using a Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Print sizes and dates in human readable format.
        /// </summary>
        public virtual bool? Human { get; internal set; }
        /// <summary>
        ///   Don't truncate output.
        /// </summary>
        public virtual bool? NoTrunc { get; internal set; }
        /// <summary>
        ///   Only show numeric IDs.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        /// <summary>
        ///   IMAGE
        /// </summary>
        public virtual string Image { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("image history")
              .Add("--format {value}", Format)
              .Add("--human", Human)
              .Add("--no-trunc", NoTrunc)
              .Add("--quiet", Quiet)
              .Add("{value}", Image)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerPsSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerPsSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Show all containers (default shows just running).
        /// </summary>
        public virtual bool? All { get; internal set; }
        /// <summary>
        ///   Filter output based on conditions provided.
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Pretty-print containers using a Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Show n last created containers (includes all states).
        /// </summary>
        public virtual int? Last { get; internal set; }
        /// <summary>
        ///   Show the latest created container (includes all states).
        /// </summary>
        public virtual bool? Latest { get; internal set; }
        /// <summary>
        ///   Don't truncate output.
        /// </summary>
        public virtual bool? NoTrunc { get; internal set; }
        /// <summary>
        ///   Only display numeric IDs.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        /// <summary>
        ///   Display total file sizes.
        /// </summary>
        public virtual bool? Size { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("ps")
              .Add("--all", All)
              .Add("--filter {value}", Filter)
              .Add("--format {value}", Format)
              .Add("--last {value}", Last)
              .Add("--latest", Latest)
              .Add("--no-trunc", NoTrunc)
              .Add("--quiet", Quiet)
              .Add("--size", Size)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerImageTagSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerImageTagSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   SOURCE_IMAGE[:TAG]
        /// </summary>
        public virtual string SourceImage { get; internal set; }
        /// <summary>
        ///   TARGET_IMAGE[:TAG]
        /// </summary>
        public virtual string TargetImage { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("image tag")
              .Add("{value}", SourceImage)
              .Add("{value}", TargetImage)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerExportSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerExportSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Write to a file, instead of STDOUT.
        /// </summary>
        public virtual string Output { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual string Container { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("export")
              .Add("--output {value}", Output)
              .Add("{value}", Container)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerNetworkDisconnectSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerNetworkDisconnectSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Force the container to disconnect from a network.
        /// </summary>
        public virtual bool? Force { get; internal set; }
        /// <summary>
        ///   NETWORK
        /// </summary>
        public virtual string Network { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual string Container { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("network disconnect")
              .Add("--force", Force)
              .Add("{value}", Network)
              .Add("{value}", Container)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerBuilderBuildSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerBuilderBuildSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Add a custom host-to-IP mapping (host:ip).
        /// </summary>
        public virtual IReadOnlyList<string> AddHost => AddHostInternal.AsReadOnly();
        internal List<string> AddHostInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Set build-time variables.
        /// </summary>
        public virtual IReadOnlyList<string> BuildArg => BuildArgInternal.AsReadOnly();
        internal List<string> BuildArgInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Images to consider as cache sources.
        /// </summary>
        public virtual IReadOnlyList<string> CacheFrom => CacheFromInternal.AsReadOnly();
        internal List<string> CacheFromInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Optional parent cgroup for the container.
        /// </summary>
        public virtual string CgroupParent { get; internal set; }
        /// <summary>
        ///   Compress the build context using gzip.
        /// </summary>
        public virtual bool? Compress { get; internal set; }
        /// <summary>
        ///   Limit the CPU CFS (Completely Fair Scheduler) period.
        /// </summary>
        public virtual long? CpuPeriod { get; internal set; }
        /// <summary>
        ///   Limit the CPU CFS (Completely Fair Scheduler) quota.
        /// </summary>
        public virtual long? CpuQuota { get; internal set; }
        /// <summary>
        ///   CPU shares (relative weight).
        /// </summary>
        public virtual long? CpuShares { get; internal set; }
        /// <summary>
        ///   CPUs in which to allow execution (0-3, 0,1).
        /// </summary>
        public virtual string CpusetCpus { get; internal set; }
        /// <summary>
        ///   MEMs in which to allow execution (0-3, 0,1).
        /// </summary>
        public virtual string CpusetMems { get; internal set; }
        /// <summary>
        ///   Skip image verification.
        /// </summary>
        public virtual bool? DisableContentTrust { get; internal set; }
        /// <summary>
        ///   Name of the Dockerfile (Default is 'PATH/Dockerfile').
        /// </summary>
        public virtual string File { get; internal set; }
        /// <summary>
        ///   Always remove intermediate containers.
        /// </summary>
        public virtual bool? ForceRm { get; internal set; }
        /// <summary>
        ///   Write the image ID to the file.
        /// </summary>
        public virtual string Iidfile { get; internal set; }
        /// <summary>
        ///   Container isolation technology.
        /// </summary>
        public virtual string Isolation { get; internal set; }
        /// <summary>
        ///   Set metadata for an image.
        /// </summary>
        public virtual IReadOnlyList<string> Label => LabelInternal.AsReadOnly();
        internal List<string> LabelInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Memory limit.
        /// </summary>
        public virtual long? Memory { get; internal set; }
        /// <summary>
        ///   Swap limit equal to memory plus swap: '-1' to enable unlimited swap.
        /// </summary>
        public virtual long? MemorySwap { get; internal set; }
        /// <summary>
        ///   Set the networking mode for the RUN instructions during build.
        /// </summary>
        public virtual string Network { get; internal set; }
        /// <summary>
        ///   Do not use cache when building the image.
        /// </summary>
        public virtual bool? NoCache { get; internal set; }
        /// <summary>
        ///   Output destination (format: type=local,dest=path).
        /// </summary>
        public virtual string Output { get; internal set; }
        /// <summary>
        ///   Set platform if server is multi-platform capable.
        /// </summary>
        public virtual string Platform { get; internal set; }
        /// <summary>
        ///   Set type of progress output (auto, plain, tty). Use plain to show container output.
        /// </summary>
        public virtual string Progress { get; internal set; }
        /// <summary>
        ///   Always attempt to pull a newer version of the image.
        /// </summary>
        public virtual bool? Pull { get; internal set; }
        /// <summary>
        ///   Suppress the build output and print image ID on success.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        /// <summary>
        ///   Remove intermediate containers after a successful build.
        /// </summary>
        public virtual bool? Rm { get; internal set; }
        /// <summary>
        ///   Secret file to expose to the build (only if BuildKit enabled): id=mysecret,src=/local/secret.
        /// </summary>
        public virtual string Secret { get; internal set; }
        /// <summary>
        ///   Security options.
        /// </summary>
        public virtual IReadOnlyList<string> SecurityOpt => SecurityOptInternal.AsReadOnly();
        internal List<string> SecurityOptInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Size of /dev/shm.
        /// </summary>
        public virtual long? ShmSize { get; internal set; }
        /// <summary>
        ///   Squash newly built layers into a single new layer.
        /// </summary>
        public virtual bool? Squash { get; internal set; }
        /// <summary>
        ///   SSH agent socket or keys to expose to the build (only if BuildKit enabled) (format: default|&lt;id&gt;[=&lt;socket&gt;|&lt;key&gt;[,&lt;key&gt;]]).
        /// </summary>
        public virtual string Ssh { get; internal set; }
        /// <summary>
        ///   Stream attaches to server to negotiate build context.
        /// </summary>
        public virtual bool? Stream { get; internal set; }
        /// <summary>
        ///   Name and optionally a tag in the 'name:tag' format.
        /// </summary>
        public virtual IReadOnlyList<string> Tag => TagInternal.AsReadOnly();
        internal List<string> TagInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Set the target build stage to build.
        /// </summary>
        public virtual string Target { get; internal set; }
        /// <summary>
        ///   Ulimit options.
        /// </summary>
        public virtual string Ulimit { get; internal set; }
        /// <summary>
        ///   Path or url where the build context is located.
        /// </summary>
        public virtual string Path { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("builder build")
              .Add("--add-host {value}", AddHost)
              .Add("--build-arg {value}", BuildArg)
              .Add("--cache-from {value}", CacheFrom)
              .Add("--cgroup-parent {value}", CgroupParent)
              .Add("--compress", Compress)
              .Add("--cpu-period {value}", CpuPeriod)
              .Add("--cpu-quota {value}", CpuQuota)
              .Add("--cpu-shares {value}", CpuShares)
              .Add("--cpuset-cpus {value}", CpusetCpus)
              .Add("--cpuset-mems {value}", CpusetMems)
              .Add("--disable-content-trust", DisableContentTrust)
              .Add("--file {value}", File)
              .Add("--force-rm", ForceRm)
              .Add("--iidfile {value}", Iidfile)
              .Add("--isolation {value}", Isolation)
              .Add("--label {value}", Label)
              .Add("--memory {value}", Memory)
              .Add("--memory-swap {value}", MemorySwap)
              .Add("--network {value}", Network)
              .Add("--no-cache", NoCache)
              .Add("--output {value}", Output)
              .Add("--platform {value}", Platform)
              .Add("--progress {value}", Progress)
              .Add("--pull", Pull)
              .Add("--quiet", Quiet)
              .Add("--rm", Rm)
              .Add("--secret {value}", Secret)
              .Add("--security-opt {value}", SecurityOpt)
              .Add("--shm-size {value}", ShmSize)
              .Add("--squash", Squash)
              .Add("--ssh {value}", Ssh)
              .Add("--stream", Stream)
              .Add("--tag {value}", Tag)
              .Add("--target {value}", Target)
              .Add("--ulimit {value}", Ulimit)
              .Add("{value}", Path)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerStatsSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerStatsSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Show all containers (default shows just running).
        /// </summary>
        public virtual bool? All { get; internal set; }
        /// <summary>
        ///   Pretty-print images using a Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Disable streaming stats and only pull the first result.
        /// </summary>
        public virtual bool? NoStream { get; internal set; }
        /// <summary>
        ///   Do not truncate output.
        /// </summary>
        public virtual bool? NoTrunc { get; internal set; }
        /// <summary>
        ///   [CONTAINER...]
        /// </summary>
        public virtual IReadOnlyList<string> Containers => ContainersInternal.AsReadOnly();
        internal List<string> ContainersInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("stats")
              .Add("--all", All)
              .Add("--format {value}", Format)
              .Add("--no-stream", NoStream)
              .Add("--no-trunc", NoTrunc)
              .Add("{value}", Containers, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerSearchSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerSearchSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Only show automated builds.
        /// </summary>
        public virtual bool? Automated { get; internal set; }
        /// <summary>
        ///   Filter output based on conditions provided.
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Pretty-print search using a Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Max number of search results.
        /// </summary>
        public virtual int? Limit { get; internal set; }
        /// <summary>
        ///   Don't truncate output.
        /// </summary>
        public virtual bool? NoTrunc { get; internal set; }
        /// <summary>
        ///   Only displays with at least x stars.
        /// </summary>
        public virtual int? Stars { get; internal set; }
        /// <summary>
        ///   TERM
        /// </summary>
        public virtual string Term { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("search")
              .Add("--automated", Automated)
              .Add("--filter {value}", Filter)
              .Add("--format {value}", Format)
              .Add("--limit {value}", Limit)
              .Add("--no-trunc", NoTrunc)
              .Add("--stars {value}", Stars)
              .Add("{value}", Term)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerManifestSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerManifestSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   COMMAND
        /// </summary>
        public virtual string Command { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("manifest")
              .Add("{value}", Command)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerPluginPushSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerPluginPushSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Skip image signing.
        /// </summary>
        public virtual bool? DisableContentTrust { get; internal set; }
        /// <summary>
        ///   PLUGIN[:TAG]
        /// </summary>
        public virtual string Plugin { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("plugin push")
              .Add("--disable-content-trust", DisableContentTrust)
              .Add("{value}", Plugin)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerImageLoadSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerImageLoadSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Read from tar archive file, instead of STDIN.
        /// </summary>
        public virtual string Input { get; internal set; }
        /// <summary>
        ///   Suppress the load output.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("image load")
              .Add("--input {value}", Input)
              .Add("--quiet", Quiet)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerSwarmSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerSwarmSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("swarm")
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContainerRmSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContainerRmSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Force the removal of a running container (uses SIGKILL).
        /// </summary>
        public virtual bool? Force { get; internal set; }
        /// <summary>
        ///   Remove the specified link.
        /// </summary>
        public virtual bool? Link { get; internal set; }
        /// <summary>
        ///   Remove the volumes associated with the container.
        /// </summary>
        public virtual bool? Volumes { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual IReadOnlyList<string> Containers => ContainersInternal.AsReadOnly();
        internal List<string> ContainersInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("container rm")
              .Add("--force", Force)
              .Add("--link", Link)
              .Add("--volumes", Volumes)
              .Add("{value}", Containers, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContainerUpdateSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContainerUpdateSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0).
        /// </summary>
        public virtual int? BlkioWeight { get; internal set; }
        /// <summary>
        ///   Limit CPU CFS (Completely Fair Scheduler) period.
        /// </summary>
        public virtual long? CpuPeriod { get; internal set; }
        /// <summary>
        ///   Limit CPU CFS (Completely Fair Scheduler) quota.
        /// </summary>
        public virtual long? CpuQuota { get; internal set; }
        /// <summary>
        ///   Limit the CPU real-time period in microseconds.
        /// </summary>
        public virtual long? CpuRtPeriod { get; internal set; }
        /// <summary>
        ///   Limit the CPU real-time runtime in microseconds.
        /// </summary>
        public virtual long? CpuRtRuntime { get; internal set; }
        /// <summary>
        ///   CPU shares (relative weight).
        /// </summary>
        public virtual long? CpuShares { get; internal set; }
        /// <summary>
        ///   Number of CPUs.
        /// </summary>
        public virtual decimal? Cpus { get; internal set; }
        /// <summary>
        ///   CPUs in which to allow execution (0-3, 0,1).
        /// </summary>
        public virtual string CpusetCpus { get; internal set; }
        /// <summary>
        ///   MEMs in which to allow execution (0-3, 0,1).
        /// </summary>
        public virtual string CpusetMems { get; internal set; }
        /// <summary>
        ///   Kernel memory limit.
        /// </summary>
        public virtual long? KernelMemory { get; internal set; }
        /// <summary>
        ///   Memory limit.
        /// </summary>
        public virtual long? Memory { get; internal set; }
        /// <summary>
        ///   Memory soft limit.
        /// </summary>
        public virtual long? MemoryReservation { get; internal set; }
        /// <summary>
        ///   Swap limit equal to memory plus swap: '-1' to enable unlimited swap.
        /// </summary>
        public virtual long? MemorySwap { get; internal set; }
        /// <summary>
        ///   Tune container pids limit (set -1 for unlimited).
        /// </summary>
        public virtual long? PidsLimit { get; internal set; }
        /// <summary>
        ///   Restart policy to apply when a container exits.
        /// </summary>
        public virtual string Restart { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual IReadOnlyList<string> Containers => ContainersInternal.AsReadOnly();
        internal List<string> ContainersInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("container update")
              .Add("--blkio-weight {value}", BlkioWeight)
              .Add("--cpu-period {value}", CpuPeriod)
              .Add("--cpu-quota {value}", CpuQuota)
              .Add("--cpu-rt-period {value}", CpuRtPeriod)
              .Add("--cpu-rt-runtime {value}", CpuRtRuntime)
              .Add("--cpu-shares {value}", CpuShares)
              .Add("--cpus {value}", Cpus)
              .Add("--cpuset-cpus {value}", CpusetCpus)
              .Add("--cpuset-mems {value}", CpusetMems)
              .Add("--kernel-memory {value}", KernelMemory)
              .Add("--memory {value}", Memory)
              .Add("--memory-reservation {value}", MemoryReservation)
              .Add("--memory-swap {value}", MemorySwap)
              .Add("--pids-limit {value}", PidsLimit)
              .Add("--restart {value}", Restart)
              .Add("{value}", Containers, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerPluginSetSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerPluginSetSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   PLUGIN
        /// </summary>
        public virtual string Plugin { get; internal set; }
        /// <summary>
        ///   KEY=VALUE
        /// </summary>
        public virtual IReadOnlyDictionary<string, string> KeyValues => KeyValuesInternal.AsReadOnly();
        internal Dictionary<string,string> KeyValuesInternal { get; set; } = new Dictionary<string,string>(StringComparer.OrdinalIgnoreCase);
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("plugin set")
              .Add("{value}", Plugin)
              .Add("{value}", KeyValues, "{key=value}")
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerWaitSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerWaitSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual IReadOnlyList<string> Containers => ContainersInternal.AsReadOnly();
        internal List<string> ContainersInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("wait")
              .Add("{value}", Containers, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContextExportSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContextExportSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Export as a kubeconfig file.
        /// </summary>
        public virtual bool? Kubeconfig { get; internal set; }
        /// <summary>
        ///   CONTEXT
        /// </summary>
        public virtual string Context { get; internal set; }
        /// <summary>
        ///   [FILE|-]
        /// </summary>
        public virtual string File { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("context export")
              .Add("--kubeconfig", Kubeconfig)
              .Add("{value}", Context)
              .Add("{value}", File)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerManifestAnnotateSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerManifestAnnotateSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Set architecture.
        /// </summary>
        public virtual string Arch { get; internal set; }
        /// <summary>
        ///   Set operating system.
        /// </summary>
        public virtual string Os { get; internal set; }
        /// <summary>
        ///   Set operating system feature.
        /// </summary>
        public virtual IReadOnlyList<string> OsFeatures => OsFeaturesInternal.AsReadOnly();
        internal List<string> OsFeaturesInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Set architecture variant.
        /// </summary>
        public virtual string Variant { get; internal set; }
        /// <summary>
        ///   MANIFEST_LIST
        /// </summary>
        public virtual string ManifestList { get; internal set; }
        /// <summary>
        ///   MANIFEST
        /// </summary>
        public virtual string Manifest { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("manifest annotate")
              .Add("--arch {value}", Arch)
              .Add("--os {value}", Os)
              .Add("--os-features {value}", OsFeatures)
              .Add("--variant {value}", Variant)
              .Add("{value}", ManifestList)
              .Add("{value}", Manifest)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerImagePullSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerImagePullSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Download all tagged images in the repository.
        /// </summary>
        public virtual bool? AllTags { get; internal set; }
        /// <summary>
        ///   Skip image verification.
        /// </summary>
        public virtual bool? DisableContentTrust { get; internal set; }
        /// <summary>
        ///   Set platform if server is multi-platform capable.
        /// </summary>
        public virtual string Platform { get; internal set; }
        /// <summary>
        ///   Suppress verbose output.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        /// <summary>
        ///   NAME[:TAG|@DIGEST]
        /// </summary>
        public virtual string Name { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("image pull")
              .Add("--all-tags", AllTags)
              .Add("--disable-content-trust", DisableContentTrust)
              .Add("--platform {value}", Platform)
              .Add("--quiet", Quiet)
              .Add("{value}", Name)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerEventsSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerEventsSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Filter output based on conditions provided.
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Format the output using the given Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Show all events created since timestamp.
        /// </summary>
        public virtual string Since { get; internal set; }
        /// <summary>
        ///   Stream events until this timestamp.
        /// </summary>
        public virtual string Until { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("events")
              .Add("--filter {value}", Filter)
              .Add("--format {value}", Format)
              .Add("--since {value}", Since)
              .Add("--until {value}", Until)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerStackLsSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerStackLsSettings : DockerStackSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   List stacks from all Kubernetes namespaces.
        /// </summary>
        public virtual bool? AllNamespaces { get; internal set; }
        /// <summary>
        ///   Pretty-print stacks using a Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Kubernetes namespaces to use.
        /// </summary>
        public virtual IReadOnlyList<string> Namespace => NamespaceInternal.AsReadOnly();
        internal List<string> NamespaceInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("stack ls")
              .Add("--all-namespaces", AllNamespaces)
              .Add("--format {value}", Format)
              .Add("--namespace {value}", Namespace)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContainerInspectSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContainerInspectSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Format the output using the given Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Display total file sizes.
        /// </summary>
        public virtual bool? Size { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual IReadOnlyList<string> Containers => ContainersInternal.AsReadOnly();
        internal List<string> ContainersInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("container inspect")
              .Add("--format {value}", Format)
              .Add("--size", Size)
              .Add("{value}", Containers, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerKillSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerKillSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Signal to send to the container.
        /// </summary>
        public virtual string Signal { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual IReadOnlyList<string> Containers => ContainersInternal.AsReadOnly();
        internal List<string> ContainersInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("kill")
              .Add("--signal {value}", Signal)
              .Add("{value}", Containers, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerCheckpointCreateSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerCheckpointCreateSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Use a custom checkpoint storage directory.
        /// </summary>
        public virtual string CheckpointDir { get; internal set; }
        /// <summary>
        ///   Leave the container running after checkpoint.
        /// </summary>
        public virtual bool? LeaveRunning { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual string Container { get; internal set; }
        /// <summary>
        ///   CHECKPOINT
        /// </summary>
        public virtual string Checkpoint { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("checkpoint create")
              .Add("--checkpoint-dir {value}", CheckpointDir)
              .Add("--leave-running", LeaveRunning)
              .Add("{value}", Container)
              .Add("{value}", Checkpoint)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerPauseSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerPauseSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual IReadOnlyList<string> Containers => ContainersInternal.AsReadOnly();
        internal List<string> ContainersInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("pause")
              .Add("{value}", Containers, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerLogsSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerLogsSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Show extra details provided to logs.
        /// </summary>
        public virtual bool? Details { get; internal set; }
        /// <summary>
        ///   Follow log output.
        /// </summary>
        public virtual bool? Follow { get; internal set; }
        /// <summary>
        ///   Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes).
        /// </summary>
        public virtual string Since { get; internal set; }
        /// <summary>
        ///   Number of lines to show from the end of the logs.
        /// </summary>
        public virtual string Tail { get; internal set; }
        /// <summary>
        ///   Show timestamps.
        /// </summary>
        public virtual bool? Timestamps { get; internal set; }
        /// <summary>
        ///   Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes).
        /// </summary>
        public virtual string Until { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual string Container { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("logs")
              .Add("--details", Details)
              .Add("--follow", Follow)
              .Add("--since {value}", Since)
              .Add("--tail {value}", Tail)
              .Add("--timestamps", Timestamps)
              .Add("--until {value}", Until)
              .Add("{value}", Container)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContextInspectSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContextInspectSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Format the output using the given Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   [CONTEXT]
        /// </summary>
        public virtual string Context { get; internal set; }
        /// <summary>
        ///   [CONTEXT...]
        /// </summary>
        public virtual IReadOnlyList<string> Contexts => ContextsInternal.AsReadOnly();
        internal List<string> ContextsInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("context inspect")
              .Add("--format {value}", Format)
              .Add("{value}", Context)
              .Add("{value}", Contexts, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerNodePromoteSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerNodePromoteSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   NODE
        /// </summary>
        public virtual IReadOnlyList<string> Nodes => NodesInternal.AsReadOnly();
        internal List<string> NodesInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("node promote")
              .Add("{value}", Nodes, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerNodeDemoteSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerNodeDemoteSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   NODE
        /// </summary>
        public virtual IReadOnlyList<string> Nodes => NodesInternal.AsReadOnly();
        internal List<string> NodesInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("node demote")
              .Add("{value}", Nodes, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerExecSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerExecSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Detached mode: run command in the background.
        /// </summary>
        public virtual bool? Detach { get; internal set; }
        /// <summary>
        ///   Override the key sequence for detaching a container.
        /// </summary>
        public virtual string DetachKeys { get; internal set; }
        /// <summary>
        ///   Set environment variables.
        /// </summary>
        public virtual IReadOnlyList<string> Env => EnvInternal.AsReadOnly();
        internal List<string> EnvInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Keep STDIN open even if not attached.
        /// </summary>
        public virtual bool? Interactive { get; internal set; }
        /// <summary>
        ///   Give extended privileges to the command.
        /// </summary>
        public virtual bool? Privileged { get; internal set; }
        /// <summary>
        ///   Allocate a pseudo-TTY.
        /// </summary>
        public virtual bool? Tty { get; internal set; }
        /// <summary>
        ///   Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).
        /// </summary>
        public virtual string User { get; internal set; }
        /// <summary>
        ///   Working directory inside the container.
        /// </summary>
        public virtual string Workdir { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual string Container { get; internal set; }
        /// <summary>
        ///   COMMAND
        /// </summary>
        public virtual string Command { get; internal set; }
        /// <summary>
        ///   [ARG...]
        /// </summary>
        public virtual IReadOnlyList<string> Args => ArgsInternal.AsReadOnly();
        internal List<string> ArgsInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("exec")
              .Add("--detach", Detach)
              .Add("--detach-keys {value}", DetachKeys)
              .Add("--env {value}", Env)
              .Add("--interactive", Interactive)
              .Add("--privileged", Privileged)
              .Add("--tty", Tty)
              .Add("--user {value}", User)
              .Add("--workdir {value}", Workdir)
              .Add("{value}", Container)
              .Add("{value}", Command)
              .Add("{value}", Args, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerImageRmSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerImageRmSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Force removal of the image.
        /// </summary>
        public virtual bool? Force { get; internal set; }
        /// <summary>
        ///   Do not delete untagged parents.
        /// </summary>
        public virtual bool? NoPrune { get; internal set; }
        /// <summary>
        ///   IMAGE
        /// </summary>
        public virtual IReadOnlyList<string> Images => ImagesInternal.AsReadOnly();
        internal List<string> ImagesInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("image rm")
              .Add("--force", Force)
              .Add("--no-prune", NoPrune)
              .Add("{value}", Images, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerImageSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerImageSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("image")
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContextSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContextSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("context")
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerVolumeSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerVolumeSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   COMMAND
        /// </summary>
        public virtual string Command { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("volume")
              .Add("{value}", Command)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerContainerStartSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerContainerStartSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Attach STDOUT/STDERR and forward signals.
        /// </summary>
        public virtual bool? Attach { get; internal set; }
        /// <summary>
        ///   Restore from this checkpoint.
        /// </summary>
        public virtual string Checkpoint { get; internal set; }
        /// <summary>
        ///   Use a custom checkpoint storage directory.
        /// </summary>
        public virtual string CheckpointDir { get; internal set; }
        /// <summary>
        ///   Override the key sequence for detaching a container.
        /// </summary>
        public virtual string DetachKeys { get; internal set; }
        /// <summary>
        ///   Attach container's STDIN.
        /// </summary>
        public virtual bool? Interactive { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual IReadOnlyList<string> Containers => ContainersInternal.AsReadOnly();
        internal List<string> ContainersInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("container start")
              .Add("--attach", Attach)
              .Add("--checkpoint {value}", Checkpoint)
              .Add("--checkpoint-dir {value}", CheckpointDir)
              .Add("--detach-keys {value}", DetachKeys)
              .Add("--interactive", Interactive)
              .Add("{value}", Containers, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerPluginInspectSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerPluginInspectSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Format the output using the given Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   PLUGIN
        /// </summary>
        public virtual IReadOnlyList<string> Plugins => PluginsInternal.AsReadOnly();
        internal List<string> PluginsInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("plugin inspect")
              .Add("--format {value}", Format)
              .Add("{value}", Plugins, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerLogoutSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerLogoutSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   [SERVER]
        /// </summary>
        public virtual string Server { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("logout")
              .Add("{value}", Server)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerNetworkSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerNetworkSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("network")
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerImageLsSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerImageLsSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Show all images (default hides intermediate images).
        /// </summary>
        public virtual bool? All { get; internal set; }
        /// <summary>
        ///   Show digests.
        /// </summary>
        public virtual bool? Digests { get; internal set; }
        /// <summary>
        ///   Filter output based on conditions provided.
        /// </summary>
        public virtual string Filter { get; internal set; }
        /// <summary>
        ///   Pretty-print images using a Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Don't truncate output.
        /// </summary>
        public virtual bool? NoTrunc { get; internal set; }
        /// <summary>
        ///   Only show numeric IDs.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        /// <summary>
        ///   [REPOSITORY[:TAG]]
        /// </summary>
        public virtual string Repository { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("image ls")
              .Add("--all", All)
              .Add("--digests", Digests)
              .Add("--filter {value}", Filter)
              .Add("--format {value}", Format)
              .Add("--no-trunc", NoTrunc)
              .Add("--quiet", Quiet)
              .Add("{value}", Repository)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerSystemDfSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerSystemDfSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Pretty-print images using a Go template.
        /// </summary>
        public virtual string Format { get; internal set; }
        /// <summary>
        ///   Show detailed information on space usage.
        /// </summary>
        public virtual bool? Verbose { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("system df")
              .Add("--format {value}", Format)
              .Add("--verbose", Verbose)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerServiceRollbackSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerServiceRollbackSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Exit immediately instead of waiting for the service to converge.
        /// </summary>
        public virtual bool? Detach { get; internal set; }
        /// <summary>
        ///   Suppress progress output.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        /// <summary>
        ///   SERVICE
        /// </summary>
        public virtual string Service { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("service rollback")
              .Add("--detach", Detach)
              .Add("--quiet", Quiet)
              .Add("{value}", Service)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerRestartSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerRestartSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Seconds to wait for stop before killing the container.
        /// </summary>
        public virtual int? Time { get; internal set; }
        /// <summary>
        ///   CONTAINER
        /// </summary>
        public virtual IReadOnlyList<string> Containers => ContainersInternal.AsReadOnly();
        internal List<string> ContainersInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("restart")
              .Add("--time {value}", Time)
              .Add("{value}", Containers, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerTrustSignerRemoveSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerTrustSignerRemoveSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Do not prompt for confirmation before removing the most recent signer.
        /// </summary>
        public virtual bool? Force { get; internal set; }
        /// <summary>
        ///   NAME
        /// </summary>
        public virtual string Name { get; internal set; }
        /// <summary>
        ///   REPOSITORY
        /// </summary>
        public virtual IReadOnlyList<string> Repositories => RepositoriesInternal.AsReadOnly();
        internal List<string> RepositoriesInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("trust signer remove")
              .Add("--force", Force)
              .Add("{value}", Name)
              .Add("{value}", Repositories, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerStackRmSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerStackRmSettings : DockerStackSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Kubernetes namespace to use.
        /// </summary>
        public virtual string Namespace { get; internal set; }
        /// <summary>
        ///   STACK
        /// </summary>
        public virtual IReadOnlyList<string> Stacks => StacksInternal.AsReadOnly();
        internal List<string> StacksInternal { get; set; } = new List<string>();
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("stack rm")
              .Add("--namespace {value}", Namespace)
              .Add("{value}", Stacks, separator: ' ')
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerBuildSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class DockerBuildSettings : DockerSettings
    {
        /// <summary>
        ///   Path to the Docker executable.
        /// </summary>
        public override string ToolPath => base.ToolPath ?? DockerTasks.DockerPath;
        public override Action<OutputType, string> CustomLogger => DockerTasks.DockerLogger;
        /// <summary>
        ///   Add a custom host-to-IP mapping (host:ip).
        /// </summary>
        public virtual IReadOnlyList<string> AddHost => AddHostInternal.AsReadOnly();
        internal List<string> AddHostInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Set build-time variables.
        /// </summary>
        public virtual IReadOnlyList<string> BuildArg => BuildArgInternal.AsReadOnly();
        internal List<string> BuildArgInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Images to consider as cache sources.
        /// </summary>
        public virtual IReadOnlyList<string> CacheFrom => CacheFromInternal.AsReadOnly();
        internal List<string> CacheFromInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Optional parent cgroup for the container.
        /// </summary>
        public virtual string CgroupParent { get; internal set; }
        /// <summary>
        ///   Compress the build context using gzip.
        /// </summary>
        public virtual bool? Compress { get; internal set; }
        /// <summary>
        ///   Limit the CPU CFS (Completely Fair Scheduler) period.
        /// </summary>
        public virtual long? CpuPeriod { get; internal set; }
        /// <summary>
        ///   Limit the CPU CFS (Completely Fair Scheduler) quota.
        /// </summary>
        public virtual long? CpuQuota { get; internal set; }
        /// <summary>
        ///   CPU shares (relative weight).
        /// </summary>
        public virtual long? CpuShares { get; internal set; }
        /// <summary>
        ///   CPUs in which to allow execution (0-3, 0,1).
        /// </summary>
        public virtual string CpusetCpus { get; internal set; }
        /// <summary>
        ///   MEMs in which to allow execution (0-3, 0,1).
        /// </summary>
        public virtual string CpusetMems { get; internal set; }
        /// <summary>
        ///   Skip image verification.
        /// </summary>
        public virtual bool? DisableContentTrust { get; internal set; }
        /// <summary>
        ///   Name of the Dockerfile (Default is 'PATH/Dockerfile').
        /// </summary>
        public virtual string File { get; internal set; }
        /// <summary>
        ///   Always remove intermediate containers.
        /// </summary>
        public virtual bool? ForceRm { get; internal set; }
        /// <summary>
        ///   Write the image ID to the file.
        /// </summary>
        public virtual string Iidfile { get; internal set; }
        /// <summary>
        ///   Container isolation technology.
        /// </summary>
        public virtual string Isolation { get; internal set; }
        /// <summary>
        ///   Set metadata for an image.
        /// </summary>
        public virtual IReadOnlyList<string> Label => LabelInternal.AsReadOnly();
        internal List<string> LabelInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Memory limit.
        /// </summary>
        public virtual long? Memory { get; internal set; }
        /// <summary>
        ///   Swap limit equal to memory plus swap: '-1' to enable unlimited swap.
        /// </summary>
        public virtual long? MemorySwap { get; internal set; }
        /// <summary>
        ///   Set the networking mode for the RUN instructions during build.
        /// </summary>
        public virtual string Network { get; internal set; }
        /// <summary>
        ///   Do not use cache when building the image.
        /// </summary>
        public virtual bool? NoCache { get; internal set; }
        /// <summary>
        ///   Output destination (format: type=local,dest=path).
        /// </summary>
        public virtual string Output { get; internal set; }
        /// <summary>
        ///   Set platform if server is multi-platform capable.
        /// </summary>
        public virtual string Platform { get; internal set; }
        /// <summary>
        ///   Set type of progress output (auto, plain, tty). Use plain to show container output.
        /// </summary>
        public virtual string Progress { get; internal set; }
        /// <summary>
        ///   Always attempt to pull a newer version of the image.
        /// </summary>
        public virtual bool? Pull { get; internal set; }
        /// <summary>
        ///   Suppress the build output and print image ID on success.
        /// </summary>
        public virtual bool? Quiet { get; internal set; }
        /// <summary>
        ///   Remove intermediate containers after a successful build.
        /// </summary>
        public virtual bool? Rm { get; internal set; }
        /// <summary>
        ///   Secret file to expose to the build (only if BuildKit enabled): id=mysecret,src=/local/secret.
        /// </summary>
        public virtual string Secret { get; internal set; }
        /// <summary>
        ///   Security options.
        /// </summary>
        public virtual IReadOnlyList<string> SecurityOpt => SecurityOptInternal.AsReadOnly();
        internal List<string> SecurityOptInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Size of /dev/shm.
        /// </summary>
        public virtual long? ShmSize { get; internal set; }
        /// <summary>
        ///   Squash newly built layers into a single new layer.
        /// </summary>
        public virtual bool? Squash { get; internal set; }
        /// <summary>
        ///   SSH agent socket or keys to expose to the build (only if BuildKit enabled) (format: default|&lt;id&gt;[=&lt;socket&gt;|&lt;key&gt;[,&lt;key&gt;]]).
        /// </summary>
        public virtual string Ssh { get; internal set; }
        /// <summary>
        ///   Stream attaches to server to negotiate build context.
        /// </summary>
        public virtual bool? Stream { get; internal set; }
        /// <summary>
        ///   Name and optionally a tag in the 'name:tag' format.
        /// </summary>
        public virtual IReadOnlyList<string> Tag => TagInternal.AsReadOnly();
        internal List<string> TagInternal { get; set; } = new List<string>();
        /// <summary>
        ///   Set the target build stage to build.
        /// </summary>
        public virtual string Target { get; internal set; }
        /// <summary>
        ///   Ulimit options.
        /// </summary>
        public virtual string Ulimit { get; internal set; }
        /// <summary>
        ///   Path or url where the build context is located.
        /// </summary>
        public virtual string Path { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("build")
              .Add("--add-host {value}", AddHost)
              .Add("--build-arg {value}", BuildArg)
              .Add("--cache-from {value}", CacheFrom)
              .Add("--cgroup-parent {value}", CgroupParent)
              .Add("--compress", Compress)
              .Add("--cpu-period {value}", CpuPeriod)
              .Add("--cpu-quota {value}", CpuQuota)
              .Add("--cpu-shares {value}", CpuShares)
              .Add("--cpuset-cpus {value}", CpusetCpus)
              .Add("--cpuset-mems {value}", CpusetMems)
              .Add("--disable-content-trust", DisableContentTrust)
              .Add("--file {value}", File)
              .Add("--force-rm", ForceRm)
              .Add("--iidfile {value}", Iidfile)
              .Add("--isolation {value}", Isolation)
              .Add("--label {value}", Label)
              .Add("--memory {value}", Memory)
              .Add("--memory-swap {value}", MemorySwap)
              .Add("--network {value}", Network)
              .Add("--no-cache", NoCache)
              .Add("--output {value}", Output)
              .Add("--platform {value}", Platform)
              .Add("--progress {value}", Progress)
              .Add("--pull", Pull)
              .Add("--quiet", Quiet)
              .Add("--rm", Rm)
              .Add("--secret {value}", Secret)
              .Add("--security-opt {value}", SecurityOpt)
              .Add("--shm-size {value}", ShmSize)
              .Add("--squash", Squash)
              .Add("--ssh {value}", Ssh)
              .Add("--stream", Stream)
              .Add("--tag {value}", Tag)
              .Add("--target {value}", Target)
              .Add("--ulimit {value}", Ulimit)
              .Add("{value}", Path)
              .Add("{value}", GetCliSettings(), customValue: true);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region CliSettings
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    [Serializable]
    public partial class CliSettings : ToolSettings
    {
        /// <summary>
        ///   Set the logging level.
        /// </summary>
        public virtual LogLevel LogLevel { get; internal set; }
        /// <summary>
        ///   Location of client config files (default ~/.docker).
        /// </summary>
        public virtual string Config { get; internal set; }
        /// <summary>
        ///   Enable debug mode.
        /// </summary>
        public virtual bool? Debug { get; internal set; }
        /// <summary>
        ///   Use TLS; implied by --tlsverify.
        /// </summary>
        public virtual bool? TLS { get; internal set; }
        /// <summary>
        ///   Use TLS and verify the remote.
        /// </summary>
        public virtual bool? TLSVerify { get; internal set; }
        /// <summary>
        ///   Trust certs signed only by this CA (default ~/.docker/ca.pem).
        /// </summary>
        public virtual string TLSCaCert { get; internal set; }
        /// <summary>
        ///   Path to TLS certificate file (default ~/.docker/cert.pem).
        /// </summary>
        public virtual string TLSCert { get; internal set; }
        /// <summary>
        ///   Path to TLS key file (default ~/.docker/key.pem).
        /// </summary>
        public virtual string TLSKey { get; internal set; }
        protected override Arguments ConfigureArguments(Arguments arguments)
        {
            arguments
              .Add("--log-level {value}", LogLevel)
              .Add("--config {value}", Config)
              .Add("--debug", Debug)
              .Add("--tls", TLS)
              .Add("--tlsverify", TLSVerify)
              .Add("--tlscacert {value}", TLSCaCert)
              .Add("--tlscert {value}", TLSCert)
              .Add("--tlskey {value}", TLSKey);
            return base.ConfigureArguments(arguments);
        }
    }
    #endregion
    #region DockerConfigRmSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerConfigRmSettingsExtensions
    {
        #region Configs
        /// <summary>
        ///   <p><em>Sets <see cref="DockerConfigRmSettings.Configs"/> to a new list</em></p>
        ///   <p>CONFIG</p>
        /// </summary>
        [Pure]
        public static DockerConfigRmSettings SetConfigs(this DockerConfigRmSettings toolSettings, params string[] configs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigsInternal = configs.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerConfigRmSettings.Configs"/> to a new list</em></p>
        ///   <p>CONFIG</p>
        /// </summary>
        [Pure]
        public static DockerConfigRmSettings SetConfigs(this DockerConfigRmSettings toolSettings, IEnumerable<string> configs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigsInternal = configs.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerConfigRmSettings.Configs"/></em></p>
        ///   <p>CONFIG</p>
        /// </summary>
        [Pure]
        public static DockerConfigRmSettings AddConfigs(this DockerConfigRmSettings toolSettings, params string[] configs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigsInternal.AddRange(configs);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerConfigRmSettings.Configs"/></em></p>
        ///   <p>CONFIG</p>
        /// </summary>
        [Pure]
        public static DockerConfigRmSettings AddConfigs(this DockerConfigRmSettings toolSettings, IEnumerable<string> configs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigsInternal.AddRange(configs);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerConfigRmSettings.Configs"/></em></p>
        ///   <p>CONFIG</p>
        /// </summary>
        [Pure]
        public static DockerConfigRmSettings ClearConfigs(this DockerConfigRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerConfigRmSettings.Configs"/></em></p>
        ///   <p>CONFIG</p>
        /// </summary>
        [Pure]
        public static DockerConfigRmSettings RemoveConfigs(this DockerConfigRmSettings toolSettings, params string[] configs)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(configs);
            toolSettings.ConfigsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerConfigRmSettings.Configs"/></em></p>
        ///   <p>CONFIG</p>
        /// </summary>
        [Pure]
        public static DockerConfigRmSettings RemoveConfigs(this DockerConfigRmSettings toolSettings, IEnumerable<string> configs)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(configs);
            toolSettings.ConfigsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerLoadSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerLoadSettingsExtensions
    {
        #region Input
        /// <summary>
        ///   <p><em>Sets <see cref="DockerLoadSettings.Input"/></em></p>
        ///   <p>Read from tar archive file, instead of STDIN.</p>
        /// </summary>
        [Pure]
        public static DockerLoadSettings SetInput(this DockerLoadSettings toolSettings, string input)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Input = input;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerLoadSettings.Input"/></em></p>
        ///   <p>Read from tar archive file, instead of STDIN.</p>
        /// </summary>
        [Pure]
        public static DockerLoadSettings ResetInput(this DockerLoadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Input = null;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerLoadSettings.Quiet"/></em></p>
        ///   <p>Suppress the load output.</p>
        /// </summary>
        [Pure]
        public static DockerLoadSettings SetQuiet(this DockerLoadSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerLoadSettings.Quiet"/></em></p>
        ///   <p>Suppress the load output.</p>
        /// </summary>
        [Pure]
        public static DockerLoadSettings ResetQuiet(this DockerLoadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerLoadSettings.Quiet"/></em></p>
        ///   <p>Suppress the load output.</p>
        /// </summary>
        [Pure]
        public static DockerLoadSettings EnableQuiet(this DockerLoadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerLoadSettings.Quiet"/></em></p>
        ///   <p>Suppress the load output.</p>
        /// </summary>
        [Pure]
        public static DockerLoadSettings DisableQuiet(this DockerLoadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerLoadSettings.Quiet"/></em></p>
        ///   <p>Suppress the load output.</p>
        /// </summary>
        [Pure]
        public static DockerLoadSettings ToggleQuiet(this DockerLoadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContainerPruneSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContainerPruneSettingsExtensions
    {
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerPruneSettings.Filter"/></em></p>
        ///   <p>Provide filter values (e.g. 'until=&lt;timestamp&gt;').</p>
        /// </summary>
        [Pure]
        public static DockerContainerPruneSettings SetFilter(this DockerContainerPruneSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerPruneSettings.Filter"/></em></p>
        ///   <p>Provide filter values (e.g. 'until=&lt;timestamp&gt;').</p>
        /// </summary>
        [Pure]
        public static DockerContainerPruneSettings ResetFilter(this DockerContainerPruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Force
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerPruneSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerContainerPruneSettings SetForce(this DockerContainerPruneSettings toolSettings, bool? force)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = force;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerPruneSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerContainerPruneSettings ResetForce(this DockerContainerPruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerPruneSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerContainerPruneSettings EnableForce(this DockerContainerPruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerPruneSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerContainerPruneSettings DisableForce(this DockerContainerPruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerPruneSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerContainerPruneSettings ToggleForce(this DockerContainerPruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = !toolSettings.Force;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerTrustSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerTrustSettingsExtensions
    {
    }
    #endregion
    #region DockerStackSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerStackSettingsExtensions
    {
        #region Kubeconfig
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackSettings.Kubeconfig"/></em></p>
        ///   <p>Kubernetes config file.</p>
        /// </summary>
        [Pure]
        public static DockerStackSettings SetKubeconfig(this DockerStackSettings toolSettings, string kubeconfig)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Kubeconfig = kubeconfig;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStackSettings.Kubeconfig"/></em></p>
        ///   <p>Kubernetes config file.</p>
        /// </summary>
        [Pure]
        public static DockerStackSettings ResetKubeconfig(this DockerStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Kubeconfig = null;
            return toolSettings;
        }
        #endregion
        #region Orchestrator
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackSettings.Orchestrator"/></em></p>
        ///   <p>Orchestrator to use (swarm|kubernetes|all).</p>
        /// </summary>
        [Pure]
        public static DockerStackSettings SetOrchestrator(this DockerStackSettings toolSettings, string orchestrator)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Orchestrator = orchestrator;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStackSettings.Orchestrator"/></em></p>
        ///   <p>Orchestrator to use (swarm|kubernetes|all).</p>
        /// </summary>
        [Pure]
        public static DockerStackSettings ResetOrchestrator(this DockerStackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Orchestrator = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerTopSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerTopSettingsExtensions
    {
        #region Container
        /// <summary>
        ///   <p><em>Sets <see cref="DockerTopSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerTopSettings SetContainer(this DockerTopSettings toolSettings, string container)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = container;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerTopSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerTopSettings ResetContainer(this DockerTopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = null;
            return toolSettings;
        }
        #endregion
        #region Options
        /// <summary>
        ///   <p><em>Sets <see cref="DockerTopSettings.Options"/></em></p>
        ///   <p>OPTIONS]</p>
        /// </summary>
        [Pure]
        public static DockerTopSettings SetOptions(this DockerTopSettings toolSettings, string options)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Options = options;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerTopSettings.Options"/></em></p>
        ///   <p>OPTIONS]</p>
        /// </summary>
        [Pure]
        public static DockerTopSettings ResetOptions(this DockerTopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Options = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerPullSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerPullSettingsExtensions
    {
        #region AllTags
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPullSettings.AllTags"/></em></p>
        ///   <p>Download all tagged images in the repository.</p>
        /// </summary>
        [Pure]
        public static DockerPullSettings SetAllTags(this DockerPullSettings toolSettings, bool? allTags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllTags = allTags;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPullSettings.AllTags"/></em></p>
        ///   <p>Download all tagged images in the repository.</p>
        /// </summary>
        [Pure]
        public static DockerPullSettings ResetAllTags(this DockerPullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllTags = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerPullSettings.AllTags"/></em></p>
        ///   <p>Download all tagged images in the repository.</p>
        /// </summary>
        [Pure]
        public static DockerPullSettings EnableAllTags(this DockerPullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllTags = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerPullSettings.AllTags"/></em></p>
        ///   <p>Download all tagged images in the repository.</p>
        /// </summary>
        [Pure]
        public static DockerPullSettings DisableAllTags(this DockerPullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllTags = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerPullSettings.AllTags"/></em></p>
        ///   <p>Download all tagged images in the repository.</p>
        /// </summary>
        [Pure]
        public static DockerPullSettings ToggleAllTags(this DockerPullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllTags = !toolSettings.AllTags;
            return toolSettings;
        }
        #endregion
        #region DisableContentTrust
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPullSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerPullSettings SetDisableContentTrust(this DockerPullSettings toolSettings, bool? disableContentTrust)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = disableContentTrust;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPullSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerPullSettings ResetDisableContentTrust(this DockerPullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerPullSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerPullSettings EnableDisableContentTrust(this DockerPullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerPullSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerPullSettings DisableDisableContentTrust(this DockerPullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerPullSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerPullSettings ToggleDisableContentTrust(this DockerPullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = !toolSettings.DisableContentTrust;
            return toolSettings;
        }
        #endregion
        #region Platform
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPullSettings.Platform"/></em></p>
        ///   <p>Set platform if server is multi-platform capable.</p>
        /// </summary>
        [Pure]
        public static DockerPullSettings SetPlatform(this DockerPullSettings toolSettings, string platform)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = platform;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPullSettings.Platform"/></em></p>
        ///   <p>Set platform if server is multi-platform capable.</p>
        /// </summary>
        [Pure]
        public static DockerPullSettings ResetPlatform(this DockerPullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = null;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPullSettings.Quiet"/></em></p>
        ///   <p>Suppress verbose output.</p>
        /// </summary>
        [Pure]
        public static DockerPullSettings SetQuiet(this DockerPullSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPullSettings.Quiet"/></em></p>
        ///   <p>Suppress verbose output.</p>
        /// </summary>
        [Pure]
        public static DockerPullSettings ResetQuiet(this DockerPullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerPullSettings.Quiet"/></em></p>
        ///   <p>Suppress verbose output.</p>
        /// </summary>
        [Pure]
        public static DockerPullSettings EnableQuiet(this DockerPullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerPullSettings.Quiet"/></em></p>
        ///   <p>Suppress verbose output.</p>
        /// </summary>
        [Pure]
        public static DockerPullSettings DisableQuiet(this DockerPullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerPullSettings.Quiet"/></em></p>
        ///   <p>Suppress verbose output.</p>
        /// </summary>
        [Pure]
        public static DockerPullSettings ToggleQuiet(this DockerPullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPullSettings.Name"/></em></p>
        ///   <p>NAME[:TAG|@DIGEST]</p>
        /// </summary>
        [Pure]
        public static DockerPullSettings SetName(this DockerPullSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPullSettings.Name"/></em></p>
        ///   <p>NAME[:TAG|@DIGEST]</p>
        /// </summary>
        [Pure]
        public static DockerPullSettings ResetName(this DockerPullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerTrustSignSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerTrustSignSettingsExtensions
    {
    }
    #endregion
    #region DockerCheckpointSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerCheckpointSettingsExtensions
    {
    }
    #endregion
    #region DockerTrustSignerSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerTrustSignerSettingsExtensions
    {
    }
    #endregion
    #region DockerConfigInspectSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerConfigInspectSettingsExtensions
    {
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerConfigInspectSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerConfigInspectSettings SetFormat(this DockerConfigInspectSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerConfigInspectSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerConfigInspectSettings ResetFormat(this DockerConfigInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Pretty
        /// <summary>
        ///   <p><em>Sets <see cref="DockerConfigInspectSettings.Pretty"/></em></p>
        ///   <p>Print the information in a human friendly format.</p>
        /// </summary>
        [Pure]
        public static DockerConfigInspectSettings SetPretty(this DockerConfigInspectSettings toolSettings, bool? pretty)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pretty = pretty;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerConfigInspectSettings.Pretty"/></em></p>
        ///   <p>Print the information in a human friendly format.</p>
        /// </summary>
        [Pure]
        public static DockerConfigInspectSettings ResetPretty(this DockerConfigInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pretty = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerConfigInspectSettings.Pretty"/></em></p>
        ///   <p>Print the information in a human friendly format.</p>
        /// </summary>
        [Pure]
        public static DockerConfigInspectSettings EnablePretty(this DockerConfigInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pretty = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerConfigInspectSettings.Pretty"/></em></p>
        ///   <p>Print the information in a human friendly format.</p>
        /// </summary>
        [Pure]
        public static DockerConfigInspectSettings DisablePretty(this DockerConfigInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pretty = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerConfigInspectSettings.Pretty"/></em></p>
        ///   <p>Print the information in a human friendly format.</p>
        /// </summary>
        [Pure]
        public static DockerConfigInspectSettings TogglePretty(this DockerConfigInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pretty = !toolSettings.Pretty;
            return toolSettings;
        }
        #endregion
        #region Configs
        /// <summary>
        ///   <p><em>Sets <see cref="DockerConfigInspectSettings.Configs"/> to a new list</em></p>
        ///   <p>CONFIG</p>
        /// </summary>
        [Pure]
        public static DockerConfigInspectSettings SetConfigs(this DockerConfigInspectSettings toolSettings, params string[] configs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigsInternal = configs.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerConfigInspectSettings.Configs"/> to a new list</em></p>
        ///   <p>CONFIG</p>
        /// </summary>
        [Pure]
        public static DockerConfigInspectSettings SetConfigs(this DockerConfigInspectSettings toolSettings, IEnumerable<string> configs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigsInternal = configs.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerConfigInspectSettings.Configs"/></em></p>
        ///   <p>CONFIG</p>
        /// </summary>
        [Pure]
        public static DockerConfigInspectSettings AddConfigs(this DockerConfigInspectSettings toolSettings, params string[] configs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigsInternal.AddRange(configs);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerConfigInspectSettings.Configs"/></em></p>
        ///   <p>CONFIG</p>
        /// </summary>
        [Pure]
        public static DockerConfigInspectSettings AddConfigs(this DockerConfigInspectSettings toolSettings, IEnumerable<string> configs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigsInternal.AddRange(configs);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerConfigInspectSettings.Configs"/></em></p>
        ///   <p>CONFIG</p>
        /// </summary>
        [Pure]
        public static DockerConfigInspectSettings ClearConfigs(this DockerConfigInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerConfigInspectSettings.Configs"/></em></p>
        ///   <p>CONFIG</p>
        /// </summary>
        [Pure]
        public static DockerConfigInspectSettings RemoveConfigs(this DockerConfigInspectSettings toolSettings, params string[] configs)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(configs);
            toolSettings.ConfigsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerConfigInspectSettings.Configs"/></em></p>
        ///   <p>CONFIG</p>
        /// </summary>
        [Pure]
        public static DockerConfigInspectSettings RemoveConfigs(this DockerConfigInspectSettings toolSettings, IEnumerable<string> configs)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(configs);
            toolSettings.ConfigsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerServiceSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerServiceSettingsExtensions
    {
    }
    #endregion
    #region DockerTrustKeyGenerateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerTrustKeyGenerateSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="DockerTrustKeyGenerateSettings.Name"/></em></p>
        ///   <p>NAME</p>
        /// </summary>
        [Pure]
        public static DockerTrustKeyGenerateSettings SetName(this DockerTrustKeyGenerateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerTrustKeyGenerateSettings.Name"/></em></p>
        ///   <p>NAME</p>
        /// </summary>
        [Pure]
        public static DockerTrustKeyGenerateSettings ResetName(this DockerTrustKeyGenerateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerSystemSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerSystemSettingsExtensions
    {
    }
    #endregion
    #region DockerConfigLsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerConfigLsSettingsExtensions
    {
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="DockerConfigLsSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerConfigLsSettings SetFilter(this DockerConfigLsSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerConfigLsSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerConfigLsSettings ResetFilter(this DockerConfigLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerConfigLsSettings.Format"/></em></p>
        ///   <p>Pretty-print configs using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerConfigLsSettings SetFormat(this DockerConfigLsSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerConfigLsSettings.Format"/></em></p>
        ///   <p>Pretty-print configs using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerConfigLsSettings ResetFormat(this DockerConfigLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerConfigLsSettings.Quiet"/></em></p>
        ///   <p>Only display IDs.</p>
        /// </summary>
        [Pure]
        public static DockerConfigLsSettings SetQuiet(this DockerConfigLsSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerConfigLsSettings.Quiet"/></em></p>
        ///   <p>Only display IDs.</p>
        /// </summary>
        [Pure]
        public static DockerConfigLsSettings ResetQuiet(this DockerConfigLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerConfigLsSettings.Quiet"/></em></p>
        ///   <p>Only display IDs.</p>
        /// </summary>
        [Pure]
        public static DockerConfigLsSettings EnableQuiet(this DockerConfigLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerConfigLsSettings.Quiet"/></em></p>
        ///   <p>Only display IDs.</p>
        /// </summary>
        [Pure]
        public static DockerConfigLsSettings DisableQuiet(this DockerConfigLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerConfigLsSettings.Quiet"/></em></p>
        ///   <p>Only display IDs.</p>
        /// </summary>
        [Pure]
        public static DockerConfigLsSettings ToggleQuiet(this DockerConfigLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContextUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContextUpdateSettingsExtensions
    {
        #region DefaultStackOrchestrator
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContextUpdateSettings.DefaultStackOrchestrator"/></em></p>
        ///   <p>Default orchestrator for stack operations to use with this context (swarm|kubernetes|all).</p>
        /// </summary>
        [Pure]
        public static DockerContextUpdateSettings SetDefaultStackOrchestrator(this DockerContextUpdateSettings toolSettings, string defaultStackOrchestrator)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultStackOrchestrator = defaultStackOrchestrator;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContextUpdateSettings.DefaultStackOrchestrator"/></em></p>
        ///   <p>Default orchestrator for stack operations to use with this context (swarm|kubernetes|all).</p>
        /// </summary>
        [Pure]
        public static DockerContextUpdateSettings ResetDefaultStackOrchestrator(this DockerContextUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultStackOrchestrator = null;
            return toolSettings;
        }
        #endregion
        #region Description
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContextUpdateSettings.Description"/></em></p>
        ///   <p>Description of the context.</p>
        /// </summary>
        [Pure]
        public static DockerContextUpdateSettings SetDescription(this DockerContextUpdateSettings toolSettings, string description)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = description;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContextUpdateSettings.Description"/></em></p>
        ///   <p>Description of the context.</p>
        /// </summary>
        [Pure]
        public static DockerContextUpdateSettings ResetDescription(this DockerContextUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = null;
            return toolSettings;
        }
        #endregion
        #region Docker
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContextUpdateSettings.Docker"/></em></p>
        ///   <p>set the docker endpoint.</p>
        /// </summary>
        [Pure]
        public static DockerContextUpdateSettings SetDocker(this DockerContextUpdateSettings toolSettings, string docker)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Docker = docker;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContextUpdateSettings.Docker"/></em></p>
        ///   <p>set the docker endpoint.</p>
        /// </summary>
        [Pure]
        public static DockerContextUpdateSettings ResetDocker(this DockerContextUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Docker = null;
            return toolSettings;
        }
        #endregion
        #region Kubernetes
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContextUpdateSettings.Kubernetes"/></em></p>
        ///   <p>set the kubernetes endpoint.</p>
        /// </summary>
        [Pure]
        public static DockerContextUpdateSettings SetKubernetes(this DockerContextUpdateSettings toolSettings, string kubernetes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Kubernetes = kubernetes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContextUpdateSettings.Kubernetes"/></em></p>
        ///   <p>set the kubernetes endpoint.</p>
        /// </summary>
        [Pure]
        public static DockerContextUpdateSettings ResetKubernetes(this DockerContextUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Kubernetes = null;
            return toolSettings;
        }
        #endregion
        #region Context
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContextUpdateSettings.Context"/></em></p>
        ///   <p>CONTEXT</p>
        /// </summary>
        [Pure]
        public static DockerContextUpdateSettings SetContext(this DockerContextUpdateSettings toolSettings, string context)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Context = context;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContextUpdateSettings.Context"/></em></p>
        ///   <p>CONTEXT</p>
        /// </summary>
        [Pure]
        public static DockerContextUpdateSettings ResetContext(this DockerContextUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Context = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerStackServicesSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerStackServicesSettingsExtensions
    {
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackServicesSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerStackServicesSettings SetFilter(this DockerStackServicesSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStackServicesSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerStackServicesSettings ResetFilter(this DockerStackServicesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackServicesSettings.Format"/></em></p>
        ///   <p>Pretty-print services using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerStackServicesSettings SetFormat(this DockerStackServicesSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStackServicesSettings.Format"/></em></p>
        ///   <p>Pretty-print services using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerStackServicesSettings ResetFormat(this DockerStackServicesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Namespace
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackServicesSettings.Namespace"/></em></p>
        ///   <p>Kubernetes namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerStackServicesSettings SetNamespace(this DockerStackServicesSettings toolSettings, string @namespace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Namespace = @namespace;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStackServicesSettings.Namespace"/></em></p>
        ///   <p>Kubernetes namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerStackServicesSettings ResetNamespace(this DockerStackServicesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Namespace = null;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackServicesSettings.Quiet"/></em></p>
        ///   <p>Only display IDs.</p>
        /// </summary>
        [Pure]
        public static DockerStackServicesSettings SetQuiet(this DockerStackServicesSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStackServicesSettings.Quiet"/></em></p>
        ///   <p>Only display IDs.</p>
        /// </summary>
        [Pure]
        public static DockerStackServicesSettings ResetQuiet(this DockerStackServicesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerStackServicesSettings.Quiet"/></em></p>
        ///   <p>Only display IDs.</p>
        /// </summary>
        [Pure]
        public static DockerStackServicesSettings EnableQuiet(this DockerStackServicesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerStackServicesSettings.Quiet"/></em></p>
        ///   <p>Only display IDs.</p>
        /// </summary>
        [Pure]
        public static DockerStackServicesSettings DisableQuiet(this DockerStackServicesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerStackServicesSettings.Quiet"/></em></p>
        ///   <p>Only display IDs.</p>
        /// </summary>
        [Pure]
        public static DockerStackServicesSettings ToggleQuiet(this DockerStackServicesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackServicesSettings.Stack"/></em></p>
        ///   <p>STACK</p>
        /// </summary>
        [Pure]
        public static DockerStackServicesSettings SetStack(this DockerStackServicesSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStackServicesSettings.Stack"/></em></p>
        ///   <p>STACK</p>
        /// </summary>
        [Pure]
        public static DockerStackServicesSettings ResetStack(this DockerStackServicesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContainerPortSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContainerPortSettingsExtensions
    {
        #region Container
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerPortSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerPortSettings SetContainer(this DockerContainerPortSettings toolSettings, string container)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = container;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerPortSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerPortSettings ResetContainer(this DockerContainerPortSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = null;
            return toolSettings;
        }
        #endregion
        #region PrivatePort
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerPortSettings.PrivatePort"/></em></p>
        ///   <p>[PRIVATE_PORT[/PROTO]]</p>
        /// </summary>
        [Pure]
        public static DockerContainerPortSettings SetPrivatePort(this DockerContainerPortSettings toolSettings, string privatePort)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PrivatePort = privatePort;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerPortSettings.PrivatePort"/></em></p>
        ///   <p>[PRIVATE_PORT[/PROTO]]</p>
        /// </summary>
        [Pure]
        public static DockerContainerPortSettings ResetPrivatePort(this DockerContainerPortSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PrivatePort = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerRenameSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerRenameSettingsExtensions
    {
        #region Container
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRenameSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerRenameSettings SetContainer(this DockerRenameSettings toolSettings, string container)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = container;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRenameSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerRenameSettings ResetContainer(this DockerRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = null;
            return toolSettings;
        }
        #endregion
        #region NewName
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRenameSettings.NewName"/></em></p>
        ///   <p>NEW_NAME</p>
        /// </summary>
        [Pure]
        public static DockerRenameSettings SetNewName(this DockerRenameSettings toolSettings, string newName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NewName = newName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRenameSettings.NewName"/></em></p>
        ///   <p>NEW_NAME</p>
        /// </summary>
        [Pure]
        public static DockerRenameSettings ResetNewName(this DockerRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NewName = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerTagSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerTagSettingsExtensions
    {
        #region SourceImage
        /// <summary>
        ///   <p><em>Sets <see cref="DockerTagSettings.SourceImage"/></em></p>
        ///   <p>SOURCE_IMAGE[:TAG]</p>
        /// </summary>
        [Pure]
        public static DockerTagSettings SetSourceImage(this DockerTagSettings toolSettings, string sourceImage)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceImage = sourceImage;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerTagSettings.SourceImage"/></em></p>
        ///   <p>SOURCE_IMAGE[:TAG]</p>
        /// </summary>
        [Pure]
        public static DockerTagSettings ResetSourceImage(this DockerTagSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceImage = null;
            return toolSettings;
        }
        #endregion
        #region TargetImage
        /// <summary>
        ///   <p><em>Sets <see cref="DockerTagSettings.TargetImage"/></em></p>
        ///   <p>TARGET_IMAGE[:TAG]</p>
        /// </summary>
        [Pure]
        public static DockerTagSettings SetTargetImage(this DockerTagSettings toolSettings, string targetImage)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetImage = targetImage;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerTagSettings.TargetImage"/></em></p>
        ///   <p>TARGET_IMAGE[:TAG]</p>
        /// </summary>
        [Pure]
        public static DockerTagSettings ResetTargetImage(this DockerTagSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetImage = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerSecretInspectSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerSecretInspectSettingsExtensions
    {
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSecretInspectSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerSecretInspectSettings SetFormat(this DockerSecretInspectSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSecretInspectSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerSecretInspectSettings ResetFormat(this DockerSecretInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Pretty
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSecretInspectSettings.Pretty"/></em></p>
        ///   <p>Print the information in a human friendly format.</p>
        /// </summary>
        [Pure]
        public static DockerSecretInspectSettings SetPretty(this DockerSecretInspectSettings toolSettings, bool? pretty)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pretty = pretty;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSecretInspectSettings.Pretty"/></em></p>
        ///   <p>Print the information in a human friendly format.</p>
        /// </summary>
        [Pure]
        public static DockerSecretInspectSettings ResetPretty(this DockerSecretInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pretty = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerSecretInspectSettings.Pretty"/></em></p>
        ///   <p>Print the information in a human friendly format.</p>
        /// </summary>
        [Pure]
        public static DockerSecretInspectSettings EnablePretty(this DockerSecretInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pretty = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerSecretInspectSettings.Pretty"/></em></p>
        ///   <p>Print the information in a human friendly format.</p>
        /// </summary>
        [Pure]
        public static DockerSecretInspectSettings DisablePretty(this DockerSecretInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pretty = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerSecretInspectSettings.Pretty"/></em></p>
        ///   <p>Print the information in a human friendly format.</p>
        /// </summary>
        [Pure]
        public static DockerSecretInspectSettings TogglePretty(this DockerSecretInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pretty = !toolSettings.Pretty;
            return toolSettings;
        }
        #endregion
        #region Secrets
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSecretInspectSettings.Secrets"/> to a new list</em></p>
        ///   <p>SECRET</p>
        /// </summary>
        [Pure]
        public static DockerSecretInspectSettings SetSecrets(this DockerSecretInspectSettings toolSettings, params string[] secrets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretsInternal = secrets.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSecretInspectSettings.Secrets"/> to a new list</em></p>
        ///   <p>SECRET</p>
        /// </summary>
        [Pure]
        public static DockerSecretInspectSettings SetSecrets(this DockerSecretInspectSettings toolSettings, IEnumerable<string> secrets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretsInternal = secrets.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerSecretInspectSettings.Secrets"/></em></p>
        ///   <p>SECRET</p>
        /// </summary>
        [Pure]
        public static DockerSecretInspectSettings AddSecrets(this DockerSecretInspectSettings toolSettings, params string[] secrets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretsInternal.AddRange(secrets);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerSecretInspectSettings.Secrets"/></em></p>
        ///   <p>SECRET</p>
        /// </summary>
        [Pure]
        public static DockerSecretInspectSettings AddSecrets(this DockerSecretInspectSettings toolSettings, IEnumerable<string> secrets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretsInternal.AddRange(secrets);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerSecretInspectSettings.Secrets"/></em></p>
        ///   <p>SECRET</p>
        /// </summary>
        [Pure]
        public static DockerSecretInspectSettings ClearSecrets(this DockerSecretInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerSecretInspectSettings.Secrets"/></em></p>
        ///   <p>SECRET</p>
        /// </summary>
        [Pure]
        public static DockerSecretInspectSettings RemoveSecrets(this DockerSecretInspectSettings toolSettings, params string[] secrets)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(secrets);
            toolSettings.SecretsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerSecretInspectSettings.Secrets"/></em></p>
        ///   <p>SECRET</p>
        /// </summary>
        [Pure]
        public static DockerSecretInspectSettings RemoveSecrets(this DockerSecretInspectSettings toolSettings, IEnumerable<string> secrets)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(secrets);
            toolSettings.SecretsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerSecretSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerSecretSettingsExtensions
    {
    }
    #endregion
    #region DockerContainerExportSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContainerExportSettingsExtensions
    {
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerExportSettings.Output"/></em></p>
        ///   <p>Write to a file, instead of STDOUT.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExportSettings SetOutput(this DockerContainerExportSettings toolSettings, string output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerExportSettings.Output"/></em></p>
        ///   <p>Write to a file, instead of STDOUT.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExportSettings ResetOutput(this DockerContainerExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Container
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerExportSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerExportSettings SetContainer(this DockerContainerExportSettings toolSettings, string container)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = container;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerExportSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerExportSettings ResetContainer(this DockerContainerExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerHistorySettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerHistorySettingsExtensions
    {
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerHistorySettings.Format"/></em></p>
        ///   <p>Pretty-print images using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerHistorySettings SetFormat(this DockerHistorySettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerHistorySettings.Format"/></em></p>
        ///   <p>Pretty-print images using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerHistorySettings ResetFormat(this DockerHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Human
        /// <summary>
        ///   <p><em>Sets <see cref="DockerHistorySettings.Human"/></em></p>
        ///   <p>Print sizes and dates in human readable format.</p>
        /// </summary>
        [Pure]
        public static DockerHistorySettings SetHuman(this DockerHistorySettings toolSettings, bool? human)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Human = human;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerHistorySettings.Human"/></em></p>
        ///   <p>Print sizes and dates in human readable format.</p>
        /// </summary>
        [Pure]
        public static DockerHistorySettings ResetHuman(this DockerHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Human = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerHistorySettings.Human"/></em></p>
        ///   <p>Print sizes and dates in human readable format.</p>
        /// </summary>
        [Pure]
        public static DockerHistorySettings EnableHuman(this DockerHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Human = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerHistorySettings.Human"/></em></p>
        ///   <p>Print sizes and dates in human readable format.</p>
        /// </summary>
        [Pure]
        public static DockerHistorySettings DisableHuman(this DockerHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Human = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerHistorySettings.Human"/></em></p>
        ///   <p>Print sizes and dates in human readable format.</p>
        /// </summary>
        [Pure]
        public static DockerHistorySettings ToggleHuman(this DockerHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Human = !toolSettings.Human;
            return toolSettings;
        }
        #endregion
        #region NoTrunc
        /// <summary>
        ///   <p><em>Sets <see cref="DockerHistorySettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerHistorySettings SetNoTrunc(this DockerHistorySettings toolSettings, bool? noTrunc)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = noTrunc;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerHistorySettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerHistorySettings ResetNoTrunc(this DockerHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerHistorySettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerHistorySettings EnableNoTrunc(this DockerHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerHistorySettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerHistorySettings DisableNoTrunc(this DockerHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerHistorySettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerHistorySettings ToggleNoTrunc(this DockerHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = !toolSettings.NoTrunc;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerHistorySettings.Quiet"/></em></p>
        ///   <p>Only show numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerHistorySettings SetQuiet(this DockerHistorySettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerHistorySettings.Quiet"/></em></p>
        ///   <p>Only show numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerHistorySettings ResetQuiet(this DockerHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerHistorySettings.Quiet"/></em></p>
        ///   <p>Only show numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerHistorySettings EnableQuiet(this DockerHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerHistorySettings.Quiet"/></em></p>
        ///   <p>Only show numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerHistorySettings DisableQuiet(this DockerHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerHistorySettings.Quiet"/></em></p>
        ///   <p>Only show numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerHistorySettings ToggleQuiet(this DockerHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
        #region Image
        /// <summary>
        ///   <p><em>Sets <see cref="DockerHistorySettings.Image"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerHistorySettings SetImage(this DockerHistorySettings toolSettings, string image)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = image;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerHistorySettings.Image"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerHistorySettings ResetImage(this DockerHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerServiceCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerServiceCreateSettingsExtensions
    {
        #region Config
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Config"/></em></p>
        ///   <p>Specify configurations to expose to the service.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetConfig(this DockerServiceCreateSettings toolSettings, string config)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Config = config;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.Config"/></em></p>
        ///   <p>Specify configurations to expose to the service.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetConfig(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Config = null;
            return toolSettings;
        }
        #endregion
        #region Constraint
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Constraint"/> to a new list</em></p>
        ///   <p>Placement constraints.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetConstraint(this DockerServiceCreateSettings toolSettings, params string[] constraint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConstraintInternal = constraint.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Constraint"/> to a new list</em></p>
        ///   <p>Placement constraints.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetConstraint(this DockerServiceCreateSettings toolSettings, IEnumerable<string> constraint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConstraintInternal = constraint.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.Constraint"/></em></p>
        ///   <p>Placement constraints.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddConstraint(this DockerServiceCreateSettings toolSettings, params string[] constraint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConstraintInternal.AddRange(constraint);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.Constraint"/></em></p>
        ///   <p>Placement constraints.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddConstraint(this DockerServiceCreateSettings toolSettings, IEnumerable<string> constraint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConstraintInternal.AddRange(constraint);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceCreateSettings.Constraint"/></em></p>
        ///   <p>Placement constraints.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ClearConstraint(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConstraintInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.Constraint"/></em></p>
        ///   <p>Placement constraints.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveConstraint(this DockerServiceCreateSettings toolSettings, params string[] constraint)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(constraint);
            toolSettings.ConstraintInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.Constraint"/></em></p>
        ///   <p>Placement constraints.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveConstraint(this DockerServiceCreateSettings toolSettings, IEnumerable<string> constraint)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(constraint);
            toolSettings.ConstraintInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ContainerLabel
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.ContainerLabel"/> to a new list</em></p>
        ///   <p>Container labels.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetContainerLabel(this DockerServiceCreateSettings toolSettings, params string[] containerLabel)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerLabelInternal = containerLabel.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.ContainerLabel"/> to a new list</em></p>
        ///   <p>Container labels.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetContainerLabel(this DockerServiceCreateSettings toolSettings, IEnumerable<string> containerLabel)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerLabelInternal = containerLabel.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.ContainerLabel"/></em></p>
        ///   <p>Container labels.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddContainerLabel(this DockerServiceCreateSettings toolSettings, params string[] containerLabel)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerLabelInternal.AddRange(containerLabel);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.ContainerLabel"/></em></p>
        ///   <p>Container labels.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddContainerLabel(this DockerServiceCreateSettings toolSettings, IEnumerable<string> containerLabel)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerLabelInternal.AddRange(containerLabel);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceCreateSettings.ContainerLabel"/></em></p>
        ///   <p>Container labels.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ClearContainerLabel(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerLabelInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.ContainerLabel"/></em></p>
        ///   <p>Container labels.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveContainerLabel(this DockerServiceCreateSettings toolSettings, params string[] containerLabel)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containerLabel);
            toolSettings.ContainerLabelInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.ContainerLabel"/></em></p>
        ///   <p>Container labels.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveContainerLabel(this DockerServiceCreateSettings toolSettings, IEnumerable<string> containerLabel)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containerLabel);
            toolSettings.ContainerLabelInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region CredentialSpec
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.CredentialSpec"/></em></p>
        ///   <p>Credential spec for managed service account (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetCredentialSpec(this DockerServiceCreateSettings toolSettings, string credentialSpec)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CredentialSpec = credentialSpec;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.CredentialSpec"/></em></p>
        ///   <p>Credential spec for managed service account (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetCredentialSpec(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CredentialSpec = null;
            return toolSettings;
        }
        #endregion
        #region Detach
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Detach"/></em></p>
        ///   <p>Exit immediately instead of waiting for the service to converge.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetDetach(this DockerServiceCreateSettings toolSettings, bool? detach)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = detach;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.Detach"/></em></p>
        ///   <p>Exit immediately instead of waiting for the service to converge.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetDetach(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceCreateSettings.Detach"/></em></p>
        ///   <p>Exit immediately instead of waiting for the service to converge.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings EnableDetach(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceCreateSettings.Detach"/></em></p>
        ///   <p>Exit immediately instead of waiting for the service to converge.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings DisableDetach(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceCreateSettings.Detach"/></em></p>
        ///   <p>Exit immediately instead of waiting for the service to converge.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ToggleDetach(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = !toolSettings.Detach;
            return toolSettings;
        }
        #endregion
        #region Dns
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Dns"/> to a new list</em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetDns(this DockerServiceCreateSettings toolSettings, params string[] dns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsInternal = dns.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Dns"/> to a new list</em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetDns(this DockerServiceCreateSettings toolSettings, IEnumerable<string> dns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsInternal = dns.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.Dns"/></em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddDns(this DockerServiceCreateSettings toolSettings, params string[] dns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsInternal.AddRange(dns);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.Dns"/></em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddDns(this DockerServiceCreateSettings toolSettings, IEnumerable<string> dns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsInternal.AddRange(dns);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceCreateSettings.Dns"/></em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ClearDns(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.Dns"/></em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveDns(this DockerServiceCreateSettings toolSettings, params string[] dns)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dns);
            toolSettings.DnsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.Dns"/></em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveDns(this DockerServiceCreateSettings toolSettings, IEnumerable<string> dns)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dns);
            toolSettings.DnsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DnsOption
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.DnsOption"/> to a new list</em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetDnsOption(this DockerServiceCreateSettings toolSettings, params string[] dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionInternal = dnsOption.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.DnsOption"/> to a new list</em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetDnsOption(this DockerServiceCreateSettings toolSettings, IEnumerable<string> dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionInternal = dnsOption.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.DnsOption"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddDnsOption(this DockerServiceCreateSettings toolSettings, params string[] dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionInternal.AddRange(dnsOption);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.DnsOption"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddDnsOption(this DockerServiceCreateSettings toolSettings, IEnumerable<string> dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionInternal.AddRange(dnsOption);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceCreateSettings.DnsOption"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ClearDnsOption(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.DnsOption"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveDnsOption(this DockerServiceCreateSettings toolSettings, params string[] dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsOption);
            toolSettings.DnsOptionInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.DnsOption"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveDnsOption(this DockerServiceCreateSettings toolSettings, IEnumerable<string> dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsOption);
            toolSettings.DnsOptionInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DnsSearch
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.DnsSearch"/> to a new list</em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetDnsSearch(this DockerServiceCreateSettings toolSettings, params string[] dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchInternal = dnsSearch.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.DnsSearch"/> to a new list</em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetDnsSearch(this DockerServiceCreateSettings toolSettings, IEnumerable<string> dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchInternal = dnsSearch.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.DnsSearch"/></em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddDnsSearch(this DockerServiceCreateSettings toolSettings, params string[] dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchInternal.AddRange(dnsSearch);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.DnsSearch"/></em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddDnsSearch(this DockerServiceCreateSettings toolSettings, IEnumerable<string> dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchInternal.AddRange(dnsSearch);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceCreateSettings.DnsSearch"/></em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ClearDnsSearch(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.DnsSearch"/></em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveDnsSearch(this DockerServiceCreateSettings toolSettings, params string[] dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsSearch);
            toolSettings.DnsSearchInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.DnsSearch"/></em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveDnsSearch(this DockerServiceCreateSettings toolSettings, IEnumerable<string> dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsSearch);
            toolSettings.DnsSearchInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region EndpointMode
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.EndpointMode"/></em></p>
        ///   <p>Endpoint mode (vip or dnsrr).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetEndpointMode(this DockerServiceCreateSettings toolSettings, string endpointMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndpointMode = endpointMode;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.EndpointMode"/></em></p>
        ///   <p>Endpoint mode (vip or dnsrr).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetEndpointMode(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndpointMode = null;
            return toolSettings;
        }
        #endregion
        #region Entrypoint
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Entrypoint"/></em></p>
        ///   <p>Overwrite the default ENTRYPOINT of the image.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetEntrypoint(this DockerServiceCreateSettings toolSettings, string entrypoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Entrypoint = entrypoint;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.Entrypoint"/></em></p>
        ///   <p>Overwrite the default ENTRYPOINT of the image.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetEntrypoint(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Entrypoint = null;
            return toolSettings;
        }
        #endregion
        #region Env
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Env"/> to a new list</em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetEnv(this DockerServiceCreateSettings toolSettings, params string[] env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal = env.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Env"/> to a new list</em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetEnv(this DockerServiceCreateSettings toolSettings, IEnumerable<string> env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal = env.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddEnv(this DockerServiceCreateSettings toolSettings, params string[] env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal.AddRange(env);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddEnv(this DockerServiceCreateSettings toolSettings, IEnumerable<string> env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal.AddRange(env);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceCreateSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ClearEnv(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveEnv(this DockerServiceCreateSettings toolSettings, params string[] env)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(env);
            toolSettings.EnvInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveEnv(this DockerServiceCreateSettings toolSettings, IEnumerable<string> env)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(env);
            toolSettings.EnvInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region EnvFile
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.EnvFile"/> to a new list</em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetEnvFile(this DockerServiceCreateSettings toolSettings, params string[] envFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvFileInternal = envFile.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.EnvFile"/> to a new list</em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetEnvFile(this DockerServiceCreateSettings toolSettings, IEnumerable<string> envFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvFileInternal = envFile.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.EnvFile"/></em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddEnvFile(this DockerServiceCreateSettings toolSettings, params string[] envFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvFileInternal.AddRange(envFile);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.EnvFile"/></em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddEnvFile(this DockerServiceCreateSettings toolSettings, IEnumerable<string> envFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvFileInternal.AddRange(envFile);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceCreateSettings.EnvFile"/></em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ClearEnvFile(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvFileInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.EnvFile"/></em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveEnvFile(this DockerServiceCreateSettings toolSettings, params string[] envFile)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(envFile);
            toolSettings.EnvFileInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.EnvFile"/></em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveEnvFile(this DockerServiceCreateSettings toolSettings, IEnumerable<string> envFile)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(envFile);
            toolSettings.EnvFileInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region GenericResource
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.GenericResource"/> to a new list</em></p>
        ///   <p>User defined resources.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetGenericResource(this DockerServiceCreateSettings toolSettings, params string[] genericResource)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenericResourceInternal = genericResource.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.GenericResource"/> to a new list</em></p>
        ///   <p>User defined resources.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetGenericResource(this DockerServiceCreateSettings toolSettings, IEnumerable<string> genericResource)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenericResourceInternal = genericResource.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.GenericResource"/></em></p>
        ///   <p>User defined resources.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddGenericResource(this DockerServiceCreateSettings toolSettings, params string[] genericResource)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenericResourceInternal.AddRange(genericResource);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.GenericResource"/></em></p>
        ///   <p>User defined resources.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddGenericResource(this DockerServiceCreateSettings toolSettings, IEnumerable<string> genericResource)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenericResourceInternal.AddRange(genericResource);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceCreateSettings.GenericResource"/></em></p>
        ///   <p>User defined resources.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ClearGenericResource(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenericResourceInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.GenericResource"/></em></p>
        ///   <p>User defined resources.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveGenericResource(this DockerServiceCreateSettings toolSettings, params string[] genericResource)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(genericResource);
            toolSettings.GenericResourceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.GenericResource"/></em></p>
        ///   <p>User defined resources.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveGenericResource(this DockerServiceCreateSettings toolSettings, IEnumerable<string> genericResource)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(genericResource);
            toolSettings.GenericResourceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Group
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Group"/> to a new list</em></p>
        ///   <p>Set one or more supplementary user groups for the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetGroup(this DockerServiceCreateSettings toolSettings, params string[] group)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupInternal = group.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Group"/> to a new list</em></p>
        ///   <p>Set one or more supplementary user groups for the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetGroup(this DockerServiceCreateSettings toolSettings, IEnumerable<string> group)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupInternal = group.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.Group"/></em></p>
        ///   <p>Set one or more supplementary user groups for the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddGroup(this DockerServiceCreateSettings toolSettings, params string[] group)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupInternal.AddRange(group);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.Group"/></em></p>
        ///   <p>Set one or more supplementary user groups for the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddGroup(this DockerServiceCreateSettings toolSettings, IEnumerable<string> group)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupInternal.AddRange(group);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceCreateSettings.Group"/></em></p>
        ///   <p>Set one or more supplementary user groups for the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ClearGroup(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.Group"/></em></p>
        ///   <p>Set one or more supplementary user groups for the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveGroup(this DockerServiceCreateSettings toolSettings, params string[] group)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(group);
            toolSettings.GroupInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.Group"/></em></p>
        ///   <p>Set one or more supplementary user groups for the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveGroup(this DockerServiceCreateSettings toolSettings, IEnumerable<string> group)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(group);
            toolSettings.GroupInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region HealthCmd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.HealthCmd"/></em></p>
        ///   <p>Command to run to check health.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetHealthCmd(this DockerServiceCreateSettings toolSettings, string healthCmd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthCmd = healthCmd;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.HealthCmd"/></em></p>
        ///   <p>Command to run to check health.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetHealthCmd(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthCmd = null;
            return toolSettings;
        }
        #endregion
        #region HealthInterval
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.HealthInterval"/></em></p>
        ///   <p>Time between running the check (ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetHealthInterval(this DockerServiceCreateSettings toolSettings, string healthInterval)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthInterval = healthInterval;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.HealthInterval"/></em></p>
        ///   <p>Time between running the check (ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetHealthInterval(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthInterval = null;
            return toolSettings;
        }
        #endregion
        #region HealthRetries
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.HealthRetries"/></em></p>
        ///   <p>Consecutive failures needed to report unhealthy.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetHealthRetries(this DockerServiceCreateSettings toolSettings, int? healthRetries)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthRetries = healthRetries;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.HealthRetries"/></em></p>
        ///   <p>Consecutive failures needed to report unhealthy.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetHealthRetries(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthRetries = null;
            return toolSettings;
        }
        #endregion
        #region HealthStartPeriod
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.HealthStartPeriod"/></em></p>
        ///   <p>Start period for the container to initialize before counting retries towards unstable (ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetHealthStartPeriod(this DockerServiceCreateSettings toolSettings, string healthStartPeriod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthStartPeriod = healthStartPeriod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.HealthStartPeriod"/></em></p>
        ///   <p>Start period for the container to initialize before counting retries towards unstable (ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetHealthStartPeriod(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthStartPeriod = null;
            return toolSettings;
        }
        #endregion
        #region HealthTimeout
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.HealthTimeout"/></em></p>
        ///   <p>Maximum time to allow one check to run (ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetHealthTimeout(this DockerServiceCreateSettings toolSettings, string healthTimeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthTimeout = healthTimeout;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.HealthTimeout"/></em></p>
        ///   <p>Maximum time to allow one check to run (ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetHealthTimeout(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthTimeout = null;
            return toolSettings;
        }
        #endregion
        #region Host
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Host"/> to a new list</em></p>
        ///   <p>Set one or more custom host-to-IP mappings (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetHost(this DockerServiceCreateSettings toolSettings, params string[] host)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HostInternal = host.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Host"/> to a new list</em></p>
        ///   <p>Set one or more custom host-to-IP mappings (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetHost(this DockerServiceCreateSettings toolSettings, IEnumerable<string> host)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HostInternal = host.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.Host"/></em></p>
        ///   <p>Set one or more custom host-to-IP mappings (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddHost(this DockerServiceCreateSettings toolSettings, params string[] host)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HostInternal.AddRange(host);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.Host"/></em></p>
        ///   <p>Set one or more custom host-to-IP mappings (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddHost(this DockerServiceCreateSettings toolSettings, IEnumerable<string> host)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HostInternal.AddRange(host);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceCreateSettings.Host"/></em></p>
        ///   <p>Set one or more custom host-to-IP mappings (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ClearHost(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HostInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.Host"/></em></p>
        ///   <p>Set one or more custom host-to-IP mappings (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveHost(this DockerServiceCreateSettings toolSettings, params string[] host)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(host);
            toolSettings.HostInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.Host"/></em></p>
        ///   <p>Set one or more custom host-to-IP mappings (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveHost(this DockerServiceCreateSettings toolSettings, IEnumerable<string> host)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(host);
            toolSettings.HostInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Hostname
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Hostname"/></em></p>
        ///   <p>Container hostname.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetHostname(this DockerServiceCreateSettings toolSettings, string hostname)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Hostname = hostname;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.Hostname"/></em></p>
        ///   <p>Container hostname.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetHostname(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Hostname = null;
            return toolSettings;
        }
        #endregion
        #region Init
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Init"/></em></p>
        ///   <p>Use an init inside each service container to forward signals and reap processes.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetInit(this DockerServiceCreateSettings toolSettings, bool? init)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = init;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.Init"/></em></p>
        ///   <p>Use an init inside each service container to forward signals and reap processes.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetInit(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceCreateSettings.Init"/></em></p>
        ///   <p>Use an init inside each service container to forward signals and reap processes.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings EnableInit(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceCreateSettings.Init"/></em></p>
        ///   <p>Use an init inside each service container to forward signals and reap processes.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings DisableInit(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceCreateSettings.Init"/></em></p>
        ///   <p>Use an init inside each service container to forward signals and reap processes.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ToggleInit(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = !toolSettings.Init;
            return toolSettings;
        }
        #endregion
        #region Isolation
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Isolation"/></em></p>
        ///   <p>Service container isolation mode.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetIsolation(this DockerServiceCreateSettings toolSettings, string isolation)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Isolation = isolation;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.Isolation"/></em></p>
        ///   <p>Service container isolation mode.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetIsolation(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Isolation = null;
            return toolSettings;
        }
        #endregion
        #region Label
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Label"/> to a new list</em></p>
        ///   <p>Service labels.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetLabel(this DockerServiceCreateSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal = label.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Label"/> to a new list</em></p>
        ///   <p>Service labels.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetLabel(this DockerServiceCreateSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal = label.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.Label"/></em></p>
        ///   <p>Service labels.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddLabel(this DockerServiceCreateSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.AddRange(label);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.Label"/></em></p>
        ///   <p>Service labels.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddLabel(this DockerServiceCreateSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.AddRange(label);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceCreateSettings.Label"/></em></p>
        ///   <p>Service labels.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ClearLabel(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.Label"/></em></p>
        ///   <p>Service labels.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveLabel(this DockerServiceCreateSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(label);
            toolSettings.LabelInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.Label"/></em></p>
        ///   <p>Service labels.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveLabel(this DockerServiceCreateSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(label);
            toolSettings.LabelInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region LimitCpu
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.LimitCpu"/></em></p>
        ///   <p>Limit CPUs.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetLimitCpu(this DockerServiceCreateSettings toolSettings, decimal? limitCpu)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LimitCpu = limitCpu;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.LimitCpu"/></em></p>
        ///   <p>Limit CPUs.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetLimitCpu(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LimitCpu = null;
            return toolSettings;
        }
        #endregion
        #region LimitMemory
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.LimitMemory"/></em></p>
        ///   <p>Limit Memory.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetLimitMemory(this DockerServiceCreateSettings toolSettings, long? limitMemory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LimitMemory = limitMemory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.LimitMemory"/></em></p>
        ///   <p>Limit Memory.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetLimitMemory(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LimitMemory = null;
            return toolSettings;
        }
        #endregion
        #region LogDriver
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.LogDriver"/></em></p>
        ///   <p>Logging driver for service.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetLogDriver(this DockerServiceCreateSettings toolSettings, string logDriver)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogDriver = logDriver;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.LogDriver"/></em></p>
        ///   <p>Logging driver for service.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetLogDriver(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogDriver = null;
            return toolSettings;
        }
        #endregion
        #region LogOpt
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.LogOpt"/> to a new list</em></p>
        ///   <p>Logging driver options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetLogOpt(this DockerServiceCreateSettings toolSettings, params string[] logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal = logOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.LogOpt"/> to a new list</em></p>
        ///   <p>Logging driver options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetLogOpt(this DockerServiceCreateSettings toolSettings, IEnumerable<string> logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal = logOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.LogOpt"/></em></p>
        ///   <p>Logging driver options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddLogOpt(this DockerServiceCreateSettings toolSettings, params string[] logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal.AddRange(logOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.LogOpt"/></em></p>
        ///   <p>Logging driver options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddLogOpt(this DockerServiceCreateSettings toolSettings, IEnumerable<string> logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal.AddRange(logOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceCreateSettings.LogOpt"/></em></p>
        ///   <p>Logging driver options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ClearLogOpt(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.LogOpt"/></em></p>
        ///   <p>Logging driver options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveLogOpt(this DockerServiceCreateSettings toolSettings, params string[] logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(logOpt);
            toolSettings.LogOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.LogOpt"/></em></p>
        ///   <p>Logging driver options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveLogOpt(this DockerServiceCreateSettings toolSettings, IEnumerable<string> logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(logOpt);
            toolSettings.LogOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Mode
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Mode"/></em></p>
        ///   <p>Service mode (replicated or global).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetMode(this DockerServiceCreateSettings toolSettings, string mode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Mode = mode;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.Mode"/></em></p>
        ///   <p>Service mode (replicated or global).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetMode(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Mode = null;
            return toolSettings;
        }
        #endregion
        #region Mount
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Mount"/></em></p>
        ///   <p>Attach a filesystem mount to the service.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetMount(this DockerServiceCreateSettings toolSettings, string mount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Mount = mount;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.Mount"/></em></p>
        ///   <p>Attach a filesystem mount to the service.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetMount(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Mount = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Name"/></em></p>
        ///   <p>Service name.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetName(this DockerServiceCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.Name"/></em></p>
        ///   <p>Service name.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetName(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Network
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Network"/></em></p>
        ///   <p>Network attachments.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetNetwork(this DockerServiceCreateSettings toolSettings, string network)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Network = network;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.Network"/></em></p>
        ///   <p>Network attachments.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetNetwork(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Network = null;
            return toolSettings;
        }
        #endregion
        #region NoHealthcheck
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetNoHealthcheck(this DockerServiceCreateSettings toolSettings, bool? noHealthcheck)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = noHealthcheck;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetNoHealthcheck(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceCreateSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings EnableNoHealthcheck(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceCreateSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings DisableNoHealthcheck(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceCreateSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ToggleNoHealthcheck(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = !toolSettings.NoHealthcheck;
            return toolSettings;
        }
        #endregion
        #region NoResolveImage
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.NoResolveImage"/></em></p>
        ///   <p>Do not query the registry to resolve image digest and supported platforms.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetNoResolveImage(this DockerServiceCreateSettings toolSettings, bool? noResolveImage)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolveImage = noResolveImage;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.NoResolveImage"/></em></p>
        ///   <p>Do not query the registry to resolve image digest and supported platforms.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetNoResolveImage(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolveImage = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceCreateSettings.NoResolveImage"/></em></p>
        ///   <p>Do not query the registry to resolve image digest and supported platforms.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings EnableNoResolveImage(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolveImage = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceCreateSettings.NoResolveImage"/></em></p>
        ///   <p>Do not query the registry to resolve image digest and supported platforms.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings DisableNoResolveImage(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolveImage = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceCreateSettings.NoResolveImage"/></em></p>
        ///   <p>Do not query the registry to resolve image digest and supported platforms.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ToggleNoResolveImage(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolveImage = !toolSettings.NoResolveImage;
            return toolSettings;
        }
        #endregion
        #region PlacementPref
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.PlacementPref"/></em></p>
        ///   <p>Add a placement preference.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetPlacementPref(this DockerServiceCreateSettings toolSettings, string placementPref)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PlacementPref = placementPref;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.PlacementPref"/></em></p>
        ///   <p>Add a placement preference.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetPlacementPref(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PlacementPref = null;
            return toolSettings;
        }
        #endregion
        #region Publish
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Publish"/></em></p>
        ///   <p>Publish a port as a node port.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetPublish(this DockerServiceCreateSettings toolSettings, string publish)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Publish = publish;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.Publish"/></em></p>
        ///   <p>Publish a port as a node port.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetPublish(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Publish = null;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Quiet"/></em></p>
        ///   <p>Suppress progress output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetQuiet(this DockerServiceCreateSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.Quiet"/></em></p>
        ///   <p>Suppress progress output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetQuiet(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceCreateSettings.Quiet"/></em></p>
        ///   <p>Suppress progress output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings EnableQuiet(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceCreateSettings.Quiet"/></em></p>
        ///   <p>Suppress progress output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings DisableQuiet(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceCreateSettings.Quiet"/></em></p>
        ///   <p>Suppress progress output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ToggleQuiet(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
        #region ReadOnly
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetReadOnly(this DockerServiceCreateSettings toolSettings, bool? readOnly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = readOnly;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetReadOnly(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceCreateSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings EnableReadOnly(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceCreateSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings DisableReadOnly(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceCreateSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ToggleReadOnly(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = !toolSettings.ReadOnly;
            return toolSettings;
        }
        #endregion
        #region Replicas
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Replicas"/></em></p>
        ///   <p>Number of tasks.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetReplicas(this DockerServiceCreateSettings toolSettings, int? replicas)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Replicas = replicas;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.Replicas"/></em></p>
        ///   <p>Number of tasks.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetReplicas(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Replicas = null;
            return toolSettings;
        }
        #endregion
        #region ReplicasMaxPerNode
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.ReplicasMaxPerNode"/></em></p>
        ///   <p>Maximum number of tasks per node (default 0 = unlimited).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetReplicasMaxPerNode(this DockerServiceCreateSettings toolSettings, int? replicasMaxPerNode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReplicasMaxPerNode = replicasMaxPerNode;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.ReplicasMaxPerNode"/></em></p>
        ///   <p>Maximum number of tasks per node (default 0 = unlimited).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetReplicasMaxPerNode(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReplicasMaxPerNode = null;
            return toolSettings;
        }
        #endregion
        #region ReserveCpu
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.ReserveCpu"/></em></p>
        ///   <p>Reserve CPUs.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetReserveCpu(this DockerServiceCreateSettings toolSettings, decimal? reserveCpu)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReserveCpu = reserveCpu;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.ReserveCpu"/></em></p>
        ///   <p>Reserve CPUs.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetReserveCpu(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReserveCpu = null;
            return toolSettings;
        }
        #endregion
        #region ReserveMemory
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.ReserveMemory"/></em></p>
        ///   <p>Reserve Memory.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetReserveMemory(this DockerServiceCreateSettings toolSettings, long? reserveMemory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReserveMemory = reserveMemory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.ReserveMemory"/></em></p>
        ///   <p>Reserve Memory.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetReserveMemory(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReserveMemory = null;
            return toolSettings;
        }
        #endregion
        #region RestartCondition
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.RestartCondition"/></em></p>
        ///   <p>Restart when condition is met ("none"|"on-failure"|"any") (default "any").</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetRestartCondition(this DockerServiceCreateSettings toolSettings, RestartCondition restartCondition)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RestartCondition = restartCondition;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.RestartCondition"/></em></p>
        ///   <p>Restart when condition is met ("none"|"on-failure"|"any") (default "any").</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetRestartCondition(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RestartCondition = null;
            return toolSettings;
        }
        #endregion
        #region RestartDelay
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.RestartDelay"/></em></p>
        ///   <p>Delay between restart attempts (ns|us|ms|s|m|h) (default 5s).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetRestartDelay(this DockerServiceCreateSettings toolSettings, string restartDelay)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RestartDelay = restartDelay;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.RestartDelay"/></em></p>
        ///   <p>Delay between restart attempts (ns|us|ms|s|m|h) (default 5s).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetRestartDelay(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RestartDelay = null;
            return toolSettings;
        }
        #endregion
        #region RestartMaxAttempts
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.RestartMaxAttempts"/></em></p>
        ///   <p>Maximum number of restarts before giving up.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetRestartMaxAttempts(this DockerServiceCreateSettings toolSettings, int? restartMaxAttempts)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RestartMaxAttempts = restartMaxAttempts;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.RestartMaxAttempts"/></em></p>
        ///   <p>Maximum number of restarts before giving up.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetRestartMaxAttempts(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RestartMaxAttempts = null;
            return toolSettings;
        }
        #endregion
        #region RestartWindow
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.RestartWindow"/></em></p>
        ///   <p>Window used to evaluate the restart policy (ns|us|ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetRestartWindow(this DockerServiceCreateSettings toolSettings, string restartWindow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RestartWindow = restartWindow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.RestartWindow"/></em></p>
        ///   <p>Window used to evaluate the restart policy (ns|us|ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetRestartWindow(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RestartWindow = null;
            return toolSettings;
        }
        #endregion
        #region RollbackDelay
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.RollbackDelay"/></em></p>
        ///   <p>Delay between task rollbacks (ns|us|ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetRollbackDelay(this DockerServiceCreateSettings toolSettings, string rollbackDelay)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RollbackDelay = rollbackDelay;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.RollbackDelay"/></em></p>
        ///   <p>Delay between task rollbacks (ns|us|ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetRollbackDelay(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RollbackDelay = null;
            return toolSettings;
        }
        #endregion
        #region RollbackFailureAction
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.RollbackFailureAction"/></em></p>
        ///   <p>Action on rollback failure ("pause"|"continue") (default "pause").</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetRollbackFailureAction(this DockerServiceCreateSettings toolSettings, RollbackFailureAction rollbackFailureAction)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RollbackFailureAction = rollbackFailureAction;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.RollbackFailureAction"/></em></p>
        ///   <p>Action on rollback failure ("pause"|"continue") (default "pause").</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetRollbackFailureAction(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RollbackFailureAction = null;
            return toolSettings;
        }
        #endregion
        #region RollbackMaxFailureRatio
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.RollbackMaxFailureRatio"/></em></p>
        ///   <p>Failure rate to tolerate during a rollback (default 0).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetRollbackMaxFailureRatio(this DockerServiceCreateSettings toolSettings, float? rollbackMaxFailureRatio)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RollbackMaxFailureRatio = rollbackMaxFailureRatio;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.RollbackMaxFailureRatio"/></em></p>
        ///   <p>Failure rate to tolerate during a rollback (default 0).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetRollbackMaxFailureRatio(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RollbackMaxFailureRatio = null;
            return toolSettings;
        }
        #endregion
        #region RollbackMonitor
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.RollbackMonitor"/></em></p>
        ///   <p>Duration after each task rollback to monitor for failure (ns|us|ms|s|m|h) (default 5s).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetRollbackMonitor(this DockerServiceCreateSettings toolSettings, string rollbackMonitor)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RollbackMonitor = rollbackMonitor;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.RollbackMonitor"/></em></p>
        ///   <p>Duration after each task rollback to monitor for failure (ns|us|ms|s|m|h) (default 5s).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetRollbackMonitor(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RollbackMonitor = null;
            return toolSettings;
        }
        #endregion
        #region RollbackOrder
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.RollbackOrder"/></em></p>
        ///   <p>Rollback order ("start-first"|"stop-first") (default "stop-first").</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetRollbackOrder(this DockerServiceCreateSettings toolSettings, RollbackOrder rollbackOrder)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RollbackOrder = rollbackOrder;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.RollbackOrder"/></em></p>
        ///   <p>Rollback order ("start-first"|"stop-first") (default "stop-first").</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetRollbackOrder(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RollbackOrder = null;
            return toolSettings;
        }
        #endregion
        #region RollbackParallelism
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.RollbackParallelism"/></em></p>
        ///   <p>Maximum number of tasks rolled back simultaneously (0 to roll back all at once).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetRollbackParallelism(this DockerServiceCreateSettings toolSettings, int? rollbackParallelism)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RollbackParallelism = rollbackParallelism;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.RollbackParallelism"/></em></p>
        ///   <p>Maximum number of tasks rolled back simultaneously (0 to roll back all at once).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetRollbackParallelism(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RollbackParallelism = null;
            return toolSettings;
        }
        #endregion
        #region Secret
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Secret"/></em></p>
        ///   <p>Specify secrets to expose to the service.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetSecret(this DockerServiceCreateSettings toolSettings, string secret)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Secret = secret;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.Secret"/></em></p>
        ///   <p>Specify secrets to expose to the service.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetSecret(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Secret = null;
            return toolSettings;
        }
        #endregion
        #region StopGracePeriod
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.StopGracePeriod"/></em></p>
        ///   <p>Time to wait before force killing a container (ns|us|ms|s|m|h) (default 10s).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetStopGracePeriod(this DockerServiceCreateSettings toolSettings, string stopGracePeriod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StopGracePeriod = stopGracePeriod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.StopGracePeriod"/></em></p>
        ///   <p>Time to wait before force killing a container (ns|us|ms|s|m|h) (default 10s).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetStopGracePeriod(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StopGracePeriod = null;
            return toolSettings;
        }
        #endregion
        #region StopSignal
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.StopSignal"/></em></p>
        ///   <p>Signal to stop the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetStopSignal(this DockerServiceCreateSettings toolSettings, string stopSignal)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StopSignal = stopSignal;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.StopSignal"/></em></p>
        ///   <p>Signal to stop the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetStopSignal(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StopSignal = null;
            return toolSettings;
        }
        #endregion
        #region Sysctl
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Sysctl"/> to a new list</em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetSysctl(this DockerServiceCreateSettings toolSettings, params string[] sysctl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlInternal = sysctl.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Sysctl"/> to a new list</em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetSysctl(this DockerServiceCreateSettings toolSettings, IEnumerable<string> sysctl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlInternal = sysctl.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.Sysctl"/></em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddSysctl(this DockerServiceCreateSettings toolSettings, params string[] sysctl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlInternal.AddRange(sysctl);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.Sysctl"/></em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddSysctl(this DockerServiceCreateSettings toolSettings, IEnumerable<string> sysctl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlInternal.AddRange(sysctl);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceCreateSettings.Sysctl"/></em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ClearSysctl(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.Sysctl"/></em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveSysctl(this DockerServiceCreateSettings toolSettings, params string[] sysctl)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(sysctl);
            toolSettings.SysctlInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.Sysctl"/></em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveSysctl(this DockerServiceCreateSettings toolSettings, IEnumerable<string> sysctl)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(sysctl);
            toolSettings.SysctlInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Tty
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetTty(this DockerServiceCreateSettings toolSettings, bool? tty)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = tty;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetTty(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceCreateSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings EnableTty(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceCreateSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings DisableTty(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceCreateSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ToggleTty(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = !toolSettings.Tty;
            return toolSettings;
        }
        #endregion
        #region UpdateDelay
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.UpdateDelay"/></em></p>
        ///   <p>Delay between updates (ns|us|ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetUpdateDelay(this DockerServiceCreateSettings toolSettings, string updateDelay)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UpdateDelay = updateDelay;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.UpdateDelay"/></em></p>
        ///   <p>Delay between updates (ns|us|ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetUpdateDelay(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UpdateDelay = null;
            return toolSettings;
        }
        #endregion
        #region UpdateFailureAction
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.UpdateFailureAction"/></em></p>
        ///   <p>Action on update failure ("pause"|"continue"|"rollback") (default "pause").</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetUpdateFailureAction(this DockerServiceCreateSettings toolSettings, UpdateFailureAction updateFailureAction)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UpdateFailureAction = updateFailureAction;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.UpdateFailureAction"/></em></p>
        ///   <p>Action on update failure ("pause"|"continue"|"rollback") (default "pause").</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetUpdateFailureAction(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UpdateFailureAction = null;
            return toolSettings;
        }
        #endregion
        #region UpdateMaxFailureRatio
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.UpdateMaxFailureRatio"/></em></p>
        ///   <p>Failure rate to tolerate during an update (default 0).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetUpdateMaxFailureRatio(this DockerServiceCreateSettings toolSettings, float? updateMaxFailureRatio)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UpdateMaxFailureRatio = updateMaxFailureRatio;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.UpdateMaxFailureRatio"/></em></p>
        ///   <p>Failure rate to tolerate during an update (default 0).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetUpdateMaxFailureRatio(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UpdateMaxFailureRatio = null;
            return toolSettings;
        }
        #endregion
        #region UpdateMonitor
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.UpdateMonitor"/></em></p>
        ///   <p>Duration after each task update to monitor for failure (ns|us|ms|s|m|h) (default 5s).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetUpdateMonitor(this DockerServiceCreateSettings toolSettings, string updateMonitor)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UpdateMonitor = updateMonitor;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.UpdateMonitor"/></em></p>
        ///   <p>Duration after each task update to monitor for failure (ns|us|ms|s|m|h) (default 5s).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetUpdateMonitor(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UpdateMonitor = null;
            return toolSettings;
        }
        #endregion
        #region UpdateOrder
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.UpdateOrder"/></em></p>
        ///   <p>Update order ("start-first"|"stop-first") (default "stop-first").</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetUpdateOrder(this DockerServiceCreateSettings toolSettings, UpdateOrder updateOrder)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UpdateOrder = updateOrder;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.UpdateOrder"/></em></p>
        ///   <p>Update order ("start-first"|"stop-first") (default "stop-first").</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetUpdateOrder(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UpdateOrder = null;
            return toolSettings;
        }
        #endregion
        #region UpdateParallelism
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.UpdateParallelism"/></em></p>
        ///   <p>Maximum number of tasks updated simultaneously (0 to update all at once).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetUpdateParallelism(this DockerServiceCreateSettings toolSettings, int? updateParallelism)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UpdateParallelism = updateParallelism;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.UpdateParallelism"/></em></p>
        ///   <p>Maximum number of tasks updated simultaneously (0 to update all at once).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetUpdateParallelism(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UpdateParallelism = null;
            return toolSettings;
        }
        #endregion
        #region User
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.User"/></em></p>
        ///   <p>Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetUser(this DockerServiceCreateSettings toolSettings, string user)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.User = user;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.User"/></em></p>
        ///   <p>Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetUser(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.User = null;
            return toolSettings;
        }
        #endregion
        #region WithRegistryAuth
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.WithRegistryAuth"/></em></p>
        ///   <p>Send registry authentication details to swarm agents.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetWithRegistryAuth(this DockerServiceCreateSettings toolSettings, bool? withRegistryAuth)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WithRegistryAuth = withRegistryAuth;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.WithRegistryAuth"/></em></p>
        ///   <p>Send registry authentication details to swarm agents.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetWithRegistryAuth(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WithRegistryAuth = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceCreateSettings.WithRegistryAuth"/></em></p>
        ///   <p>Send registry authentication details to swarm agents.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings EnableWithRegistryAuth(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WithRegistryAuth = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceCreateSettings.WithRegistryAuth"/></em></p>
        ///   <p>Send registry authentication details to swarm agents.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings DisableWithRegistryAuth(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WithRegistryAuth = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceCreateSettings.WithRegistryAuth"/></em></p>
        ///   <p>Send registry authentication details to swarm agents.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ToggleWithRegistryAuth(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WithRegistryAuth = !toolSettings.WithRegistryAuth;
            return toolSettings;
        }
        #endregion
        #region Workdir
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Workdir"/></em></p>
        ///   <p>Working directory inside the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetWorkdir(this DockerServiceCreateSettings toolSettings, string workdir)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Workdir = workdir;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.Workdir"/></em></p>
        ///   <p>Working directory inside the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetWorkdir(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Workdir = null;
            return toolSettings;
        }
        #endregion
        #region Image
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Image"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetImage(this DockerServiceCreateSettings toolSettings, string image)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = image;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.Image"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetImage(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = null;
            return toolSettings;
        }
        #endregion
        #region Command
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Command"/></em></p>
        ///   <p>[COMMAND]</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetCommand(this DockerServiceCreateSettings toolSettings, string command)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Command = command;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceCreateSettings.Command"/></em></p>
        ///   <p>[COMMAND]</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ResetCommand(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Command = null;
            return toolSettings;
        }
        #endregion
        #region Args
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Args"/> to a new list</em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetArgs(this DockerServiceCreateSettings toolSettings, params string[] args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal = args.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceCreateSettings.Args"/> to a new list</em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings SetArgs(this DockerServiceCreateSettings toolSettings, IEnumerable<string> args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal = args.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddArgs(this DockerServiceCreateSettings toolSettings, params string[] args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal.AddRange(args);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceCreateSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings AddArgs(this DockerServiceCreateSettings toolSettings, IEnumerable<string> args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal.AddRange(args);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceCreateSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings ClearArgs(this DockerServiceCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveArgs(this DockerServiceCreateSettings toolSettings, params string[] args)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(args);
            toolSettings.ArgsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceCreateSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerServiceCreateSettings RemoveArgs(this DockerServiceCreateSettings toolSettings, IEnumerable<string> args)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(args);
            toolSettings.ArgsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerServicePsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerServicePsSettingsExtensions
    {
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServicePsSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerServicePsSettings SetFilter(this DockerServicePsSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServicePsSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerServicePsSettings ResetFilter(this DockerServicePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServicePsSettings.Format"/></em></p>
        ///   <p>Pretty-print tasks using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerServicePsSettings SetFormat(this DockerServicePsSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServicePsSettings.Format"/></em></p>
        ///   <p>Pretty-print tasks using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerServicePsSettings ResetFormat(this DockerServicePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region NoResolve
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServicePsSettings.NoResolve"/></em></p>
        ///   <p>Do not map IDs to Names.</p>
        /// </summary>
        [Pure]
        public static DockerServicePsSettings SetNoResolve(this DockerServicePsSettings toolSettings, bool? noResolve)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolve = noResolve;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServicePsSettings.NoResolve"/></em></p>
        ///   <p>Do not map IDs to Names.</p>
        /// </summary>
        [Pure]
        public static DockerServicePsSettings ResetNoResolve(this DockerServicePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolve = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServicePsSettings.NoResolve"/></em></p>
        ///   <p>Do not map IDs to Names.</p>
        /// </summary>
        [Pure]
        public static DockerServicePsSettings EnableNoResolve(this DockerServicePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolve = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServicePsSettings.NoResolve"/></em></p>
        ///   <p>Do not map IDs to Names.</p>
        /// </summary>
        [Pure]
        public static DockerServicePsSettings DisableNoResolve(this DockerServicePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolve = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServicePsSettings.NoResolve"/></em></p>
        ///   <p>Do not map IDs to Names.</p>
        /// </summary>
        [Pure]
        public static DockerServicePsSettings ToggleNoResolve(this DockerServicePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolve = !toolSettings.NoResolve;
            return toolSettings;
        }
        #endregion
        #region NoTrunc
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServicePsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerServicePsSettings SetNoTrunc(this DockerServicePsSettings toolSettings, bool? noTrunc)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = noTrunc;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServicePsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerServicePsSettings ResetNoTrunc(this DockerServicePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServicePsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerServicePsSettings EnableNoTrunc(this DockerServicePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServicePsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerServicePsSettings DisableNoTrunc(this DockerServicePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServicePsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerServicePsSettings ToggleNoTrunc(this DockerServicePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = !toolSettings.NoTrunc;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServicePsSettings.Quiet"/></em></p>
        ///   <p>Only display task IDs.</p>
        /// </summary>
        [Pure]
        public static DockerServicePsSettings SetQuiet(this DockerServicePsSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServicePsSettings.Quiet"/></em></p>
        ///   <p>Only display task IDs.</p>
        /// </summary>
        [Pure]
        public static DockerServicePsSettings ResetQuiet(this DockerServicePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServicePsSettings.Quiet"/></em></p>
        ///   <p>Only display task IDs.</p>
        /// </summary>
        [Pure]
        public static DockerServicePsSettings EnableQuiet(this DockerServicePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServicePsSettings.Quiet"/></em></p>
        ///   <p>Only display task IDs.</p>
        /// </summary>
        [Pure]
        public static DockerServicePsSettings DisableQuiet(this DockerServicePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServicePsSettings.Quiet"/></em></p>
        ///   <p>Only display task IDs.</p>
        /// </summary>
        [Pure]
        public static DockerServicePsSettings ToggleQuiet(this DockerServicePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
        #region Services
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServicePsSettings.Services"/> to a new list</em></p>
        ///   <p>SERVICE</p>
        /// </summary>
        [Pure]
        public static DockerServicePsSettings SetServices(this DockerServicePsSettings toolSettings, params string[] services)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServicesInternal = services.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServicePsSettings.Services"/> to a new list</em></p>
        ///   <p>SERVICE</p>
        /// </summary>
        [Pure]
        public static DockerServicePsSettings SetServices(this DockerServicePsSettings toolSettings, IEnumerable<string> services)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServicesInternal = services.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServicePsSettings.Services"/></em></p>
        ///   <p>SERVICE</p>
        /// </summary>
        [Pure]
        public static DockerServicePsSettings AddServices(this DockerServicePsSettings toolSettings, params string[] services)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServicesInternal.AddRange(services);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServicePsSettings.Services"/></em></p>
        ///   <p>SERVICE</p>
        /// </summary>
        [Pure]
        public static DockerServicePsSettings AddServices(this DockerServicePsSettings toolSettings, IEnumerable<string> services)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServicesInternal.AddRange(services);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServicePsSettings.Services"/></em></p>
        ///   <p>SERVICE</p>
        /// </summary>
        [Pure]
        public static DockerServicePsSettings ClearServices(this DockerServicePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServicesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServicePsSettings.Services"/></em></p>
        ///   <p>SERVICE</p>
        /// </summary>
        [Pure]
        public static DockerServicePsSettings RemoveServices(this DockerServicePsSettings toolSettings, params string[] services)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(services);
            toolSettings.ServicesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServicePsSettings.Services"/></em></p>
        ///   <p>SERVICE</p>
        /// </summary>
        [Pure]
        public static DockerServicePsSettings RemoveServices(this DockerServicePsSettings toolSettings, IEnumerable<string> services)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(services);
            toolSettings.ServicesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerStopSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerStopSettingsExtensions
    {
        #region Time
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStopSettings.Time"/></em></p>
        ///   <p>Seconds to wait for stop before killing it.</p>
        /// </summary>
        [Pure]
        public static DockerStopSettings SetTime(this DockerStopSettings toolSettings, int? time)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Time = time;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStopSettings.Time"/></em></p>
        ///   <p>Seconds to wait for stop before killing it.</p>
        /// </summary>
        [Pure]
        public static DockerStopSettings ResetTime(this DockerStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Time = null;
            return toolSettings;
        }
        #endregion
        #region Containers
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStopSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerStopSettings SetContainers(this DockerStopSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStopSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerStopSettings SetContainers(this DockerStopSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerStopSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerStopSettings AddContainers(this DockerStopSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerStopSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerStopSettings AddContainers(this DockerStopSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerStopSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerStopSettings ClearContainers(this DockerStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerStopSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerStopSettings RemoveContainers(this DockerStopSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerStopSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerStopSettings RemoveContainers(this DockerStopSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerNodeSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerNodeSettingsExtensions
    {
    }
    #endregion
    #region DockerUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerUpdateSettingsExtensions
    {
        #region BlkioWeight
        /// <summary>
        ///   <p><em>Sets <see cref="DockerUpdateSettings.BlkioWeight"/></em></p>
        ///   <p>Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0).</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings SetBlkioWeight(this DockerUpdateSettings toolSettings, int? blkioWeight)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeight = blkioWeight;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerUpdateSettings.BlkioWeight"/></em></p>
        ///   <p>Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0).</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings ResetBlkioWeight(this DockerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeight = null;
            return toolSettings;
        }
        #endregion
        #region CpuPeriod
        /// <summary>
        ///   <p><em>Sets <see cref="DockerUpdateSettings.CpuPeriod"/></em></p>
        ///   <p>Limit CPU CFS (Completely Fair Scheduler) period.</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings SetCpuPeriod(this DockerUpdateSettings toolSettings, long? cpuPeriod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuPeriod = cpuPeriod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerUpdateSettings.CpuPeriod"/></em></p>
        ///   <p>Limit CPU CFS (Completely Fair Scheduler) period.</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings ResetCpuPeriod(this DockerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuPeriod = null;
            return toolSettings;
        }
        #endregion
        #region CpuQuota
        /// <summary>
        ///   <p><em>Sets <see cref="DockerUpdateSettings.CpuQuota"/></em></p>
        ///   <p>Limit CPU CFS (Completely Fair Scheduler) quota.</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings SetCpuQuota(this DockerUpdateSettings toolSettings, long? cpuQuota)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuQuota = cpuQuota;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerUpdateSettings.CpuQuota"/></em></p>
        ///   <p>Limit CPU CFS (Completely Fair Scheduler) quota.</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings ResetCpuQuota(this DockerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuQuota = null;
            return toolSettings;
        }
        #endregion
        #region CpuRtPeriod
        /// <summary>
        ///   <p><em>Sets <see cref="DockerUpdateSettings.CpuRtPeriod"/></em></p>
        ///   <p>Limit the CPU real-time period in microseconds.</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings SetCpuRtPeriod(this DockerUpdateSettings toolSettings, long? cpuRtPeriod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuRtPeriod = cpuRtPeriod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerUpdateSettings.CpuRtPeriod"/></em></p>
        ///   <p>Limit the CPU real-time period in microseconds.</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings ResetCpuRtPeriod(this DockerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuRtPeriod = null;
            return toolSettings;
        }
        #endregion
        #region CpuRtRuntime
        /// <summary>
        ///   <p><em>Sets <see cref="DockerUpdateSettings.CpuRtRuntime"/></em></p>
        ///   <p>Limit the CPU real-time runtime in microseconds.</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings SetCpuRtRuntime(this DockerUpdateSettings toolSettings, long? cpuRtRuntime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuRtRuntime = cpuRtRuntime;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerUpdateSettings.CpuRtRuntime"/></em></p>
        ///   <p>Limit the CPU real-time runtime in microseconds.</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings ResetCpuRtRuntime(this DockerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuRtRuntime = null;
            return toolSettings;
        }
        #endregion
        #region CpuShares
        /// <summary>
        ///   <p><em>Sets <see cref="DockerUpdateSettings.CpuShares"/></em></p>
        ///   <p>CPU shares (relative weight).</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings SetCpuShares(this DockerUpdateSettings toolSettings, long? cpuShares)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuShares = cpuShares;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerUpdateSettings.CpuShares"/></em></p>
        ///   <p>CPU shares (relative weight).</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings ResetCpuShares(this DockerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuShares = null;
            return toolSettings;
        }
        #endregion
        #region Cpus
        /// <summary>
        ///   <p><em>Sets <see cref="DockerUpdateSettings.Cpus"/></em></p>
        ///   <p>Number of CPUs.</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings SetCpus(this DockerUpdateSettings toolSettings, decimal? cpus)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cpus = cpus;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerUpdateSettings.Cpus"/></em></p>
        ///   <p>Number of CPUs.</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings ResetCpus(this DockerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cpus = null;
            return toolSettings;
        }
        #endregion
        #region CpusetCpus
        /// <summary>
        ///   <p><em>Sets <see cref="DockerUpdateSettings.CpusetCpus"/></em></p>
        ///   <p>CPUs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings SetCpusetCpus(this DockerUpdateSettings toolSettings, string cpusetCpus)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetCpus = cpusetCpus;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerUpdateSettings.CpusetCpus"/></em></p>
        ///   <p>CPUs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings ResetCpusetCpus(this DockerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetCpus = null;
            return toolSettings;
        }
        #endregion
        #region CpusetMems
        /// <summary>
        ///   <p><em>Sets <see cref="DockerUpdateSettings.CpusetMems"/></em></p>
        ///   <p>MEMs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings SetCpusetMems(this DockerUpdateSettings toolSettings, string cpusetMems)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetMems = cpusetMems;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerUpdateSettings.CpusetMems"/></em></p>
        ///   <p>MEMs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings ResetCpusetMems(this DockerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetMems = null;
            return toolSettings;
        }
        #endregion
        #region KernelMemory
        /// <summary>
        ///   <p><em>Sets <see cref="DockerUpdateSettings.KernelMemory"/></em></p>
        ///   <p>Kernel memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings SetKernelMemory(this DockerUpdateSettings toolSettings, long? kernelMemory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KernelMemory = kernelMemory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerUpdateSettings.KernelMemory"/></em></p>
        ///   <p>Kernel memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings ResetKernelMemory(this DockerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KernelMemory = null;
            return toolSettings;
        }
        #endregion
        #region Memory
        /// <summary>
        ///   <p><em>Sets <see cref="DockerUpdateSettings.Memory"/></em></p>
        ///   <p>Memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings SetMemory(this DockerUpdateSettings toolSettings, long? memory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Memory = memory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerUpdateSettings.Memory"/></em></p>
        ///   <p>Memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings ResetMemory(this DockerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Memory = null;
            return toolSettings;
        }
        #endregion
        #region MemoryReservation
        /// <summary>
        ///   <p><em>Sets <see cref="DockerUpdateSettings.MemoryReservation"/></em></p>
        ///   <p>Memory soft limit.</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings SetMemoryReservation(this DockerUpdateSettings toolSettings, long? memoryReservation)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemoryReservation = memoryReservation;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerUpdateSettings.MemoryReservation"/></em></p>
        ///   <p>Memory soft limit.</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings ResetMemoryReservation(this DockerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemoryReservation = null;
            return toolSettings;
        }
        #endregion
        #region MemorySwap
        /// <summary>
        ///   <p><em>Sets <see cref="DockerUpdateSettings.MemorySwap"/></em></p>
        ///   <p>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings SetMemorySwap(this DockerUpdateSettings toolSettings, long? memorySwap)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemorySwap = memorySwap;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerUpdateSettings.MemorySwap"/></em></p>
        ///   <p>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings ResetMemorySwap(this DockerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemorySwap = null;
            return toolSettings;
        }
        #endregion
        #region PidsLimit
        /// <summary>
        ///   <p><em>Sets <see cref="DockerUpdateSettings.PidsLimit"/></em></p>
        ///   <p>Tune container pids limit (set -1 for unlimited).</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings SetPidsLimit(this DockerUpdateSettings toolSettings, long? pidsLimit)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PidsLimit = pidsLimit;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerUpdateSettings.PidsLimit"/></em></p>
        ///   <p>Tune container pids limit (set -1 for unlimited).</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings ResetPidsLimit(this DockerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PidsLimit = null;
            return toolSettings;
        }
        #endregion
        #region Restart
        /// <summary>
        ///   <p><em>Sets <see cref="DockerUpdateSettings.Restart"/></em></p>
        ///   <p>Restart policy to apply when a container exits.</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings SetRestart(this DockerUpdateSettings toolSettings, string restart)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Restart = restart;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerUpdateSettings.Restart"/></em></p>
        ///   <p>Restart policy to apply when a container exits.</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings ResetRestart(this DockerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Restart = null;
            return toolSettings;
        }
        #endregion
        #region Containers
        /// <summary>
        ///   <p><em>Sets <see cref="DockerUpdateSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings SetContainers(this DockerUpdateSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerUpdateSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings SetContainers(this DockerUpdateSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerUpdateSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings AddContainers(this DockerUpdateSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerUpdateSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings AddContainers(this DockerUpdateSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerUpdateSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings ClearContainers(this DockerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerUpdateSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings RemoveContainers(this DockerUpdateSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerUpdateSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerUpdateSettings RemoveContainers(this DockerUpdateSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerPluginCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerPluginCreateSettingsExtensions
    {
        #region Compress
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginCreateSettings.Compress"/></em></p>
        ///   <p>Compress the context using gzip.</p>
        /// </summary>
        [Pure]
        public static DockerPluginCreateSettings SetCompress(this DockerPluginCreateSettings toolSettings, bool? compress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Compress = compress;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPluginCreateSettings.Compress"/></em></p>
        ///   <p>Compress the context using gzip.</p>
        /// </summary>
        [Pure]
        public static DockerPluginCreateSettings ResetCompress(this DockerPluginCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Compress = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerPluginCreateSettings.Compress"/></em></p>
        ///   <p>Compress the context using gzip.</p>
        /// </summary>
        [Pure]
        public static DockerPluginCreateSettings EnableCompress(this DockerPluginCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Compress = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerPluginCreateSettings.Compress"/></em></p>
        ///   <p>Compress the context using gzip.</p>
        /// </summary>
        [Pure]
        public static DockerPluginCreateSettings DisableCompress(this DockerPluginCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Compress = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerPluginCreateSettings.Compress"/></em></p>
        ///   <p>Compress the context using gzip.</p>
        /// </summary>
        [Pure]
        public static DockerPluginCreateSettings ToggleCompress(this DockerPluginCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Compress = !toolSettings.Compress;
            return toolSettings;
        }
        #endregion
        #region Plugin
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginCreateSettings.Plugin"/></em></p>
        ///   <p>PLUGIN</p>
        /// </summary>
        [Pure]
        public static DockerPluginCreateSettings SetPlugin(this DockerPluginCreateSettings toolSettings, string plugin)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Plugin = plugin;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPluginCreateSettings.Plugin"/></em></p>
        ///   <p>PLUGIN</p>
        /// </summary>
        [Pure]
        public static DockerPluginCreateSettings ResetPlugin(this DockerPluginCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Plugin = null;
            return toolSettings;
        }
        #endregion
        #region PluginDataDir
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginCreateSettings.PluginDataDir"/></em></p>
        ///   <p>PLUGIN-DATA-DIR</p>
        /// </summary>
        [Pure]
        public static DockerPluginCreateSettings SetPluginDataDir(this DockerPluginCreateSettings toolSettings, string pluginDataDir)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PluginDataDir = pluginDataDir;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPluginCreateSettings.PluginDataDir"/></em></p>
        ///   <p>PLUGIN-DATA-DIR</p>
        /// </summary>
        [Pure]
        public static DockerPluginCreateSettings ResetPluginDataDir(this DockerPluginCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PluginDataDir = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerSystemInfoSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerSystemInfoSettingsExtensions
    {
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSystemInfoSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerSystemInfoSettings SetFormat(this DockerSystemInfoSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSystemInfoSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerSystemInfoSettings ResetFormat(this DockerSystemInfoSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerVolumePruneSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerVolumePruneSettingsExtensions
    {
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="DockerVolumePruneSettings.Filter"/></em></p>
        ///   <p>Provide filter values (e.g. 'label=&lt;label&gt;').</p>
        /// </summary>
        [Pure]
        public static DockerVolumePruneSettings SetFilter(this DockerVolumePruneSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerVolumePruneSettings.Filter"/></em></p>
        ///   <p>Provide filter values (e.g. 'label=&lt;label&gt;').</p>
        /// </summary>
        [Pure]
        public static DockerVolumePruneSettings ResetFilter(this DockerVolumePruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Force
        /// <summary>
        ///   <p><em>Sets <see cref="DockerVolumePruneSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerVolumePruneSettings SetForce(this DockerVolumePruneSettings toolSettings, bool? force)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = force;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerVolumePruneSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerVolumePruneSettings ResetForce(this DockerVolumePruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerVolumePruneSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerVolumePruneSettings EnableForce(this DockerVolumePruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerVolumePruneSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerVolumePruneSettings DisableForce(this DockerVolumePruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerVolumePruneSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerVolumePruneSettings ToggleForce(this DockerVolumePruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = !toolSettings.Force;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerPluginUpgradeSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerPluginUpgradeSettingsExtensions
    {
        #region DisableContentTrust
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginUpgradeSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerPluginUpgradeSettings SetDisableContentTrust(this DockerPluginUpgradeSettings toolSettings, bool? disableContentTrust)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = disableContentTrust;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPluginUpgradeSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerPluginUpgradeSettings ResetDisableContentTrust(this DockerPluginUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerPluginUpgradeSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerPluginUpgradeSettings EnableDisableContentTrust(this DockerPluginUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerPluginUpgradeSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerPluginUpgradeSettings DisableDisableContentTrust(this DockerPluginUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerPluginUpgradeSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerPluginUpgradeSettings ToggleDisableContentTrust(this DockerPluginUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = !toolSettings.DisableContentTrust;
            return toolSettings;
        }
        #endregion
        #region GrantAllPermissions
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginUpgradeSettings.GrantAllPermissions"/></em></p>
        ///   <p>Grant all permissions necessary to run the plugin.</p>
        /// </summary>
        [Pure]
        public static DockerPluginUpgradeSettings SetGrantAllPermissions(this DockerPluginUpgradeSettings toolSettings, bool? grantAllPermissions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GrantAllPermissions = grantAllPermissions;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPluginUpgradeSettings.GrantAllPermissions"/></em></p>
        ///   <p>Grant all permissions necessary to run the plugin.</p>
        /// </summary>
        [Pure]
        public static DockerPluginUpgradeSettings ResetGrantAllPermissions(this DockerPluginUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GrantAllPermissions = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerPluginUpgradeSettings.GrantAllPermissions"/></em></p>
        ///   <p>Grant all permissions necessary to run the plugin.</p>
        /// </summary>
        [Pure]
        public static DockerPluginUpgradeSettings EnableGrantAllPermissions(this DockerPluginUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GrantAllPermissions = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerPluginUpgradeSettings.GrantAllPermissions"/></em></p>
        ///   <p>Grant all permissions necessary to run the plugin.</p>
        /// </summary>
        [Pure]
        public static DockerPluginUpgradeSettings DisableGrantAllPermissions(this DockerPluginUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GrantAllPermissions = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerPluginUpgradeSettings.GrantAllPermissions"/></em></p>
        ///   <p>Grant all permissions necessary to run the plugin.</p>
        /// </summary>
        [Pure]
        public static DockerPluginUpgradeSettings ToggleGrantAllPermissions(this DockerPluginUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GrantAllPermissions = !toolSettings.GrantAllPermissions;
            return toolSettings;
        }
        #endregion
        #region SkipRemoteCheck
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginUpgradeSettings.SkipRemoteCheck"/></em></p>
        ///   <p>Do not check if specified remote plugin matches existing plugin image.</p>
        /// </summary>
        [Pure]
        public static DockerPluginUpgradeSettings SetSkipRemoteCheck(this DockerPluginUpgradeSettings toolSettings, bool? skipRemoteCheck)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SkipRemoteCheck = skipRemoteCheck;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPluginUpgradeSettings.SkipRemoteCheck"/></em></p>
        ///   <p>Do not check if specified remote plugin matches existing plugin image.</p>
        /// </summary>
        [Pure]
        public static DockerPluginUpgradeSettings ResetSkipRemoteCheck(this DockerPluginUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SkipRemoteCheck = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerPluginUpgradeSettings.SkipRemoteCheck"/></em></p>
        ///   <p>Do not check if specified remote plugin matches existing plugin image.</p>
        /// </summary>
        [Pure]
        public static DockerPluginUpgradeSettings EnableSkipRemoteCheck(this DockerPluginUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SkipRemoteCheck = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerPluginUpgradeSettings.SkipRemoteCheck"/></em></p>
        ///   <p>Do not check if specified remote plugin matches existing plugin image.</p>
        /// </summary>
        [Pure]
        public static DockerPluginUpgradeSettings DisableSkipRemoteCheck(this DockerPluginUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SkipRemoteCheck = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerPluginUpgradeSettings.SkipRemoteCheck"/></em></p>
        ///   <p>Do not check if specified remote plugin matches existing plugin image.</p>
        /// </summary>
        [Pure]
        public static DockerPluginUpgradeSettings ToggleSkipRemoteCheck(this DockerPluginUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SkipRemoteCheck = !toolSettings.SkipRemoteCheck;
            return toolSettings;
        }
        #endregion
        #region Plugin
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginUpgradeSettings.Plugin"/></em></p>
        ///   <p>PLUGIN</p>
        /// </summary>
        [Pure]
        public static DockerPluginUpgradeSettings SetPlugin(this DockerPluginUpgradeSettings toolSettings, string plugin)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Plugin = plugin;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPluginUpgradeSettings.Plugin"/></em></p>
        ///   <p>PLUGIN</p>
        /// </summary>
        [Pure]
        public static DockerPluginUpgradeSettings ResetPlugin(this DockerPluginUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Plugin = null;
            return toolSettings;
        }
        #endregion
        #region Remote
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginUpgradeSettings.Remote"/></em></p>
        ///   <p>[REMOTE]</p>
        /// </summary>
        [Pure]
        public static DockerPluginUpgradeSettings SetRemote(this DockerPluginUpgradeSettings toolSettings, string remote)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remote = remote;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPluginUpgradeSettings.Remote"/></em></p>
        ///   <p>[REMOTE]</p>
        /// </summary>
        [Pure]
        public static DockerPluginUpgradeSettings ResetRemote(this DockerPluginUpgradeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Remote = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerBuilderPruneSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerBuilderPruneSettingsExtensions
    {
    }
    #endregion
    #region DockerSwarmJoinTokenSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerSwarmJoinTokenSettingsExtensions
    {
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmJoinTokenSettings.Quiet"/></em></p>
        ///   <p>Only display token.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmJoinTokenSettings SetQuiet(this DockerSwarmJoinTokenSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmJoinTokenSettings.Quiet"/></em></p>
        ///   <p>Only display token.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmJoinTokenSettings ResetQuiet(this DockerSwarmJoinTokenSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerSwarmJoinTokenSettings.Quiet"/></em></p>
        ///   <p>Only display token.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmJoinTokenSettings EnableQuiet(this DockerSwarmJoinTokenSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerSwarmJoinTokenSettings.Quiet"/></em></p>
        ///   <p>Only display token.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmJoinTokenSettings DisableQuiet(this DockerSwarmJoinTokenSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerSwarmJoinTokenSettings.Quiet"/></em></p>
        ///   <p>Only display token.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmJoinTokenSettings ToggleQuiet(this DockerSwarmJoinTokenSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
        #region Rotate
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmJoinTokenSettings.Rotate"/></em></p>
        ///   <p>Rotate join token.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmJoinTokenSettings SetRotate(this DockerSwarmJoinTokenSettings toolSettings, bool? rotate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rotate = rotate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmJoinTokenSettings.Rotate"/></em></p>
        ///   <p>Rotate join token.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmJoinTokenSettings ResetRotate(this DockerSwarmJoinTokenSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rotate = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerSwarmJoinTokenSettings.Rotate"/></em></p>
        ///   <p>Rotate join token.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmJoinTokenSettings EnableRotate(this DockerSwarmJoinTokenSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rotate = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerSwarmJoinTokenSettings.Rotate"/></em></p>
        ///   <p>Rotate join token.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmJoinTokenSettings DisableRotate(this DockerSwarmJoinTokenSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rotate = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerSwarmJoinTokenSettings.Rotate"/></em></p>
        ///   <p>Rotate join token.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmJoinTokenSettings ToggleRotate(this DockerSwarmJoinTokenSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rotate = !toolSettings.Rotate;
            return toolSettings;
        }
        #endregion
        #region Worker
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmJoinTokenSettings.Worker"/></em></p>
        ///   <p>(worker|manager)</p>
        /// </summary>
        [Pure]
        public static DockerSwarmJoinTokenSettings SetWorker(this DockerSwarmJoinTokenSettings toolSettings, string worker)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Worker = worker;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmJoinTokenSettings.Worker"/></em></p>
        ///   <p>(worker|manager)</p>
        /// </summary>
        [Pure]
        public static DockerSwarmJoinTokenSettings ResetWorker(this DockerSwarmJoinTokenSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Worker = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerNodeUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerNodeUpdateSettingsExtensions
    {
        #region Availability
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodeUpdateSettings.Availability"/></em></p>
        ///   <p>Availability of the node ("active"|"pause"|"drain").</p>
        /// </summary>
        [Pure]
        public static DockerNodeUpdateSettings SetAvailability(this DockerNodeUpdateSettings toolSettings, Availability availability)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Availability = availability;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNodeUpdateSettings.Availability"/></em></p>
        ///   <p>Availability of the node ("active"|"pause"|"drain").</p>
        /// </summary>
        [Pure]
        public static DockerNodeUpdateSettings ResetAvailability(this DockerNodeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Availability = null;
            return toolSettings;
        }
        #endregion
        #region LabelAdd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodeUpdateSettings.LabelAdd"/> to a new list</em></p>
        ///   <p>Add or update a node label (key=value).</p>
        /// </summary>
        [Pure]
        public static DockerNodeUpdateSettings SetLabelAdd(this DockerNodeUpdateSettings toolSettings, params string[] labelAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelAddInternal = labelAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodeUpdateSettings.LabelAdd"/> to a new list</em></p>
        ///   <p>Add or update a node label (key=value).</p>
        /// </summary>
        [Pure]
        public static DockerNodeUpdateSettings SetLabelAdd(this DockerNodeUpdateSettings toolSettings, IEnumerable<string> labelAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelAddInternal = labelAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNodeUpdateSettings.LabelAdd"/></em></p>
        ///   <p>Add or update a node label (key=value).</p>
        /// </summary>
        [Pure]
        public static DockerNodeUpdateSettings AddLabelAdd(this DockerNodeUpdateSettings toolSettings, params string[] labelAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelAddInternal.AddRange(labelAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNodeUpdateSettings.LabelAdd"/></em></p>
        ///   <p>Add or update a node label (key=value).</p>
        /// </summary>
        [Pure]
        public static DockerNodeUpdateSettings AddLabelAdd(this DockerNodeUpdateSettings toolSettings, IEnumerable<string> labelAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelAddInternal.AddRange(labelAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerNodeUpdateSettings.LabelAdd"/></em></p>
        ///   <p>Add or update a node label (key=value).</p>
        /// </summary>
        [Pure]
        public static DockerNodeUpdateSettings ClearLabelAdd(this DockerNodeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelAddInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNodeUpdateSettings.LabelAdd"/></em></p>
        ///   <p>Add or update a node label (key=value).</p>
        /// </summary>
        [Pure]
        public static DockerNodeUpdateSettings RemoveLabelAdd(this DockerNodeUpdateSettings toolSettings, params string[] labelAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(labelAdd);
            toolSettings.LabelAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNodeUpdateSettings.LabelAdd"/></em></p>
        ///   <p>Add or update a node label (key=value).</p>
        /// </summary>
        [Pure]
        public static DockerNodeUpdateSettings RemoveLabelAdd(this DockerNodeUpdateSettings toolSettings, IEnumerable<string> labelAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(labelAdd);
            toolSettings.LabelAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region LabelRm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodeUpdateSettings.LabelRm"/> to a new list</em></p>
        ///   <p>Remove a node label if exists.</p>
        /// </summary>
        [Pure]
        public static DockerNodeUpdateSettings SetLabelRm(this DockerNodeUpdateSettings toolSettings, params string[] labelRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelRmInternal = labelRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodeUpdateSettings.LabelRm"/> to a new list</em></p>
        ///   <p>Remove a node label if exists.</p>
        /// </summary>
        [Pure]
        public static DockerNodeUpdateSettings SetLabelRm(this DockerNodeUpdateSettings toolSettings, IEnumerable<string> labelRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelRmInternal = labelRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNodeUpdateSettings.LabelRm"/></em></p>
        ///   <p>Remove a node label if exists.</p>
        /// </summary>
        [Pure]
        public static DockerNodeUpdateSettings AddLabelRm(this DockerNodeUpdateSettings toolSettings, params string[] labelRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelRmInternal.AddRange(labelRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNodeUpdateSettings.LabelRm"/></em></p>
        ///   <p>Remove a node label if exists.</p>
        /// </summary>
        [Pure]
        public static DockerNodeUpdateSettings AddLabelRm(this DockerNodeUpdateSettings toolSettings, IEnumerable<string> labelRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelRmInternal.AddRange(labelRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerNodeUpdateSettings.LabelRm"/></em></p>
        ///   <p>Remove a node label if exists.</p>
        /// </summary>
        [Pure]
        public static DockerNodeUpdateSettings ClearLabelRm(this DockerNodeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelRmInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNodeUpdateSettings.LabelRm"/></em></p>
        ///   <p>Remove a node label if exists.</p>
        /// </summary>
        [Pure]
        public static DockerNodeUpdateSettings RemoveLabelRm(this DockerNodeUpdateSettings toolSettings, params string[] labelRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(labelRm);
            toolSettings.LabelRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNodeUpdateSettings.LabelRm"/></em></p>
        ///   <p>Remove a node label if exists.</p>
        /// </summary>
        [Pure]
        public static DockerNodeUpdateSettings RemoveLabelRm(this DockerNodeUpdateSettings toolSettings, IEnumerable<string> labelRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(labelRm);
            toolSettings.LabelRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Role
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodeUpdateSettings.Role"/></em></p>
        ///   <p>Role of the node ("worker"|"manager").</p>
        /// </summary>
        [Pure]
        public static DockerNodeUpdateSettings SetRole(this DockerNodeUpdateSettings toolSettings, Role role)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Role = role;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNodeUpdateSettings.Role"/></em></p>
        ///   <p>Role of the node ("worker"|"manager").</p>
        /// </summary>
        [Pure]
        public static DockerNodeUpdateSettings ResetRole(this DockerNodeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Role = null;
            return toolSettings;
        }
        #endregion
        #region Node
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodeUpdateSettings.Node"/></em></p>
        ///   <p>NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodeUpdateSettings SetNode(this DockerNodeUpdateSettings toolSettings, string node)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Node = node;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNodeUpdateSettings.Node"/></em></p>
        ///   <p>NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodeUpdateSettings ResetNode(this DockerNodeUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Node = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerTrustSignerAddSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerTrustSignerAddSettingsExtensions
    {
        #region Options
        /// <summary>
        ///   <p><em>Sets <see cref="DockerTrustSignerAddSettings.Options"/></em></p>
        ///   <p>OPTIONS</p>
        /// </summary>
        [Pure]
        public static DockerTrustSignerAddSettings SetOptions(this DockerTrustSignerAddSettings toolSettings, string options)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Options = options;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerTrustSignerAddSettings.Options"/></em></p>
        ///   <p>OPTIONS</p>
        /// </summary>
        [Pure]
        public static DockerTrustSignerAddSettings ResetOptions(this DockerTrustSignerAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Options = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="DockerTrustSignerAddSettings.Name"/></em></p>
        ///   <p>NAME</p>
        /// </summary>
        [Pure]
        public static DockerTrustSignerAddSettings SetName(this DockerTrustSignerAddSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerTrustSignerAddSettings.Name"/></em></p>
        ///   <p>NAME</p>
        /// </summary>
        [Pure]
        public static DockerTrustSignerAddSettings ResetName(this DockerTrustSignerAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Repositories
        /// <summary>
        ///   <p><em>Sets <see cref="DockerTrustSignerAddSettings.Repositories"/> to a new list</em></p>
        ///   <p>REPOSITORY</p>
        /// </summary>
        [Pure]
        public static DockerTrustSignerAddSettings SetRepositories(this DockerTrustSignerAddSettings toolSettings, params string[] repositories)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoriesInternal = repositories.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerTrustSignerAddSettings.Repositories"/> to a new list</em></p>
        ///   <p>REPOSITORY</p>
        /// </summary>
        [Pure]
        public static DockerTrustSignerAddSettings SetRepositories(this DockerTrustSignerAddSettings toolSettings, IEnumerable<string> repositories)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoriesInternal = repositories.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerTrustSignerAddSettings.Repositories"/></em></p>
        ///   <p>REPOSITORY</p>
        /// </summary>
        [Pure]
        public static DockerTrustSignerAddSettings AddRepositories(this DockerTrustSignerAddSettings toolSettings, params string[] repositories)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoriesInternal.AddRange(repositories);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerTrustSignerAddSettings.Repositories"/></em></p>
        ///   <p>REPOSITORY</p>
        /// </summary>
        [Pure]
        public static DockerTrustSignerAddSettings AddRepositories(this DockerTrustSignerAddSettings toolSettings, IEnumerable<string> repositories)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoriesInternal.AddRange(repositories);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerTrustSignerAddSettings.Repositories"/></em></p>
        ///   <p>REPOSITORY</p>
        /// </summary>
        [Pure]
        public static DockerTrustSignerAddSettings ClearRepositories(this DockerTrustSignerAddSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoriesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerTrustSignerAddSettings.Repositories"/></em></p>
        ///   <p>REPOSITORY</p>
        /// </summary>
        [Pure]
        public static DockerTrustSignerAddSettings RemoveRepositories(this DockerTrustSignerAddSettings toolSettings, params string[] repositories)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(repositories);
            toolSettings.RepositoriesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerTrustSignerAddSettings.Repositories"/></em></p>
        ///   <p>REPOSITORY</p>
        /// </summary>
        [Pure]
        public static DockerTrustSignerAddSettings RemoveRepositories(this DockerTrustSignerAddSettings toolSettings, IEnumerable<string> repositories)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(repositories);
            toolSettings.RepositoriesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerSwarmUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerSwarmUpdateSettingsExtensions
    {
        #region Autolock
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmUpdateSettings.Autolock"/></em></p>
        ///   <p>Change manager autolocking setting (true|false).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUpdateSettings SetAutolock(this DockerSwarmUpdateSettings toolSettings, bool? autolock)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Autolock = autolock;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmUpdateSettings.Autolock"/></em></p>
        ///   <p>Change manager autolocking setting (true|false).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUpdateSettings ResetAutolock(this DockerSwarmUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Autolock = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerSwarmUpdateSettings.Autolock"/></em></p>
        ///   <p>Change manager autolocking setting (true|false).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUpdateSettings EnableAutolock(this DockerSwarmUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Autolock = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerSwarmUpdateSettings.Autolock"/></em></p>
        ///   <p>Change manager autolocking setting (true|false).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUpdateSettings DisableAutolock(this DockerSwarmUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Autolock = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerSwarmUpdateSettings.Autolock"/></em></p>
        ///   <p>Change manager autolocking setting (true|false).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUpdateSettings ToggleAutolock(this DockerSwarmUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Autolock = !toolSettings.Autolock;
            return toolSettings;
        }
        #endregion
        #region CertExpiry
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmUpdateSettings.CertExpiry"/></em></p>
        ///   <p>Validity period for node certificates (ns|us|ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUpdateSettings SetCertExpiry(this DockerSwarmUpdateSettings toolSettings, string certExpiry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CertExpiry = certExpiry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmUpdateSettings.CertExpiry"/></em></p>
        ///   <p>Validity period for node certificates (ns|us|ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUpdateSettings ResetCertExpiry(this DockerSwarmUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CertExpiry = null;
            return toolSettings;
        }
        #endregion
        #region DispatcherHeartbeat
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmUpdateSettings.DispatcherHeartbeat"/></em></p>
        ///   <p>Dispatcher heartbeat period (ns|us|ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUpdateSettings SetDispatcherHeartbeat(this DockerSwarmUpdateSettings toolSettings, string dispatcherHeartbeat)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DispatcherHeartbeat = dispatcherHeartbeat;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmUpdateSettings.DispatcherHeartbeat"/></em></p>
        ///   <p>Dispatcher heartbeat period (ns|us|ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUpdateSettings ResetDispatcherHeartbeat(this DockerSwarmUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DispatcherHeartbeat = null;
            return toolSettings;
        }
        #endregion
        #region ExternalCa
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmUpdateSettings.ExternalCa"/></em></p>
        ///   <p>Specifications of one or more certificate signing endpoints.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUpdateSettings SetExternalCa(this DockerSwarmUpdateSettings toolSettings, string externalCa)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExternalCa = externalCa;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmUpdateSettings.ExternalCa"/></em></p>
        ///   <p>Specifications of one or more certificate signing endpoints.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUpdateSettings ResetExternalCa(this DockerSwarmUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExternalCa = null;
            return toolSettings;
        }
        #endregion
        #region MaxSnapshots
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmUpdateSettings.MaxSnapshots"/></em></p>
        ///   <p>Number of additional Raft snapshots to retain.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUpdateSettings SetMaxSnapshots(this DockerSwarmUpdateSettings toolSettings, int? maxSnapshots)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxSnapshots = maxSnapshots;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmUpdateSettings.MaxSnapshots"/></em></p>
        ///   <p>Number of additional Raft snapshots to retain.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUpdateSettings ResetMaxSnapshots(this DockerSwarmUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxSnapshots = null;
            return toolSettings;
        }
        #endregion
        #region SnapshotInterval
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmUpdateSettings.SnapshotInterval"/></em></p>
        ///   <p>Number of log entries between Raft snapshots.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUpdateSettings SetSnapshotInterval(this DockerSwarmUpdateSettings toolSettings, int? snapshotInterval)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SnapshotInterval = snapshotInterval;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmUpdateSettings.SnapshotInterval"/></em></p>
        ///   <p>Number of log entries between Raft snapshots.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUpdateSettings ResetSnapshotInterval(this DockerSwarmUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SnapshotInterval = null;
            return toolSettings;
        }
        #endregion
        #region TaskHistoryLimit
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmUpdateSettings.TaskHistoryLimit"/></em></p>
        ///   <p>Task history retention limit.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUpdateSettings SetTaskHistoryLimit(this DockerSwarmUpdateSettings toolSettings, long? taskHistoryLimit)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TaskHistoryLimit = taskHistoryLimit;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmUpdateSettings.TaskHistoryLimit"/></em></p>
        ///   <p>Task history retention limit.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUpdateSettings ResetTaskHistoryLimit(this DockerSwarmUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TaskHistoryLimit = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerServiceLogsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerServiceLogsSettingsExtensions
    {
        #region Details
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceLogsSettings.Details"/></em></p>
        ///   <p>Show extra details provided to logs.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings SetDetails(this DockerServiceLogsSettings toolSettings, bool? details)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Details = details;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceLogsSettings.Details"/></em></p>
        ///   <p>Show extra details provided to logs.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings ResetDetails(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Details = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceLogsSettings.Details"/></em></p>
        ///   <p>Show extra details provided to logs.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings EnableDetails(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Details = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceLogsSettings.Details"/></em></p>
        ///   <p>Show extra details provided to logs.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings DisableDetails(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Details = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceLogsSettings.Details"/></em></p>
        ///   <p>Show extra details provided to logs.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings ToggleDetails(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Details = !toolSettings.Details;
            return toolSettings;
        }
        #endregion
        #region Follow
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceLogsSettings.Follow"/></em></p>
        ///   <p>Follow log output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings SetFollow(this DockerServiceLogsSettings toolSettings, bool? follow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Follow = follow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceLogsSettings.Follow"/></em></p>
        ///   <p>Follow log output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings ResetFollow(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Follow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceLogsSettings.Follow"/></em></p>
        ///   <p>Follow log output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings EnableFollow(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Follow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceLogsSettings.Follow"/></em></p>
        ///   <p>Follow log output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings DisableFollow(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Follow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceLogsSettings.Follow"/></em></p>
        ///   <p>Follow log output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings ToggleFollow(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Follow = !toolSettings.Follow;
            return toolSettings;
        }
        #endregion
        #region NoResolve
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceLogsSettings.NoResolve"/></em></p>
        ///   <p>Do not map IDs to Names in output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings SetNoResolve(this DockerServiceLogsSettings toolSettings, bool? noResolve)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolve = noResolve;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceLogsSettings.NoResolve"/></em></p>
        ///   <p>Do not map IDs to Names in output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings ResetNoResolve(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolve = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceLogsSettings.NoResolve"/></em></p>
        ///   <p>Do not map IDs to Names in output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings EnableNoResolve(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolve = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceLogsSettings.NoResolve"/></em></p>
        ///   <p>Do not map IDs to Names in output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings DisableNoResolve(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolve = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceLogsSettings.NoResolve"/></em></p>
        ///   <p>Do not map IDs to Names in output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings ToggleNoResolve(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolve = !toolSettings.NoResolve;
            return toolSettings;
        }
        #endregion
        #region NoTaskIds
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceLogsSettings.NoTaskIds"/></em></p>
        ///   <p>Do not include task IDs in output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings SetNoTaskIds(this DockerServiceLogsSettings toolSettings, bool? noTaskIds)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTaskIds = noTaskIds;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceLogsSettings.NoTaskIds"/></em></p>
        ///   <p>Do not include task IDs in output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings ResetNoTaskIds(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTaskIds = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceLogsSettings.NoTaskIds"/></em></p>
        ///   <p>Do not include task IDs in output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings EnableNoTaskIds(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTaskIds = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceLogsSettings.NoTaskIds"/></em></p>
        ///   <p>Do not include task IDs in output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings DisableNoTaskIds(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTaskIds = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceLogsSettings.NoTaskIds"/></em></p>
        ///   <p>Do not include task IDs in output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings ToggleNoTaskIds(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTaskIds = !toolSettings.NoTaskIds;
            return toolSettings;
        }
        #endregion
        #region NoTrunc
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceLogsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings SetNoTrunc(this DockerServiceLogsSettings toolSettings, bool? noTrunc)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = noTrunc;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceLogsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings ResetNoTrunc(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceLogsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings EnableNoTrunc(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceLogsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings DisableNoTrunc(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceLogsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings ToggleNoTrunc(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = !toolSettings.NoTrunc;
            return toolSettings;
        }
        #endregion
        #region Raw
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceLogsSettings.Raw"/></em></p>
        ///   <p>Do not neatly format logs.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings SetRaw(this DockerServiceLogsSettings toolSettings, bool? raw)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Raw = raw;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceLogsSettings.Raw"/></em></p>
        ///   <p>Do not neatly format logs.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings ResetRaw(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Raw = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceLogsSettings.Raw"/></em></p>
        ///   <p>Do not neatly format logs.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings EnableRaw(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Raw = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceLogsSettings.Raw"/></em></p>
        ///   <p>Do not neatly format logs.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings DisableRaw(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Raw = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceLogsSettings.Raw"/></em></p>
        ///   <p>Do not neatly format logs.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings ToggleRaw(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Raw = !toolSettings.Raw;
            return toolSettings;
        }
        #endregion
        #region Since
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceLogsSettings.Since"/></em></p>
        ///   <p>Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes).</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings SetSince(this DockerServiceLogsSettings toolSettings, string since)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Since = since;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceLogsSettings.Since"/></em></p>
        ///   <p>Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes).</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings ResetSince(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Since = null;
            return toolSettings;
        }
        #endregion
        #region Tail
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceLogsSettings.Tail"/></em></p>
        ///   <p>Number of lines to show from the end of the logs.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings SetTail(this DockerServiceLogsSettings toolSettings, string tail)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tail = tail;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceLogsSettings.Tail"/></em></p>
        ///   <p>Number of lines to show from the end of the logs.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings ResetTail(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tail = null;
            return toolSettings;
        }
        #endregion
        #region Timestamps
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceLogsSettings.Timestamps"/></em></p>
        ///   <p>Show timestamps.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings SetTimestamps(this DockerServiceLogsSettings toolSettings, bool? timestamps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timestamps = timestamps;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceLogsSettings.Timestamps"/></em></p>
        ///   <p>Show timestamps.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings ResetTimestamps(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timestamps = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceLogsSettings.Timestamps"/></em></p>
        ///   <p>Show timestamps.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings EnableTimestamps(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timestamps = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceLogsSettings.Timestamps"/></em></p>
        ///   <p>Show timestamps.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings DisableTimestamps(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timestamps = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceLogsSettings.Timestamps"/></em></p>
        ///   <p>Show timestamps.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings ToggleTimestamps(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timestamps = !toolSettings.Timestamps;
            return toolSettings;
        }
        #endregion
        #region Service
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceLogsSettings.Service"/></em></p>
        ///   <p>SERVICE|TASK</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings SetService(this DockerServiceLogsSettings toolSettings, string service)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Service = service;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceLogsSettings.Service"/></em></p>
        ///   <p>SERVICE|TASK</p>
        /// </summary>
        [Pure]
        public static DockerServiceLogsSettings ResetService(this DockerServiceLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Service = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerServiceLsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerServiceLsSettingsExtensions
    {
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceLsSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLsSettings SetFilter(this DockerServiceLsSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceLsSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLsSettings ResetFilter(this DockerServiceLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceLsSettings.Format"/></em></p>
        ///   <p>Pretty-print services using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLsSettings SetFormat(this DockerServiceLsSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceLsSettings.Format"/></em></p>
        ///   <p>Pretty-print services using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLsSettings ResetFormat(this DockerServiceLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceLsSettings.Quiet"/></em></p>
        ///   <p>Only display IDs.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLsSettings SetQuiet(this DockerServiceLsSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceLsSettings.Quiet"/></em></p>
        ///   <p>Only display IDs.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLsSettings ResetQuiet(this DockerServiceLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceLsSettings.Quiet"/></em></p>
        ///   <p>Only display IDs.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLsSettings EnableQuiet(this DockerServiceLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceLsSettings.Quiet"/></em></p>
        ///   <p>Only display IDs.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLsSettings DisableQuiet(this DockerServiceLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceLsSettings.Quiet"/></em></p>
        ///   <p>Only display IDs.</p>
        /// </summary>
        [Pure]
        public static DockerServiceLsSettings ToggleQuiet(this DockerServiceLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerSwarmUnlockSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerSwarmUnlockSettingsExtensions
    {
    }
    #endregion
    #region DockerNetworkLsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerNetworkLsSettingsExtensions
    {
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkLsSettings.Filter"/></em></p>
        ///   <p>Provide filter values (e.g. 'driver=bridge').</p>
        /// </summary>
        [Pure]
        public static DockerNetworkLsSettings SetFilter(this DockerNetworkLsSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNetworkLsSettings.Filter"/></em></p>
        ///   <p>Provide filter values (e.g. 'driver=bridge').</p>
        /// </summary>
        [Pure]
        public static DockerNetworkLsSettings ResetFilter(this DockerNetworkLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkLsSettings.Format"/></em></p>
        ///   <p>Pretty-print networks using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkLsSettings SetFormat(this DockerNetworkLsSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNetworkLsSettings.Format"/></em></p>
        ///   <p>Pretty-print networks using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkLsSettings ResetFormat(this DockerNetworkLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region NoTrunc
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkLsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate the output.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkLsSettings SetNoTrunc(this DockerNetworkLsSettings toolSettings, bool? noTrunc)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = noTrunc;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNetworkLsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate the output.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkLsSettings ResetNoTrunc(this DockerNetworkLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerNetworkLsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate the output.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkLsSettings EnableNoTrunc(this DockerNetworkLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerNetworkLsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate the output.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkLsSettings DisableNoTrunc(this DockerNetworkLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerNetworkLsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate the output.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkLsSettings ToggleNoTrunc(this DockerNetworkLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = !toolSettings.NoTrunc;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkLsSettings.Quiet"/></em></p>
        ///   <p>Only display network IDs.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkLsSettings SetQuiet(this DockerNetworkLsSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNetworkLsSettings.Quiet"/></em></p>
        ///   <p>Only display network IDs.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkLsSettings ResetQuiet(this DockerNetworkLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerNetworkLsSettings.Quiet"/></em></p>
        ///   <p>Only display network IDs.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkLsSettings EnableQuiet(this DockerNetworkLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerNetworkLsSettings.Quiet"/></em></p>
        ///   <p>Only display network IDs.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkLsSettings DisableQuiet(this DockerNetworkLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerNetworkLsSettings.Quiet"/></em></p>
        ///   <p>Only display network IDs.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkLsSettings ToggleQuiet(this DockerNetworkLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerPluginLsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerPluginLsSettingsExtensions
    {
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginLsSettings.Filter"/></em></p>
        ///   <p>Provide filter values (e.g. 'enabled=true').</p>
        /// </summary>
        [Pure]
        public static DockerPluginLsSettings SetFilter(this DockerPluginLsSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPluginLsSettings.Filter"/></em></p>
        ///   <p>Provide filter values (e.g. 'enabled=true').</p>
        /// </summary>
        [Pure]
        public static DockerPluginLsSettings ResetFilter(this DockerPluginLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginLsSettings.Format"/></em></p>
        ///   <p>Pretty-print plugins using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerPluginLsSettings SetFormat(this DockerPluginLsSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPluginLsSettings.Format"/></em></p>
        ///   <p>Pretty-print plugins using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerPluginLsSettings ResetFormat(this DockerPluginLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region NoTrunc
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginLsSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerPluginLsSettings SetNoTrunc(this DockerPluginLsSettings toolSettings, bool? noTrunc)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = noTrunc;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPluginLsSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerPluginLsSettings ResetNoTrunc(this DockerPluginLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerPluginLsSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerPluginLsSettings EnableNoTrunc(this DockerPluginLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerPluginLsSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerPluginLsSettings DisableNoTrunc(this DockerPluginLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerPluginLsSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerPluginLsSettings ToggleNoTrunc(this DockerPluginLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = !toolSettings.NoTrunc;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginLsSettings.Quiet"/></em></p>
        ///   <p>Only display plugin IDs.</p>
        /// </summary>
        [Pure]
        public static DockerPluginLsSettings SetQuiet(this DockerPluginLsSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPluginLsSettings.Quiet"/></em></p>
        ///   <p>Only display plugin IDs.</p>
        /// </summary>
        [Pure]
        public static DockerPluginLsSettings ResetQuiet(this DockerPluginLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerPluginLsSettings.Quiet"/></em></p>
        ///   <p>Only display plugin IDs.</p>
        /// </summary>
        [Pure]
        public static DockerPluginLsSettings EnableQuiet(this DockerPluginLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerPluginLsSettings.Quiet"/></em></p>
        ///   <p>Only display plugin IDs.</p>
        /// </summary>
        [Pure]
        public static DockerPluginLsSettings DisableQuiet(this DockerPluginLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerPluginLsSettings.Quiet"/></em></p>
        ///   <p>Only display plugin IDs.</p>
        /// </summary>
        [Pure]
        public static DockerPluginLsSettings ToggleQuiet(this DockerPluginLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerPluginRmSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerPluginRmSettingsExtensions
    {
        #region Force
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginRmSettings.Force"/></em></p>
        ///   <p>Force the removal of an active plugin.</p>
        /// </summary>
        [Pure]
        public static DockerPluginRmSettings SetForce(this DockerPluginRmSettings toolSettings, bool? force)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = force;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPluginRmSettings.Force"/></em></p>
        ///   <p>Force the removal of an active plugin.</p>
        /// </summary>
        [Pure]
        public static DockerPluginRmSettings ResetForce(this DockerPluginRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerPluginRmSettings.Force"/></em></p>
        ///   <p>Force the removal of an active plugin.</p>
        /// </summary>
        [Pure]
        public static DockerPluginRmSettings EnableForce(this DockerPluginRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerPluginRmSettings.Force"/></em></p>
        ///   <p>Force the removal of an active plugin.</p>
        /// </summary>
        [Pure]
        public static DockerPluginRmSettings DisableForce(this DockerPluginRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerPluginRmSettings.Force"/></em></p>
        ///   <p>Force the removal of an active plugin.</p>
        /// </summary>
        [Pure]
        public static DockerPluginRmSettings ToggleForce(this DockerPluginRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = !toolSettings.Force;
            return toolSettings;
        }
        #endregion
        #region Plugins
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginRmSettings.Plugins"/> to a new list</em></p>
        ///   <p>PLUGIN</p>
        /// </summary>
        [Pure]
        public static DockerPluginRmSettings SetPlugins(this DockerPluginRmSettings toolSettings, params string[] plugins)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PluginsInternal = plugins.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginRmSettings.Plugins"/> to a new list</em></p>
        ///   <p>PLUGIN</p>
        /// </summary>
        [Pure]
        public static DockerPluginRmSettings SetPlugins(this DockerPluginRmSettings toolSettings, IEnumerable<string> plugins)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PluginsInternal = plugins.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerPluginRmSettings.Plugins"/></em></p>
        ///   <p>PLUGIN</p>
        /// </summary>
        [Pure]
        public static DockerPluginRmSettings AddPlugins(this DockerPluginRmSettings toolSettings, params string[] plugins)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PluginsInternal.AddRange(plugins);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerPluginRmSettings.Plugins"/></em></p>
        ///   <p>PLUGIN</p>
        /// </summary>
        [Pure]
        public static DockerPluginRmSettings AddPlugins(this DockerPluginRmSettings toolSettings, IEnumerable<string> plugins)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PluginsInternal.AddRange(plugins);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerPluginRmSettings.Plugins"/></em></p>
        ///   <p>PLUGIN</p>
        /// </summary>
        [Pure]
        public static DockerPluginRmSettings ClearPlugins(this DockerPluginRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PluginsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerPluginRmSettings.Plugins"/></em></p>
        ///   <p>PLUGIN</p>
        /// </summary>
        [Pure]
        public static DockerPluginRmSettings RemovePlugins(this DockerPluginRmSettings toolSettings, params string[] plugins)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(plugins);
            toolSettings.PluginsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerPluginRmSettings.Plugins"/></em></p>
        ///   <p>PLUGIN</p>
        /// </summary>
        [Pure]
        public static DockerPluginRmSettings RemovePlugins(this DockerPluginRmSettings toolSettings, IEnumerable<string> plugins)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(plugins);
            toolSettings.PluginsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerImageBuildSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerImageBuildSettingsExtensions
    {
        #region AddHost
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.AddHost"/> to a new list</em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetAddHost(this DockerImageBuildSettings toolSettings, params string[] addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal = addHost.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.AddHost"/> to a new list</em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetAddHost(this DockerImageBuildSettings toolSettings, IEnumerable<string> addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal = addHost.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerImageBuildSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings AddAddHost(this DockerImageBuildSettings toolSettings, params string[] addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal.AddRange(addHost);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerImageBuildSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings AddAddHost(this DockerImageBuildSettings toolSettings, IEnumerable<string> addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal.AddRange(addHost);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerImageBuildSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ClearAddHost(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerImageBuildSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings RemoveAddHost(this DockerImageBuildSettings toolSettings, params string[] addHost)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(addHost);
            toolSettings.AddHostInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerImageBuildSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings RemoveAddHost(this DockerImageBuildSettings toolSettings, IEnumerable<string> addHost)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(addHost);
            toolSettings.AddHostInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region BuildArg
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.BuildArg"/> to a new list</em></p>
        ///   <p>Set build-time variables.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetBuildArg(this DockerImageBuildSettings toolSettings, params string[] buildArg)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BuildArgInternal = buildArg.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.BuildArg"/> to a new list</em></p>
        ///   <p>Set build-time variables.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetBuildArg(this DockerImageBuildSettings toolSettings, IEnumerable<string> buildArg)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BuildArgInternal = buildArg.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerImageBuildSettings.BuildArg"/></em></p>
        ///   <p>Set build-time variables.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings AddBuildArg(this DockerImageBuildSettings toolSettings, params string[] buildArg)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BuildArgInternal.AddRange(buildArg);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerImageBuildSettings.BuildArg"/></em></p>
        ///   <p>Set build-time variables.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings AddBuildArg(this DockerImageBuildSettings toolSettings, IEnumerable<string> buildArg)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BuildArgInternal.AddRange(buildArg);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerImageBuildSettings.BuildArg"/></em></p>
        ///   <p>Set build-time variables.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ClearBuildArg(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BuildArgInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerImageBuildSettings.BuildArg"/></em></p>
        ///   <p>Set build-time variables.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings RemoveBuildArg(this DockerImageBuildSettings toolSettings, params string[] buildArg)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(buildArg);
            toolSettings.BuildArgInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerImageBuildSettings.BuildArg"/></em></p>
        ///   <p>Set build-time variables.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings RemoveBuildArg(this DockerImageBuildSettings toolSettings, IEnumerable<string> buildArg)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(buildArg);
            toolSettings.BuildArgInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region CacheFrom
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.CacheFrom"/> to a new list</em></p>
        ///   <p>Images to consider as cache sources.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetCacheFrom(this DockerImageBuildSettings toolSettings, params string[] cacheFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CacheFromInternal = cacheFrom.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.CacheFrom"/> to a new list</em></p>
        ///   <p>Images to consider as cache sources.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetCacheFrom(this DockerImageBuildSettings toolSettings, IEnumerable<string> cacheFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CacheFromInternal = cacheFrom.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerImageBuildSettings.CacheFrom"/></em></p>
        ///   <p>Images to consider as cache sources.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings AddCacheFrom(this DockerImageBuildSettings toolSettings, params string[] cacheFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CacheFromInternal.AddRange(cacheFrom);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerImageBuildSettings.CacheFrom"/></em></p>
        ///   <p>Images to consider as cache sources.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings AddCacheFrom(this DockerImageBuildSettings toolSettings, IEnumerable<string> cacheFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CacheFromInternal.AddRange(cacheFrom);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerImageBuildSettings.CacheFrom"/></em></p>
        ///   <p>Images to consider as cache sources.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ClearCacheFrom(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CacheFromInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerImageBuildSettings.CacheFrom"/></em></p>
        ///   <p>Images to consider as cache sources.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings RemoveCacheFrom(this DockerImageBuildSettings toolSettings, params string[] cacheFrom)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(cacheFrom);
            toolSettings.CacheFromInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerImageBuildSettings.CacheFrom"/></em></p>
        ///   <p>Images to consider as cache sources.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings RemoveCacheFrom(this DockerImageBuildSettings toolSettings, IEnumerable<string> cacheFrom)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(cacheFrom);
            toolSettings.CacheFromInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region CgroupParent
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.CgroupParent"/></em></p>
        ///   <p>Optional parent cgroup for the container.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetCgroupParent(this DockerImageBuildSettings toolSettings, string cgroupParent)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CgroupParent = cgroupParent;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.CgroupParent"/></em></p>
        ///   <p>Optional parent cgroup for the container.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetCgroupParent(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CgroupParent = null;
            return toolSettings;
        }
        #endregion
        #region Compress
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.Compress"/></em></p>
        ///   <p>Compress the build context using gzip.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetCompress(this DockerImageBuildSettings toolSettings, bool? compress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Compress = compress;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.Compress"/></em></p>
        ///   <p>Compress the build context using gzip.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetCompress(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Compress = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImageBuildSettings.Compress"/></em></p>
        ///   <p>Compress the build context using gzip.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings EnableCompress(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Compress = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImageBuildSettings.Compress"/></em></p>
        ///   <p>Compress the build context using gzip.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings DisableCompress(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Compress = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImageBuildSettings.Compress"/></em></p>
        ///   <p>Compress the build context using gzip.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ToggleCompress(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Compress = !toolSettings.Compress;
            return toolSettings;
        }
        #endregion
        #region CpuPeriod
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.CpuPeriod"/></em></p>
        ///   <p>Limit the CPU CFS (Completely Fair Scheduler) period.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetCpuPeriod(this DockerImageBuildSettings toolSettings, long? cpuPeriod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuPeriod = cpuPeriod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.CpuPeriod"/></em></p>
        ///   <p>Limit the CPU CFS (Completely Fair Scheduler) period.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetCpuPeriod(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuPeriod = null;
            return toolSettings;
        }
        #endregion
        #region CpuQuota
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.CpuQuota"/></em></p>
        ///   <p>Limit the CPU CFS (Completely Fair Scheduler) quota.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetCpuQuota(this DockerImageBuildSettings toolSettings, long? cpuQuota)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuQuota = cpuQuota;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.CpuQuota"/></em></p>
        ///   <p>Limit the CPU CFS (Completely Fair Scheduler) quota.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetCpuQuota(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuQuota = null;
            return toolSettings;
        }
        #endregion
        #region CpuShares
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.CpuShares"/></em></p>
        ///   <p>CPU shares (relative weight).</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetCpuShares(this DockerImageBuildSettings toolSettings, long? cpuShares)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuShares = cpuShares;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.CpuShares"/></em></p>
        ///   <p>CPU shares (relative weight).</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetCpuShares(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuShares = null;
            return toolSettings;
        }
        #endregion
        #region CpusetCpus
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.CpusetCpus"/></em></p>
        ///   <p>CPUs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetCpusetCpus(this DockerImageBuildSettings toolSettings, string cpusetCpus)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetCpus = cpusetCpus;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.CpusetCpus"/></em></p>
        ///   <p>CPUs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetCpusetCpus(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetCpus = null;
            return toolSettings;
        }
        #endregion
        #region CpusetMems
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.CpusetMems"/></em></p>
        ///   <p>MEMs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetCpusetMems(this DockerImageBuildSettings toolSettings, string cpusetMems)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetMems = cpusetMems;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.CpusetMems"/></em></p>
        ///   <p>MEMs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetCpusetMems(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetMems = null;
            return toolSettings;
        }
        #endregion
        #region DisableContentTrust
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetDisableContentTrust(this DockerImageBuildSettings toolSettings, bool? disableContentTrust)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = disableContentTrust;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetDisableContentTrust(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImageBuildSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings EnableDisableContentTrust(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImageBuildSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings DisableDisableContentTrust(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImageBuildSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ToggleDisableContentTrust(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = !toolSettings.DisableContentTrust;
            return toolSettings;
        }
        #endregion
        #region File
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.File"/></em></p>
        ///   <p>Name of the Dockerfile (Default is 'PATH/Dockerfile').</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetFile(this DockerImageBuildSettings toolSettings, string file)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = file;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.File"/></em></p>
        ///   <p>Name of the Dockerfile (Default is 'PATH/Dockerfile').</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetFile(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = null;
            return toolSettings;
        }
        #endregion
        #region ForceRm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.ForceRm"/></em></p>
        ///   <p>Always remove intermediate containers.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetForceRm(this DockerImageBuildSettings toolSettings, bool? forceRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceRm = forceRm;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.ForceRm"/></em></p>
        ///   <p>Always remove intermediate containers.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetForceRm(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceRm = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImageBuildSettings.ForceRm"/></em></p>
        ///   <p>Always remove intermediate containers.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings EnableForceRm(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceRm = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImageBuildSettings.ForceRm"/></em></p>
        ///   <p>Always remove intermediate containers.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings DisableForceRm(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceRm = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImageBuildSettings.ForceRm"/></em></p>
        ///   <p>Always remove intermediate containers.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ToggleForceRm(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceRm = !toolSettings.ForceRm;
            return toolSettings;
        }
        #endregion
        #region Iidfile
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.Iidfile"/></em></p>
        ///   <p>Write the image ID to the file.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetIidfile(this DockerImageBuildSettings toolSettings, string iidfile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Iidfile = iidfile;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.Iidfile"/></em></p>
        ///   <p>Write the image ID to the file.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetIidfile(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Iidfile = null;
            return toolSettings;
        }
        #endregion
        #region Isolation
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.Isolation"/></em></p>
        ///   <p>Container isolation technology.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetIsolation(this DockerImageBuildSettings toolSettings, string isolation)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Isolation = isolation;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.Isolation"/></em></p>
        ///   <p>Container isolation technology.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetIsolation(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Isolation = null;
            return toolSettings;
        }
        #endregion
        #region Label
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.Label"/> to a new list</em></p>
        ///   <p>Set metadata for an image.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetLabel(this DockerImageBuildSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal = label.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.Label"/> to a new list</em></p>
        ///   <p>Set metadata for an image.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetLabel(this DockerImageBuildSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal = label.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerImageBuildSettings.Label"/></em></p>
        ///   <p>Set metadata for an image.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings AddLabel(this DockerImageBuildSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.AddRange(label);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerImageBuildSettings.Label"/></em></p>
        ///   <p>Set metadata for an image.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings AddLabel(this DockerImageBuildSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.AddRange(label);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerImageBuildSettings.Label"/></em></p>
        ///   <p>Set metadata for an image.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ClearLabel(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerImageBuildSettings.Label"/></em></p>
        ///   <p>Set metadata for an image.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings RemoveLabel(this DockerImageBuildSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(label);
            toolSettings.LabelInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerImageBuildSettings.Label"/></em></p>
        ///   <p>Set metadata for an image.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings RemoveLabel(this DockerImageBuildSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(label);
            toolSettings.LabelInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Memory
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.Memory"/></em></p>
        ///   <p>Memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetMemory(this DockerImageBuildSettings toolSettings, long? memory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Memory = memory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.Memory"/></em></p>
        ///   <p>Memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetMemory(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Memory = null;
            return toolSettings;
        }
        #endregion
        #region MemorySwap
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.MemorySwap"/></em></p>
        ///   <p>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetMemorySwap(this DockerImageBuildSettings toolSettings, long? memorySwap)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemorySwap = memorySwap;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.MemorySwap"/></em></p>
        ///   <p>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetMemorySwap(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemorySwap = null;
            return toolSettings;
        }
        #endregion
        #region Network
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.Network"/></em></p>
        ///   <p>Set the networking mode for the RUN instructions during build.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetNetwork(this DockerImageBuildSettings toolSettings, string network)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Network = network;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.Network"/></em></p>
        ///   <p>Set the networking mode for the RUN instructions during build.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetNetwork(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Network = null;
            return toolSettings;
        }
        #endregion
        #region NoCache
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.NoCache"/></em></p>
        ///   <p>Do not use cache when building the image.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetNoCache(this DockerImageBuildSettings toolSettings, bool? noCache)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoCache = noCache;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.NoCache"/></em></p>
        ///   <p>Do not use cache when building the image.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetNoCache(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoCache = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImageBuildSettings.NoCache"/></em></p>
        ///   <p>Do not use cache when building the image.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings EnableNoCache(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoCache = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImageBuildSettings.NoCache"/></em></p>
        ///   <p>Do not use cache when building the image.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings DisableNoCache(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoCache = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImageBuildSettings.NoCache"/></em></p>
        ///   <p>Do not use cache when building the image.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ToggleNoCache(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoCache = !toolSettings.NoCache;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.Output"/></em></p>
        ///   <p>Output destination (format: type=local,dest=path).</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetOutput(this DockerImageBuildSettings toolSettings, string output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.Output"/></em></p>
        ///   <p>Output destination (format: type=local,dest=path).</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetOutput(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Platform
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.Platform"/></em></p>
        ///   <p>Set platform if server is multi-platform capable.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetPlatform(this DockerImageBuildSettings toolSettings, string platform)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = platform;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.Platform"/></em></p>
        ///   <p>Set platform if server is multi-platform capable.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetPlatform(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = null;
            return toolSettings;
        }
        #endregion
        #region Progress
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.Progress"/></em></p>
        ///   <p>Set type of progress output (auto, plain, tty). Use plain to show container output.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetProgress(this DockerImageBuildSettings toolSettings, string progress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Progress = progress;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.Progress"/></em></p>
        ///   <p>Set type of progress output (auto, plain, tty). Use plain to show container output.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetProgress(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Progress = null;
            return toolSettings;
        }
        #endregion
        #region Pull
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.Pull"/></em></p>
        ///   <p>Always attempt to pull a newer version of the image.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetPull(this DockerImageBuildSettings toolSettings, bool? pull)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pull = pull;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.Pull"/></em></p>
        ///   <p>Always attempt to pull a newer version of the image.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetPull(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pull = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImageBuildSettings.Pull"/></em></p>
        ///   <p>Always attempt to pull a newer version of the image.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings EnablePull(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pull = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImageBuildSettings.Pull"/></em></p>
        ///   <p>Always attempt to pull a newer version of the image.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings DisablePull(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pull = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImageBuildSettings.Pull"/></em></p>
        ///   <p>Always attempt to pull a newer version of the image.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings TogglePull(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pull = !toolSettings.Pull;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.Quiet"/></em></p>
        ///   <p>Suppress the build output and print image ID on success.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetQuiet(this DockerImageBuildSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.Quiet"/></em></p>
        ///   <p>Suppress the build output and print image ID on success.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetQuiet(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImageBuildSettings.Quiet"/></em></p>
        ///   <p>Suppress the build output and print image ID on success.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings EnableQuiet(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImageBuildSettings.Quiet"/></em></p>
        ///   <p>Suppress the build output and print image ID on success.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings DisableQuiet(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImageBuildSettings.Quiet"/></em></p>
        ///   <p>Suppress the build output and print image ID on success.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ToggleQuiet(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
        #region Rm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.Rm"/></em></p>
        ///   <p>Remove intermediate containers after a successful build.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetRm(this DockerImageBuildSettings toolSettings, bool? rm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = rm;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.Rm"/></em></p>
        ///   <p>Remove intermediate containers after a successful build.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetRm(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImageBuildSettings.Rm"/></em></p>
        ///   <p>Remove intermediate containers after a successful build.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings EnableRm(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImageBuildSettings.Rm"/></em></p>
        ///   <p>Remove intermediate containers after a successful build.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings DisableRm(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImageBuildSettings.Rm"/></em></p>
        ///   <p>Remove intermediate containers after a successful build.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ToggleRm(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = !toolSettings.Rm;
            return toolSettings;
        }
        #endregion
        #region Secret
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.Secret"/></em></p>
        ///   <p>Secret file to expose to the build (only if BuildKit enabled): id=mysecret,src=/local/secret.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetSecret(this DockerImageBuildSettings toolSettings, string secret)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Secret = secret;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.Secret"/></em></p>
        ///   <p>Secret file to expose to the build (only if BuildKit enabled): id=mysecret,src=/local/secret.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetSecret(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Secret = null;
            return toolSettings;
        }
        #endregion
        #region SecurityOpt
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.SecurityOpt"/> to a new list</em></p>
        ///   <p>Security options.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetSecurityOpt(this DockerImageBuildSettings toolSettings, params string[] securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal = securityOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.SecurityOpt"/> to a new list</em></p>
        ///   <p>Security options.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetSecurityOpt(this DockerImageBuildSettings toolSettings, IEnumerable<string> securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal = securityOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerImageBuildSettings.SecurityOpt"/></em></p>
        ///   <p>Security options.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings AddSecurityOpt(this DockerImageBuildSettings toolSettings, params string[] securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal.AddRange(securityOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerImageBuildSettings.SecurityOpt"/></em></p>
        ///   <p>Security options.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings AddSecurityOpt(this DockerImageBuildSettings toolSettings, IEnumerable<string> securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal.AddRange(securityOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerImageBuildSettings.SecurityOpt"/></em></p>
        ///   <p>Security options.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ClearSecurityOpt(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerImageBuildSettings.SecurityOpt"/></em></p>
        ///   <p>Security options.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings RemoveSecurityOpt(this DockerImageBuildSettings toolSettings, params string[] securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(securityOpt);
            toolSettings.SecurityOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerImageBuildSettings.SecurityOpt"/></em></p>
        ///   <p>Security options.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings RemoveSecurityOpt(this DockerImageBuildSettings toolSettings, IEnumerable<string> securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(securityOpt);
            toolSettings.SecurityOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ShmSize
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.ShmSize"/></em></p>
        ///   <p>Size of /dev/shm.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetShmSize(this DockerImageBuildSettings toolSettings, long? shmSize)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShmSize = shmSize;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.ShmSize"/></em></p>
        ///   <p>Size of /dev/shm.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetShmSize(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShmSize = null;
            return toolSettings;
        }
        #endregion
        #region Squash
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.Squash"/></em></p>
        ///   <p>Squash newly built layers into a single new layer.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetSquash(this DockerImageBuildSettings toolSettings, bool? squash)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Squash = squash;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.Squash"/></em></p>
        ///   <p>Squash newly built layers into a single new layer.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetSquash(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Squash = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImageBuildSettings.Squash"/></em></p>
        ///   <p>Squash newly built layers into a single new layer.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings EnableSquash(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Squash = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImageBuildSettings.Squash"/></em></p>
        ///   <p>Squash newly built layers into a single new layer.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings DisableSquash(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Squash = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImageBuildSettings.Squash"/></em></p>
        ///   <p>Squash newly built layers into a single new layer.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ToggleSquash(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Squash = !toolSettings.Squash;
            return toolSettings;
        }
        #endregion
        #region Ssh
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.Ssh"/></em></p>
        ///   <p>SSH agent socket or keys to expose to the build (only if BuildKit enabled) (format: default|&lt;id&gt;[=&lt;socket&gt;|&lt;key&gt;[,&lt;key&gt;]]).</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetSsh(this DockerImageBuildSettings toolSettings, string ssh)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ssh = ssh;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.Ssh"/></em></p>
        ///   <p>SSH agent socket or keys to expose to the build (only if BuildKit enabled) (format: default|&lt;id&gt;[=&lt;socket&gt;|&lt;key&gt;[,&lt;key&gt;]]).</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetSsh(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ssh = null;
            return toolSettings;
        }
        #endregion
        #region Stream
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.Stream"/></em></p>
        ///   <p>Stream attaches to server to negotiate build context.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetStream(this DockerImageBuildSettings toolSettings, bool? stream)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stream = stream;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.Stream"/></em></p>
        ///   <p>Stream attaches to server to negotiate build context.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetStream(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stream = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImageBuildSettings.Stream"/></em></p>
        ///   <p>Stream attaches to server to negotiate build context.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings EnableStream(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stream = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImageBuildSettings.Stream"/></em></p>
        ///   <p>Stream attaches to server to negotiate build context.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings DisableStream(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stream = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImageBuildSettings.Stream"/></em></p>
        ///   <p>Stream attaches to server to negotiate build context.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ToggleStream(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stream = !toolSettings.Stream;
            return toolSettings;
        }
        #endregion
        #region Tag
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.Tag"/> to a new list</em></p>
        ///   <p>Name and optionally a tag in the 'name:tag' format.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetTag(this DockerImageBuildSettings toolSettings, params string[] tag)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TagInternal = tag.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.Tag"/> to a new list</em></p>
        ///   <p>Name and optionally a tag in the 'name:tag' format.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetTag(this DockerImageBuildSettings toolSettings, IEnumerable<string> tag)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TagInternal = tag.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerImageBuildSettings.Tag"/></em></p>
        ///   <p>Name and optionally a tag in the 'name:tag' format.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings AddTag(this DockerImageBuildSettings toolSettings, params string[] tag)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TagInternal.AddRange(tag);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerImageBuildSettings.Tag"/></em></p>
        ///   <p>Name and optionally a tag in the 'name:tag' format.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings AddTag(this DockerImageBuildSettings toolSettings, IEnumerable<string> tag)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TagInternal.AddRange(tag);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerImageBuildSettings.Tag"/></em></p>
        ///   <p>Name and optionally a tag in the 'name:tag' format.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ClearTag(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TagInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerImageBuildSettings.Tag"/></em></p>
        ///   <p>Name and optionally a tag in the 'name:tag' format.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings RemoveTag(this DockerImageBuildSettings toolSettings, params string[] tag)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(tag);
            toolSettings.TagInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerImageBuildSettings.Tag"/></em></p>
        ///   <p>Name and optionally a tag in the 'name:tag' format.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings RemoveTag(this DockerImageBuildSettings toolSettings, IEnumerable<string> tag)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(tag);
            toolSettings.TagInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Target
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.Target"/></em></p>
        ///   <p>Set the target build stage to build.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetTarget(this DockerImageBuildSettings toolSettings, string target)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Target = target;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.Target"/></em></p>
        ///   <p>Set the target build stage to build.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetTarget(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Target = null;
            return toolSettings;
        }
        #endregion
        #region Ulimit
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.Ulimit"/></em></p>
        ///   <p>Ulimit options.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetUlimit(this DockerImageBuildSettings toolSettings, string ulimit)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ulimit = ulimit;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.Ulimit"/></em></p>
        ///   <p>Ulimit options.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetUlimit(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ulimit = null;
            return toolSettings;
        }
        #endregion
        #region Path
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageBuildSettings.Path"/></em></p>
        ///   <p>Path or url where the build context is located.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings SetPath(this DockerImageBuildSettings toolSettings, string path)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = path;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageBuildSettings.Path"/></em></p>
        ///   <p>Path or url where the build context is located.</p>
        /// </summary>
        [Pure]
        public static DockerImageBuildSettings ResetPath(this DockerImageBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerTrustRevokeSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerTrustRevokeSettingsExtensions
    {
        #region Yes
        /// <summary>
        ///   <p><em>Sets <see cref="DockerTrustRevokeSettings.Yes"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerTrustRevokeSettings SetYes(this DockerTrustRevokeSettings toolSettings, bool? yes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = yes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerTrustRevokeSettings.Yes"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerTrustRevokeSettings ResetYes(this DockerTrustRevokeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerTrustRevokeSettings.Yes"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerTrustRevokeSettings EnableYes(this DockerTrustRevokeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerTrustRevokeSettings.Yes"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerTrustRevokeSettings DisableYes(this DockerTrustRevokeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerTrustRevokeSettings.Yes"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerTrustRevokeSettings ToggleYes(this DockerTrustRevokeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Yes = !toolSettings.Yes;
            return toolSettings;
        }
        #endregion
        #region Image
        /// <summary>
        ///   <p><em>Sets <see cref="DockerTrustRevokeSettings.Image"/></em></p>
        ///   <p>IMAGE[:TAG]</p>
        /// </summary>
        [Pure]
        public static DockerTrustRevokeSettings SetImage(this DockerTrustRevokeSettings toolSettings, string image)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = image;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerTrustRevokeSettings.Image"/></em></p>
        ///   <p>IMAGE[:TAG]</p>
        /// </summary>
        [Pure]
        public static DockerTrustRevokeSettings ResetImage(this DockerTrustRevokeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerRmiSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerRmiSettingsExtensions
    {
        #region Force
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRmiSettings.Force"/></em></p>
        ///   <p>Force removal of the image.</p>
        /// </summary>
        [Pure]
        public static DockerRmiSettings SetForce(this DockerRmiSettings toolSettings, bool? force)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = force;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRmiSettings.Force"/></em></p>
        ///   <p>Force removal of the image.</p>
        /// </summary>
        [Pure]
        public static DockerRmiSettings ResetForce(this DockerRmiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerRmiSettings.Force"/></em></p>
        ///   <p>Force removal of the image.</p>
        /// </summary>
        [Pure]
        public static DockerRmiSettings EnableForce(this DockerRmiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerRmiSettings.Force"/></em></p>
        ///   <p>Force removal of the image.</p>
        /// </summary>
        [Pure]
        public static DockerRmiSettings DisableForce(this DockerRmiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerRmiSettings.Force"/></em></p>
        ///   <p>Force removal of the image.</p>
        /// </summary>
        [Pure]
        public static DockerRmiSettings ToggleForce(this DockerRmiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = !toolSettings.Force;
            return toolSettings;
        }
        #endregion
        #region NoPrune
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRmiSettings.NoPrune"/></em></p>
        ///   <p>Do not delete untagged parents.</p>
        /// </summary>
        [Pure]
        public static DockerRmiSettings SetNoPrune(this DockerRmiSettings toolSettings, bool? noPrune)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoPrune = noPrune;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRmiSettings.NoPrune"/></em></p>
        ///   <p>Do not delete untagged parents.</p>
        /// </summary>
        [Pure]
        public static DockerRmiSettings ResetNoPrune(this DockerRmiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoPrune = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerRmiSettings.NoPrune"/></em></p>
        ///   <p>Do not delete untagged parents.</p>
        /// </summary>
        [Pure]
        public static DockerRmiSettings EnableNoPrune(this DockerRmiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoPrune = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerRmiSettings.NoPrune"/></em></p>
        ///   <p>Do not delete untagged parents.</p>
        /// </summary>
        [Pure]
        public static DockerRmiSettings DisableNoPrune(this DockerRmiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoPrune = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerRmiSettings.NoPrune"/></em></p>
        ///   <p>Do not delete untagged parents.</p>
        /// </summary>
        [Pure]
        public static DockerRmiSettings ToggleNoPrune(this DockerRmiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoPrune = !toolSettings.NoPrune;
            return toolSettings;
        }
        #endregion
        #region Images
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRmiSettings.Images"/> to a new list</em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerRmiSettings SetImages(this DockerRmiSettings toolSettings, params string[] images)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal = images.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRmiSettings.Images"/> to a new list</em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerRmiSettings SetImages(this DockerRmiSettings toolSettings, IEnumerable<string> images)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal = images.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRmiSettings.Images"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerRmiSettings AddImages(this DockerRmiSettings toolSettings, params string[] images)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal.AddRange(images);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRmiSettings.Images"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerRmiSettings AddImages(this DockerRmiSettings toolSettings, IEnumerable<string> images)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal.AddRange(images);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRmiSettings.Images"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerRmiSettings ClearImages(this DockerRmiSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRmiSettings.Images"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerRmiSettings RemoveImages(this DockerRmiSettings toolSettings, params string[] images)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(images);
            toolSettings.ImagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRmiSettings.Images"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerRmiSettings RemoveImages(this DockerRmiSettings toolSettings, IEnumerable<string> images)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(images);
            toolSettings.ImagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerNetworkRmSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerNetworkRmSettingsExtensions
    {
        #region Networks
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkRmSettings.Networks"/> to a new list</em></p>
        ///   <p>NETWORK</p>
        /// </summary>
        [Pure]
        public static DockerNetworkRmSettings SetNetworks(this DockerNetworkRmSettings toolSettings, params string[] networks)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworksInternal = networks.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkRmSettings.Networks"/> to a new list</em></p>
        ///   <p>NETWORK</p>
        /// </summary>
        [Pure]
        public static DockerNetworkRmSettings SetNetworks(this DockerNetworkRmSettings toolSettings, IEnumerable<string> networks)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworksInternal = networks.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNetworkRmSettings.Networks"/></em></p>
        ///   <p>NETWORK</p>
        /// </summary>
        [Pure]
        public static DockerNetworkRmSettings AddNetworks(this DockerNetworkRmSettings toolSettings, params string[] networks)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworksInternal.AddRange(networks);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNetworkRmSettings.Networks"/></em></p>
        ///   <p>NETWORK</p>
        /// </summary>
        [Pure]
        public static DockerNetworkRmSettings AddNetworks(this DockerNetworkRmSettings toolSettings, IEnumerable<string> networks)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworksInternal.AddRange(networks);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerNetworkRmSettings.Networks"/></em></p>
        ///   <p>NETWORK</p>
        /// </summary>
        [Pure]
        public static DockerNetworkRmSettings ClearNetworks(this DockerNetworkRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworksInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNetworkRmSettings.Networks"/></em></p>
        ///   <p>NETWORK</p>
        /// </summary>
        [Pure]
        public static DockerNetworkRmSettings RemoveNetworks(this DockerNetworkRmSettings toolSettings, params string[] networks)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(networks);
            toolSettings.NetworksInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNetworkRmSettings.Networks"/></em></p>
        ///   <p>NETWORK</p>
        /// </summary>
        [Pure]
        public static DockerNetworkRmSettings RemoveNetworks(this DockerNetworkRmSettings toolSettings, IEnumerable<string> networks)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(networks);
            toolSettings.NetworksInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerVersionSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerVersionSettingsExtensions
    {
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerVersionSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerVersionSettings SetFormat(this DockerVersionSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerVersionSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerVersionSettings ResetFormat(this DockerVersionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Kubeconfig
        /// <summary>
        ///   <p><em>Sets <see cref="DockerVersionSettings.Kubeconfig"/></em></p>
        ///   <p>Kubernetes config file.</p>
        /// </summary>
        [Pure]
        public static DockerVersionSettings SetKubeconfig(this DockerVersionSettings toolSettings, string kubeconfig)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Kubeconfig = kubeconfig;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerVersionSettings.Kubeconfig"/></em></p>
        ///   <p>Kubernetes config file.</p>
        /// </summary>
        [Pure]
        public static DockerVersionSettings ResetKubeconfig(this DockerVersionSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Kubeconfig = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerSecretCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerSecretCreateSettingsExtensions
    {
        #region Driver
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSecretCreateSettings.Driver"/></em></p>
        ///   <p>Secret driver.</p>
        /// </summary>
        [Pure]
        public static DockerSecretCreateSettings SetDriver(this DockerSecretCreateSettings toolSettings, string driver)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Driver = driver;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSecretCreateSettings.Driver"/></em></p>
        ///   <p>Secret driver.</p>
        /// </summary>
        [Pure]
        public static DockerSecretCreateSettings ResetDriver(this DockerSecretCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Driver = null;
            return toolSettings;
        }
        #endregion
        #region Label
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSecretCreateSettings.Label"/> to a new list</em></p>
        ///   <p>Secret labels.</p>
        /// </summary>
        [Pure]
        public static DockerSecretCreateSettings SetLabel(this DockerSecretCreateSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal = label.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSecretCreateSettings.Label"/> to a new list</em></p>
        ///   <p>Secret labels.</p>
        /// </summary>
        [Pure]
        public static DockerSecretCreateSettings SetLabel(this DockerSecretCreateSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal = label.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerSecretCreateSettings.Label"/></em></p>
        ///   <p>Secret labels.</p>
        /// </summary>
        [Pure]
        public static DockerSecretCreateSettings AddLabel(this DockerSecretCreateSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.AddRange(label);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerSecretCreateSettings.Label"/></em></p>
        ///   <p>Secret labels.</p>
        /// </summary>
        [Pure]
        public static DockerSecretCreateSettings AddLabel(this DockerSecretCreateSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.AddRange(label);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerSecretCreateSettings.Label"/></em></p>
        ///   <p>Secret labels.</p>
        /// </summary>
        [Pure]
        public static DockerSecretCreateSettings ClearLabel(this DockerSecretCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerSecretCreateSettings.Label"/></em></p>
        ///   <p>Secret labels.</p>
        /// </summary>
        [Pure]
        public static DockerSecretCreateSettings RemoveLabel(this DockerSecretCreateSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(label);
            toolSettings.LabelInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerSecretCreateSettings.Label"/></em></p>
        ///   <p>Secret labels.</p>
        /// </summary>
        [Pure]
        public static DockerSecretCreateSettings RemoveLabel(this DockerSecretCreateSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(label);
            toolSettings.LabelInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region TemplateDriver
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSecretCreateSettings.TemplateDriver"/></em></p>
        ///   <p>Template driver.</p>
        /// </summary>
        [Pure]
        public static DockerSecretCreateSettings SetTemplateDriver(this DockerSecretCreateSettings toolSettings, string templateDriver)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TemplateDriver = templateDriver;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSecretCreateSettings.TemplateDriver"/></em></p>
        ///   <p>Template driver.</p>
        /// </summary>
        [Pure]
        public static DockerSecretCreateSettings ResetTemplateDriver(this DockerSecretCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TemplateDriver = null;
            return toolSettings;
        }
        #endregion
        #region Secret
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSecretCreateSettings.Secret"/></em></p>
        ///   <p>SECRET</p>
        /// </summary>
        [Pure]
        public static DockerSecretCreateSettings SetSecret(this DockerSecretCreateSettings toolSettings, string secret)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Secret = secret;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSecretCreateSettings.Secret"/></em></p>
        ///   <p>SECRET</p>
        /// </summary>
        [Pure]
        public static DockerSecretCreateSettings ResetSecret(this DockerSecretCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Secret = null;
            return toolSettings;
        }
        #endregion
        #region File
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSecretCreateSettings.File"/></em></p>
        ///   <p>Path to file to create the secret from.</p>
        /// </summary>
        [Pure]
        public static DockerSecretCreateSettings SetFile(this DockerSecretCreateSettings toolSettings, string file)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = file;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSecretCreateSettings.File"/></em></p>
        ///   <p>Path to file to create the secret from.</p>
        /// </summary>
        [Pure]
        public static DockerSecretCreateSettings ResetFile(this DockerSecretCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerServiceRmSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerServiceRmSettingsExtensions
    {
        #region Services
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceRmSettings.Services"/> to a new list</em></p>
        ///   <p>SERVICE</p>
        /// </summary>
        [Pure]
        public static DockerServiceRmSettings SetServices(this DockerServiceRmSettings toolSettings, params string[] services)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServicesInternal = services.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceRmSettings.Services"/> to a new list</em></p>
        ///   <p>SERVICE</p>
        /// </summary>
        [Pure]
        public static DockerServiceRmSettings SetServices(this DockerServiceRmSettings toolSettings, IEnumerable<string> services)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServicesInternal = services.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceRmSettings.Services"/></em></p>
        ///   <p>SERVICE</p>
        /// </summary>
        [Pure]
        public static DockerServiceRmSettings AddServices(this DockerServiceRmSettings toolSettings, params string[] services)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServicesInternal.AddRange(services);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceRmSettings.Services"/></em></p>
        ///   <p>SERVICE</p>
        /// </summary>
        [Pure]
        public static DockerServiceRmSettings AddServices(this DockerServiceRmSettings toolSettings, IEnumerable<string> services)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServicesInternal.AddRange(services);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceRmSettings.Services"/></em></p>
        ///   <p>SERVICE</p>
        /// </summary>
        [Pure]
        public static DockerServiceRmSettings ClearServices(this DockerServiceRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServicesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceRmSettings.Services"/></em></p>
        ///   <p>SERVICE</p>
        /// </summary>
        [Pure]
        public static DockerServiceRmSettings RemoveServices(this DockerServiceRmSettings toolSettings, params string[] services)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(services);
            toolSettings.ServicesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceRmSettings.Services"/></em></p>
        ///   <p>SERVICE</p>
        /// </summary>
        [Pure]
        public static DockerServiceRmSettings RemoveServices(this DockerServiceRmSettings toolSettings, IEnumerable<string> services)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(services);
            toolSettings.ServicesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerTrustKeyLoadSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerTrustKeyLoadSettingsExtensions
    {
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="DockerTrustKeyLoadSettings.Name"/></em></p>
        ///   <p>Name for the loaded key.</p>
        /// </summary>
        [Pure]
        public static DockerTrustKeyLoadSettings SetName(this DockerTrustKeyLoadSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerTrustKeyLoadSettings.Name"/></em></p>
        ///   <p>Name for the loaded key.</p>
        /// </summary>
        [Pure]
        public static DockerTrustKeyLoadSettings ResetName(this DockerTrustKeyLoadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Keyfile
        /// <summary>
        ///   <p><em>Sets <see cref="DockerTrustKeyLoadSettings.Keyfile"/></em></p>
        ///   <p>KEYFILE</p>
        /// </summary>
        [Pure]
        public static DockerTrustKeyLoadSettings SetKeyfile(this DockerTrustKeyLoadSettings toolSettings, string keyfile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Keyfile = keyfile;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerTrustKeyLoadSettings.Keyfile"/></em></p>
        ///   <p>KEYFILE</p>
        /// </summary>
        [Pure]
        public static DockerTrustKeyLoadSettings ResetKeyfile(this DockerTrustKeyLoadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Keyfile = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerSecretRmSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerSecretRmSettingsExtensions
    {
        #region Secrets
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSecretRmSettings.Secrets"/> to a new list</em></p>
        ///   <p>SECRET</p>
        /// </summary>
        [Pure]
        public static DockerSecretRmSettings SetSecrets(this DockerSecretRmSettings toolSettings, params string[] secrets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretsInternal = secrets.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSecretRmSettings.Secrets"/> to a new list</em></p>
        ///   <p>SECRET</p>
        /// </summary>
        [Pure]
        public static DockerSecretRmSettings SetSecrets(this DockerSecretRmSettings toolSettings, IEnumerable<string> secrets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretsInternal = secrets.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerSecretRmSettings.Secrets"/></em></p>
        ///   <p>SECRET</p>
        /// </summary>
        [Pure]
        public static DockerSecretRmSettings AddSecrets(this DockerSecretRmSettings toolSettings, params string[] secrets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretsInternal.AddRange(secrets);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerSecretRmSettings.Secrets"/></em></p>
        ///   <p>SECRET</p>
        /// </summary>
        [Pure]
        public static DockerSecretRmSettings AddSecrets(this DockerSecretRmSettings toolSettings, IEnumerable<string> secrets)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretsInternal.AddRange(secrets);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerSecretRmSettings.Secrets"/></em></p>
        ///   <p>SECRET</p>
        /// </summary>
        [Pure]
        public static DockerSecretRmSettings ClearSecrets(this DockerSecretRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerSecretRmSettings.Secrets"/></em></p>
        ///   <p>SECRET</p>
        /// </summary>
        [Pure]
        public static DockerSecretRmSettings RemoveSecrets(this DockerSecretRmSettings toolSettings, params string[] secrets)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(secrets);
            toolSettings.SecretsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerSecretRmSettings.Secrets"/></em></p>
        ///   <p>SECRET</p>
        /// </summary>
        [Pure]
        public static DockerSecretRmSettings RemoveSecrets(this DockerSecretRmSettings toolSettings, IEnumerable<string> secrets)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(secrets);
            toolSettings.SecretsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerImageInspectSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerImageInspectSettingsExtensions
    {
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageInspectSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerImageInspectSettings SetFormat(this DockerImageInspectSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageInspectSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerImageInspectSettings ResetFormat(this DockerImageInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Images
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageInspectSettings.Images"/> to a new list</em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerImageInspectSettings SetImages(this DockerImageInspectSettings toolSettings, params string[] images)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal = images.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageInspectSettings.Images"/> to a new list</em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerImageInspectSettings SetImages(this DockerImageInspectSettings toolSettings, IEnumerable<string> images)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal = images.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerImageInspectSettings.Images"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerImageInspectSettings AddImages(this DockerImageInspectSettings toolSettings, params string[] images)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal.AddRange(images);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerImageInspectSettings.Images"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerImageInspectSettings AddImages(this DockerImageInspectSettings toolSettings, IEnumerable<string> images)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal.AddRange(images);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerImageInspectSettings.Images"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerImageInspectSettings ClearImages(this DockerImageInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerImageInspectSettings.Images"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerImageInspectSettings RemoveImages(this DockerImageInspectSettings toolSettings, params string[] images)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(images);
            toolSettings.ImagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerImageInspectSettings.Images"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerImageInspectSettings RemoveImages(this DockerImageInspectSettings toolSettings, IEnumerable<string> images)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(images);
            toolSettings.ImagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerImageSaveSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerImageSaveSettingsExtensions
    {
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageSaveSettings.Output"/></em></p>
        ///   <p>Write to a file, instead of STDOUT.</p>
        /// </summary>
        [Pure]
        public static DockerImageSaveSettings SetOutput(this DockerImageSaveSettings toolSettings, string output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageSaveSettings.Output"/></em></p>
        ///   <p>Write to a file, instead of STDOUT.</p>
        /// </summary>
        [Pure]
        public static DockerImageSaveSettings ResetOutput(this DockerImageSaveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Images
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageSaveSettings.Images"/> to a new list</em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerImageSaveSettings SetImages(this DockerImageSaveSettings toolSettings, params string[] images)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal = images.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageSaveSettings.Images"/> to a new list</em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerImageSaveSettings SetImages(this DockerImageSaveSettings toolSettings, IEnumerable<string> images)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal = images.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerImageSaveSettings.Images"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerImageSaveSettings AddImages(this DockerImageSaveSettings toolSettings, params string[] images)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal.AddRange(images);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerImageSaveSettings.Images"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerImageSaveSettings AddImages(this DockerImageSaveSettings toolSettings, IEnumerable<string> images)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal.AddRange(images);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerImageSaveSettings.Images"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerImageSaveSettings ClearImages(this DockerImageSaveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerImageSaveSettings.Images"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerImageSaveSettings RemoveImages(this DockerImageSaveSettings toolSettings, params string[] images)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(images);
            toolSettings.ImagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerImageSaveSettings.Images"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerImageSaveSettings RemoveImages(this DockerImageSaveSettings toolSettings, IEnumerable<string> images)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(images);
            toolSettings.ImagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerTrustKeySettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerTrustKeySettingsExtensions
    {
    }
    #endregion
    #region DockerContainerAttachSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContainerAttachSettingsExtensions
    {
        #region DetachKeys
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerAttachSettings.DetachKeys"/></em></p>
        ///   <p>Override the key sequence for detaching a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerAttachSettings SetDetachKeys(this DockerContainerAttachSettings toolSettings, string detachKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DetachKeys = detachKeys;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerAttachSettings.DetachKeys"/></em></p>
        ///   <p>Override the key sequence for detaching a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerAttachSettings ResetDetachKeys(this DockerContainerAttachSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DetachKeys = null;
            return toolSettings;
        }
        #endregion
        #region NoStdin
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerAttachSettings.NoStdin"/></em></p>
        ///   <p>Do not attach STDIN.</p>
        /// </summary>
        [Pure]
        public static DockerContainerAttachSettings SetNoStdin(this DockerContainerAttachSettings toolSettings, bool? noStdin)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoStdin = noStdin;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerAttachSettings.NoStdin"/></em></p>
        ///   <p>Do not attach STDIN.</p>
        /// </summary>
        [Pure]
        public static DockerContainerAttachSettings ResetNoStdin(this DockerContainerAttachSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoStdin = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerAttachSettings.NoStdin"/></em></p>
        ///   <p>Do not attach STDIN.</p>
        /// </summary>
        [Pure]
        public static DockerContainerAttachSettings EnableNoStdin(this DockerContainerAttachSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoStdin = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerAttachSettings.NoStdin"/></em></p>
        ///   <p>Do not attach STDIN.</p>
        /// </summary>
        [Pure]
        public static DockerContainerAttachSettings DisableNoStdin(this DockerContainerAttachSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoStdin = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerAttachSettings.NoStdin"/></em></p>
        ///   <p>Do not attach STDIN.</p>
        /// </summary>
        [Pure]
        public static DockerContainerAttachSettings ToggleNoStdin(this DockerContainerAttachSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoStdin = !toolSettings.NoStdin;
            return toolSettings;
        }
        #endregion
        #region SigProxy
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerAttachSettings.SigProxy"/></em></p>
        ///   <p>Proxy all received signals to the process.</p>
        /// </summary>
        [Pure]
        public static DockerContainerAttachSettings SetSigProxy(this DockerContainerAttachSettings toolSettings, bool? sigProxy)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SigProxy = sigProxy;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerAttachSettings.SigProxy"/></em></p>
        ///   <p>Proxy all received signals to the process.</p>
        /// </summary>
        [Pure]
        public static DockerContainerAttachSettings ResetSigProxy(this DockerContainerAttachSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SigProxy = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerAttachSettings.SigProxy"/></em></p>
        ///   <p>Proxy all received signals to the process.</p>
        /// </summary>
        [Pure]
        public static DockerContainerAttachSettings EnableSigProxy(this DockerContainerAttachSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SigProxy = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerAttachSettings.SigProxy"/></em></p>
        ///   <p>Proxy all received signals to the process.</p>
        /// </summary>
        [Pure]
        public static DockerContainerAttachSettings DisableSigProxy(this DockerContainerAttachSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SigProxy = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerAttachSettings.SigProxy"/></em></p>
        ///   <p>Proxy all received signals to the process.</p>
        /// </summary>
        [Pure]
        public static DockerContainerAttachSettings ToggleSigProxy(this DockerContainerAttachSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SigProxy = !toolSettings.SigProxy;
            return toolSettings;
        }
        #endregion
        #region Container
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerAttachSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerAttachSettings SetContainer(this DockerContainerAttachSettings toolSettings, string container)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = container;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerAttachSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerAttachSettings ResetContainer(this DockerContainerAttachSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContextCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContextCreateSettingsExtensions
    {
        #region DefaultStackOrchestrator
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContextCreateSettings.DefaultStackOrchestrator"/></em></p>
        ///   <p>Default orchestrator for stack operations to use with this context (swarm|kubernetes|all).</p>
        /// </summary>
        [Pure]
        public static DockerContextCreateSettings SetDefaultStackOrchestrator(this DockerContextCreateSettings toolSettings, string defaultStackOrchestrator)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultStackOrchestrator = defaultStackOrchestrator;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContextCreateSettings.DefaultStackOrchestrator"/></em></p>
        ///   <p>Default orchestrator for stack operations to use with this context (swarm|kubernetes|all).</p>
        /// </summary>
        [Pure]
        public static DockerContextCreateSettings ResetDefaultStackOrchestrator(this DockerContextCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultStackOrchestrator = null;
            return toolSettings;
        }
        #endregion
        #region Description
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContextCreateSettings.Description"/></em></p>
        ///   <p>Description of the context.</p>
        /// </summary>
        [Pure]
        public static DockerContextCreateSettings SetDescription(this DockerContextCreateSettings toolSettings, string description)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = description;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContextCreateSettings.Description"/></em></p>
        ///   <p>Description of the context.</p>
        /// </summary>
        [Pure]
        public static DockerContextCreateSettings ResetDescription(this DockerContextCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Description = null;
            return toolSettings;
        }
        #endregion
        #region Docker
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContextCreateSettings.Docker"/></em></p>
        ///   <p>set the docker endpoint.</p>
        /// </summary>
        [Pure]
        public static DockerContextCreateSettings SetDocker(this DockerContextCreateSettings toolSettings, string docker)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Docker = docker;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContextCreateSettings.Docker"/></em></p>
        ///   <p>set the docker endpoint.</p>
        /// </summary>
        [Pure]
        public static DockerContextCreateSettings ResetDocker(this DockerContextCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Docker = null;
            return toolSettings;
        }
        #endregion
        #region From
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContextCreateSettings.From"/></em></p>
        ///   <p>create context from a named context.</p>
        /// </summary>
        [Pure]
        public static DockerContextCreateSettings SetFrom(this DockerContextCreateSettings toolSettings, string from)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.From = from;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContextCreateSettings.From"/></em></p>
        ///   <p>create context from a named context.</p>
        /// </summary>
        [Pure]
        public static DockerContextCreateSettings ResetFrom(this DockerContextCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.From = null;
            return toolSettings;
        }
        #endregion
        #region Kubernetes
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContextCreateSettings.Kubernetes"/></em></p>
        ///   <p>set the kubernetes endpoint.</p>
        /// </summary>
        [Pure]
        public static DockerContextCreateSettings SetKubernetes(this DockerContextCreateSettings toolSettings, string kubernetes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Kubernetes = kubernetes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContextCreateSettings.Kubernetes"/></em></p>
        ///   <p>set the kubernetes endpoint.</p>
        /// </summary>
        [Pure]
        public static DockerContextCreateSettings ResetKubernetes(this DockerContextCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Kubernetes = null;
            return toolSettings;
        }
        #endregion
        #region Context
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContextCreateSettings.Context"/></em></p>
        ///   <p>CONTEXT</p>
        /// </summary>
        [Pure]
        public static DockerContextCreateSettings SetContext(this DockerContextCreateSettings toolSettings, string context)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Context = context;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContextCreateSettings.Context"/></em></p>
        ///   <p>CONTEXT</p>
        /// </summary>
        [Pure]
        public static DockerContextCreateSettings ResetContext(this DockerContextCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Context = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerConfigCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerConfigCreateSettingsExtensions
    {
        #region Label
        /// <summary>
        ///   <p><em>Sets <see cref="DockerConfigCreateSettings.Label"/> to a new list</em></p>
        ///   <p>Config labels.</p>
        /// </summary>
        [Pure]
        public static DockerConfigCreateSettings SetLabel(this DockerConfigCreateSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal = label.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerConfigCreateSettings.Label"/> to a new list</em></p>
        ///   <p>Config labels.</p>
        /// </summary>
        [Pure]
        public static DockerConfigCreateSettings SetLabel(this DockerConfigCreateSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal = label.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerConfigCreateSettings.Label"/></em></p>
        ///   <p>Config labels.</p>
        /// </summary>
        [Pure]
        public static DockerConfigCreateSettings AddLabel(this DockerConfigCreateSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.AddRange(label);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerConfigCreateSettings.Label"/></em></p>
        ///   <p>Config labels.</p>
        /// </summary>
        [Pure]
        public static DockerConfigCreateSettings AddLabel(this DockerConfigCreateSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.AddRange(label);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerConfigCreateSettings.Label"/></em></p>
        ///   <p>Config labels.</p>
        /// </summary>
        [Pure]
        public static DockerConfigCreateSettings ClearLabel(this DockerConfigCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerConfigCreateSettings.Label"/></em></p>
        ///   <p>Config labels.</p>
        /// </summary>
        [Pure]
        public static DockerConfigCreateSettings RemoveLabel(this DockerConfigCreateSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(label);
            toolSettings.LabelInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerConfigCreateSettings.Label"/></em></p>
        ///   <p>Config labels.</p>
        /// </summary>
        [Pure]
        public static DockerConfigCreateSettings RemoveLabel(this DockerConfigCreateSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(label);
            toolSettings.LabelInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region TemplateDriver
        /// <summary>
        ///   <p><em>Sets <see cref="DockerConfigCreateSettings.TemplateDriver"/></em></p>
        ///   <p>Template driver.</p>
        /// </summary>
        [Pure]
        public static DockerConfigCreateSettings SetTemplateDriver(this DockerConfigCreateSettings toolSettings, string templateDriver)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TemplateDriver = templateDriver;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerConfigCreateSettings.TemplateDriver"/></em></p>
        ///   <p>Template driver.</p>
        /// </summary>
        [Pure]
        public static DockerConfigCreateSettings ResetTemplateDriver(this DockerConfigCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TemplateDriver = null;
            return toolSettings;
        }
        #endregion
        #region Config
        /// <summary>
        ///   <p><em>Sets <see cref="DockerConfigCreateSettings.Config"/></em></p>
        ///   <p>CONFIG</p>
        /// </summary>
        [Pure]
        public static DockerConfigCreateSettings SetConfig(this DockerConfigCreateSettings toolSettings, string config)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Config = config;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerConfigCreateSettings.Config"/></em></p>
        ///   <p>CONFIG</p>
        /// </summary>
        [Pure]
        public static DockerConfigCreateSettings ResetConfig(this DockerConfigCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Config = null;
            return toolSettings;
        }
        #endregion
        #region File
        /// <summary>
        ///   <p><em>Sets <see cref="DockerConfigCreateSettings.File"/></em></p>
        ///   <p>file|-</p>
        /// </summary>
        [Pure]
        public static DockerConfigCreateSettings SetFile(this DockerConfigCreateSettings toolSettings, string file)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = file;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerConfigCreateSettings.File"/></em></p>
        ///   <p>file|-</p>
        /// </summary>
        [Pure]
        public static DockerConfigCreateSettings ResetFile(this DockerConfigCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerVolumeInspectSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerVolumeInspectSettingsExtensions
    {
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerVolumeInspectSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeInspectSettings SetFormat(this DockerVolumeInspectSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerVolumeInspectSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeInspectSettings ResetFormat(this DockerVolumeInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Volumes
        /// <summary>
        ///   <p><em>Sets <see cref="DockerVolumeInspectSettings.Volumes"/> to a new list</em></p>
        ///   <p>VOLUME</p>
        /// </summary>
        [Pure]
        public static DockerVolumeInspectSettings SetVolumes(this DockerVolumeInspectSettings toolSettings, params string[] volumes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesInternal = volumes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerVolumeInspectSettings.Volumes"/> to a new list</em></p>
        ///   <p>VOLUME</p>
        /// </summary>
        [Pure]
        public static DockerVolumeInspectSettings SetVolumes(this DockerVolumeInspectSettings toolSettings, IEnumerable<string> volumes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesInternal = volumes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerVolumeInspectSettings.Volumes"/></em></p>
        ///   <p>VOLUME</p>
        /// </summary>
        [Pure]
        public static DockerVolumeInspectSettings AddVolumes(this DockerVolumeInspectSettings toolSettings, params string[] volumes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesInternal.AddRange(volumes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerVolumeInspectSettings.Volumes"/></em></p>
        ///   <p>VOLUME</p>
        /// </summary>
        [Pure]
        public static DockerVolumeInspectSettings AddVolumes(this DockerVolumeInspectSettings toolSettings, IEnumerable<string> volumes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesInternal.AddRange(volumes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerVolumeInspectSettings.Volumes"/></em></p>
        ///   <p>VOLUME</p>
        /// </summary>
        [Pure]
        public static DockerVolumeInspectSettings ClearVolumes(this DockerVolumeInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerVolumeInspectSettings.Volumes"/></em></p>
        ///   <p>VOLUME</p>
        /// </summary>
        [Pure]
        public static DockerVolumeInspectSettings RemoveVolumes(this DockerVolumeInspectSettings toolSettings, params string[] volumes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(volumes);
            toolSettings.VolumesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerVolumeInspectSettings.Volumes"/></em></p>
        ///   <p>VOLUME</p>
        /// </summary>
        [Pure]
        public static DockerVolumeInspectSettings RemoveVolumes(this DockerVolumeInspectSettings toolSettings, IEnumerable<string> volumes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(volumes);
            toolSettings.VolumesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContainerStopSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContainerStopSettingsExtensions
    {
        #region Time
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerStopSettings.Time"/></em></p>
        ///   <p>Seconds to wait for stop before killing it.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStopSettings SetTime(this DockerContainerStopSettings toolSettings, int? time)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Time = time;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerStopSettings.Time"/></em></p>
        ///   <p>Seconds to wait for stop before killing it.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStopSettings ResetTime(this DockerContainerStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Time = null;
            return toolSettings;
        }
        #endregion
        #region Containers
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerStopSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerStopSettings SetContainers(this DockerContainerStopSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerStopSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerStopSettings SetContainers(this DockerContainerStopSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerStopSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerStopSettings AddContainers(this DockerContainerStopSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerStopSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerStopSettings AddContainers(this DockerContainerStopSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerStopSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerStopSettings ClearContainers(this DockerContainerStopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerStopSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerStopSettings RemoveContainers(this DockerContainerStopSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerStopSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerStopSettings RemoveContainers(this DockerContainerStopSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerNetworkPruneSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerNetworkPruneSettingsExtensions
    {
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkPruneSettings.Filter"/></em></p>
        ///   <p>Provide filter values (e.g. 'until=&lt;timestamp&gt;').</p>
        /// </summary>
        [Pure]
        public static DockerNetworkPruneSettings SetFilter(this DockerNetworkPruneSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNetworkPruneSettings.Filter"/></em></p>
        ///   <p>Provide filter values (e.g. 'until=&lt;timestamp&gt;').</p>
        /// </summary>
        [Pure]
        public static DockerNetworkPruneSettings ResetFilter(this DockerNetworkPruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Force
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkPruneSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkPruneSettings SetForce(this DockerNetworkPruneSettings toolSettings, bool? force)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = force;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNetworkPruneSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkPruneSettings ResetForce(this DockerNetworkPruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerNetworkPruneSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkPruneSettings EnableForce(this DockerNetworkPruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerNetworkPruneSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkPruneSettings DisableForce(this DockerNetworkPruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerNetworkPruneSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkPruneSettings ToggleForce(this DockerNetworkPruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = !toolSettings.Force;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerManifestInspectSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerManifestInspectSettingsExtensions
    {
        #region Insecure
        /// <summary>
        ///   <p><em>Sets <see cref="DockerManifestInspectSettings.Insecure"/></em></p>
        ///   <p>Allow communication with an insecure registry.</p>
        /// </summary>
        [Pure]
        public static DockerManifestInspectSettings SetInsecure(this DockerManifestInspectSettings toolSettings, bool? insecure)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Insecure = insecure;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerManifestInspectSettings.Insecure"/></em></p>
        ///   <p>Allow communication with an insecure registry.</p>
        /// </summary>
        [Pure]
        public static DockerManifestInspectSettings ResetInsecure(this DockerManifestInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Insecure = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerManifestInspectSettings.Insecure"/></em></p>
        ///   <p>Allow communication with an insecure registry.</p>
        /// </summary>
        [Pure]
        public static DockerManifestInspectSettings EnableInsecure(this DockerManifestInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Insecure = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerManifestInspectSettings.Insecure"/></em></p>
        ///   <p>Allow communication with an insecure registry.</p>
        /// </summary>
        [Pure]
        public static DockerManifestInspectSettings DisableInsecure(this DockerManifestInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Insecure = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerManifestInspectSettings.Insecure"/></em></p>
        ///   <p>Allow communication with an insecure registry.</p>
        /// </summary>
        [Pure]
        public static DockerManifestInspectSettings ToggleInsecure(this DockerManifestInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Insecure = !toolSettings.Insecure;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="DockerManifestInspectSettings.Verbose"/></em></p>
        ///   <p>Output additional info including layers and platform.</p>
        /// </summary>
        [Pure]
        public static DockerManifestInspectSettings SetVerbose(this DockerManifestInspectSettings toolSettings, bool? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerManifestInspectSettings.Verbose"/></em></p>
        ///   <p>Output additional info including layers and platform.</p>
        /// </summary>
        [Pure]
        public static DockerManifestInspectSettings ResetVerbose(this DockerManifestInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerManifestInspectSettings.Verbose"/></em></p>
        ///   <p>Output additional info including layers and platform.</p>
        /// </summary>
        [Pure]
        public static DockerManifestInspectSettings EnableVerbose(this DockerManifestInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerManifestInspectSettings.Verbose"/></em></p>
        ///   <p>Output additional info including layers and platform.</p>
        /// </summary>
        [Pure]
        public static DockerManifestInspectSettings DisableVerbose(this DockerManifestInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerManifestInspectSettings.Verbose"/></em></p>
        ///   <p>Output additional info including layers and platform.</p>
        /// </summary>
        [Pure]
        public static DockerManifestInspectSettings ToggleVerbose(this DockerManifestInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = !toolSettings.Verbose;
            return toolSettings;
        }
        #endregion
        #region ManifestList
        /// <summary>
        ///   <p><em>Sets <see cref="DockerManifestInspectSettings.ManifestList"/></em></p>
        ///   <p>[MANIFEST_LIST]</p>
        /// </summary>
        [Pure]
        public static DockerManifestInspectSettings SetManifestList(this DockerManifestInspectSettings toolSettings, string manifestList)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManifestList = manifestList;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerManifestInspectSettings.ManifestList"/></em></p>
        ///   <p>[MANIFEST_LIST]</p>
        /// </summary>
        [Pure]
        public static DockerManifestInspectSettings ResetManifestList(this DockerManifestInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManifestList = null;
            return toolSettings;
        }
        #endregion
        #region Manifest
        /// <summary>
        ///   <p><em>Sets <see cref="DockerManifestInspectSettings.Manifest"/></em></p>
        ///   <p>MANIFEST</p>
        /// </summary>
        [Pure]
        public static DockerManifestInspectSettings SetManifest(this DockerManifestInspectSettings toolSettings, string manifest)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Manifest = manifest;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerManifestInspectSettings.Manifest"/></em></p>
        ///   <p>MANIFEST</p>
        /// </summary>
        [Pure]
        public static DockerManifestInspectSettings ResetManifest(this DockerManifestInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Manifest = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerInfoSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerInfoSettingsExtensions
    {
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerInfoSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerInfoSettings SetFormat(this DockerInfoSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerInfoSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerInfoSettings ResetFormat(this DockerInfoSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerCommitSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerCommitSettingsExtensions
    {
        #region Author
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCommitSettings.Author"/></em></p>
        ///   <p>Author (e.g., "John Hannibal Smith &lt;hannibal@a-team.com&gt;").</p>
        /// </summary>
        [Pure]
        public static DockerCommitSettings SetAuthor(this DockerCommitSettings toolSettings, string author)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Author = author;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCommitSettings.Author"/></em></p>
        ///   <p>Author (e.g., "John Hannibal Smith &lt;hannibal@a-team.com&gt;").</p>
        /// </summary>
        [Pure]
        public static DockerCommitSettings ResetAuthor(this DockerCommitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Author = null;
            return toolSettings;
        }
        #endregion
        #region Change
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCommitSettings.Change"/> to a new list</em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerCommitSettings SetChange(this DockerCommitSettings toolSettings, params string[] change)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ChangeInternal = change.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCommitSettings.Change"/> to a new list</em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerCommitSettings SetChange(this DockerCommitSettings toolSettings, IEnumerable<string> change)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ChangeInternal = change.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCommitSettings.Change"/></em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerCommitSettings AddChange(this DockerCommitSettings toolSettings, params string[] change)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ChangeInternal.AddRange(change);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCommitSettings.Change"/></em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerCommitSettings AddChange(this DockerCommitSettings toolSettings, IEnumerable<string> change)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ChangeInternal.AddRange(change);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCommitSettings.Change"/></em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerCommitSettings ClearChange(this DockerCommitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ChangeInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCommitSettings.Change"/></em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerCommitSettings RemoveChange(this DockerCommitSettings toolSettings, params string[] change)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(change);
            toolSettings.ChangeInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCommitSettings.Change"/></em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerCommitSettings RemoveChange(this DockerCommitSettings toolSettings, IEnumerable<string> change)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(change);
            toolSettings.ChangeInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Message
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCommitSettings.Message"/></em></p>
        ///   <p>Commit message.</p>
        /// </summary>
        [Pure]
        public static DockerCommitSettings SetMessage(this DockerCommitSettings toolSettings, string message)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Message = message;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCommitSettings.Message"/></em></p>
        ///   <p>Commit message.</p>
        /// </summary>
        [Pure]
        public static DockerCommitSettings ResetMessage(this DockerCommitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Message = null;
            return toolSettings;
        }
        #endregion
        #region Pause
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCommitSettings.Pause"/></em></p>
        ///   <p>Pause container during commit.</p>
        /// </summary>
        [Pure]
        public static DockerCommitSettings SetPause(this DockerCommitSettings toolSettings, bool? pause)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pause = pause;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCommitSettings.Pause"/></em></p>
        ///   <p>Pause container during commit.</p>
        /// </summary>
        [Pure]
        public static DockerCommitSettings ResetPause(this DockerCommitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pause = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerCommitSettings.Pause"/></em></p>
        ///   <p>Pause container during commit.</p>
        /// </summary>
        [Pure]
        public static DockerCommitSettings EnablePause(this DockerCommitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pause = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerCommitSettings.Pause"/></em></p>
        ///   <p>Pause container during commit.</p>
        /// </summary>
        [Pure]
        public static DockerCommitSettings DisablePause(this DockerCommitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pause = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerCommitSettings.Pause"/></em></p>
        ///   <p>Pause container during commit.</p>
        /// </summary>
        [Pure]
        public static DockerCommitSettings TogglePause(this DockerCommitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pause = !toolSettings.Pause;
            return toolSettings;
        }
        #endregion
        #region Container
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCommitSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerCommitSettings SetContainer(this DockerCommitSettings toolSettings, string container)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = container;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCommitSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerCommitSettings ResetContainer(this DockerCommitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = null;
            return toolSettings;
        }
        #endregion
        #region Repository
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCommitSettings.Repository"/></em></p>
        ///   <p>[REPOSITORY[:TAG]]</p>
        /// </summary>
        [Pure]
        public static DockerCommitSettings SetRepository(this DockerCommitSettings toolSettings, string repository)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = repository;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCommitSettings.Repository"/></em></p>
        ///   <p>[REPOSITORY[:TAG]]</p>
        /// </summary>
        [Pure]
        public static DockerCommitSettings ResetRepository(this DockerCommitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerStackDeploySettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerStackDeploySettingsExtensions
    {
        #region BundleFile
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackDeploySettings.BundleFile"/></em></p>
        ///   <p>Path to a Distributed Application Bundle file.</p>
        /// </summary>
        [Pure]
        public static DockerStackDeploySettings SetBundleFile(this DockerStackDeploySettings toolSettings, string bundleFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BundleFile = bundleFile;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStackDeploySettings.BundleFile"/></em></p>
        ///   <p>Path to a Distributed Application Bundle file.</p>
        /// </summary>
        [Pure]
        public static DockerStackDeploySettings ResetBundleFile(this DockerStackDeploySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BundleFile = null;
            return toolSettings;
        }
        #endregion
        #region ComposeFile
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackDeploySettings.ComposeFile"/> to a new list</em></p>
        ///   <p>Path to a Compose file, or "-" to read from stdin.</p>
        /// </summary>
        [Pure]
        public static DockerStackDeploySettings SetComposeFile(this DockerStackDeploySettings toolSettings, params string[] composeFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ComposeFileInternal = composeFile.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackDeploySettings.ComposeFile"/> to a new list</em></p>
        ///   <p>Path to a Compose file, or "-" to read from stdin.</p>
        /// </summary>
        [Pure]
        public static DockerStackDeploySettings SetComposeFile(this DockerStackDeploySettings toolSettings, IEnumerable<string> composeFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ComposeFileInternal = composeFile.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerStackDeploySettings.ComposeFile"/></em></p>
        ///   <p>Path to a Compose file, or "-" to read from stdin.</p>
        /// </summary>
        [Pure]
        public static DockerStackDeploySettings AddComposeFile(this DockerStackDeploySettings toolSettings, params string[] composeFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ComposeFileInternal.AddRange(composeFile);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerStackDeploySettings.ComposeFile"/></em></p>
        ///   <p>Path to a Compose file, or "-" to read from stdin.</p>
        /// </summary>
        [Pure]
        public static DockerStackDeploySettings AddComposeFile(this DockerStackDeploySettings toolSettings, IEnumerable<string> composeFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ComposeFileInternal.AddRange(composeFile);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerStackDeploySettings.ComposeFile"/></em></p>
        ///   <p>Path to a Compose file, or "-" to read from stdin.</p>
        /// </summary>
        [Pure]
        public static DockerStackDeploySettings ClearComposeFile(this DockerStackDeploySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ComposeFileInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerStackDeploySettings.ComposeFile"/></em></p>
        ///   <p>Path to a Compose file, or "-" to read from stdin.</p>
        /// </summary>
        [Pure]
        public static DockerStackDeploySettings RemoveComposeFile(this DockerStackDeploySettings toolSettings, params string[] composeFile)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(composeFile);
            toolSettings.ComposeFileInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerStackDeploySettings.ComposeFile"/></em></p>
        ///   <p>Path to a Compose file, or "-" to read from stdin.</p>
        /// </summary>
        [Pure]
        public static DockerStackDeploySettings RemoveComposeFile(this DockerStackDeploySettings toolSettings, IEnumerable<string> composeFile)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(composeFile);
            toolSettings.ComposeFileInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Namespace
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackDeploySettings.Namespace"/></em></p>
        ///   <p>Kubernetes namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerStackDeploySettings SetNamespace(this DockerStackDeploySettings toolSettings, string @namespace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Namespace = @namespace;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStackDeploySettings.Namespace"/></em></p>
        ///   <p>Kubernetes namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerStackDeploySettings ResetNamespace(this DockerStackDeploySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Namespace = null;
            return toolSettings;
        }
        #endregion
        #region Prune
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackDeploySettings.Prune"/></em></p>
        ///   <p>Prune services that are no longer referenced.</p>
        /// </summary>
        [Pure]
        public static DockerStackDeploySettings SetPrune(this DockerStackDeploySettings toolSettings, bool? prune)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Prune = prune;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStackDeploySettings.Prune"/></em></p>
        ///   <p>Prune services that are no longer referenced.</p>
        /// </summary>
        [Pure]
        public static DockerStackDeploySettings ResetPrune(this DockerStackDeploySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Prune = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerStackDeploySettings.Prune"/></em></p>
        ///   <p>Prune services that are no longer referenced.</p>
        /// </summary>
        [Pure]
        public static DockerStackDeploySettings EnablePrune(this DockerStackDeploySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Prune = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerStackDeploySettings.Prune"/></em></p>
        ///   <p>Prune services that are no longer referenced.</p>
        /// </summary>
        [Pure]
        public static DockerStackDeploySettings DisablePrune(this DockerStackDeploySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Prune = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerStackDeploySettings.Prune"/></em></p>
        ///   <p>Prune services that are no longer referenced.</p>
        /// </summary>
        [Pure]
        public static DockerStackDeploySettings TogglePrune(this DockerStackDeploySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Prune = !toolSettings.Prune;
            return toolSettings;
        }
        #endregion
        #region ResolveImage
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackDeploySettings.ResolveImage"/></em></p>
        ///   <p>Query the registry to resolve image digest and supported platforms ("always"|"changed"|"never").</p>
        /// </summary>
        [Pure]
        public static DockerStackDeploySettings SetResolveImage(this DockerStackDeploySettings toolSettings, ResolveImage resolveImage)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResolveImage = resolveImage;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStackDeploySettings.ResolveImage"/></em></p>
        ///   <p>Query the registry to resolve image digest and supported platforms ("always"|"changed"|"never").</p>
        /// </summary>
        [Pure]
        public static DockerStackDeploySettings ResetResolveImage(this DockerStackDeploySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResolveImage = null;
            return toolSettings;
        }
        #endregion
        #region WithRegistryAuth
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackDeploySettings.WithRegistryAuth"/></em></p>
        ///   <p>Send registry authentication details to Swarm agents.</p>
        /// </summary>
        [Pure]
        public static DockerStackDeploySettings SetWithRegistryAuth(this DockerStackDeploySettings toolSettings, bool? withRegistryAuth)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WithRegistryAuth = withRegistryAuth;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStackDeploySettings.WithRegistryAuth"/></em></p>
        ///   <p>Send registry authentication details to Swarm agents.</p>
        /// </summary>
        [Pure]
        public static DockerStackDeploySettings ResetWithRegistryAuth(this DockerStackDeploySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WithRegistryAuth = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerStackDeploySettings.WithRegistryAuth"/></em></p>
        ///   <p>Send registry authentication details to Swarm agents.</p>
        /// </summary>
        [Pure]
        public static DockerStackDeploySettings EnableWithRegistryAuth(this DockerStackDeploySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WithRegistryAuth = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerStackDeploySettings.WithRegistryAuth"/></em></p>
        ///   <p>Send registry authentication details to Swarm agents.</p>
        /// </summary>
        [Pure]
        public static DockerStackDeploySettings DisableWithRegistryAuth(this DockerStackDeploySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WithRegistryAuth = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerStackDeploySettings.WithRegistryAuth"/></em></p>
        ///   <p>Send registry authentication details to Swarm agents.</p>
        /// </summary>
        [Pure]
        public static DockerStackDeploySettings ToggleWithRegistryAuth(this DockerStackDeploySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WithRegistryAuth = !toolSettings.WithRegistryAuth;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackDeploySettings.Stack"/></em></p>
        ///   <p>STACK</p>
        /// </summary>
        [Pure]
        public static DockerStackDeploySettings SetStack(this DockerStackDeploySettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStackDeploySettings.Stack"/></em></p>
        ///   <p>STACK</p>
        /// </summary>
        [Pure]
        public static DockerStackDeploySettings ResetStack(this DockerStackDeploySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerServiceScaleSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerServiceScaleSettingsExtensions
    {
        #region ServiceReplicas
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceScaleSettings.ServiceReplicas"/> to a new dictionary</em></p>
        ///   <p>SERVICE=REPLICAS</p>
        /// </summary>
        [Pure]
        public static DockerServiceScaleSettings SetServiceReplicas(this DockerServiceScaleSettings toolSettings, IDictionary<string, string> serviceReplicas)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceReplicasInternal = serviceReplicas.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceScaleSettings.ServiceReplicas"/></em></p>
        ///   <p>SERVICE=REPLICAS</p>
        /// </summary>
        [Pure]
        public static DockerServiceScaleSettings ClearServiceReplicas(this DockerServiceScaleSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceReplicasInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds a new key-value-pair <see cref="DockerServiceScaleSettings.ServiceReplicas"/></em></p>
        ///   <p>SERVICE=REPLICAS</p>
        /// </summary>
        [Pure]
        public static DockerServiceScaleSettings AddServiceReplica(this DockerServiceScaleSettings toolSettings, string serviceReplicaKey, string serviceReplicaValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceReplicasInternal.Add(serviceReplicaKey, serviceReplicaValue);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes a key-value-pair from <see cref="DockerServiceScaleSettings.ServiceReplicas"/></em></p>
        ///   <p>SERVICE=REPLICAS</p>
        /// </summary>
        [Pure]
        public static DockerServiceScaleSettings RemoveServiceReplica(this DockerServiceScaleSettings toolSettings, string serviceReplicaKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceReplicasInternal.Remove(serviceReplicaKey);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets a key-value-pair in <see cref="DockerServiceScaleSettings.ServiceReplicas"/></em></p>
        ///   <p>SERVICE=REPLICAS</p>
        /// </summary>
        [Pure]
        public static DockerServiceScaleSettings SetServiceReplica(this DockerServiceScaleSettings toolSettings, string serviceReplicaKey, string serviceReplicaValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServiceReplicasInternal[serviceReplicaKey] = serviceReplicaValue;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerRunSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerRunSettingsExtensions
    {
        #region AddHost
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.AddHost"/> to a new list</em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetAddHost(this DockerRunSettings toolSettings, params string[] addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal = addHost.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.AddHost"/> to a new list</em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetAddHost(this DockerRunSettings toolSettings, IEnumerable<string> addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal = addHost.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddAddHost(this DockerRunSettings toolSettings, params string[] addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal.AddRange(addHost);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddAddHost(this DockerRunSettings toolSettings, IEnumerable<string> addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal.AddRange(addHost);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearAddHost(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveAddHost(this DockerRunSettings toolSettings, params string[] addHost)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(addHost);
            toolSettings.AddHostInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveAddHost(this DockerRunSettings toolSettings, IEnumerable<string> addHost)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(addHost);
            toolSettings.AddHostInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Attach
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Attach"/> to a new list</em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetAttach(this DockerRunSettings toolSettings, params string[] attach)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AttachInternal = attach.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Attach"/> to a new list</em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetAttach(this DockerRunSettings toolSettings, IEnumerable<string> attach)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AttachInternal = attach.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.Attach"/></em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddAttach(this DockerRunSettings toolSettings, params string[] attach)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AttachInternal.AddRange(attach);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.Attach"/></em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddAttach(this DockerRunSettings toolSettings, IEnumerable<string> attach)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AttachInternal.AddRange(attach);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.Attach"/></em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearAttach(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AttachInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.Attach"/></em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveAttach(this DockerRunSettings toolSettings, params string[] attach)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(attach);
            toolSettings.AttachInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.Attach"/></em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveAttach(this DockerRunSettings toolSettings, IEnumerable<string> attach)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(attach);
            toolSettings.AttachInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region BlkioWeight
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.BlkioWeight"/></em></p>
        ///   <p>Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetBlkioWeight(this DockerRunSettings toolSettings, int? blkioWeight)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeight = blkioWeight;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.BlkioWeight"/></em></p>
        ///   <p>Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetBlkioWeight(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeight = null;
            return toolSettings;
        }
        #endregion
        #region BlkioWeightDevice
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.BlkioWeightDevice"/> to a new list</em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetBlkioWeightDevice(this DockerRunSettings toolSettings, params string[] blkioWeightDevice)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeightDeviceInternal = blkioWeightDevice.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.BlkioWeightDevice"/> to a new list</em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetBlkioWeightDevice(this DockerRunSettings toolSettings, IEnumerable<string> blkioWeightDevice)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeightDeviceInternal = blkioWeightDevice.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.BlkioWeightDevice"/></em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddBlkioWeightDevice(this DockerRunSettings toolSettings, params string[] blkioWeightDevice)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeightDeviceInternal.AddRange(blkioWeightDevice);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.BlkioWeightDevice"/></em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddBlkioWeightDevice(this DockerRunSettings toolSettings, IEnumerable<string> blkioWeightDevice)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeightDeviceInternal.AddRange(blkioWeightDevice);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.BlkioWeightDevice"/></em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearBlkioWeightDevice(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeightDeviceInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.BlkioWeightDevice"/></em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveBlkioWeightDevice(this DockerRunSettings toolSettings, params string[] blkioWeightDevice)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(blkioWeightDevice);
            toolSettings.BlkioWeightDeviceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.BlkioWeightDevice"/></em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveBlkioWeightDevice(this DockerRunSettings toolSettings, IEnumerable<string> blkioWeightDevice)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(blkioWeightDevice);
            toolSettings.BlkioWeightDeviceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region CapAdd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.CapAdd"/> to a new list</em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetCapAdd(this DockerRunSettings toolSettings, params string[] capAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapAddInternal = capAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.CapAdd"/> to a new list</em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetCapAdd(this DockerRunSettings toolSettings, IEnumerable<string> capAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapAddInternal = capAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.CapAdd"/></em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddCapAdd(this DockerRunSettings toolSettings, params string[] capAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapAddInternal.AddRange(capAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.CapAdd"/></em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddCapAdd(this DockerRunSettings toolSettings, IEnumerable<string> capAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapAddInternal.AddRange(capAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.CapAdd"/></em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearCapAdd(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapAddInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.CapAdd"/></em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveCapAdd(this DockerRunSettings toolSettings, params string[] capAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(capAdd);
            toolSettings.CapAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.CapAdd"/></em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveCapAdd(this DockerRunSettings toolSettings, IEnumerable<string> capAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(capAdd);
            toolSettings.CapAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region CapDrop
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.CapDrop"/> to a new list</em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetCapDrop(this DockerRunSettings toolSettings, params string[] capDrop)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapDropInternal = capDrop.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.CapDrop"/> to a new list</em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetCapDrop(this DockerRunSettings toolSettings, IEnumerable<string> capDrop)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapDropInternal = capDrop.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.CapDrop"/></em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddCapDrop(this DockerRunSettings toolSettings, params string[] capDrop)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapDropInternal.AddRange(capDrop);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.CapDrop"/></em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddCapDrop(this DockerRunSettings toolSettings, IEnumerable<string> capDrop)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapDropInternal.AddRange(capDrop);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.CapDrop"/></em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearCapDrop(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapDropInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.CapDrop"/></em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveCapDrop(this DockerRunSettings toolSettings, params string[] capDrop)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(capDrop);
            toolSettings.CapDropInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.CapDrop"/></em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveCapDrop(this DockerRunSettings toolSettings, IEnumerable<string> capDrop)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(capDrop);
            toolSettings.CapDropInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region CgroupParent
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.CgroupParent"/></em></p>
        ///   <p>Optional parent cgroup for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetCgroupParent(this DockerRunSettings toolSettings, string cgroupParent)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CgroupParent = cgroupParent;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.CgroupParent"/></em></p>
        ///   <p>Optional parent cgroup for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetCgroupParent(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CgroupParent = null;
            return toolSettings;
        }
        #endregion
        #region Cidfile
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Cidfile"/></em></p>
        ///   <p>Write the container ID to the file.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetCidfile(this DockerRunSettings toolSettings, string cidfile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cidfile = cidfile;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Cidfile"/></em></p>
        ///   <p>Write the container ID to the file.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetCidfile(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cidfile = null;
            return toolSettings;
        }
        #endregion
        #region CpuCount
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.CpuCount"/></em></p>
        ///   <p>CPU count (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetCpuCount(this DockerRunSettings toolSettings, long? cpuCount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuCount = cpuCount;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.CpuCount"/></em></p>
        ///   <p>CPU count (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetCpuCount(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuCount = null;
            return toolSettings;
        }
        #endregion
        #region CpuPercent
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.CpuPercent"/></em></p>
        ///   <p>CPU percent (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetCpuPercent(this DockerRunSettings toolSettings, long? cpuPercent)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuPercent = cpuPercent;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.CpuPercent"/></em></p>
        ///   <p>CPU percent (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetCpuPercent(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuPercent = null;
            return toolSettings;
        }
        #endregion
        #region CpuPeriod
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.CpuPeriod"/></em></p>
        ///   <p>Limit CPU CFS (Completely Fair Scheduler) period.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetCpuPeriod(this DockerRunSettings toolSettings, long? cpuPeriod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuPeriod = cpuPeriod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.CpuPeriod"/></em></p>
        ///   <p>Limit CPU CFS (Completely Fair Scheduler) period.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetCpuPeriod(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuPeriod = null;
            return toolSettings;
        }
        #endregion
        #region CpuQuota
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.CpuQuota"/></em></p>
        ///   <p>Limit CPU CFS (Completely Fair Scheduler) quota.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetCpuQuota(this DockerRunSettings toolSettings, long? cpuQuota)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuQuota = cpuQuota;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.CpuQuota"/></em></p>
        ///   <p>Limit CPU CFS (Completely Fair Scheduler) quota.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetCpuQuota(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuQuota = null;
            return toolSettings;
        }
        #endregion
        #region CpuRtPeriod
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.CpuRtPeriod"/></em></p>
        ///   <p>Limit CPU real-time period in microseconds.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetCpuRtPeriod(this DockerRunSettings toolSettings, long? cpuRtPeriod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuRtPeriod = cpuRtPeriod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.CpuRtPeriod"/></em></p>
        ///   <p>Limit CPU real-time period in microseconds.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetCpuRtPeriod(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuRtPeriod = null;
            return toolSettings;
        }
        #endregion
        #region CpuRtRuntime
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.CpuRtRuntime"/></em></p>
        ///   <p>Limit CPU real-time runtime in microseconds.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetCpuRtRuntime(this DockerRunSettings toolSettings, long? cpuRtRuntime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuRtRuntime = cpuRtRuntime;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.CpuRtRuntime"/></em></p>
        ///   <p>Limit CPU real-time runtime in microseconds.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetCpuRtRuntime(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuRtRuntime = null;
            return toolSettings;
        }
        #endregion
        #region CpuShares
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.CpuShares"/></em></p>
        ///   <p>CPU shares (relative weight).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetCpuShares(this DockerRunSettings toolSettings, long? cpuShares)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuShares = cpuShares;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.CpuShares"/></em></p>
        ///   <p>CPU shares (relative weight).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetCpuShares(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuShares = null;
            return toolSettings;
        }
        #endregion
        #region Cpus
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Cpus"/></em></p>
        ///   <p>Number of CPUs.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetCpus(this DockerRunSettings toolSettings, decimal? cpus)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cpus = cpus;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Cpus"/></em></p>
        ///   <p>Number of CPUs.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetCpus(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cpus = null;
            return toolSettings;
        }
        #endregion
        #region CpusetCpus
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.CpusetCpus"/></em></p>
        ///   <p>CPUs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetCpusetCpus(this DockerRunSettings toolSettings, string cpusetCpus)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetCpus = cpusetCpus;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.CpusetCpus"/></em></p>
        ///   <p>CPUs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetCpusetCpus(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetCpus = null;
            return toolSettings;
        }
        #endregion
        #region CpusetMems
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.CpusetMems"/></em></p>
        ///   <p>MEMs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetCpusetMems(this DockerRunSettings toolSettings, string cpusetMems)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetMems = cpusetMems;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.CpusetMems"/></em></p>
        ///   <p>MEMs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetCpusetMems(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetMems = null;
            return toolSettings;
        }
        #endregion
        #region Detach
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Detach"/></em></p>
        ///   <p>Run container in background and print container ID.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetDetach(this DockerRunSettings toolSettings, bool? detach)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = detach;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Detach"/></em></p>
        ///   <p>Run container in background and print container ID.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetDetach(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerRunSettings.Detach"/></em></p>
        ///   <p>Run container in background and print container ID.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings EnableDetach(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerRunSettings.Detach"/></em></p>
        ///   <p>Run container in background and print container ID.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings DisableDetach(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerRunSettings.Detach"/></em></p>
        ///   <p>Run container in background and print container ID.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ToggleDetach(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = !toolSettings.Detach;
            return toolSettings;
        }
        #endregion
        #region DetachKeys
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.DetachKeys"/></em></p>
        ///   <p>Override the key sequence for detaching a container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetDetachKeys(this DockerRunSettings toolSettings, string detachKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DetachKeys = detachKeys;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.DetachKeys"/></em></p>
        ///   <p>Override the key sequence for detaching a container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetDetachKeys(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DetachKeys = null;
            return toolSettings;
        }
        #endregion
        #region Device
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Device"/> to a new list</em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetDevice(this DockerRunSettings toolSettings, params string[] device)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceInternal = device.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Device"/> to a new list</em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetDevice(this DockerRunSettings toolSettings, IEnumerable<string> device)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceInternal = device.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.Device"/></em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddDevice(this DockerRunSettings toolSettings, params string[] device)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceInternal.AddRange(device);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.Device"/></em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddDevice(this DockerRunSettings toolSettings, IEnumerable<string> device)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceInternal.AddRange(device);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.Device"/></em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearDevice(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.Device"/></em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveDevice(this DockerRunSettings toolSettings, params string[] device)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(device);
            toolSettings.DeviceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.Device"/></em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveDevice(this DockerRunSettings toolSettings, IEnumerable<string> device)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(device);
            toolSettings.DeviceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DeviceCgroupRule
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.DeviceCgroupRule"/> to a new list</em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetDeviceCgroupRule(this DockerRunSettings toolSettings, params string[] deviceCgroupRule)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceCgroupRuleInternal = deviceCgroupRule.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.DeviceCgroupRule"/> to a new list</em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetDeviceCgroupRule(this DockerRunSettings toolSettings, IEnumerable<string> deviceCgroupRule)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceCgroupRuleInternal = deviceCgroupRule.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.DeviceCgroupRule"/></em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddDeviceCgroupRule(this DockerRunSettings toolSettings, params string[] deviceCgroupRule)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceCgroupRuleInternal.AddRange(deviceCgroupRule);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.DeviceCgroupRule"/></em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddDeviceCgroupRule(this DockerRunSettings toolSettings, IEnumerable<string> deviceCgroupRule)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceCgroupRuleInternal.AddRange(deviceCgroupRule);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.DeviceCgroupRule"/></em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearDeviceCgroupRule(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceCgroupRuleInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.DeviceCgroupRule"/></em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveDeviceCgroupRule(this DockerRunSettings toolSettings, params string[] deviceCgroupRule)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceCgroupRule);
            toolSettings.DeviceCgroupRuleInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.DeviceCgroupRule"/></em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveDeviceCgroupRule(this DockerRunSettings toolSettings, IEnumerable<string> deviceCgroupRule)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceCgroupRule);
            toolSettings.DeviceCgroupRuleInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DeviceReadBps
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.DeviceReadBps"/> to a new list</em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetDeviceReadBps(this DockerRunSettings toolSettings, params string[] deviceReadBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadBpsInternal = deviceReadBps.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.DeviceReadBps"/> to a new list</em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetDeviceReadBps(this DockerRunSettings toolSettings, IEnumerable<string> deviceReadBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadBpsInternal = deviceReadBps.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.DeviceReadBps"/></em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddDeviceReadBps(this DockerRunSettings toolSettings, params string[] deviceReadBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadBpsInternal.AddRange(deviceReadBps);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.DeviceReadBps"/></em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddDeviceReadBps(this DockerRunSettings toolSettings, IEnumerable<string> deviceReadBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadBpsInternal.AddRange(deviceReadBps);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.DeviceReadBps"/></em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearDeviceReadBps(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadBpsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.DeviceReadBps"/></em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveDeviceReadBps(this DockerRunSettings toolSettings, params string[] deviceReadBps)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceReadBps);
            toolSettings.DeviceReadBpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.DeviceReadBps"/></em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveDeviceReadBps(this DockerRunSettings toolSettings, IEnumerable<string> deviceReadBps)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceReadBps);
            toolSettings.DeviceReadBpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DeviceReadIops
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.DeviceReadIops"/> to a new list</em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetDeviceReadIops(this DockerRunSettings toolSettings, params string[] deviceReadIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadIopsInternal = deviceReadIops.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.DeviceReadIops"/> to a new list</em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetDeviceReadIops(this DockerRunSettings toolSettings, IEnumerable<string> deviceReadIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadIopsInternal = deviceReadIops.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.DeviceReadIops"/></em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddDeviceReadIops(this DockerRunSettings toolSettings, params string[] deviceReadIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadIopsInternal.AddRange(deviceReadIops);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.DeviceReadIops"/></em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddDeviceReadIops(this DockerRunSettings toolSettings, IEnumerable<string> deviceReadIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadIopsInternal.AddRange(deviceReadIops);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.DeviceReadIops"/></em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearDeviceReadIops(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadIopsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.DeviceReadIops"/></em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveDeviceReadIops(this DockerRunSettings toolSettings, params string[] deviceReadIops)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceReadIops);
            toolSettings.DeviceReadIopsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.DeviceReadIops"/></em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveDeviceReadIops(this DockerRunSettings toolSettings, IEnumerable<string> deviceReadIops)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceReadIops);
            toolSettings.DeviceReadIopsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DeviceWriteBps
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.DeviceWriteBps"/> to a new list</em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetDeviceWriteBps(this DockerRunSettings toolSettings, params string[] deviceWriteBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteBpsInternal = deviceWriteBps.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.DeviceWriteBps"/> to a new list</em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetDeviceWriteBps(this DockerRunSettings toolSettings, IEnumerable<string> deviceWriteBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteBpsInternal = deviceWriteBps.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.DeviceWriteBps"/></em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddDeviceWriteBps(this DockerRunSettings toolSettings, params string[] deviceWriteBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteBpsInternal.AddRange(deviceWriteBps);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.DeviceWriteBps"/></em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddDeviceWriteBps(this DockerRunSettings toolSettings, IEnumerable<string> deviceWriteBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteBpsInternal.AddRange(deviceWriteBps);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.DeviceWriteBps"/></em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearDeviceWriteBps(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteBpsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.DeviceWriteBps"/></em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveDeviceWriteBps(this DockerRunSettings toolSettings, params string[] deviceWriteBps)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceWriteBps);
            toolSettings.DeviceWriteBpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.DeviceWriteBps"/></em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveDeviceWriteBps(this DockerRunSettings toolSettings, IEnumerable<string> deviceWriteBps)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceWriteBps);
            toolSettings.DeviceWriteBpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DeviceWriteIops
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.DeviceWriteIops"/> to a new list</em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetDeviceWriteIops(this DockerRunSettings toolSettings, params string[] deviceWriteIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteIopsInternal = deviceWriteIops.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.DeviceWriteIops"/> to a new list</em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetDeviceWriteIops(this DockerRunSettings toolSettings, IEnumerable<string> deviceWriteIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteIopsInternal = deviceWriteIops.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.DeviceWriteIops"/></em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddDeviceWriteIops(this DockerRunSettings toolSettings, params string[] deviceWriteIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteIopsInternal.AddRange(deviceWriteIops);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.DeviceWriteIops"/></em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddDeviceWriteIops(this DockerRunSettings toolSettings, IEnumerable<string> deviceWriteIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteIopsInternal.AddRange(deviceWriteIops);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.DeviceWriteIops"/></em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearDeviceWriteIops(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteIopsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.DeviceWriteIops"/></em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveDeviceWriteIops(this DockerRunSettings toolSettings, params string[] deviceWriteIops)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceWriteIops);
            toolSettings.DeviceWriteIopsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.DeviceWriteIops"/></em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveDeviceWriteIops(this DockerRunSettings toolSettings, IEnumerable<string> deviceWriteIops)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceWriteIops);
            toolSettings.DeviceWriteIopsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DisableContentTrust
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetDisableContentTrust(this DockerRunSettings toolSettings, bool? disableContentTrust)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = disableContentTrust;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetDisableContentTrust(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerRunSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings EnableDisableContentTrust(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerRunSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings DisableDisableContentTrust(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerRunSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ToggleDisableContentTrust(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = !toolSettings.DisableContentTrust;
            return toolSettings;
        }
        #endregion
        #region Dns
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Dns"/> to a new list</em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetDns(this DockerRunSettings toolSettings, params string[] dns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsInternal = dns.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Dns"/> to a new list</em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetDns(this DockerRunSettings toolSettings, IEnumerable<string> dns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsInternal = dns.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.Dns"/></em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddDns(this DockerRunSettings toolSettings, params string[] dns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsInternal.AddRange(dns);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.Dns"/></em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddDns(this DockerRunSettings toolSettings, IEnumerable<string> dns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsInternal.AddRange(dns);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.Dns"/></em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearDns(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.Dns"/></em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveDns(this DockerRunSettings toolSettings, params string[] dns)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dns);
            toolSettings.DnsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.Dns"/></em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveDns(this DockerRunSettings toolSettings, IEnumerable<string> dns)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dns);
            toolSettings.DnsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DnsOpt
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.DnsOpt"/> to a new list</em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetDnsOpt(this DockerRunSettings toolSettings, params string[] dnsOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptInternal = dnsOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.DnsOpt"/> to a new list</em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetDnsOpt(this DockerRunSettings toolSettings, IEnumerable<string> dnsOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptInternal = dnsOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.DnsOpt"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddDnsOpt(this DockerRunSettings toolSettings, params string[] dnsOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptInternal.AddRange(dnsOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.DnsOpt"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddDnsOpt(this DockerRunSettings toolSettings, IEnumerable<string> dnsOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptInternal.AddRange(dnsOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.DnsOpt"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearDnsOpt(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.DnsOpt"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveDnsOpt(this DockerRunSettings toolSettings, params string[] dnsOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsOpt);
            toolSettings.DnsOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.DnsOpt"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveDnsOpt(this DockerRunSettings toolSettings, IEnumerable<string> dnsOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsOpt);
            toolSettings.DnsOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DnsOption
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.DnsOption"/> to a new list</em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetDnsOption(this DockerRunSettings toolSettings, params string[] dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionInternal = dnsOption.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.DnsOption"/> to a new list</em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetDnsOption(this DockerRunSettings toolSettings, IEnumerable<string> dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionInternal = dnsOption.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.DnsOption"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddDnsOption(this DockerRunSettings toolSettings, params string[] dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionInternal.AddRange(dnsOption);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.DnsOption"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddDnsOption(this DockerRunSettings toolSettings, IEnumerable<string> dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionInternal.AddRange(dnsOption);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.DnsOption"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearDnsOption(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.DnsOption"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveDnsOption(this DockerRunSettings toolSettings, params string[] dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsOption);
            toolSettings.DnsOptionInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.DnsOption"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveDnsOption(this DockerRunSettings toolSettings, IEnumerable<string> dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsOption);
            toolSettings.DnsOptionInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DnsSearch
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.DnsSearch"/> to a new list</em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetDnsSearch(this DockerRunSettings toolSettings, params string[] dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchInternal = dnsSearch.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.DnsSearch"/> to a new list</em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetDnsSearch(this DockerRunSettings toolSettings, IEnumerable<string> dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchInternal = dnsSearch.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.DnsSearch"/></em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddDnsSearch(this DockerRunSettings toolSettings, params string[] dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchInternal.AddRange(dnsSearch);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.DnsSearch"/></em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddDnsSearch(this DockerRunSettings toolSettings, IEnumerable<string> dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchInternal.AddRange(dnsSearch);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.DnsSearch"/></em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearDnsSearch(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.DnsSearch"/></em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveDnsSearch(this DockerRunSettings toolSettings, params string[] dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsSearch);
            toolSettings.DnsSearchInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.DnsSearch"/></em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveDnsSearch(this DockerRunSettings toolSettings, IEnumerable<string> dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsSearch);
            toolSettings.DnsSearchInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Domainname
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Domainname"/></em></p>
        ///   <p>Container NIS domain name.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetDomainname(this DockerRunSettings toolSettings, string domainname)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Domainname = domainname;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Domainname"/></em></p>
        ///   <p>Container NIS domain name.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetDomainname(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Domainname = null;
            return toolSettings;
        }
        #endregion
        #region Entrypoint
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Entrypoint"/></em></p>
        ///   <p>Overwrite the default ENTRYPOINT of the image.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetEntrypoint(this DockerRunSettings toolSettings, string entrypoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Entrypoint = entrypoint;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Entrypoint"/></em></p>
        ///   <p>Overwrite the default ENTRYPOINT of the image.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetEntrypoint(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Entrypoint = null;
            return toolSettings;
        }
        #endregion
        #region Env
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Env"/> to a new list</em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetEnv(this DockerRunSettings toolSettings, params string[] env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal = env.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Env"/> to a new list</em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetEnv(this DockerRunSettings toolSettings, IEnumerable<string> env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal = env.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddEnv(this DockerRunSettings toolSettings, params string[] env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal.AddRange(env);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddEnv(this DockerRunSettings toolSettings, IEnumerable<string> env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal.AddRange(env);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearEnv(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveEnv(this DockerRunSettings toolSettings, params string[] env)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(env);
            toolSettings.EnvInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveEnv(this DockerRunSettings toolSettings, IEnumerable<string> env)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(env);
            toolSettings.EnvInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region EnvFile
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.EnvFile"/> to a new list</em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetEnvFile(this DockerRunSettings toolSettings, params string[] envFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvFileInternal = envFile.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.EnvFile"/> to a new list</em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetEnvFile(this DockerRunSettings toolSettings, IEnumerable<string> envFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvFileInternal = envFile.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.EnvFile"/></em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddEnvFile(this DockerRunSettings toolSettings, params string[] envFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvFileInternal.AddRange(envFile);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.EnvFile"/></em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddEnvFile(this DockerRunSettings toolSettings, IEnumerable<string> envFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvFileInternal.AddRange(envFile);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.EnvFile"/></em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearEnvFile(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvFileInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.EnvFile"/></em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveEnvFile(this DockerRunSettings toolSettings, params string[] envFile)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(envFile);
            toolSettings.EnvFileInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.EnvFile"/></em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveEnvFile(this DockerRunSettings toolSettings, IEnumerable<string> envFile)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(envFile);
            toolSettings.EnvFileInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Expose
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Expose"/> to a new list</em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetExpose(this DockerRunSettings toolSettings, params string[] expose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposeInternal = expose.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Expose"/> to a new list</em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetExpose(this DockerRunSettings toolSettings, IEnumerable<string> expose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposeInternal = expose.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.Expose"/></em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddExpose(this DockerRunSettings toolSettings, params string[] expose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposeInternal.AddRange(expose);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.Expose"/></em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddExpose(this DockerRunSettings toolSettings, IEnumerable<string> expose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposeInternal.AddRange(expose);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.Expose"/></em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearExpose(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposeInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.Expose"/></em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveExpose(this DockerRunSettings toolSettings, params string[] expose)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(expose);
            toolSettings.ExposeInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.Expose"/></em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveExpose(this DockerRunSettings toolSettings, IEnumerable<string> expose)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(expose);
            toolSettings.ExposeInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Gpus
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Gpus"/></em></p>
        ///   <p>GPU devices to add to the container ('all' to pass all GPUs).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetGpus(this DockerRunSettings toolSettings, string gpus)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Gpus = gpus;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Gpus"/></em></p>
        ///   <p>GPU devices to add to the container ('all' to pass all GPUs).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetGpus(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Gpus = null;
            return toolSettings;
        }
        #endregion
        #region GroupAdd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.GroupAdd"/> to a new list</em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetGroupAdd(this DockerRunSettings toolSettings, params string[] groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupAddInternal = groupAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.GroupAdd"/> to a new list</em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetGroupAdd(this DockerRunSettings toolSettings, IEnumerable<string> groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupAddInternal = groupAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.GroupAdd"/></em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddGroupAdd(this DockerRunSettings toolSettings, params string[] groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupAddInternal.AddRange(groupAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.GroupAdd"/></em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddGroupAdd(this DockerRunSettings toolSettings, IEnumerable<string> groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupAddInternal.AddRange(groupAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.GroupAdd"/></em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearGroupAdd(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupAddInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.GroupAdd"/></em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveGroupAdd(this DockerRunSettings toolSettings, params string[] groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(groupAdd);
            toolSettings.GroupAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.GroupAdd"/></em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveGroupAdd(this DockerRunSettings toolSettings, IEnumerable<string> groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(groupAdd);
            toolSettings.GroupAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region HealthCmd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.HealthCmd"/></em></p>
        ///   <p>Command to run to check health.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetHealthCmd(this DockerRunSettings toolSettings, string healthCmd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthCmd = healthCmd;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.HealthCmd"/></em></p>
        ///   <p>Command to run to check health.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetHealthCmd(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthCmd = null;
            return toolSettings;
        }
        #endregion
        #region HealthInterval
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.HealthInterval"/></em></p>
        ///   <p>Time between running the check (ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetHealthInterval(this DockerRunSettings toolSettings, string healthInterval)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthInterval = healthInterval;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.HealthInterval"/></em></p>
        ///   <p>Time between running the check (ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetHealthInterval(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthInterval = null;
            return toolSettings;
        }
        #endregion
        #region HealthRetries
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.HealthRetries"/></em></p>
        ///   <p>Consecutive failures needed to report unhealthy.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetHealthRetries(this DockerRunSettings toolSettings, int? healthRetries)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthRetries = healthRetries;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.HealthRetries"/></em></p>
        ///   <p>Consecutive failures needed to report unhealthy.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetHealthRetries(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthRetries = null;
            return toolSettings;
        }
        #endregion
        #region HealthStartPeriod
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.HealthStartPeriod"/></em></p>
        ///   <p>Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetHealthStartPeriod(this DockerRunSettings toolSettings, string healthStartPeriod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthStartPeriod = healthStartPeriod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.HealthStartPeriod"/></em></p>
        ///   <p>Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetHealthStartPeriod(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthStartPeriod = null;
            return toolSettings;
        }
        #endregion
        #region HealthTimeout
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.HealthTimeout"/></em></p>
        ///   <p>Maximum time to allow one check to run (ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetHealthTimeout(this DockerRunSettings toolSettings, string healthTimeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthTimeout = healthTimeout;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.HealthTimeout"/></em></p>
        ///   <p>Maximum time to allow one check to run (ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetHealthTimeout(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthTimeout = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Help"/></em></p>
        ///   <p>Print usage.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetHelp(this DockerRunSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Help"/></em></p>
        ///   <p>Print usage.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetHelp(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerRunSettings.Help"/></em></p>
        ///   <p>Print usage.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings EnableHelp(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerRunSettings.Help"/></em></p>
        ///   <p>Print usage.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings DisableHelp(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerRunSettings.Help"/></em></p>
        ///   <p>Print usage.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ToggleHelp(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region Hostname
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Hostname"/></em></p>
        ///   <p>Container host name.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetHostname(this DockerRunSettings toolSettings, string hostname)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Hostname = hostname;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Hostname"/></em></p>
        ///   <p>Container host name.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetHostname(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Hostname = null;
            return toolSettings;
        }
        #endregion
        #region Init
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Init"/></em></p>
        ///   <p>Run an init inside the container that forwards signals and reaps processes.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetInit(this DockerRunSettings toolSettings, bool? init)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = init;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Init"/></em></p>
        ///   <p>Run an init inside the container that forwards signals and reaps processes.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetInit(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerRunSettings.Init"/></em></p>
        ///   <p>Run an init inside the container that forwards signals and reaps processes.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings EnableInit(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerRunSettings.Init"/></em></p>
        ///   <p>Run an init inside the container that forwards signals and reaps processes.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings DisableInit(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerRunSettings.Init"/></em></p>
        ///   <p>Run an init inside the container that forwards signals and reaps processes.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ToggleInit(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = !toolSettings.Init;
            return toolSettings;
        }
        #endregion
        #region Interactive
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetInteractive(this DockerRunSettings toolSettings, bool? interactive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = interactive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetInteractive(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerRunSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings EnableInteractive(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerRunSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings DisableInteractive(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerRunSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ToggleInteractive(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = !toolSettings.Interactive;
            return toolSettings;
        }
        #endregion
        #region IoMaxbandwidth
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.IoMaxbandwidth"/></em></p>
        ///   <p>Maximum IO bandwidth limit for the system drive (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetIoMaxbandwidth(this DockerRunSettings toolSettings, long? ioMaxbandwidth)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IoMaxbandwidth = ioMaxbandwidth;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.IoMaxbandwidth"/></em></p>
        ///   <p>Maximum IO bandwidth limit for the system drive (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetIoMaxbandwidth(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IoMaxbandwidth = null;
            return toolSettings;
        }
        #endregion
        #region IoMaxiops
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.IoMaxiops"/></em></p>
        ///   <p>Maximum IOps limit for the system drive (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetIoMaxiops(this DockerRunSettings toolSettings, int? ioMaxiops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IoMaxiops = ioMaxiops;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.IoMaxiops"/></em></p>
        ///   <p>Maximum IOps limit for the system drive (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetIoMaxiops(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IoMaxiops = null;
            return toolSettings;
        }
        #endregion
        #region Ip
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Ip"/></em></p>
        ///   <p>IPv4 address (e.g., 172.30.100.104).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetIp(this DockerRunSettings toolSettings, string ip)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip = ip;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Ip"/></em></p>
        ///   <p>IPv4 address (e.g., 172.30.100.104).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetIp(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip = null;
            return toolSettings;
        }
        #endregion
        #region Ip6
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Ip6"/></em></p>
        ///   <p>IPv6 address (e.g., 2001:db8::33).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetIp6(this DockerRunSettings toolSettings, string ip6)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip6 = ip6;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Ip6"/></em></p>
        ///   <p>IPv6 address (e.g., 2001:db8::33).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetIp6(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip6 = null;
            return toolSettings;
        }
        #endregion
        #region Ipc
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Ipc"/></em></p>
        ///   <p>IPC mode to use.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetIpc(this DockerRunSettings toolSettings, string ipc)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ipc = ipc;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Ipc"/></em></p>
        ///   <p>IPC mode to use.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetIpc(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ipc = null;
            return toolSettings;
        }
        #endregion
        #region Isolation
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Isolation"/></em></p>
        ///   <p>Container isolation technology.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetIsolation(this DockerRunSettings toolSettings, string isolation)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Isolation = isolation;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Isolation"/></em></p>
        ///   <p>Container isolation technology.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetIsolation(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Isolation = null;
            return toolSettings;
        }
        #endregion
        #region KernelMemory
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.KernelMemory"/></em></p>
        ///   <p>Kernel memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetKernelMemory(this DockerRunSettings toolSettings, long? kernelMemory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KernelMemory = kernelMemory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.KernelMemory"/></em></p>
        ///   <p>Kernel memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetKernelMemory(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KernelMemory = null;
            return toolSettings;
        }
        #endregion
        #region Label
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Label"/> to a new list</em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetLabel(this DockerRunSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal = label.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Label"/> to a new list</em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetLabel(this DockerRunSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal = label.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.Label"/></em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddLabel(this DockerRunSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.AddRange(label);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.Label"/></em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddLabel(this DockerRunSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.AddRange(label);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.Label"/></em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearLabel(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.Label"/></em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveLabel(this DockerRunSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(label);
            toolSettings.LabelInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.Label"/></em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveLabel(this DockerRunSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(label);
            toolSettings.LabelInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region LabelFile
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.LabelFile"/> to a new list</em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetLabelFile(this DockerRunSettings toolSettings, params string[] labelFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelFileInternal = labelFile.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.LabelFile"/> to a new list</em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetLabelFile(this DockerRunSettings toolSettings, IEnumerable<string> labelFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelFileInternal = labelFile.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.LabelFile"/></em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddLabelFile(this DockerRunSettings toolSettings, params string[] labelFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelFileInternal.AddRange(labelFile);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.LabelFile"/></em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddLabelFile(this DockerRunSettings toolSettings, IEnumerable<string> labelFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelFileInternal.AddRange(labelFile);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.LabelFile"/></em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearLabelFile(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelFileInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.LabelFile"/></em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveLabelFile(this DockerRunSettings toolSettings, params string[] labelFile)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(labelFile);
            toolSettings.LabelFileInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.LabelFile"/></em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveLabelFile(this DockerRunSettings toolSettings, IEnumerable<string> labelFile)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(labelFile);
            toolSettings.LabelFileInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Link
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Link"/> to a new list</em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetLink(this DockerRunSettings toolSettings, params string[] link)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkInternal = link.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Link"/> to a new list</em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetLink(this DockerRunSettings toolSettings, IEnumerable<string> link)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkInternal = link.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.Link"/></em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddLink(this DockerRunSettings toolSettings, params string[] link)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkInternal.AddRange(link);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.Link"/></em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddLink(this DockerRunSettings toolSettings, IEnumerable<string> link)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkInternal.AddRange(link);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.Link"/></em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearLink(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.Link"/></em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveLink(this DockerRunSettings toolSettings, params string[] link)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(link);
            toolSettings.LinkInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.Link"/></em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveLink(this DockerRunSettings toolSettings, IEnumerable<string> link)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(link);
            toolSettings.LinkInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region LinkLocalIp
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.LinkLocalIp"/> to a new list</em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetLinkLocalIp(this DockerRunSettings toolSettings, params string[] linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkLocalIpInternal = linkLocalIp.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.LinkLocalIp"/> to a new list</em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetLinkLocalIp(this DockerRunSettings toolSettings, IEnumerable<string> linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkLocalIpInternal = linkLocalIp.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.LinkLocalIp"/></em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddLinkLocalIp(this DockerRunSettings toolSettings, params string[] linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkLocalIpInternal.AddRange(linkLocalIp);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.LinkLocalIp"/></em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddLinkLocalIp(this DockerRunSettings toolSettings, IEnumerable<string> linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkLocalIpInternal.AddRange(linkLocalIp);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.LinkLocalIp"/></em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearLinkLocalIp(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkLocalIpInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.LinkLocalIp"/></em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveLinkLocalIp(this DockerRunSettings toolSettings, params string[] linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(linkLocalIp);
            toolSettings.LinkLocalIpInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.LinkLocalIp"/></em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveLinkLocalIp(this DockerRunSettings toolSettings, IEnumerable<string> linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(linkLocalIp);
            toolSettings.LinkLocalIpInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region LogDriver
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.LogDriver"/></em></p>
        ///   <p>Logging driver for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetLogDriver(this DockerRunSettings toolSettings, string logDriver)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogDriver = logDriver;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.LogDriver"/></em></p>
        ///   <p>Logging driver for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetLogDriver(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogDriver = null;
            return toolSettings;
        }
        #endregion
        #region LogOpt
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.LogOpt"/> to a new list</em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetLogOpt(this DockerRunSettings toolSettings, params string[] logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal = logOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.LogOpt"/> to a new list</em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetLogOpt(this DockerRunSettings toolSettings, IEnumerable<string> logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal = logOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.LogOpt"/></em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddLogOpt(this DockerRunSettings toolSettings, params string[] logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal.AddRange(logOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.LogOpt"/></em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddLogOpt(this DockerRunSettings toolSettings, IEnumerable<string> logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal.AddRange(logOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.LogOpt"/></em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearLogOpt(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.LogOpt"/></em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveLogOpt(this DockerRunSettings toolSettings, params string[] logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(logOpt);
            toolSettings.LogOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.LogOpt"/></em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveLogOpt(this DockerRunSettings toolSettings, IEnumerable<string> logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(logOpt);
            toolSettings.LogOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region MacAddress
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.MacAddress"/></em></p>
        ///   <p>Container MAC address (e.g., 92:d0:c6:0a:29:33).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetMacAddress(this DockerRunSettings toolSettings, string macAddress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MacAddress = macAddress;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.MacAddress"/></em></p>
        ///   <p>Container MAC address (e.g., 92:d0:c6:0a:29:33).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetMacAddress(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MacAddress = null;
            return toolSettings;
        }
        #endregion
        #region Memory
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Memory"/></em></p>
        ///   <p>Memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetMemory(this DockerRunSettings toolSettings, long? memory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Memory = memory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Memory"/></em></p>
        ///   <p>Memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetMemory(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Memory = null;
            return toolSettings;
        }
        #endregion
        #region MemoryReservation
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.MemoryReservation"/></em></p>
        ///   <p>Memory soft limit.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetMemoryReservation(this DockerRunSettings toolSettings, long? memoryReservation)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemoryReservation = memoryReservation;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.MemoryReservation"/></em></p>
        ///   <p>Memory soft limit.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetMemoryReservation(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemoryReservation = null;
            return toolSettings;
        }
        #endregion
        #region MemorySwap
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.MemorySwap"/></em></p>
        ///   <p>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetMemorySwap(this DockerRunSettings toolSettings, long? memorySwap)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemorySwap = memorySwap;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.MemorySwap"/></em></p>
        ///   <p>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetMemorySwap(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemorySwap = null;
            return toolSettings;
        }
        #endregion
        #region MemorySwappiness
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.MemorySwappiness"/></em></p>
        ///   <p>Tune container memory swappiness (0 to 100).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetMemorySwappiness(this DockerRunSettings toolSettings, long? memorySwappiness)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemorySwappiness = memorySwappiness;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.MemorySwappiness"/></em></p>
        ///   <p>Tune container memory swappiness (0 to 100).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetMemorySwappiness(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemorySwappiness = null;
            return toolSettings;
        }
        #endregion
        #region Mount
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Mount"/></em></p>
        ///   <p>Attach a filesystem mount to the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetMount(this DockerRunSettings toolSettings, string mount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Mount = mount;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Mount"/></em></p>
        ///   <p>Attach a filesystem mount to the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetMount(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Mount = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Name"/></em></p>
        ///   <p>Assign a name to the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetName(this DockerRunSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Name"/></em></p>
        ///   <p>Assign a name to the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetName(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Net
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Net"/></em></p>
        ///   <p>Connect a container to a network.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetNet(this DockerRunSettings toolSettings, string net)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Net = net;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Net"/></em></p>
        ///   <p>Connect a container to a network.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetNet(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Net = null;
            return toolSettings;
        }
        #endregion
        #region NetAlias
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.NetAlias"/> to a new list</em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetNetAlias(this DockerRunSettings toolSettings, params string[] netAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetAliasInternal = netAlias.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.NetAlias"/> to a new list</em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetNetAlias(this DockerRunSettings toolSettings, IEnumerable<string> netAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetAliasInternal = netAlias.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.NetAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddNetAlias(this DockerRunSettings toolSettings, params string[] netAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetAliasInternal.AddRange(netAlias);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.NetAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddNetAlias(this DockerRunSettings toolSettings, IEnumerable<string> netAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetAliasInternal.AddRange(netAlias);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.NetAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearNetAlias(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetAliasInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.NetAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveNetAlias(this DockerRunSettings toolSettings, params string[] netAlias)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(netAlias);
            toolSettings.NetAliasInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.NetAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveNetAlias(this DockerRunSettings toolSettings, IEnumerable<string> netAlias)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(netAlias);
            toolSettings.NetAliasInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Network
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Network"/></em></p>
        ///   <p>Connect a container to a network.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetNetwork(this DockerRunSettings toolSettings, string network)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Network = network;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Network"/></em></p>
        ///   <p>Connect a container to a network.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetNetwork(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Network = null;
            return toolSettings;
        }
        #endregion
        #region NetworkAlias
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.NetworkAlias"/> to a new list</em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetNetworkAlias(this DockerRunSettings toolSettings, params string[] networkAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkAliasInternal = networkAlias.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.NetworkAlias"/> to a new list</em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetNetworkAlias(this DockerRunSettings toolSettings, IEnumerable<string> networkAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkAliasInternal = networkAlias.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.NetworkAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddNetworkAlias(this DockerRunSettings toolSettings, params string[] networkAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkAliasInternal.AddRange(networkAlias);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.NetworkAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddNetworkAlias(this DockerRunSettings toolSettings, IEnumerable<string> networkAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkAliasInternal.AddRange(networkAlias);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.NetworkAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearNetworkAlias(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkAliasInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.NetworkAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveNetworkAlias(this DockerRunSettings toolSettings, params string[] networkAlias)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(networkAlias);
            toolSettings.NetworkAliasInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.NetworkAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveNetworkAlias(this DockerRunSettings toolSettings, IEnumerable<string> networkAlias)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(networkAlias);
            toolSettings.NetworkAliasInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region NoHealthcheck
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetNoHealthcheck(this DockerRunSettings toolSettings, bool? noHealthcheck)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = noHealthcheck;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetNoHealthcheck(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerRunSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings EnableNoHealthcheck(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerRunSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings DisableNoHealthcheck(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerRunSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ToggleNoHealthcheck(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = !toolSettings.NoHealthcheck;
            return toolSettings;
        }
        #endregion
        #region OomKillDisable
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.OomKillDisable"/></em></p>
        ///   <p>Disable OOM Killer.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetOomKillDisable(this DockerRunSettings toolSettings, bool? oomKillDisable)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomKillDisable = oomKillDisable;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.OomKillDisable"/></em></p>
        ///   <p>Disable OOM Killer.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetOomKillDisable(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomKillDisable = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerRunSettings.OomKillDisable"/></em></p>
        ///   <p>Disable OOM Killer.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings EnableOomKillDisable(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomKillDisable = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerRunSettings.OomKillDisable"/></em></p>
        ///   <p>Disable OOM Killer.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings DisableOomKillDisable(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomKillDisable = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerRunSettings.OomKillDisable"/></em></p>
        ///   <p>Disable OOM Killer.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ToggleOomKillDisable(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomKillDisable = !toolSettings.OomKillDisable;
            return toolSettings;
        }
        #endregion
        #region OomScoreAdj
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.OomScoreAdj"/></em></p>
        ///   <p>Tune host's OOM preferences (-1000 to 1000).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetOomScoreAdj(this DockerRunSettings toolSettings, int? oomScoreAdj)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomScoreAdj = oomScoreAdj;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.OomScoreAdj"/></em></p>
        ///   <p>Tune host's OOM preferences (-1000 to 1000).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetOomScoreAdj(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomScoreAdj = null;
            return toolSettings;
        }
        #endregion
        #region Pid
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Pid"/></em></p>
        ///   <p>PID namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetPid(this DockerRunSettings toolSettings, string pid)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pid = pid;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Pid"/></em></p>
        ///   <p>PID namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetPid(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pid = null;
            return toolSettings;
        }
        #endregion
        #region PidsLimit
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.PidsLimit"/></em></p>
        ///   <p>Tune container pids limit (set -1 for unlimited).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetPidsLimit(this DockerRunSettings toolSettings, long? pidsLimit)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PidsLimit = pidsLimit;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.PidsLimit"/></em></p>
        ///   <p>Tune container pids limit (set -1 for unlimited).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetPidsLimit(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PidsLimit = null;
            return toolSettings;
        }
        #endregion
        #region Platform
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Platform"/></em></p>
        ///   <p>Set platform if server is multi-platform capable.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetPlatform(this DockerRunSettings toolSettings, string platform)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = platform;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Platform"/></em></p>
        ///   <p>Set platform if server is multi-platform capable.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetPlatform(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = null;
            return toolSettings;
        }
        #endregion
        #region Privileged
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to this container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetPrivileged(this DockerRunSettings toolSettings, bool? privileged)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = privileged;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to this container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetPrivileged(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerRunSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to this container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings EnablePrivileged(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerRunSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to this container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings DisablePrivileged(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerRunSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to this container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings TogglePrivileged(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = !toolSettings.Privileged;
            return toolSettings;
        }
        #endregion
        #region Publish
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Publish"/> to a new list</em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetPublish(this DockerRunSettings toolSettings, params string[] publish)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishInternal = publish.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Publish"/> to a new list</em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetPublish(this DockerRunSettings toolSettings, IEnumerable<string> publish)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishInternal = publish.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.Publish"/></em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddPublish(this DockerRunSettings toolSettings, params string[] publish)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishInternal.AddRange(publish);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.Publish"/></em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddPublish(this DockerRunSettings toolSettings, IEnumerable<string> publish)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishInternal.AddRange(publish);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.Publish"/></em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearPublish(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.Publish"/></em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemovePublish(this DockerRunSettings toolSettings, params string[] publish)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(publish);
            toolSettings.PublishInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.Publish"/></em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemovePublish(this DockerRunSettings toolSettings, IEnumerable<string> publish)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(publish);
            toolSettings.PublishInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region PublishAll
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.PublishAll"/></em></p>
        ///   <p>Publish all exposed ports to random ports.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetPublishAll(this DockerRunSettings toolSettings, bool? publishAll)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishAll = publishAll;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.PublishAll"/></em></p>
        ///   <p>Publish all exposed ports to random ports.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetPublishAll(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishAll = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerRunSettings.PublishAll"/></em></p>
        ///   <p>Publish all exposed ports to random ports.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings EnablePublishAll(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishAll = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerRunSettings.PublishAll"/></em></p>
        ///   <p>Publish all exposed ports to random ports.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings DisablePublishAll(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishAll = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerRunSettings.PublishAll"/></em></p>
        ///   <p>Publish all exposed ports to random ports.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings TogglePublishAll(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishAll = !toolSettings.PublishAll;
            return toolSettings;
        }
        #endregion
        #region ReadOnly
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetReadOnly(this DockerRunSettings toolSettings, bool? readOnly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = readOnly;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetReadOnly(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerRunSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings EnableReadOnly(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerRunSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings DisableReadOnly(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerRunSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ToggleReadOnly(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = !toolSettings.ReadOnly;
            return toolSettings;
        }
        #endregion
        #region Restart
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Restart"/></em></p>
        ///   <p>Restart policy to apply when a container exits.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetRestart(this DockerRunSettings toolSettings, string restart)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Restart = restart;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Restart"/></em></p>
        ///   <p>Restart policy to apply when a container exits.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetRestart(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Restart = null;
            return toolSettings;
        }
        #endregion
        #region Rm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Rm"/></em></p>
        ///   <p>Automatically remove the container when it exits.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetRm(this DockerRunSettings toolSettings, bool? rm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = rm;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Rm"/></em></p>
        ///   <p>Automatically remove the container when it exits.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetRm(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerRunSettings.Rm"/></em></p>
        ///   <p>Automatically remove the container when it exits.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings EnableRm(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerRunSettings.Rm"/></em></p>
        ///   <p>Automatically remove the container when it exits.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings DisableRm(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerRunSettings.Rm"/></em></p>
        ///   <p>Automatically remove the container when it exits.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ToggleRm(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = !toolSettings.Rm;
            return toolSettings;
        }
        #endregion
        #region Runtime
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Runtime"/></em></p>
        ///   <p>Runtime to use for this container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetRuntime(this DockerRunSettings toolSettings, string runtime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Runtime = runtime;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Runtime"/></em></p>
        ///   <p>Runtime to use for this container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetRuntime(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Runtime = null;
            return toolSettings;
        }
        #endregion
        #region SecurityOpt
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.SecurityOpt"/> to a new list</em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetSecurityOpt(this DockerRunSettings toolSettings, params string[] securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal = securityOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.SecurityOpt"/> to a new list</em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetSecurityOpt(this DockerRunSettings toolSettings, IEnumerable<string> securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal = securityOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.SecurityOpt"/></em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddSecurityOpt(this DockerRunSettings toolSettings, params string[] securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal.AddRange(securityOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.SecurityOpt"/></em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddSecurityOpt(this DockerRunSettings toolSettings, IEnumerable<string> securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal.AddRange(securityOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.SecurityOpt"/></em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearSecurityOpt(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.SecurityOpt"/></em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveSecurityOpt(this DockerRunSettings toolSettings, params string[] securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(securityOpt);
            toolSettings.SecurityOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.SecurityOpt"/></em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveSecurityOpt(this DockerRunSettings toolSettings, IEnumerable<string> securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(securityOpt);
            toolSettings.SecurityOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ShmSize
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.ShmSize"/></em></p>
        ///   <p>Size of /dev/shm.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetShmSize(this DockerRunSettings toolSettings, long? shmSize)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShmSize = shmSize;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.ShmSize"/></em></p>
        ///   <p>Size of /dev/shm.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetShmSize(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShmSize = null;
            return toolSettings;
        }
        #endregion
        #region SigProxy
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.SigProxy"/></em></p>
        ///   <p>Proxy received signals to the process.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetSigProxy(this DockerRunSettings toolSettings, bool? sigProxy)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SigProxy = sigProxy;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.SigProxy"/></em></p>
        ///   <p>Proxy received signals to the process.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetSigProxy(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SigProxy = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerRunSettings.SigProxy"/></em></p>
        ///   <p>Proxy received signals to the process.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings EnableSigProxy(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SigProxy = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerRunSettings.SigProxy"/></em></p>
        ///   <p>Proxy received signals to the process.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings DisableSigProxy(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SigProxy = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerRunSettings.SigProxy"/></em></p>
        ///   <p>Proxy received signals to the process.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ToggleSigProxy(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SigProxy = !toolSettings.SigProxy;
            return toolSettings;
        }
        #endregion
        #region StopSignal
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.StopSignal"/></em></p>
        ///   <p>Signal to stop a container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetStopSignal(this DockerRunSettings toolSettings, string stopSignal)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StopSignal = stopSignal;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.StopSignal"/></em></p>
        ///   <p>Signal to stop a container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetStopSignal(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StopSignal = null;
            return toolSettings;
        }
        #endregion
        #region StopTimeout
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.StopTimeout"/></em></p>
        ///   <p>Timeout (in seconds) to stop a container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetStopTimeout(this DockerRunSettings toolSettings, int? stopTimeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StopTimeout = stopTimeout;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.StopTimeout"/></em></p>
        ///   <p>Timeout (in seconds) to stop a container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetStopTimeout(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StopTimeout = null;
            return toolSettings;
        }
        #endregion
        #region StorageOpt
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.StorageOpt"/> to a new list</em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetStorageOpt(this DockerRunSettings toolSettings, params string[] storageOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageOptInternal = storageOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.StorageOpt"/> to a new list</em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetStorageOpt(this DockerRunSettings toolSettings, IEnumerable<string> storageOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageOptInternal = storageOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.StorageOpt"/></em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddStorageOpt(this DockerRunSettings toolSettings, params string[] storageOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageOptInternal.AddRange(storageOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.StorageOpt"/></em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddStorageOpt(this DockerRunSettings toolSettings, IEnumerable<string> storageOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageOptInternal.AddRange(storageOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.StorageOpt"/></em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearStorageOpt(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageOptInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.StorageOpt"/></em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveStorageOpt(this DockerRunSettings toolSettings, params string[] storageOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(storageOpt);
            toolSettings.StorageOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.StorageOpt"/></em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveStorageOpt(this DockerRunSettings toolSettings, IEnumerable<string> storageOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(storageOpt);
            toolSettings.StorageOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Sysctl
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Sysctl"/> to a new dictionary</em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetSysctl(this DockerRunSettings toolSettings, IDictionary<string, string> sysctl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlInternal = sysctl.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.Sysctl"/></em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearSysctl(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds a new key-value-pair <see cref="DockerRunSettings.Sysctl"/></em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddSysctl(this DockerRunSettings toolSettings, string sysctlKey, string sysctlValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlInternal.Add(sysctlKey, sysctlValue);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes a key-value-pair from <see cref="DockerRunSettings.Sysctl"/></em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveSysctl(this DockerRunSettings toolSettings, string sysctlKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlInternal.Remove(sysctlKey);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets a key-value-pair in <see cref="DockerRunSettings.Sysctl"/></em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetSysctl(this DockerRunSettings toolSettings, string sysctlKey, string sysctlValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlInternal[sysctlKey] = sysctlValue;
            return toolSettings;
        }
        #endregion
        #region Tmpfs
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Tmpfs"/> to a new list</em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetTmpfs(this DockerRunSettings toolSettings, params string[] tmpfs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TmpfsInternal = tmpfs.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Tmpfs"/> to a new list</em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetTmpfs(this DockerRunSettings toolSettings, IEnumerable<string> tmpfs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TmpfsInternal = tmpfs.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.Tmpfs"/></em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddTmpfs(this DockerRunSettings toolSettings, params string[] tmpfs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TmpfsInternal.AddRange(tmpfs);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.Tmpfs"/></em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddTmpfs(this DockerRunSettings toolSettings, IEnumerable<string> tmpfs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TmpfsInternal.AddRange(tmpfs);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.Tmpfs"/></em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearTmpfs(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TmpfsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.Tmpfs"/></em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveTmpfs(this DockerRunSettings toolSettings, params string[] tmpfs)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(tmpfs);
            toolSettings.TmpfsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.Tmpfs"/></em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveTmpfs(this DockerRunSettings toolSettings, IEnumerable<string> tmpfs)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(tmpfs);
            toolSettings.TmpfsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Tty
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetTty(this DockerRunSettings toolSettings, bool? tty)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = tty;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetTty(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerRunSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings EnableTty(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerRunSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings DisableTty(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerRunSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ToggleTty(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = !toolSettings.Tty;
            return toolSettings;
        }
        #endregion
        #region Ulimit
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Ulimit"/></em></p>
        ///   <p>Ulimit options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetUlimit(this DockerRunSettings toolSettings, string ulimit)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ulimit = ulimit;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Ulimit"/></em></p>
        ///   <p>Ulimit options.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetUlimit(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ulimit = null;
            return toolSettings;
        }
        #endregion
        #region User
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.User"/></em></p>
        ///   <p>Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetUser(this DockerRunSettings toolSettings, string user)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.User = user;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.User"/></em></p>
        ///   <p>Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetUser(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.User = null;
            return toolSettings;
        }
        #endregion
        #region Userns
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Userns"/></em></p>
        ///   <p>User namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetUserns(this DockerRunSettings toolSettings, string userns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Userns = userns;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Userns"/></em></p>
        ///   <p>User namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetUserns(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Userns = null;
            return toolSettings;
        }
        #endregion
        #region Uts
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Uts"/></em></p>
        ///   <p>UTS namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetUts(this DockerRunSettings toolSettings, string uts)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Uts = uts;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Uts"/></em></p>
        ///   <p>UTS namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetUts(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Uts = null;
            return toolSettings;
        }
        #endregion
        #region Volume
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Volume"/> to a new list</em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetVolume(this DockerRunSettings toolSettings, params string[] volume)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeInternal = volume.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Volume"/> to a new list</em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetVolume(this DockerRunSettings toolSettings, IEnumerable<string> volume)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeInternal = volume.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.Volume"/></em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddVolume(this DockerRunSettings toolSettings, params string[] volume)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeInternal.AddRange(volume);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.Volume"/></em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddVolume(this DockerRunSettings toolSettings, IEnumerable<string> volume)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeInternal.AddRange(volume);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.Volume"/></em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearVolume(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.Volume"/></em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveVolume(this DockerRunSettings toolSettings, params string[] volume)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(volume);
            toolSettings.VolumeInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.Volume"/></em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveVolume(this DockerRunSettings toolSettings, IEnumerable<string> volume)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(volume);
            toolSettings.VolumeInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region VolumeDriver
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.VolumeDriver"/></em></p>
        ///   <p>Optional volume driver for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetVolumeDriver(this DockerRunSettings toolSettings, string volumeDriver)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeDriver = volumeDriver;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.VolumeDriver"/></em></p>
        ///   <p>Optional volume driver for the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetVolumeDriver(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeDriver = null;
            return toolSettings;
        }
        #endregion
        #region VolumesFrom
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.VolumesFrom"/> to a new list</em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetVolumesFrom(this DockerRunSettings toolSettings, params string[] volumesFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesFromInternal = volumesFrom.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.VolumesFrom"/> to a new list</em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetVolumesFrom(this DockerRunSettings toolSettings, IEnumerable<string> volumesFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesFromInternal = volumesFrom.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.VolumesFrom"/></em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddVolumesFrom(this DockerRunSettings toolSettings, params string[] volumesFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesFromInternal.AddRange(volumesFrom);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.VolumesFrom"/></em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddVolumesFrom(this DockerRunSettings toolSettings, IEnumerable<string> volumesFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesFromInternal.AddRange(volumesFrom);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.VolumesFrom"/></em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearVolumesFrom(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesFromInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.VolumesFrom"/></em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveVolumesFrom(this DockerRunSettings toolSettings, params string[] volumesFrom)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(volumesFrom);
            toolSettings.VolumesFromInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.VolumesFrom"/></em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveVolumesFrom(this DockerRunSettings toolSettings, IEnumerable<string> volumesFrom)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(volumesFrom);
            toolSettings.VolumesFromInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Workdir
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Workdir"/></em></p>
        ///   <p>Working directory inside the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetWorkdir(this DockerRunSettings toolSettings, string workdir)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Workdir = workdir;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Workdir"/></em></p>
        ///   <p>Working directory inside the container.</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetWorkdir(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Workdir = null;
            return toolSettings;
        }
        #endregion
        #region Image
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Image"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetImage(this DockerRunSettings toolSettings, string image)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = image;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Image"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetImage(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = null;
            return toolSettings;
        }
        #endregion
        #region Command
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Command"/></em></p>
        ///   <p>[COMMAND]</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetCommand(this DockerRunSettings toolSettings, string command)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Command = command;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRunSettings.Command"/></em></p>
        ///   <p>[COMMAND]</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ResetCommand(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Command = null;
            return toolSettings;
        }
        #endregion
        #region Args
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Args"/> to a new list</em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetArgs(this DockerRunSettings toolSettings, params string[] args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal = args.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRunSettings.Args"/> to a new list</em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings SetArgs(this DockerRunSettings toolSettings, IEnumerable<string> args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal = args.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddArgs(this DockerRunSettings toolSettings, params string[] args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal.AddRange(args);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRunSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings AddArgs(this DockerRunSettings toolSettings, IEnumerable<string> args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal.AddRange(args);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRunSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings ClearArgs(this DockerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveArgs(this DockerRunSettings toolSettings, params string[] args)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(args);
            toolSettings.ArgsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRunSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerRunSettings RemoveArgs(this DockerRunSettings toolSettings, IEnumerable<string> args)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(args);
            toolSettings.ArgsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerCreateSettingsExtensions
    {
        #region AddHost
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.AddHost"/> to a new list</em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetAddHost(this DockerCreateSettings toolSettings, params string[] addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal = addHost.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.AddHost"/> to a new list</em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetAddHost(this DockerCreateSettings toolSettings, IEnumerable<string> addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal = addHost.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddAddHost(this DockerCreateSettings toolSettings, params string[] addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal.AddRange(addHost);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddAddHost(this DockerCreateSettings toolSettings, IEnumerable<string> addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal.AddRange(addHost);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearAddHost(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveAddHost(this DockerCreateSettings toolSettings, params string[] addHost)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(addHost);
            toolSettings.AddHostInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveAddHost(this DockerCreateSettings toolSettings, IEnumerable<string> addHost)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(addHost);
            toolSettings.AddHostInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Attach
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Attach"/> to a new list</em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetAttach(this DockerCreateSettings toolSettings, params string[] attach)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AttachInternal = attach.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Attach"/> to a new list</em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetAttach(this DockerCreateSettings toolSettings, IEnumerable<string> attach)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AttachInternal = attach.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.Attach"/></em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddAttach(this DockerCreateSettings toolSettings, params string[] attach)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AttachInternal.AddRange(attach);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.Attach"/></em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddAttach(this DockerCreateSettings toolSettings, IEnumerable<string> attach)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AttachInternal.AddRange(attach);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.Attach"/></em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearAttach(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AttachInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.Attach"/></em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveAttach(this DockerCreateSettings toolSettings, params string[] attach)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(attach);
            toolSettings.AttachInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.Attach"/></em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveAttach(this DockerCreateSettings toolSettings, IEnumerable<string> attach)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(attach);
            toolSettings.AttachInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region BlkioWeight
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.BlkioWeight"/></em></p>
        ///   <p>Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetBlkioWeight(this DockerCreateSettings toolSettings, int? blkioWeight)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeight = blkioWeight;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.BlkioWeight"/></em></p>
        ///   <p>Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetBlkioWeight(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeight = null;
            return toolSettings;
        }
        #endregion
        #region BlkioWeightDevice
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.BlkioWeightDevice"/> to a new list</em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetBlkioWeightDevice(this DockerCreateSettings toolSettings, params string[] blkioWeightDevice)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeightDeviceInternal = blkioWeightDevice.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.BlkioWeightDevice"/> to a new list</em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetBlkioWeightDevice(this DockerCreateSettings toolSettings, IEnumerable<string> blkioWeightDevice)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeightDeviceInternal = blkioWeightDevice.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.BlkioWeightDevice"/></em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddBlkioWeightDevice(this DockerCreateSettings toolSettings, params string[] blkioWeightDevice)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeightDeviceInternal.AddRange(blkioWeightDevice);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.BlkioWeightDevice"/></em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddBlkioWeightDevice(this DockerCreateSettings toolSettings, IEnumerable<string> blkioWeightDevice)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeightDeviceInternal.AddRange(blkioWeightDevice);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.BlkioWeightDevice"/></em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearBlkioWeightDevice(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeightDeviceInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.BlkioWeightDevice"/></em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveBlkioWeightDevice(this DockerCreateSettings toolSettings, params string[] blkioWeightDevice)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(blkioWeightDevice);
            toolSettings.BlkioWeightDeviceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.BlkioWeightDevice"/></em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveBlkioWeightDevice(this DockerCreateSettings toolSettings, IEnumerable<string> blkioWeightDevice)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(blkioWeightDevice);
            toolSettings.BlkioWeightDeviceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region CapAdd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.CapAdd"/> to a new list</em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetCapAdd(this DockerCreateSettings toolSettings, params string[] capAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapAddInternal = capAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.CapAdd"/> to a new list</em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetCapAdd(this DockerCreateSettings toolSettings, IEnumerable<string> capAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapAddInternal = capAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.CapAdd"/></em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddCapAdd(this DockerCreateSettings toolSettings, params string[] capAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapAddInternal.AddRange(capAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.CapAdd"/></em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddCapAdd(this DockerCreateSettings toolSettings, IEnumerable<string> capAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapAddInternal.AddRange(capAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.CapAdd"/></em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearCapAdd(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapAddInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.CapAdd"/></em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveCapAdd(this DockerCreateSettings toolSettings, params string[] capAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(capAdd);
            toolSettings.CapAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.CapAdd"/></em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveCapAdd(this DockerCreateSettings toolSettings, IEnumerable<string> capAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(capAdd);
            toolSettings.CapAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region CapDrop
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.CapDrop"/> to a new list</em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetCapDrop(this DockerCreateSettings toolSettings, params string[] capDrop)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapDropInternal = capDrop.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.CapDrop"/> to a new list</em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetCapDrop(this DockerCreateSettings toolSettings, IEnumerable<string> capDrop)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapDropInternal = capDrop.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.CapDrop"/></em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddCapDrop(this DockerCreateSettings toolSettings, params string[] capDrop)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapDropInternal.AddRange(capDrop);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.CapDrop"/></em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddCapDrop(this DockerCreateSettings toolSettings, IEnumerable<string> capDrop)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapDropInternal.AddRange(capDrop);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.CapDrop"/></em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearCapDrop(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapDropInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.CapDrop"/></em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveCapDrop(this DockerCreateSettings toolSettings, params string[] capDrop)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(capDrop);
            toolSettings.CapDropInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.CapDrop"/></em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveCapDrop(this DockerCreateSettings toolSettings, IEnumerable<string> capDrop)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(capDrop);
            toolSettings.CapDropInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region CgroupParent
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.CgroupParent"/></em></p>
        ///   <p>Optional parent cgroup for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetCgroupParent(this DockerCreateSettings toolSettings, string cgroupParent)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CgroupParent = cgroupParent;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.CgroupParent"/></em></p>
        ///   <p>Optional parent cgroup for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetCgroupParent(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CgroupParent = null;
            return toolSettings;
        }
        #endregion
        #region Cidfile
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Cidfile"/></em></p>
        ///   <p>Write the container ID to the file.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetCidfile(this DockerCreateSettings toolSettings, string cidfile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cidfile = cidfile;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Cidfile"/></em></p>
        ///   <p>Write the container ID to the file.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetCidfile(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cidfile = null;
            return toolSettings;
        }
        #endregion
        #region CpuCount
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.CpuCount"/></em></p>
        ///   <p>CPU count (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetCpuCount(this DockerCreateSettings toolSettings, long? cpuCount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuCount = cpuCount;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.CpuCount"/></em></p>
        ///   <p>CPU count (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetCpuCount(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuCount = null;
            return toolSettings;
        }
        #endregion
        #region CpuPercent
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.CpuPercent"/></em></p>
        ///   <p>CPU percent (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetCpuPercent(this DockerCreateSettings toolSettings, long? cpuPercent)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuPercent = cpuPercent;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.CpuPercent"/></em></p>
        ///   <p>CPU percent (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetCpuPercent(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuPercent = null;
            return toolSettings;
        }
        #endregion
        #region CpuPeriod
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.CpuPeriod"/></em></p>
        ///   <p>Limit CPU CFS (Completely Fair Scheduler) period.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetCpuPeriod(this DockerCreateSettings toolSettings, long? cpuPeriod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuPeriod = cpuPeriod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.CpuPeriod"/></em></p>
        ///   <p>Limit CPU CFS (Completely Fair Scheduler) period.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetCpuPeriod(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuPeriod = null;
            return toolSettings;
        }
        #endregion
        #region CpuQuota
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.CpuQuota"/></em></p>
        ///   <p>Limit CPU CFS (Completely Fair Scheduler) quota.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetCpuQuota(this DockerCreateSettings toolSettings, long? cpuQuota)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuQuota = cpuQuota;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.CpuQuota"/></em></p>
        ///   <p>Limit CPU CFS (Completely Fair Scheduler) quota.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetCpuQuota(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuQuota = null;
            return toolSettings;
        }
        #endregion
        #region CpuRtPeriod
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.CpuRtPeriod"/></em></p>
        ///   <p>Limit CPU real-time period in microseconds.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetCpuRtPeriod(this DockerCreateSettings toolSettings, long? cpuRtPeriod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuRtPeriod = cpuRtPeriod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.CpuRtPeriod"/></em></p>
        ///   <p>Limit CPU real-time period in microseconds.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetCpuRtPeriod(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuRtPeriod = null;
            return toolSettings;
        }
        #endregion
        #region CpuRtRuntime
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.CpuRtRuntime"/></em></p>
        ///   <p>Limit CPU real-time runtime in microseconds.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetCpuRtRuntime(this DockerCreateSettings toolSettings, long? cpuRtRuntime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuRtRuntime = cpuRtRuntime;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.CpuRtRuntime"/></em></p>
        ///   <p>Limit CPU real-time runtime in microseconds.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetCpuRtRuntime(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuRtRuntime = null;
            return toolSettings;
        }
        #endregion
        #region CpuShares
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.CpuShares"/></em></p>
        ///   <p>CPU shares (relative weight).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetCpuShares(this DockerCreateSettings toolSettings, long? cpuShares)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuShares = cpuShares;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.CpuShares"/></em></p>
        ///   <p>CPU shares (relative weight).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetCpuShares(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuShares = null;
            return toolSettings;
        }
        #endregion
        #region Cpus
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Cpus"/></em></p>
        ///   <p>Number of CPUs.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetCpus(this DockerCreateSettings toolSettings, decimal? cpus)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cpus = cpus;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Cpus"/></em></p>
        ///   <p>Number of CPUs.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetCpus(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cpus = null;
            return toolSettings;
        }
        #endregion
        #region CpusetCpus
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.CpusetCpus"/></em></p>
        ///   <p>CPUs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetCpusetCpus(this DockerCreateSettings toolSettings, string cpusetCpus)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetCpus = cpusetCpus;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.CpusetCpus"/></em></p>
        ///   <p>CPUs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetCpusetCpus(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetCpus = null;
            return toolSettings;
        }
        #endregion
        #region CpusetMems
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.CpusetMems"/></em></p>
        ///   <p>MEMs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetCpusetMems(this DockerCreateSettings toolSettings, string cpusetMems)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetMems = cpusetMems;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.CpusetMems"/></em></p>
        ///   <p>MEMs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetCpusetMems(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetMems = null;
            return toolSettings;
        }
        #endregion
        #region Device
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Device"/> to a new list</em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetDevice(this DockerCreateSettings toolSettings, params string[] device)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceInternal = device.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Device"/> to a new list</em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetDevice(this DockerCreateSettings toolSettings, IEnumerable<string> device)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceInternal = device.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.Device"/></em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddDevice(this DockerCreateSettings toolSettings, params string[] device)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceInternal.AddRange(device);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.Device"/></em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddDevice(this DockerCreateSettings toolSettings, IEnumerable<string> device)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceInternal.AddRange(device);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.Device"/></em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearDevice(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.Device"/></em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveDevice(this DockerCreateSettings toolSettings, params string[] device)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(device);
            toolSettings.DeviceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.Device"/></em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveDevice(this DockerCreateSettings toolSettings, IEnumerable<string> device)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(device);
            toolSettings.DeviceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DeviceCgroupRule
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.DeviceCgroupRule"/> to a new list</em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetDeviceCgroupRule(this DockerCreateSettings toolSettings, params string[] deviceCgroupRule)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceCgroupRuleInternal = deviceCgroupRule.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.DeviceCgroupRule"/> to a new list</em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetDeviceCgroupRule(this DockerCreateSettings toolSettings, IEnumerable<string> deviceCgroupRule)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceCgroupRuleInternal = deviceCgroupRule.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.DeviceCgroupRule"/></em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddDeviceCgroupRule(this DockerCreateSettings toolSettings, params string[] deviceCgroupRule)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceCgroupRuleInternal.AddRange(deviceCgroupRule);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.DeviceCgroupRule"/></em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddDeviceCgroupRule(this DockerCreateSettings toolSettings, IEnumerable<string> deviceCgroupRule)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceCgroupRuleInternal.AddRange(deviceCgroupRule);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.DeviceCgroupRule"/></em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearDeviceCgroupRule(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceCgroupRuleInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.DeviceCgroupRule"/></em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveDeviceCgroupRule(this DockerCreateSettings toolSettings, params string[] deviceCgroupRule)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceCgroupRule);
            toolSettings.DeviceCgroupRuleInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.DeviceCgroupRule"/></em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveDeviceCgroupRule(this DockerCreateSettings toolSettings, IEnumerable<string> deviceCgroupRule)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceCgroupRule);
            toolSettings.DeviceCgroupRuleInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DeviceReadBps
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.DeviceReadBps"/> to a new list</em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetDeviceReadBps(this DockerCreateSettings toolSettings, params string[] deviceReadBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadBpsInternal = deviceReadBps.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.DeviceReadBps"/> to a new list</em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetDeviceReadBps(this DockerCreateSettings toolSettings, IEnumerable<string> deviceReadBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadBpsInternal = deviceReadBps.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.DeviceReadBps"/></em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddDeviceReadBps(this DockerCreateSettings toolSettings, params string[] deviceReadBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadBpsInternal.AddRange(deviceReadBps);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.DeviceReadBps"/></em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddDeviceReadBps(this DockerCreateSettings toolSettings, IEnumerable<string> deviceReadBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadBpsInternal.AddRange(deviceReadBps);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.DeviceReadBps"/></em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearDeviceReadBps(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadBpsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.DeviceReadBps"/></em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveDeviceReadBps(this DockerCreateSettings toolSettings, params string[] deviceReadBps)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceReadBps);
            toolSettings.DeviceReadBpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.DeviceReadBps"/></em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveDeviceReadBps(this DockerCreateSettings toolSettings, IEnumerable<string> deviceReadBps)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceReadBps);
            toolSettings.DeviceReadBpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DeviceReadIops
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.DeviceReadIops"/> to a new list</em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetDeviceReadIops(this DockerCreateSettings toolSettings, params string[] deviceReadIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadIopsInternal = deviceReadIops.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.DeviceReadIops"/> to a new list</em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetDeviceReadIops(this DockerCreateSettings toolSettings, IEnumerable<string> deviceReadIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadIopsInternal = deviceReadIops.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.DeviceReadIops"/></em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddDeviceReadIops(this DockerCreateSettings toolSettings, params string[] deviceReadIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadIopsInternal.AddRange(deviceReadIops);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.DeviceReadIops"/></em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddDeviceReadIops(this DockerCreateSettings toolSettings, IEnumerable<string> deviceReadIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadIopsInternal.AddRange(deviceReadIops);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.DeviceReadIops"/></em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearDeviceReadIops(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadIopsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.DeviceReadIops"/></em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveDeviceReadIops(this DockerCreateSettings toolSettings, params string[] deviceReadIops)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceReadIops);
            toolSettings.DeviceReadIopsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.DeviceReadIops"/></em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveDeviceReadIops(this DockerCreateSettings toolSettings, IEnumerable<string> deviceReadIops)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceReadIops);
            toolSettings.DeviceReadIopsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DeviceWriteBps
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.DeviceWriteBps"/> to a new list</em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetDeviceWriteBps(this DockerCreateSettings toolSettings, params string[] deviceWriteBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteBpsInternal = deviceWriteBps.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.DeviceWriteBps"/> to a new list</em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetDeviceWriteBps(this DockerCreateSettings toolSettings, IEnumerable<string> deviceWriteBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteBpsInternal = deviceWriteBps.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.DeviceWriteBps"/></em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddDeviceWriteBps(this DockerCreateSettings toolSettings, params string[] deviceWriteBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteBpsInternal.AddRange(deviceWriteBps);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.DeviceWriteBps"/></em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddDeviceWriteBps(this DockerCreateSettings toolSettings, IEnumerable<string> deviceWriteBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteBpsInternal.AddRange(deviceWriteBps);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.DeviceWriteBps"/></em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearDeviceWriteBps(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteBpsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.DeviceWriteBps"/></em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveDeviceWriteBps(this DockerCreateSettings toolSettings, params string[] deviceWriteBps)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceWriteBps);
            toolSettings.DeviceWriteBpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.DeviceWriteBps"/></em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveDeviceWriteBps(this DockerCreateSettings toolSettings, IEnumerable<string> deviceWriteBps)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceWriteBps);
            toolSettings.DeviceWriteBpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DeviceWriteIops
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.DeviceWriteIops"/> to a new list</em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetDeviceWriteIops(this DockerCreateSettings toolSettings, params string[] deviceWriteIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteIopsInternal = deviceWriteIops.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.DeviceWriteIops"/> to a new list</em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetDeviceWriteIops(this DockerCreateSettings toolSettings, IEnumerable<string> deviceWriteIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteIopsInternal = deviceWriteIops.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.DeviceWriteIops"/></em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddDeviceWriteIops(this DockerCreateSettings toolSettings, params string[] deviceWriteIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteIopsInternal.AddRange(deviceWriteIops);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.DeviceWriteIops"/></em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddDeviceWriteIops(this DockerCreateSettings toolSettings, IEnumerable<string> deviceWriteIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteIopsInternal.AddRange(deviceWriteIops);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.DeviceWriteIops"/></em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearDeviceWriteIops(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteIopsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.DeviceWriteIops"/></em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveDeviceWriteIops(this DockerCreateSettings toolSettings, params string[] deviceWriteIops)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceWriteIops);
            toolSettings.DeviceWriteIopsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.DeviceWriteIops"/></em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveDeviceWriteIops(this DockerCreateSettings toolSettings, IEnumerable<string> deviceWriteIops)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceWriteIops);
            toolSettings.DeviceWriteIopsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DisableContentTrust
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetDisableContentTrust(this DockerCreateSettings toolSettings, bool? disableContentTrust)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = disableContentTrust;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetDisableContentTrust(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerCreateSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings EnableDisableContentTrust(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerCreateSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings DisableDisableContentTrust(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerCreateSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ToggleDisableContentTrust(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = !toolSettings.DisableContentTrust;
            return toolSettings;
        }
        #endregion
        #region Dns
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Dns"/> to a new list</em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetDns(this DockerCreateSettings toolSettings, params string[] dns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsInternal = dns.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Dns"/> to a new list</em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetDns(this DockerCreateSettings toolSettings, IEnumerable<string> dns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsInternal = dns.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.Dns"/></em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddDns(this DockerCreateSettings toolSettings, params string[] dns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsInternal.AddRange(dns);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.Dns"/></em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddDns(this DockerCreateSettings toolSettings, IEnumerable<string> dns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsInternal.AddRange(dns);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.Dns"/></em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearDns(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.Dns"/></em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveDns(this DockerCreateSettings toolSettings, params string[] dns)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dns);
            toolSettings.DnsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.Dns"/></em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveDns(this DockerCreateSettings toolSettings, IEnumerable<string> dns)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dns);
            toolSettings.DnsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DnsOpt
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.DnsOpt"/> to a new list</em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetDnsOpt(this DockerCreateSettings toolSettings, params string[] dnsOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptInternal = dnsOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.DnsOpt"/> to a new list</em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetDnsOpt(this DockerCreateSettings toolSettings, IEnumerable<string> dnsOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptInternal = dnsOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.DnsOpt"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddDnsOpt(this DockerCreateSettings toolSettings, params string[] dnsOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptInternal.AddRange(dnsOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.DnsOpt"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddDnsOpt(this DockerCreateSettings toolSettings, IEnumerable<string> dnsOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptInternal.AddRange(dnsOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.DnsOpt"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearDnsOpt(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.DnsOpt"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveDnsOpt(this DockerCreateSettings toolSettings, params string[] dnsOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsOpt);
            toolSettings.DnsOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.DnsOpt"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveDnsOpt(this DockerCreateSettings toolSettings, IEnumerable<string> dnsOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsOpt);
            toolSettings.DnsOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DnsOption
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.DnsOption"/> to a new list</em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetDnsOption(this DockerCreateSettings toolSettings, params string[] dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionInternal = dnsOption.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.DnsOption"/> to a new list</em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetDnsOption(this DockerCreateSettings toolSettings, IEnumerable<string> dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionInternal = dnsOption.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.DnsOption"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddDnsOption(this DockerCreateSettings toolSettings, params string[] dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionInternal.AddRange(dnsOption);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.DnsOption"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddDnsOption(this DockerCreateSettings toolSettings, IEnumerable<string> dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionInternal.AddRange(dnsOption);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.DnsOption"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearDnsOption(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.DnsOption"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveDnsOption(this DockerCreateSettings toolSettings, params string[] dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsOption);
            toolSettings.DnsOptionInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.DnsOption"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveDnsOption(this DockerCreateSettings toolSettings, IEnumerable<string> dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsOption);
            toolSettings.DnsOptionInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DnsSearch
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.DnsSearch"/> to a new list</em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetDnsSearch(this DockerCreateSettings toolSettings, params string[] dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchInternal = dnsSearch.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.DnsSearch"/> to a new list</em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetDnsSearch(this DockerCreateSettings toolSettings, IEnumerable<string> dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchInternal = dnsSearch.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.DnsSearch"/></em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddDnsSearch(this DockerCreateSettings toolSettings, params string[] dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchInternal.AddRange(dnsSearch);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.DnsSearch"/></em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddDnsSearch(this DockerCreateSettings toolSettings, IEnumerable<string> dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchInternal.AddRange(dnsSearch);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.DnsSearch"/></em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearDnsSearch(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.DnsSearch"/></em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveDnsSearch(this DockerCreateSettings toolSettings, params string[] dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsSearch);
            toolSettings.DnsSearchInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.DnsSearch"/></em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveDnsSearch(this DockerCreateSettings toolSettings, IEnumerable<string> dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsSearch);
            toolSettings.DnsSearchInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Domainname
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Domainname"/></em></p>
        ///   <p>Container NIS domain name.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetDomainname(this DockerCreateSettings toolSettings, string domainname)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Domainname = domainname;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Domainname"/></em></p>
        ///   <p>Container NIS domain name.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetDomainname(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Domainname = null;
            return toolSettings;
        }
        #endregion
        #region Entrypoint
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Entrypoint"/></em></p>
        ///   <p>Overwrite the default ENTRYPOINT of the image.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetEntrypoint(this DockerCreateSettings toolSettings, string entrypoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Entrypoint = entrypoint;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Entrypoint"/></em></p>
        ///   <p>Overwrite the default ENTRYPOINT of the image.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetEntrypoint(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Entrypoint = null;
            return toolSettings;
        }
        #endregion
        #region Env
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Env"/> to a new list</em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetEnv(this DockerCreateSettings toolSettings, params string[] env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal = env.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Env"/> to a new list</em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetEnv(this DockerCreateSettings toolSettings, IEnumerable<string> env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal = env.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddEnv(this DockerCreateSettings toolSettings, params string[] env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal.AddRange(env);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddEnv(this DockerCreateSettings toolSettings, IEnumerable<string> env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal.AddRange(env);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearEnv(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveEnv(this DockerCreateSettings toolSettings, params string[] env)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(env);
            toolSettings.EnvInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveEnv(this DockerCreateSettings toolSettings, IEnumerable<string> env)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(env);
            toolSettings.EnvInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region EnvFile
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.EnvFile"/> to a new list</em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetEnvFile(this DockerCreateSettings toolSettings, params string[] envFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvFileInternal = envFile.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.EnvFile"/> to a new list</em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetEnvFile(this DockerCreateSettings toolSettings, IEnumerable<string> envFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvFileInternal = envFile.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.EnvFile"/></em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddEnvFile(this DockerCreateSettings toolSettings, params string[] envFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvFileInternal.AddRange(envFile);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.EnvFile"/></em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddEnvFile(this DockerCreateSettings toolSettings, IEnumerable<string> envFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvFileInternal.AddRange(envFile);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.EnvFile"/></em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearEnvFile(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvFileInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.EnvFile"/></em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveEnvFile(this DockerCreateSettings toolSettings, params string[] envFile)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(envFile);
            toolSettings.EnvFileInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.EnvFile"/></em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveEnvFile(this DockerCreateSettings toolSettings, IEnumerable<string> envFile)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(envFile);
            toolSettings.EnvFileInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Expose
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Expose"/> to a new list</em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetExpose(this DockerCreateSettings toolSettings, params string[] expose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposeInternal = expose.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Expose"/> to a new list</em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetExpose(this DockerCreateSettings toolSettings, IEnumerable<string> expose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposeInternal = expose.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.Expose"/></em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddExpose(this DockerCreateSettings toolSettings, params string[] expose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposeInternal.AddRange(expose);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.Expose"/></em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddExpose(this DockerCreateSettings toolSettings, IEnumerable<string> expose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposeInternal.AddRange(expose);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.Expose"/></em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearExpose(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposeInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.Expose"/></em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveExpose(this DockerCreateSettings toolSettings, params string[] expose)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(expose);
            toolSettings.ExposeInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.Expose"/></em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveExpose(this DockerCreateSettings toolSettings, IEnumerable<string> expose)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(expose);
            toolSettings.ExposeInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Gpus
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Gpus"/></em></p>
        ///   <p>GPU devices to add to the container ('all' to pass all GPUs).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetGpus(this DockerCreateSettings toolSettings, string gpus)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Gpus = gpus;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Gpus"/></em></p>
        ///   <p>GPU devices to add to the container ('all' to pass all GPUs).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetGpus(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Gpus = null;
            return toolSettings;
        }
        #endregion
        #region GroupAdd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.GroupAdd"/> to a new list</em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetGroupAdd(this DockerCreateSettings toolSettings, params string[] groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupAddInternal = groupAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.GroupAdd"/> to a new list</em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetGroupAdd(this DockerCreateSettings toolSettings, IEnumerable<string> groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupAddInternal = groupAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.GroupAdd"/></em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddGroupAdd(this DockerCreateSettings toolSettings, params string[] groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupAddInternal.AddRange(groupAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.GroupAdd"/></em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddGroupAdd(this DockerCreateSettings toolSettings, IEnumerable<string> groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupAddInternal.AddRange(groupAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.GroupAdd"/></em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearGroupAdd(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupAddInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.GroupAdd"/></em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveGroupAdd(this DockerCreateSettings toolSettings, params string[] groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(groupAdd);
            toolSettings.GroupAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.GroupAdd"/></em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveGroupAdd(this DockerCreateSettings toolSettings, IEnumerable<string> groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(groupAdd);
            toolSettings.GroupAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region HealthCmd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.HealthCmd"/></em></p>
        ///   <p>Command to run to check health.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetHealthCmd(this DockerCreateSettings toolSettings, string healthCmd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthCmd = healthCmd;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.HealthCmd"/></em></p>
        ///   <p>Command to run to check health.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetHealthCmd(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthCmd = null;
            return toolSettings;
        }
        #endregion
        #region HealthInterval
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.HealthInterval"/></em></p>
        ///   <p>Time between running the check (ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetHealthInterval(this DockerCreateSettings toolSettings, string healthInterval)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthInterval = healthInterval;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.HealthInterval"/></em></p>
        ///   <p>Time between running the check (ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetHealthInterval(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthInterval = null;
            return toolSettings;
        }
        #endregion
        #region HealthRetries
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.HealthRetries"/></em></p>
        ///   <p>Consecutive failures needed to report unhealthy.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetHealthRetries(this DockerCreateSettings toolSettings, int? healthRetries)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthRetries = healthRetries;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.HealthRetries"/></em></p>
        ///   <p>Consecutive failures needed to report unhealthy.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetHealthRetries(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthRetries = null;
            return toolSettings;
        }
        #endregion
        #region HealthStartPeriod
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.HealthStartPeriod"/></em></p>
        ///   <p>Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetHealthStartPeriod(this DockerCreateSettings toolSettings, string healthStartPeriod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthStartPeriod = healthStartPeriod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.HealthStartPeriod"/></em></p>
        ///   <p>Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetHealthStartPeriod(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthStartPeriod = null;
            return toolSettings;
        }
        #endregion
        #region HealthTimeout
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.HealthTimeout"/></em></p>
        ///   <p>Maximum time to allow one check to run (ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetHealthTimeout(this DockerCreateSettings toolSettings, string healthTimeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthTimeout = healthTimeout;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.HealthTimeout"/></em></p>
        ///   <p>Maximum time to allow one check to run (ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetHealthTimeout(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthTimeout = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Help"/></em></p>
        ///   <p>Print usage.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetHelp(this DockerCreateSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Help"/></em></p>
        ///   <p>Print usage.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetHelp(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerCreateSettings.Help"/></em></p>
        ///   <p>Print usage.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings EnableHelp(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerCreateSettings.Help"/></em></p>
        ///   <p>Print usage.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings DisableHelp(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerCreateSettings.Help"/></em></p>
        ///   <p>Print usage.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ToggleHelp(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region Hostname
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Hostname"/></em></p>
        ///   <p>Container host name.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetHostname(this DockerCreateSettings toolSettings, string hostname)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Hostname = hostname;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Hostname"/></em></p>
        ///   <p>Container host name.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetHostname(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Hostname = null;
            return toolSettings;
        }
        #endregion
        #region Init
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Init"/></em></p>
        ///   <p>Run an init inside the container that forwards signals and reaps processes.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetInit(this DockerCreateSettings toolSettings, bool? init)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = init;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Init"/></em></p>
        ///   <p>Run an init inside the container that forwards signals and reaps processes.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetInit(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerCreateSettings.Init"/></em></p>
        ///   <p>Run an init inside the container that forwards signals and reaps processes.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings EnableInit(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerCreateSettings.Init"/></em></p>
        ///   <p>Run an init inside the container that forwards signals and reaps processes.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings DisableInit(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerCreateSettings.Init"/></em></p>
        ///   <p>Run an init inside the container that forwards signals and reaps processes.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ToggleInit(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = !toolSettings.Init;
            return toolSettings;
        }
        #endregion
        #region Interactive
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetInteractive(this DockerCreateSettings toolSettings, bool? interactive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = interactive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetInteractive(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerCreateSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings EnableInteractive(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerCreateSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings DisableInteractive(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerCreateSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ToggleInteractive(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = !toolSettings.Interactive;
            return toolSettings;
        }
        #endregion
        #region IoMaxbandwidth
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.IoMaxbandwidth"/></em></p>
        ///   <p>Maximum IO bandwidth limit for the system drive (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetIoMaxbandwidth(this DockerCreateSettings toolSettings, long? ioMaxbandwidth)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IoMaxbandwidth = ioMaxbandwidth;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.IoMaxbandwidth"/></em></p>
        ///   <p>Maximum IO bandwidth limit for the system drive (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetIoMaxbandwidth(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IoMaxbandwidth = null;
            return toolSettings;
        }
        #endregion
        #region IoMaxiops
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.IoMaxiops"/></em></p>
        ///   <p>Maximum IOps limit for the system drive (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetIoMaxiops(this DockerCreateSettings toolSettings, int? ioMaxiops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IoMaxiops = ioMaxiops;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.IoMaxiops"/></em></p>
        ///   <p>Maximum IOps limit for the system drive (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetIoMaxiops(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IoMaxiops = null;
            return toolSettings;
        }
        #endregion
        #region Ip
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Ip"/></em></p>
        ///   <p>IPv4 address (e.g., 172.30.100.104).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetIp(this DockerCreateSettings toolSettings, string ip)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip = ip;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Ip"/></em></p>
        ///   <p>IPv4 address (e.g., 172.30.100.104).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetIp(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip = null;
            return toolSettings;
        }
        #endregion
        #region Ip6
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Ip6"/></em></p>
        ///   <p>IPv6 address (e.g., 2001:db8::33).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetIp6(this DockerCreateSettings toolSettings, string ip6)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip6 = ip6;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Ip6"/></em></p>
        ///   <p>IPv6 address (e.g., 2001:db8::33).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetIp6(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip6 = null;
            return toolSettings;
        }
        #endregion
        #region Ipc
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Ipc"/></em></p>
        ///   <p>IPC mode to use.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetIpc(this DockerCreateSettings toolSettings, string ipc)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ipc = ipc;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Ipc"/></em></p>
        ///   <p>IPC mode to use.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetIpc(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ipc = null;
            return toolSettings;
        }
        #endregion
        #region Isolation
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Isolation"/></em></p>
        ///   <p>Container isolation technology.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetIsolation(this DockerCreateSettings toolSettings, string isolation)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Isolation = isolation;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Isolation"/></em></p>
        ///   <p>Container isolation technology.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetIsolation(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Isolation = null;
            return toolSettings;
        }
        #endregion
        #region KernelMemory
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.KernelMemory"/></em></p>
        ///   <p>Kernel memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetKernelMemory(this DockerCreateSettings toolSettings, long? kernelMemory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KernelMemory = kernelMemory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.KernelMemory"/></em></p>
        ///   <p>Kernel memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetKernelMemory(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KernelMemory = null;
            return toolSettings;
        }
        #endregion
        #region Label
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Label"/> to a new list</em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetLabel(this DockerCreateSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal = label.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Label"/> to a new list</em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetLabel(this DockerCreateSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal = label.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.Label"/></em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddLabel(this DockerCreateSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.AddRange(label);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.Label"/></em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddLabel(this DockerCreateSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.AddRange(label);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.Label"/></em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearLabel(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.Label"/></em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveLabel(this DockerCreateSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(label);
            toolSettings.LabelInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.Label"/></em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveLabel(this DockerCreateSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(label);
            toolSettings.LabelInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region LabelFile
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.LabelFile"/> to a new list</em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetLabelFile(this DockerCreateSettings toolSettings, params string[] labelFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelFileInternal = labelFile.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.LabelFile"/> to a new list</em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetLabelFile(this DockerCreateSettings toolSettings, IEnumerable<string> labelFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelFileInternal = labelFile.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.LabelFile"/></em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddLabelFile(this DockerCreateSettings toolSettings, params string[] labelFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelFileInternal.AddRange(labelFile);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.LabelFile"/></em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddLabelFile(this DockerCreateSettings toolSettings, IEnumerable<string> labelFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelFileInternal.AddRange(labelFile);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.LabelFile"/></em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearLabelFile(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelFileInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.LabelFile"/></em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveLabelFile(this DockerCreateSettings toolSettings, params string[] labelFile)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(labelFile);
            toolSettings.LabelFileInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.LabelFile"/></em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveLabelFile(this DockerCreateSettings toolSettings, IEnumerable<string> labelFile)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(labelFile);
            toolSettings.LabelFileInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Link
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Link"/> to a new list</em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetLink(this DockerCreateSettings toolSettings, params string[] link)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkInternal = link.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Link"/> to a new list</em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetLink(this DockerCreateSettings toolSettings, IEnumerable<string> link)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkInternal = link.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.Link"/></em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddLink(this DockerCreateSettings toolSettings, params string[] link)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkInternal.AddRange(link);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.Link"/></em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddLink(this DockerCreateSettings toolSettings, IEnumerable<string> link)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkInternal.AddRange(link);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.Link"/></em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearLink(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.Link"/></em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveLink(this DockerCreateSettings toolSettings, params string[] link)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(link);
            toolSettings.LinkInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.Link"/></em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveLink(this DockerCreateSettings toolSettings, IEnumerable<string> link)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(link);
            toolSettings.LinkInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region LinkLocalIp
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.LinkLocalIp"/> to a new list</em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetLinkLocalIp(this DockerCreateSettings toolSettings, params string[] linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkLocalIpInternal = linkLocalIp.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.LinkLocalIp"/> to a new list</em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetLinkLocalIp(this DockerCreateSettings toolSettings, IEnumerable<string> linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkLocalIpInternal = linkLocalIp.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.LinkLocalIp"/></em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddLinkLocalIp(this DockerCreateSettings toolSettings, params string[] linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkLocalIpInternal.AddRange(linkLocalIp);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.LinkLocalIp"/></em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddLinkLocalIp(this DockerCreateSettings toolSettings, IEnumerable<string> linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkLocalIpInternal.AddRange(linkLocalIp);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.LinkLocalIp"/></em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearLinkLocalIp(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkLocalIpInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.LinkLocalIp"/></em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveLinkLocalIp(this DockerCreateSettings toolSettings, params string[] linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(linkLocalIp);
            toolSettings.LinkLocalIpInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.LinkLocalIp"/></em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveLinkLocalIp(this DockerCreateSettings toolSettings, IEnumerable<string> linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(linkLocalIp);
            toolSettings.LinkLocalIpInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region LogDriver
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.LogDriver"/></em></p>
        ///   <p>Logging driver for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetLogDriver(this DockerCreateSettings toolSettings, string logDriver)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogDriver = logDriver;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.LogDriver"/></em></p>
        ///   <p>Logging driver for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetLogDriver(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogDriver = null;
            return toolSettings;
        }
        #endregion
        #region LogOpt
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.LogOpt"/> to a new list</em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetLogOpt(this DockerCreateSettings toolSettings, params string[] logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal = logOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.LogOpt"/> to a new list</em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetLogOpt(this DockerCreateSettings toolSettings, IEnumerable<string> logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal = logOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.LogOpt"/></em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddLogOpt(this DockerCreateSettings toolSettings, params string[] logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal.AddRange(logOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.LogOpt"/></em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddLogOpt(this DockerCreateSettings toolSettings, IEnumerable<string> logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal.AddRange(logOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.LogOpt"/></em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearLogOpt(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.LogOpt"/></em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveLogOpt(this DockerCreateSettings toolSettings, params string[] logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(logOpt);
            toolSettings.LogOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.LogOpt"/></em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveLogOpt(this DockerCreateSettings toolSettings, IEnumerable<string> logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(logOpt);
            toolSettings.LogOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region MacAddress
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.MacAddress"/></em></p>
        ///   <p>Container MAC address (e.g., 92:d0:c6:0a:29:33).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetMacAddress(this DockerCreateSettings toolSettings, string macAddress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MacAddress = macAddress;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.MacAddress"/></em></p>
        ///   <p>Container MAC address (e.g., 92:d0:c6:0a:29:33).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetMacAddress(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MacAddress = null;
            return toolSettings;
        }
        #endregion
        #region Memory
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Memory"/></em></p>
        ///   <p>Memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetMemory(this DockerCreateSettings toolSettings, long? memory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Memory = memory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Memory"/></em></p>
        ///   <p>Memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetMemory(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Memory = null;
            return toolSettings;
        }
        #endregion
        #region MemoryReservation
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.MemoryReservation"/></em></p>
        ///   <p>Memory soft limit.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetMemoryReservation(this DockerCreateSettings toolSettings, long? memoryReservation)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemoryReservation = memoryReservation;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.MemoryReservation"/></em></p>
        ///   <p>Memory soft limit.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetMemoryReservation(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemoryReservation = null;
            return toolSettings;
        }
        #endregion
        #region MemorySwap
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.MemorySwap"/></em></p>
        ///   <p>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetMemorySwap(this DockerCreateSettings toolSettings, long? memorySwap)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemorySwap = memorySwap;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.MemorySwap"/></em></p>
        ///   <p>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetMemorySwap(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemorySwap = null;
            return toolSettings;
        }
        #endregion
        #region MemorySwappiness
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.MemorySwappiness"/></em></p>
        ///   <p>Tune container memory swappiness (0 to 100).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetMemorySwappiness(this DockerCreateSettings toolSettings, long? memorySwappiness)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemorySwappiness = memorySwappiness;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.MemorySwappiness"/></em></p>
        ///   <p>Tune container memory swappiness (0 to 100).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetMemorySwappiness(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemorySwappiness = null;
            return toolSettings;
        }
        #endregion
        #region Mount
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Mount"/></em></p>
        ///   <p>Attach a filesystem mount to the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetMount(this DockerCreateSettings toolSettings, string mount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Mount = mount;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Mount"/></em></p>
        ///   <p>Attach a filesystem mount to the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetMount(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Mount = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Name"/></em></p>
        ///   <p>Assign a name to the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetName(this DockerCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Name"/></em></p>
        ///   <p>Assign a name to the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetName(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Net
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Net"/></em></p>
        ///   <p>Connect a container to a network.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetNet(this DockerCreateSettings toolSettings, string net)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Net = net;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Net"/></em></p>
        ///   <p>Connect a container to a network.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetNet(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Net = null;
            return toolSettings;
        }
        #endregion
        #region NetAlias
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.NetAlias"/> to a new list</em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetNetAlias(this DockerCreateSettings toolSettings, params string[] netAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetAliasInternal = netAlias.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.NetAlias"/> to a new list</em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetNetAlias(this DockerCreateSettings toolSettings, IEnumerable<string> netAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetAliasInternal = netAlias.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.NetAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddNetAlias(this DockerCreateSettings toolSettings, params string[] netAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetAliasInternal.AddRange(netAlias);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.NetAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddNetAlias(this DockerCreateSettings toolSettings, IEnumerable<string> netAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetAliasInternal.AddRange(netAlias);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.NetAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearNetAlias(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetAliasInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.NetAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveNetAlias(this DockerCreateSettings toolSettings, params string[] netAlias)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(netAlias);
            toolSettings.NetAliasInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.NetAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveNetAlias(this DockerCreateSettings toolSettings, IEnumerable<string> netAlias)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(netAlias);
            toolSettings.NetAliasInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Network
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Network"/></em></p>
        ///   <p>Connect a container to a network.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetNetwork(this DockerCreateSettings toolSettings, string network)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Network = network;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Network"/></em></p>
        ///   <p>Connect a container to a network.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetNetwork(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Network = null;
            return toolSettings;
        }
        #endregion
        #region NetworkAlias
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.NetworkAlias"/> to a new list</em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetNetworkAlias(this DockerCreateSettings toolSettings, params string[] networkAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkAliasInternal = networkAlias.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.NetworkAlias"/> to a new list</em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetNetworkAlias(this DockerCreateSettings toolSettings, IEnumerable<string> networkAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkAliasInternal = networkAlias.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.NetworkAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddNetworkAlias(this DockerCreateSettings toolSettings, params string[] networkAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkAliasInternal.AddRange(networkAlias);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.NetworkAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddNetworkAlias(this DockerCreateSettings toolSettings, IEnumerable<string> networkAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkAliasInternal.AddRange(networkAlias);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.NetworkAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearNetworkAlias(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkAliasInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.NetworkAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveNetworkAlias(this DockerCreateSettings toolSettings, params string[] networkAlias)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(networkAlias);
            toolSettings.NetworkAliasInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.NetworkAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveNetworkAlias(this DockerCreateSettings toolSettings, IEnumerable<string> networkAlias)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(networkAlias);
            toolSettings.NetworkAliasInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region NoHealthcheck
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetNoHealthcheck(this DockerCreateSettings toolSettings, bool? noHealthcheck)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = noHealthcheck;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetNoHealthcheck(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerCreateSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings EnableNoHealthcheck(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerCreateSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings DisableNoHealthcheck(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerCreateSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ToggleNoHealthcheck(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = !toolSettings.NoHealthcheck;
            return toolSettings;
        }
        #endregion
        #region OomKillDisable
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.OomKillDisable"/></em></p>
        ///   <p>Disable OOM Killer.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetOomKillDisable(this DockerCreateSettings toolSettings, bool? oomKillDisable)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomKillDisable = oomKillDisable;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.OomKillDisable"/></em></p>
        ///   <p>Disable OOM Killer.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetOomKillDisable(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomKillDisable = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerCreateSettings.OomKillDisable"/></em></p>
        ///   <p>Disable OOM Killer.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings EnableOomKillDisable(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomKillDisable = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerCreateSettings.OomKillDisable"/></em></p>
        ///   <p>Disable OOM Killer.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings DisableOomKillDisable(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomKillDisable = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerCreateSettings.OomKillDisable"/></em></p>
        ///   <p>Disable OOM Killer.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ToggleOomKillDisable(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomKillDisable = !toolSettings.OomKillDisable;
            return toolSettings;
        }
        #endregion
        #region OomScoreAdj
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.OomScoreAdj"/></em></p>
        ///   <p>Tune host's OOM preferences (-1000 to 1000).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetOomScoreAdj(this DockerCreateSettings toolSettings, int? oomScoreAdj)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomScoreAdj = oomScoreAdj;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.OomScoreAdj"/></em></p>
        ///   <p>Tune host's OOM preferences (-1000 to 1000).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetOomScoreAdj(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomScoreAdj = null;
            return toolSettings;
        }
        #endregion
        #region Pid
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Pid"/></em></p>
        ///   <p>PID namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetPid(this DockerCreateSettings toolSettings, string pid)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pid = pid;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Pid"/></em></p>
        ///   <p>PID namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetPid(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pid = null;
            return toolSettings;
        }
        #endregion
        #region PidsLimit
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.PidsLimit"/></em></p>
        ///   <p>Tune container pids limit (set -1 for unlimited).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetPidsLimit(this DockerCreateSettings toolSettings, long? pidsLimit)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PidsLimit = pidsLimit;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.PidsLimit"/></em></p>
        ///   <p>Tune container pids limit (set -1 for unlimited).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetPidsLimit(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PidsLimit = null;
            return toolSettings;
        }
        #endregion
        #region Platform
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Platform"/></em></p>
        ///   <p>Set platform if server is multi-platform capable.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetPlatform(this DockerCreateSettings toolSettings, string platform)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = platform;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Platform"/></em></p>
        ///   <p>Set platform if server is multi-platform capable.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetPlatform(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = null;
            return toolSettings;
        }
        #endregion
        #region Privileged
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to this container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetPrivileged(this DockerCreateSettings toolSettings, bool? privileged)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = privileged;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to this container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetPrivileged(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerCreateSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to this container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings EnablePrivileged(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerCreateSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to this container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings DisablePrivileged(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerCreateSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to this container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings TogglePrivileged(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = !toolSettings.Privileged;
            return toolSettings;
        }
        #endregion
        #region Publish
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Publish"/> to a new list</em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetPublish(this DockerCreateSettings toolSettings, params string[] publish)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishInternal = publish.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Publish"/> to a new list</em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetPublish(this DockerCreateSettings toolSettings, IEnumerable<string> publish)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishInternal = publish.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.Publish"/></em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddPublish(this DockerCreateSettings toolSettings, params string[] publish)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishInternal.AddRange(publish);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.Publish"/></em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddPublish(this DockerCreateSettings toolSettings, IEnumerable<string> publish)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishInternal.AddRange(publish);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.Publish"/></em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearPublish(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.Publish"/></em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemovePublish(this DockerCreateSettings toolSettings, params string[] publish)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(publish);
            toolSettings.PublishInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.Publish"/></em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemovePublish(this DockerCreateSettings toolSettings, IEnumerable<string> publish)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(publish);
            toolSettings.PublishInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region PublishAll
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.PublishAll"/></em></p>
        ///   <p>Publish all exposed ports to random ports.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetPublishAll(this DockerCreateSettings toolSettings, bool? publishAll)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishAll = publishAll;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.PublishAll"/></em></p>
        ///   <p>Publish all exposed ports to random ports.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetPublishAll(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishAll = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerCreateSettings.PublishAll"/></em></p>
        ///   <p>Publish all exposed ports to random ports.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings EnablePublishAll(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishAll = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerCreateSettings.PublishAll"/></em></p>
        ///   <p>Publish all exposed ports to random ports.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings DisablePublishAll(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishAll = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerCreateSettings.PublishAll"/></em></p>
        ///   <p>Publish all exposed ports to random ports.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings TogglePublishAll(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishAll = !toolSettings.PublishAll;
            return toolSettings;
        }
        #endregion
        #region ReadOnly
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetReadOnly(this DockerCreateSettings toolSettings, bool? readOnly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = readOnly;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetReadOnly(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerCreateSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings EnableReadOnly(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerCreateSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings DisableReadOnly(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerCreateSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ToggleReadOnly(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = !toolSettings.ReadOnly;
            return toolSettings;
        }
        #endregion
        #region Restart
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Restart"/></em></p>
        ///   <p>Restart policy to apply when a container exits.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetRestart(this DockerCreateSettings toolSettings, string restart)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Restart = restart;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Restart"/></em></p>
        ///   <p>Restart policy to apply when a container exits.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetRestart(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Restart = null;
            return toolSettings;
        }
        #endregion
        #region Rm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Rm"/></em></p>
        ///   <p>Automatically remove the container when it exits.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetRm(this DockerCreateSettings toolSettings, bool? rm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = rm;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Rm"/></em></p>
        ///   <p>Automatically remove the container when it exits.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetRm(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerCreateSettings.Rm"/></em></p>
        ///   <p>Automatically remove the container when it exits.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings EnableRm(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerCreateSettings.Rm"/></em></p>
        ///   <p>Automatically remove the container when it exits.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings DisableRm(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerCreateSettings.Rm"/></em></p>
        ///   <p>Automatically remove the container when it exits.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ToggleRm(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = !toolSettings.Rm;
            return toolSettings;
        }
        #endregion
        #region Runtime
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Runtime"/></em></p>
        ///   <p>Runtime to use for this container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetRuntime(this DockerCreateSettings toolSettings, string runtime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Runtime = runtime;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Runtime"/></em></p>
        ///   <p>Runtime to use for this container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetRuntime(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Runtime = null;
            return toolSettings;
        }
        #endregion
        #region SecurityOpt
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.SecurityOpt"/> to a new list</em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetSecurityOpt(this DockerCreateSettings toolSettings, params string[] securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal = securityOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.SecurityOpt"/> to a new list</em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetSecurityOpt(this DockerCreateSettings toolSettings, IEnumerable<string> securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal = securityOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.SecurityOpt"/></em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddSecurityOpt(this DockerCreateSettings toolSettings, params string[] securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal.AddRange(securityOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.SecurityOpt"/></em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddSecurityOpt(this DockerCreateSettings toolSettings, IEnumerable<string> securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal.AddRange(securityOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.SecurityOpt"/></em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearSecurityOpt(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.SecurityOpt"/></em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveSecurityOpt(this DockerCreateSettings toolSettings, params string[] securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(securityOpt);
            toolSettings.SecurityOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.SecurityOpt"/></em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveSecurityOpt(this DockerCreateSettings toolSettings, IEnumerable<string> securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(securityOpt);
            toolSettings.SecurityOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ShmSize
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.ShmSize"/></em></p>
        ///   <p>Size of /dev/shm.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetShmSize(this DockerCreateSettings toolSettings, long? shmSize)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShmSize = shmSize;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.ShmSize"/></em></p>
        ///   <p>Size of /dev/shm.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetShmSize(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShmSize = null;
            return toolSettings;
        }
        #endregion
        #region StopSignal
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.StopSignal"/></em></p>
        ///   <p>Signal to stop a container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetStopSignal(this DockerCreateSettings toolSettings, string stopSignal)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StopSignal = stopSignal;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.StopSignal"/></em></p>
        ///   <p>Signal to stop a container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetStopSignal(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StopSignal = null;
            return toolSettings;
        }
        #endregion
        #region StopTimeout
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.StopTimeout"/></em></p>
        ///   <p>Timeout (in seconds) to stop a container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetStopTimeout(this DockerCreateSettings toolSettings, int? stopTimeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StopTimeout = stopTimeout;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.StopTimeout"/></em></p>
        ///   <p>Timeout (in seconds) to stop a container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetStopTimeout(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StopTimeout = null;
            return toolSettings;
        }
        #endregion
        #region StorageOpt
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.StorageOpt"/> to a new list</em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetStorageOpt(this DockerCreateSettings toolSettings, params string[] storageOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageOptInternal = storageOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.StorageOpt"/> to a new list</em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetStorageOpt(this DockerCreateSettings toolSettings, IEnumerable<string> storageOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageOptInternal = storageOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.StorageOpt"/></em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddStorageOpt(this DockerCreateSettings toolSettings, params string[] storageOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageOptInternal.AddRange(storageOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.StorageOpt"/></em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddStorageOpt(this DockerCreateSettings toolSettings, IEnumerable<string> storageOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageOptInternal.AddRange(storageOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.StorageOpt"/></em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearStorageOpt(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageOptInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.StorageOpt"/></em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveStorageOpt(this DockerCreateSettings toolSettings, params string[] storageOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(storageOpt);
            toolSettings.StorageOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.StorageOpt"/></em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveStorageOpt(this DockerCreateSettings toolSettings, IEnumerable<string> storageOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(storageOpt);
            toolSettings.StorageOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Sysctl
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Sysctl"/> to a new dictionary</em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetSysctl(this DockerCreateSettings toolSettings, IDictionary<string, string> sysctl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlInternal = sysctl.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.Sysctl"/></em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearSysctl(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds a new key-value-pair <see cref="DockerCreateSettings.Sysctl"/></em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddSysctl(this DockerCreateSettings toolSettings, string sysctlKey, string sysctlValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlInternal.Add(sysctlKey, sysctlValue);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes a key-value-pair from <see cref="DockerCreateSettings.Sysctl"/></em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveSysctl(this DockerCreateSettings toolSettings, string sysctlKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlInternal.Remove(sysctlKey);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets a key-value-pair in <see cref="DockerCreateSettings.Sysctl"/></em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetSysctl(this DockerCreateSettings toolSettings, string sysctlKey, string sysctlValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlInternal[sysctlKey] = sysctlValue;
            return toolSettings;
        }
        #endregion
        #region Tmpfs
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Tmpfs"/> to a new list</em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetTmpfs(this DockerCreateSettings toolSettings, params string[] tmpfs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TmpfsInternal = tmpfs.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Tmpfs"/> to a new list</em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetTmpfs(this DockerCreateSettings toolSettings, IEnumerable<string> tmpfs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TmpfsInternal = tmpfs.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.Tmpfs"/></em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddTmpfs(this DockerCreateSettings toolSettings, params string[] tmpfs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TmpfsInternal.AddRange(tmpfs);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.Tmpfs"/></em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddTmpfs(this DockerCreateSettings toolSettings, IEnumerable<string> tmpfs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TmpfsInternal.AddRange(tmpfs);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.Tmpfs"/></em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearTmpfs(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TmpfsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.Tmpfs"/></em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveTmpfs(this DockerCreateSettings toolSettings, params string[] tmpfs)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(tmpfs);
            toolSettings.TmpfsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.Tmpfs"/></em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveTmpfs(this DockerCreateSettings toolSettings, IEnumerable<string> tmpfs)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(tmpfs);
            toolSettings.TmpfsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Tty
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetTty(this DockerCreateSettings toolSettings, bool? tty)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = tty;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetTty(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerCreateSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings EnableTty(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerCreateSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings DisableTty(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerCreateSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ToggleTty(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = !toolSettings.Tty;
            return toolSettings;
        }
        #endregion
        #region Ulimit
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Ulimit"/></em></p>
        ///   <p>Ulimit options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetUlimit(this DockerCreateSettings toolSettings, string ulimit)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ulimit = ulimit;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Ulimit"/></em></p>
        ///   <p>Ulimit options.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetUlimit(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ulimit = null;
            return toolSettings;
        }
        #endregion
        #region User
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.User"/></em></p>
        ///   <p>Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetUser(this DockerCreateSettings toolSettings, string user)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.User = user;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.User"/></em></p>
        ///   <p>Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetUser(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.User = null;
            return toolSettings;
        }
        #endregion
        #region Userns
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Userns"/></em></p>
        ///   <p>User namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetUserns(this DockerCreateSettings toolSettings, string userns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Userns = userns;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Userns"/></em></p>
        ///   <p>User namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetUserns(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Userns = null;
            return toolSettings;
        }
        #endregion
        #region Uts
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Uts"/></em></p>
        ///   <p>UTS namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetUts(this DockerCreateSettings toolSettings, string uts)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Uts = uts;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Uts"/></em></p>
        ///   <p>UTS namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetUts(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Uts = null;
            return toolSettings;
        }
        #endregion
        #region Volume
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Volume"/> to a new list</em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetVolume(this DockerCreateSettings toolSettings, params string[] volume)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeInternal = volume.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Volume"/> to a new list</em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetVolume(this DockerCreateSettings toolSettings, IEnumerable<string> volume)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeInternal = volume.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.Volume"/></em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddVolume(this DockerCreateSettings toolSettings, params string[] volume)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeInternal.AddRange(volume);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.Volume"/></em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddVolume(this DockerCreateSettings toolSettings, IEnumerable<string> volume)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeInternal.AddRange(volume);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.Volume"/></em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearVolume(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.Volume"/></em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveVolume(this DockerCreateSettings toolSettings, params string[] volume)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(volume);
            toolSettings.VolumeInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.Volume"/></em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveVolume(this DockerCreateSettings toolSettings, IEnumerable<string> volume)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(volume);
            toolSettings.VolumeInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region VolumeDriver
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.VolumeDriver"/></em></p>
        ///   <p>Optional volume driver for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetVolumeDriver(this DockerCreateSettings toolSettings, string volumeDriver)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeDriver = volumeDriver;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.VolumeDriver"/></em></p>
        ///   <p>Optional volume driver for the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetVolumeDriver(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeDriver = null;
            return toolSettings;
        }
        #endregion
        #region VolumesFrom
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.VolumesFrom"/> to a new list</em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetVolumesFrom(this DockerCreateSettings toolSettings, params string[] volumesFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesFromInternal = volumesFrom.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.VolumesFrom"/> to a new list</em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetVolumesFrom(this DockerCreateSettings toolSettings, IEnumerable<string> volumesFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesFromInternal = volumesFrom.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.VolumesFrom"/></em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddVolumesFrom(this DockerCreateSettings toolSettings, params string[] volumesFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesFromInternal.AddRange(volumesFrom);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.VolumesFrom"/></em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddVolumesFrom(this DockerCreateSettings toolSettings, IEnumerable<string> volumesFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesFromInternal.AddRange(volumesFrom);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.VolumesFrom"/></em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearVolumesFrom(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesFromInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.VolumesFrom"/></em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveVolumesFrom(this DockerCreateSettings toolSettings, params string[] volumesFrom)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(volumesFrom);
            toolSettings.VolumesFromInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.VolumesFrom"/></em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveVolumesFrom(this DockerCreateSettings toolSettings, IEnumerable<string> volumesFrom)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(volumesFrom);
            toolSettings.VolumesFromInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Workdir
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Workdir"/></em></p>
        ///   <p>Working directory inside the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetWorkdir(this DockerCreateSettings toolSettings, string workdir)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Workdir = workdir;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Workdir"/></em></p>
        ///   <p>Working directory inside the container.</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetWorkdir(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Workdir = null;
            return toolSettings;
        }
        #endregion
        #region Image
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Image"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetImage(this DockerCreateSettings toolSettings, string image)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = image;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Image"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetImage(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = null;
            return toolSettings;
        }
        #endregion
        #region Command
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Command"/></em></p>
        ///   <p>[COMMAND]</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetCommand(this DockerCreateSettings toolSettings, string command)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Command = command;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCreateSettings.Command"/></em></p>
        ///   <p>[COMMAND]</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ResetCommand(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Command = null;
            return toolSettings;
        }
        #endregion
        #region Args
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Args"/> to a new list</em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetArgs(this DockerCreateSettings toolSettings, params string[] args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal = args.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCreateSettings.Args"/> to a new list</em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings SetArgs(this DockerCreateSettings toolSettings, IEnumerable<string> args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal = args.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddArgs(this DockerCreateSettings toolSettings, params string[] args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal.AddRange(args);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerCreateSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings AddArgs(this DockerCreateSettings toolSettings, IEnumerable<string> args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal.AddRange(args);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerCreateSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings ClearArgs(this DockerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveArgs(this DockerCreateSettings toolSettings, params string[] args)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(args);
            toolSettings.ArgsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerCreateSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerCreateSettings RemoveArgs(this DockerCreateSettings toolSettings, IEnumerable<string> args)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(args);
            toolSettings.ArgsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerServiceUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerServiceUpdateSettingsExtensions
    {
        #region Args
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.Args"/></em></p>
        ///   <p>Service command args.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetArgs(this DockerServiceUpdateSettings toolSettings, string args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Args = args;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.Args"/></em></p>
        ///   <p>Service command args.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetArgs(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Args = null;
            return toolSettings;
        }
        #endregion
        #region ConfigAdd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.ConfigAdd"/></em></p>
        ///   <p>Add or update a config file on a service.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetConfigAdd(this DockerServiceUpdateSettings toolSettings, string configAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigAdd = configAdd;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.ConfigAdd"/></em></p>
        ///   <p>Add or update a config file on a service.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetConfigAdd(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigAdd = null;
            return toolSettings;
        }
        #endregion
        #region ConfigRm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.ConfigRm"/> to a new list</em></p>
        ///   <p>Remove a configuration file.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetConfigRm(this DockerServiceUpdateSettings toolSettings, params string[] configRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigRmInternal = configRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.ConfigRm"/> to a new list</em></p>
        ///   <p>Remove a configuration file.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetConfigRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> configRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigRmInternal = configRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.ConfigRm"/></em></p>
        ///   <p>Remove a configuration file.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddConfigRm(this DockerServiceUpdateSettings toolSettings, params string[] configRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigRmInternal.AddRange(configRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.ConfigRm"/></em></p>
        ///   <p>Remove a configuration file.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddConfigRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> configRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigRmInternal.AddRange(configRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.ConfigRm"/></em></p>
        ///   <p>Remove a configuration file.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearConfigRm(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigRmInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.ConfigRm"/></em></p>
        ///   <p>Remove a configuration file.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveConfigRm(this DockerServiceUpdateSettings toolSettings, params string[] configRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(configRm);
            toolSettings.ConfigRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.ConfigRm"/></em></p>
        ///   <p>Remove a configuration file.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveConfigRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> configRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(configRm);
            toolSettings.ConfigRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ConstraintAdd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.ConstraintAdd"/> to a new list</em></p>
        ///   <p>Add or update a placement constraint.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetConstraintAdd(this DockerServiceUpdateSettings toolSettings, params string[] constraintAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConstraintAddInternal = constraintAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.ConstraintAdd"/> to a new list</em></p>
        ///   <p>Add or update a placement constraint.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetConstraintAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> constraintAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConstraintAddInternal = constraintAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.ConstraintAdd"/></em></p>
        ///   <p>Add or update a placement constraint.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddConstraintAdd(this DockerServiceUpdateSettings toolSettings, params string[] constraintAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConstraintAddInternal.AddRange(constraintAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.ConstraintAdd"/></em></p>
        ///   <p>Add or update a placement constraint.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddConstraintAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> constraintAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConstraintAddInternal.AddRange(constraintAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.ConstraintAdd"/></em></p>
        ///   <p>Add or update a placement constraint.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearConstraintAdd(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConstraintAddInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.ConstraintAdd"/></em></p>
        ///   <p>Add or update a placement constraint.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveConstraintAdd(this DockerServiceUpdateSettings toolSettings, params string[] constraintAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(constraintAdd);
            toolSettings.ConstraintAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.ConstraintAdd"/></em></p>
        ///   <p>Add or update a placement constraint.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveConstraintAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> constraintAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(constraintAdd);
            toolSettings.ConstraintAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ConstraintRm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.ConstraintRm"/> to a new list</em></p>
        ///   <p>Remove a constraint.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetConstraintRm(this DockerServiceUpdateSettings toolSettings, params string[] constraintRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConstraintRmInternal = constraintRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.ConstraintRm"/> to a new list</em></p>
        ///   <p>Remove a constraint.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetConstraintRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> constraintRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConstraintRmInternal = constraintRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.ConstraintRm"/></em></p>
        ///   <p>Remove a constraint.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddConstraintRm(this DockerServiceUpdateSettings toolSettings, params string[] constraintRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConstraintRmInternal.AddRange(constraintRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.ConstraintRm"/></em></p>
        ///   <p>Remove a constraint.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddConstraintRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> constraintRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConstraintRmInternal.AddRange(constraintRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.ConstraintRm"/></em></p>
        ///   <p>Remove a constraint.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearConstraintRm(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConstraintRmInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.ConstraintRm"/></em></p>
        ///   <p>Remove a constraint.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveConstraintRm(this DockerServiceUpdateSettings toolSettings, params string[] constraintRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(constraintRm);
            toolSettings.ConstraintRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.ConstraintRm"/></em></p>
        ///   <p>Remove a constraint.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveConstraintRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> constraintRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(constraintRm);
            toolSettings.ConstraintRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ContainerLabelAdd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.ContainerLabelAdd"/> to a new list</em></p>
        ///   <p>Add or update a container label.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetContainerLabelAdd(this DockerServiceUpdateSettings toolSettings, params string[] containerLabelAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerLabelAddInternal = containerLabelAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.ContainerLabelAdd"/> to a new list</em></p>
        ///   <p>Add or update a container label.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetContainerLabelAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> containerLabelAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerLabelAddInternal = containerLabelAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.ContainerLabelAdd"/></em></p>
        ///   <p>Add or update a container label.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddContainerLabelAdd(this DockerServiceUpdateSettings toolSettings, params string[] containerLabelAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerLabelAddInternal.AddRange(containerLabelAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.ContainerLabelAdd"/></em></p>
        ///   <p>Add or update a container label.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddContainerLabelAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> containerLabelAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerLabelAddInternal.AddRange(containerLabelAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.ContainerLabelAdd"/></em></p>
        ///   <p>Add or update a container label.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearContainerLabelAdd(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerLabelAddInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.ContainerLabelAdd"/></em></p>
        ///   <p>Add or update a container label.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveContainerLabelAdd(this DockerServiceUpdateSettings toolSettings, params string[] containerLabelAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containerLabelAdd);
            toolSettings.ContainerLabelAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.ContainerLabelAdd"/></em></p>
        ///   <p>Add or update a container label.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveContainerLabelAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> containerLabelAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containerLabelAdd);
            toolSettings.ContainerLabelAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ContainerLabelRm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.ContainerLabelRm"/> to a new list</em></p>
        ///   <p>Remove a container label by its key.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetContainerLabelRm(this DockerServiceUpdateSettings toolSettings, params string[] containerLabelRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerLabelRmInternal = containerLabelRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.ContainerLabelRm"/> to a new list</em></p>
        ///   <p>Remove a container label by its key.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetContainerLabelRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> containerLabelRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerLabelRmInternal = containerLabelRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.ContainerLabelRm"/></em></p>
        ///   <p>Remove a container label by its key.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddContainerLabelRm(this DockerServiceUpdateSettings toolSettings, params string[] containerLabelRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerLabelRmInternal.AddRange(containerLabelRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.ContainerLabelRm"/></em></p>
        ///   <p>Remove a container label by its key.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddContainerLabelRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> containerLabelRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerLabelRmInternal.AddRange(containerLabelRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.ContainerLabelRm"/></em></p>
        ///   <p>Remove a container label by its key.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearContainerLabelRm(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainerLabelRmInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.ContainerLabelRm"/></em></p>
        ///   <p>Remove a container label by its key.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveContainerLabelRm(this DockerServiceUpdateSettings toolSettings, params string[] containerLabelRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containerLabelRm);
            toolSettings.ContainerLabelRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.ContainerLabelRm"/></em></p>
        ///   <p>Remove a container label by its key.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveContainerLabelRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> containerLabelRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containerLabelRm);
            toolSettings.ContainerLabelRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region CredentialSpec
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.CredentialSpec"/></em></p>
        ///   <p>Credential spec for managed service account (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetCredentialSpec(this DockerServiceUpdateSettings toolSettings, string credentialSpec)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CredentialSpec = credentialSpec;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.CredentialSpec"/></em></p>
        ///   <p>Credential spec for managed service account (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetCredentialSpec(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CredentialSpec = null;
            return toolSettings;
        }
        #endregion
        #region Detach
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.Detach"/></em></p>
        ///   <p>Exit immediately instead of waiting for the service to converge.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetDetach(this DockerServiceUpdateSettings toolSettings, bool? detach)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = detach;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.Detach"/></em></p>
        ///   <p>Exit immediately instead of waiting for the service to converge.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetDetach(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceUpdateSettings.Detach"/></em></p>
        ///   <p>Exit immediately instead of waiting for the service to converge.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings EnableDetach(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceUpdateSettings.Detach"/></em></p>
        ///   <p>Exit immediately instead of waiting for the service to converge.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings DisableDetach(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceUpdateSettings.Detach"/></em></p>
        ///   <p>Exit immediately instead of waiting for the service to converge.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ToggleDetach(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = !toolSettings.Detach;
            return toolSettings;
        }
        #endregion
        #region DnsAdd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.DnsAdd"/> to a new list</em></p>
        ///   <p>Add or update a custom DNS server.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetDnsAdd(this DockerServiceUpdateSettings toolSettings, params string[] dnsAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsAddInternal = dnsAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.DnsAdd"/> to a new list</em></p>
        ///   <p>Add or update a custom DNS server.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetDnsAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> dnsAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsAddInternal = dnsAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.DnsAdd"/></em></p>
        ///   <p>Add or update a custom DNS server.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddDnsAdd(this DockerServiceUpdateSettings toolSettings, params string[] dnsAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsAddInternal.AddRange(dnsAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.DnsAdd"/></em></p>
        ///   <p>Add or update a custom DNS server.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddDnsAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> dnsAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsAddInternal.AddRange(dnsAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.DnsAdd"/></em></p>
        ///   <p>Add or update a custom DNS server.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearDnsAdd(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsAddInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.DnsAdd"/></em></p>
        ///   <p>Add or update a custom DNS server.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveDnsAdd(this DockerServiceUpdateSettings toolSettings, params string[] dnsAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsAdd);
            toolSettings.DnsAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.DnsAdd"/></em></p>
        ///   <p>Add or update a custom DNS server.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveDnsAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> dnsAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsAdd);
            toolSettings.DnsAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DnsOptionAdd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.DnsOptionAdd"/> to a new list</em></p>
        ///   <p>Add or update a DNS option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetDnsOptionAdd(this DockerServiceUpdateSettings toolSettings, params string[] dnsOptionAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionAddInternal = dnsOptionAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.DnsOptionAdd"/> to a new list</em></p>
        ///   <p>Add or update a DNS option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetDnsOptionAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> dnsOptionAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionAddInternal = dnsOptionAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.DnsOptionAdd"/></em></p>
        ///   <p>Add or update a DNS option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddDnsOptionAdd(this DockerServiceUpdateSettings toolSettings, params string[] dnsOptionAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionAddInternal.AddRange(dnsOptionAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.DnsOptionAdd"/></em></p>
        ///   <p>Add or update a DNS option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddDnsOptionAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> dnsOptionAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionAddInternal.AddRange(dnsOptionAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.DnsOptionAdd"/></em></p>
        ///   <p>Add or update a DNS option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearDnsOptionAdd(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionAddInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.DnsOptionAdd"/></em></p>
        ///   <p>Add or update a DNS option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveDnsOptionAdd(this DockerServiceUpdateSettings toolSettings, params string[] dnsOptionAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsOptionAdd);
            toolSettings.DnsOptionAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.DnsOptionAdd"/></em></p>
        ///   <p>Add or update a DNS option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveDnsOptionAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> dnsOptionAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsOptionAdd);
            toolSettings.DnsOptionAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DnsOptionRm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.DnsOptionRm"/> to a new list</em></p>
        ///   <p>Remove a DNS option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetDnsOptionRm(this DockerServiceUpdateSettings toolSettings, params string[] dnsOptionRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionRmInternal = dnsOptionRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.DnsOptionRm"/> to a new list</em></p>
        ///   <p>Remove a DNS option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetDnsOptionRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> dnsOptionRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionRmInternal = dnsOptionRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.DnsOptionRm"/></em></p>
        ///   <p>Remove a DNS option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddDnsOptionRm(this DockerServiceUpdateSettings toolSettings, params string[] dnsOptionRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionRmInternal.AddRange(dnsOptionRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.DnsOptionRm"/></em></p>
        ///   <p>Remove a DNS option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddDnsOptionRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> dnsOptionRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionRmInternal.AddRange(dnsOptionRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.DnsOptionRm"/></em></p>
        ///   <p>Remove a DNS option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearDnsOptionRm(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionRmInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.DnsOptionRm"/></em></p>
        ///   <p>Remove a DNS option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveDnsOptionRm(this DockerServiceUpdateSettings toolSettings, params string[] dnsOptionRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsOptionRm);
            toolSettings.DnsOptionRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.DnsOptionRm"/></em></p>
        ///   <p>Remove a DNS option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveDnsOptionRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> dnsOptionRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsOptionRm);
            toolSettings.DnsOptionRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DnsRm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.DnsRm"/> to a new list</em></p>
        ///   <p>Remove a custom DNS server.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetDnsRm(this DockerServiceUpdateSettings toolSettings, params string[] dnsRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsRmInternal = dnsRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.DnsRm"/> to a new list</em></p>
        ///   <p>Remove a custom DNS server.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetDnsRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> dnsRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsRmInternal = dnsRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.DnsRm"/></em></p>
        ///   <p>Remove a custom DNS server.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddDnsRm(this DockerServiceUpdateSettings toolSettings, params string[] dnsRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsRmInternal.AddRange(dnsRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.DnsRm"/></em></p>
        ///   <p>Remove a custom DNS server.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddDnsRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> dnsRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsRmInternal.AddRange(dnsRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.DnsRm"/></em></p>
        ///   <p>Remove a custom DNS server.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearDnsRm(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsRmInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.DnsRm"/></em></p>
        ///   <p>Remove a custom DNS server.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveDnsRm(this DockerServiceUpdateSettings toolSettings, params string[] dnsRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsRm);
            toolSettings.DnsRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.DnsRm"/></em></p>
        ///   <p>Remove a custom DNS server.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveDnsRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> dnsRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsRm);
            toolSettings.DnsRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DnsSearchAdd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.DnsSearchAdd"/> to a new list</em></p>
        ///   <p>Add or update a custom DNS search domain.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetDnsSearchAdd(this DockerServiceUpdateSettings toolSettings, params string[] dnsSearchAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchAddInternal = dnsSearchAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.DnsSearchAdd"/> to a new list</em></p>
        ///   <p>Add or update a custom DNS search domain.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetDnsSearchAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> dnsSearchAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchAddInternal = dnsSearchAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.DnsSearchAdd"/></em></p>
        ///   <p>Add or update a custom DNS search domain.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddDnsSearchAdd(this DockerServiceUpdateSettings toolSettings, params string[] dnsSearchAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchAddInternal.AddRange(dnsSearchAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.DnsSearchAdd"/></em></p>
        ///   <p>Add or update a custom DNS search domain.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddDnsSearchAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> dnsSearchAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchAddInternal.AddRange(dnsSearchAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.DnsSearchAdd"/></em></p>
        ///   <p>Add or update a custom DNS search domain.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearDnsSearchAdd(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchAddInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.DnsSearchAdd"/></em></p>
        ///   <p>Add or update a custom DNS search domain.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveDnsSearchAdd(this DockerServiceUpdateSettings toolSettings, params string[] dnsSearchAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsSearchAdd);
            toolSettings.DnsSearchAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.DnsSearchAdd"/></em></p>
        ///   <p>Add or update a custom DNS search domain.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveDnsSearchAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> dnsSearchAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsSearchAdd);
            toolSettings.DnsSearchAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DnsSearchRm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.DnsSearchRm"/> to a new list</em></p>
        ///   <p>Remove a DNS search domain.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetDnsSearchRm(this DockerServiceUpdateSettings toolSettings, params string[] dnsSearchRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchRmInternal = dnsSearchRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.DnsSearchRm"/> to a new list</em></p>
        ///   <p>Remove a DNS search domain.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetDnsSearchRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> dnsSearchRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchRmInternal = dnsSearchRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.DnsSearchRm"/></em></p>
        ///   <p>Remove a DNS search domain.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddDnsSearchRm(this DockerServiceUpdateSettings toolSettings, params string[] dnsSearchRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchRmInternal.AddRange(dnsSearchRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.DnsSearchRm"/></em></p>
        ///   <p>Remove a DNS search domain.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddDnsSearchRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> dnsSearchRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchRmInternal.AddRange(dnsSearchRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.DnsSearchRm"/></em></p>
        ///   <p>Remove a DNS search domain.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearDnsSearchRm(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchRmInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.DnsSearchRm"/></em></p>
        ///   <p>Remove a DNS search domain.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveDnsSearchRm(this DockerServiceUpdateSettings toolSettings, params string[] dnsSearchRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsSearchRm);
            toolSettings.DnsSearchRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.DnsSearchRm"/></em></p>
        ///   <p>Remove a DNS search domain.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveDnsSearchRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> dnsSearchRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsSearchRm);
            toolSettings.DnsSearchRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region EndpointMode
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.EndpointMode"/></em></p>
        ///   <p>Endpoint mode (vip or dnsrr).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetEndpointMode(this DockerServiceUpdateSettings toolSettings, string endpointMode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndpointMode = endpointMode;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.EndpointMode"/></em></p>
        ///   <p>Endpoint mode (vip or dnsrr).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetEndpointMode(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EndpointMode = null;
            return toolSettings;
        }
        #endregion
        #region Entrypoint
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.Entrypoint"/></em></p>
        ///   <p>Overwrite the default ENTRYPOINT of the image.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetEntrypoint(this DockerServiceUpdateSettings toolSettings, string entrypoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Entrypoint = entrypoint;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.Entrypoint"/></em></p>
        ///   <p>Overwrite the default ENTRYPOINT of the image.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetEntrypoint(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Entrypoint = null;
            return toolSettings;
        }
        #endregion
        #region EnvAdd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.EnvAdd"/> to a new list</em></p>
        ///   <p>Add or update an environment variable.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetEnvAdd(this DockerServiceUpdateSettings toolSettings, params string[] envAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvAddInternal = envAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.EnvAdd"/> to a new list</em></p>
        ///   <p>Add or update an environment variable.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetEnvAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> envAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvAddInternal = envAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.EnvAdd"/></em></p>
        ///   <p>Add or update an environment variable.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddEnvAdd(this DockerServiceUpdateSettings toolSettings, params string[] envAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvAddInternal.AddRange(envAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.EnvAdd"/></em></p>
        ///   <p>Add or update an environment variable.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddEnvAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> envAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvAddInternal.AddRange(envAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.EnvAdd"/></em></p>
        ///   <p>Add or update an environment variable.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearEnvAdd(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvAddInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.EnvAdd"/></em></p>
        ///   <p>Add or update an environment variable.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveEnvAdd(this DockerServiceUpdateSettings toolSettings, params string[] envAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(envAdd);
            toolSettings.EnvAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.EnvAdd"/></em></p>
        ///   <p>Add or update an environment variable.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveEnvAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> envAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(envAdd);
            toolSettings.EnvAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region EnvRm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.EnvRm"/> to a new list</em></p>
        ///   <p>Remove an environment variable.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetEnvRm(this DockerServiceUpdateSettings toolSettings, params string[] envRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvRmInternal = envRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.EnvRm"/> to a new list</em></p>
        ///   <p>Remove an environment variable.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetEnvRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> envRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvRmInternal = envRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.EnvRm"/></em></p>
        ///   <p>Remove an environment variable.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddEnvRm(this DockerServiceUpdateSettings toolSettings, params string[] envRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvRmInternal.AddRange(envRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.EnvRm"/></em></p>
        ///   <p>Remove an environment variable.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddEnvRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> envRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvRmInternal.AddRange(envRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.EnvRm"/></em></p>
        ///   <p>Remove an environment variable.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearEnvRm(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvRmInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.EnvRm"/></em></p>
        ///   <p>Remove an environment variable.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveEnvRm(this DockerServiceUpdateSettings toolSettings, params string[] envRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(envRm);
            toolSettings.EnvRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.EnvRm"/></em></p>
        ///   <p>Remove an environment variable.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveEnvRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> envRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(envRm);
            toolSettings.EnvRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Force
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.Force"/></em></p>
        ///   <p>Force update even if no changes require it.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetForce(this DockerServiceUpdateSettings toolSettings, bool? force)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = force;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.Force"/></em></p>
        ///   <p>Force update even if no changes require it.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetForce(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceUpdateSettings.Force"/></em></p>
        ///   <p>Force update even if no changes require it.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings EnableForce(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceUpdateSettings.Force"/></em></p>
        ///   <p>Force update even if no changes require it.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings DisableForce(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceUpdateSettings.Force"/></em></p>
        ///   <p>Force update even if no changes require it.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ToggleForce(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = !toolSettings.Force;
            return toolSettings;
        }
        #endregion
        #region GenericResourceAdd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.GenericResourceAdd"/> to a new list</em></p>
        ///   <p>Add a Generic resource.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetGenericResourceAdd(this DockerServiceUpdateSettings toolSettings, params string[] genericResourceAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenericResourceAddInternal = genericResourceAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.GenericResourceAdd"/> to a new list</em></p>
        ///   <p>Add a Generic resource.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetGenericResourceAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> genericResourceAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenericResourceAddInternal = genericResourceAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.GenericResourceAdd"/></em></p>
        ///   <p>Add a Generic resource.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddGenericResourceAdd(this DockerServiceUpdateSettings toolSettings, params string[] genericResourceAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenericResourceAddInternal.AddRange(genericResourceAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.GenericResourceAdd"/></em></p>
        ///   <p>Add a Generic resource.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddGenericResourceAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> genericResourceAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenericResourceAddInternal.AddRange(genericResourceAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.GenericResourceAdd"/></em></p>
        ///   <p>Add a Generic resource.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearGenericResourceAdd(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenericResourceAddInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.GenericResourceAdd"/></em></p>
        ///   <p>Add a Generic resource.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveGenericResourceAdd(this DockerServiceUpdateSettings toolSettings, params string[] genericResourceAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(genericResourceAdd);
            toolSettings.GenericResourceAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.GenericResourceAdd"/></em></p>
        ///   <p>Add a Generic resource.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveGenericResourceAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> genericResourceAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(genericResourceAdd);
            toolSettings.GenericResourceAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region GenericResourceRm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.GenericResourceRm"/> to a new list</em></p>
        ///   <p>Remove a Generic resource.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetGenericResourceRm(this DockerServiceUpdateSettings toolSettings, params string[] genericResourceRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenericResourceRmInternal = genericResourceRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.GenericResourceRm"/> to a new list</em></p>
        ///   <p>Remove a Generic resource.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetGenericResourceRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> genericResourceRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenericResourceRmInternal = genericResourceRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.GenericResourceRm"/></em></p>
        ///   <p>Remove a Generic resource.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddGenericResourceRm(this DockerServiceUpdateSettings toolSettings, params string[] genericResourceRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenericResourceRmInternal.AddRange(genericResourceRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.GenericResourceRm"/></em></p>
        ///   <p>Remove a Generic resource.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddGenericResourceRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> genericResourceRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenericResourceRmInternal.AddRange(genericResourceRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.GenericResourceRm"/></em></p>
        ///   <p>Remove a Generic resource.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearGenericResourceRm(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GenericResourceRmInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.GenericResourceRm"/></em></p>
        ///   <p>Remove a Generic resource.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveGenericResourceRm(this DockerServiceUpdateSettings toolSettings, params string[] genericResourceRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(genericResourceRm);
            toolSettings.GenericResourceRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.GenericResourceRm"/></em></p>
        ///   <p>Remove a Generic resource.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveGenericResourceRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> genericResourceRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(genericResourceRm);
            toolSettings.GenericResourceRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region GroupAdd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.GroupAdd"/> to a new list</em></p>
        ///   <p>Add an additional supplementary user group to the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetGroupAdd(this DockerServiceUpdateSettings toolSettings, params string[] groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupAddInternal = groupAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.GroupAdd"/> to a new list</em></p>
        ///   <p>Add an additional supplementary user group to the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetGroupAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupAddInternal = groupAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.GroupAdd"/></em></p>
        ///   <p>Add an additional supplementary user group to the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddGroupAdd(this DockerServiceUpdateSettings toolSettings, params string[] groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupAddInternal.AddRange(groupAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.GroupAdd"/></em></p>
        ///   <p>Add an additional supplementary user group to the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddGroupAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupAddInternal.AddRange(groupAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.GroupAdd"/></em></p>
        ///   <p>Add an additional supplementary user group to the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearGroupAdd(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupAddInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.GroupAdd"/></em></p>
        ///   <p>Add an additional supplementary user group to the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveGroupAdd(this DockerServiceUpdateSettings toolSettings, params string[] groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(groupAdd);
            toolSettings.GroupAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.GroupAdd"/></em></p>
        ///   <p>Add an additional supplementary user group to the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveGroupAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(groupAdd);
            toolSettings.GroupAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region GroupRm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.GroupRm"/> to a new list</em></p>
        ///   <p>Remove a previously added supplementary user group from the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetGroupRm(this DockerServiceUpdateSettings toolSettings, params string[] groupRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupRmInternal = groupRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.GroupRm"/> to a new list</em></p>
        ///   <p>Remove a previously added supplementary user group from the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetGroupRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> groupRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupRmInternal = groupRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.GroupRm"/></em></p>
        ///   <p>Remove a previously added supplementary user group from the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddGroupRm(this DockerServiceUpdateSettings toolSettings, params string[] groupRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupRmInternal.AddRange(groupRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.GroupRm"/></em></p>
        ///   <p>Remove a previously added supplementary user group from the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddGroupRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> groupRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupRmInternal.AddRange(groupRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.GroupRm"/></em></p>
        ///   <p>Remove a previously added supplementary user group from the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearGroupRm(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupRmInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.GroupRm"/></em></p>
        ///   <p>Remove a previously added supplementary user group from the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveGroupRm(this DockerServiceUpdateSettings toolSettings, params string[] groupRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(groupRm);
            toolSettings.GroupRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.GroupRm"/></em></p>
        ///   <p>Remove a previously added supplementary user group from the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveGroupRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> groupRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(groupRm);
            toolSettings.GroupRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region HealthCmd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.HealthCmd"/></em></p>
        ///   <p>Command to run to check health.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetHealthCmd(this DockerServiceUpdateSettings toolSettings, string healthCmd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthCmd = healthCmd;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.HealthCmd"/></em></p>
        ///   <p>Command to run to check health.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetHealthCmd(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthCmd = null;
            return toolSettings;
        }
        #endregion
        #region HealthInterval
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.HealthInterval"/></em></p>
        ///   <p>Time between running the check (ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetHealthInterval(this DockerServiceUpdateSettings toolSettings, string healthInterval)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthInterval = healthInterval;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.HealthInterval"/></em></p>
        ///   <p>Time between running the check (ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetHealthInterval(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthInterval = null;
            return toolSettings;
        }
        #endregion
        #region HealthRetries
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.HealthRetries"/></em></p>
        ///   <p>Consecutive failures needed to report unhealthy.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetHealthRetries(this DockerServiceUpdateSettings toolSettings, int? healthRetries)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthRetries = healthRetries;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.HealthRetries"/></em></p>
        ///   <p>Consecutive failures needed to report unhealthy.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetHealthRetries(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthRetries = null;
            return toolSettings;
        }
        #endregion
        #region HealthStartPeriod
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.HealthStartPeriod"/></em></p>
        ///   <p>Start period for the container to initialize before counting retries towards unstable (ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetHealthStartPeriod(this DockerServiceUpdateSettings toolSettings, string healthStartPeriod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthStartPeriod = healthStartPeriod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.HealthStartPeriod"/></em></p>
        ///   <p>Start period for the container to initialize before counting retries towards unstable (ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetHealthStartPeriod(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthStartPeriod = null;
            return toolSettings;
        }
        #endregion
        #region HealthTimeout
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.HealthTimeout"/></em></p>
        ///   <p>Maximum time to allow one check to run (ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetHealthTimeout(this DockerServiceUpdateSettings toolSettings, string healthTimeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthTimeout = healthTimeout;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.HealthTimeout"/></em></p>
        ///   <p>Maximum time to allow one check to run (ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetHealthTimeout(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthTimeout = null;
            return toolSettings;
        }
        #endregion
        #region HostAdd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.HostAdd"/> to a new list</em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetHostAdd(this DockerServiceUpdateSettings toolSettings, params string[] hostAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HostAddInternal = hostAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.HostAdd"/> to a new list</em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetHostAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> hostAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HostAddInternal = hostAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.HostAdd"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddHostAdd(this DockerServiceUpdateSettings toolSettings, params string[] hostAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HostAddInternal.AddRange(hostAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.HostAdd"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddHostAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> hostAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HostAddInternal.AddRange(hostAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.HostAdd"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearHostAdd(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HostAddInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.HostAdd"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveHostAdd(this DockerServiceUpdateSettings toolSettings, params string[] hostAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(hostAdd);
            toolSettings.HostAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.HostAdd"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveHostAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> hostAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(hostAdd);
            toolSettings.HostAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region HostRm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.HostRm"/> to a new list</em></p>
        ///   <p>Remove a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetHostRm(this DockerServiceUpdateSettings toolSettings, params string[] hostRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HostRmInternal = hostRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.HostRm"/> to a new list</em></p>
        ///   <p>Remove a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetHostRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> hostRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HostRmInternal = hostRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.HostRm"/></em></p>
        ///   <p>Remove a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddHostRm(this DockerServiceUpdateSettings toolSettings, params string[] hostRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HostRmInternal.AddRange(hostRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.HostRm"/></em></p>
        ///   <p>Remove a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddHostRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> hostRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HostRmInternal.AddRange(hostRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.HostRm"/></em></p>
        ///   <p>Remove a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearHostRm(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HostRmInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.HostRm"/></em></p>
        ///   <p>Remove a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveHostRm(this DockerServiceUpdateSettings toolSettings, params string[] hostRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(hostRm);
            toolSettings.HostRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.HostRm"/></em></p>
        ///   <p>Remove a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveHostRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> hostRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(hostRm);
            toolSettings.HostRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Hostname
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.Hostname"/></em></p>
        ///   <p>Container hostname.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetHostname(this DockerServiceUpdateSettings toolSettings, string hostname)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Hostname = hostname;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.Hostname"/></em></p>
        ///   <p>Container hostname.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetHostname(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Hostname = null;
            return toolSettings;
        }
        #endregion
        #region Image
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.Image"/></em></p>
        ///   <p>Service image tag.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetImage(this DockerServiceUpdateSettings toolSettings, string image)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = image;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.Image"/></em></p>
        ///   <p>Service image tag.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetImage(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = null;
            return toolSettings;
        }
        #endregion
        #region Init
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.Init"/></em></p>
        ///   <p>Use an init inside each service container to forward signals and reap processes.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetInit(this DockerServiceUpdateSettings toolSettings, bool? init)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = init;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.Init"/></em></p>
        ///   <p>Use an init inside each service container to forward signals and reap processes.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetInit(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceUpdateSettings.Init"/></em></p>
        ///   <p>Use an init inside each service container to forward signals and reap processes.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings EnableInit(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceUpdateSettings.Init"/></em></p>
        ///   <p>Use an init inside each service container to forward signals and reap processes.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings DisableInit(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceUpdateSettings.Init"/></em></p>
        ///   <p>Use an init inside each service container to forward signals and reap processes.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ToggleInit(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = !toolSettings.Init;
            return toolSettings;
        }
        #endregion
        #region Isolation
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.Isolation"/></em></p>
        ///   <p>Service container isolation mode.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetIsolation(this DockerServiceUpdateSettings toolSettings, string isolation)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Isolation = isolation;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.Isolation"/></em></p>
        ///   <p>Service container isolation mode.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetIsolation(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Isolation = null;
            return toolSettings;
        }
        #endregion
        #region LabelAdd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.LabelAdd"/> to a new list</em></p>
        ///   <p>Add or update a service label.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetLabelAdd(this DockerServiceUpdateSettings toolSettings, params string[] labelAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelAddInternal = labelAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.LabelAdd"/> to a new list</em></p>
        ///   <p>Add or update a service label.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetLabelAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> labelAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelAddInternal = labelAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.LabelAdd"/></em></p>
        ///   <p>Add or update a service label.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddLabelAdd(this DockerServiceUpdateSettings toolSettings, params string[] labelAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelAddInternal.AddRange(labelAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.LabelAdd"/></em></p>
        ///   <p>Add or update a service label.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddLabelAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> labelAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelAddInternal.AddRange(labelAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.LabelAdd"/></em></p>
        ///   <p>Add or update a service label.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearLabelAdd(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelAddInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.LabelAdd"/></em></p>
        ///   <p>Add or update a service label.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveLabelAdd(this DockerServiceUpdateSettings toolSettings, params string[] labelAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(labelAdd);
            toolSettings.LabelAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.LabelAdd"/></em></p>
        ///   <p>Add or update a service label.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveLabelAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> labelAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(labelAdd);
            toolSettings.LabelAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region LabelRm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.LabelRm"/> to a new list</em></p>
        ///   <p>Remove a label by its key.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetLabelRm(this DockerServiceUpdateSettings toolSettings, params string[] labelRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelRmInternal = labelRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.LabelRm"/> to a new list</em></p>
        ///   <p>Remove a label by its key.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetLabelRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> labelRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelRmInternal = labelRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.LabelRm"/></em></p>
        ///   <p>Remove a label by its key.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddLabelRm(this DockerServiceUpdateSettings toolSettings, params string[] labelRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelRmInternal.AddRange(labelRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.LabelRm"/></em></p>
        ///   <p>Remove a label by its key.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddLabelRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> labelRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelRmInternal.AddRange(labelRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.LabelRm"/></em></p>
        ///   <p>Remove a label by its key.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearLabelRm(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelRmInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.LabelRm"/></em></p>
        ///   <p>Remove a label by its key.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveLabelRm(this DockerServiceUpdateSettings toolSettings, params string[] labelRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(labelRm);
            toolSettings.LabelRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.LabelRm"/></em></p>
        ///   <p>Remove a label by its key.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveLabelRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> labelRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(labelRm);
            toolSettings.LabelRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region LimitCpu
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.LimitCpu"/></em></p>
        ///   <p>Limit CPUs.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetLimitCpu(this DockerServiceUpdateSettings toolSettings, decimal? limitCpu)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LimitCpu = limitCpu;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.LimitCpu"/></em></p>
        ///   <p>Limit CPUs.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetLimitCpu(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LimitCpu = null;
            return toolSettings;
        }
        #endregion
        #region LimitMemory
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.LimitMemory"/></em></p>
        ///   <p>Limit Memory.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetLimitMemory(this DockerServiceUpdateSettings toolSettings, long? limitMemory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LimitMemory = limitMemory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.LimitMemory"/></em></p>
        ///   <p>Limit Memory.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetLimitMemory(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LimitMemory = null;
            return toolSettings;
        }
        #endregion
        #region LogDriver
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.LogDriver"/></em></p>
        ///   <p>Logging driver for service.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetLogDriver(this DockerServiceUpdateSettings toolSettings, string logDriver)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogDriver = logDriver;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.LogDriver"/></em></p>
        ///   <p>Logging driver for service.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetLogDriver(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogDriver = null;
            return toolSettings;
        }
        #endregion
        #region LogOpt
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.LogOpt"/> to a new list</em></p>
        ///   <p>Logging driver options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetLogOpt(this DockerServiceUpdateSettings toolSettings, params string[] logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal = logOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.LogOpt"/> to a new list</em></p>
        ///   <p>Logging driver options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetLogOpt(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal = logOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.LogOpt"/></em></p>
        ///   <p>Logging driver options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddLogOpt(this DockerServiceUpdateSettings toolSettings, params string[] logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal.AddRange(logOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.LogOpt"/></em></p>
        ///   <p>Logging driver options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddLogOpt(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal.AddRange(logOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.LogOpt"/></em></p>
        ///   <p>Logging driver options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearLogOpt(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.LogOpt"/></em></p>
        ///   <p>Logging driver options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveLogOpt(this DockerServiceUpdateSettings toolSettings, params string[] logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(logOpt);
            toolSettings.LogOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.LogOpt"/></em></p>
        ///   <p>Logging driver options.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveLogOpt(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(logOpt);
            toolSettings.LogOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region MountAdd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.MountAdd"/></em></p>
        ///   <p>Add or update a mount on a service.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetMountAdd(this DockerServiceUpdateSettings toolSettings, string mountAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MountAdd = mountAdd;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.MountAdd"/></em></p>
        ///   <p>Add or update a mount on a service.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetMountAdd(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MountAdd = null;
            return toolSettings;
        }
        #endregion
        #region MountRm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.MountRm"/> to a new list</em></p>
        ///   <p>Remove a mount by its target path.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetMountRm(this DockerServiceUpdateSettings toolSettings, params string[] mountRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MountRmInternal = mountRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.MountRm"/> to a new list</em></p>
        ///   <p>Remove a mount by its target path.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetMountRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> mountRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MountRmInternal = mountRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.MountRm"/></em></p>
        ///   <p>Remove a mount by its target path.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddMountRm(this DockerServiceUpdateSettings toolSettings, params string[] mountRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MountRmInternal.AddRange(mountRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.MountRm"/></em></p>
        ///   <p>Remove a mount by its target path.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddMountRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> mountRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MountRmInternal.AddRange(mountRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.MountRm"/></em></p>
        ///   <p>Remove a mount by its target path.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearMountRm(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MountRmInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.MountRm"/></em></p>
        ///   <p>Remove a mount by its target path.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveMountRm(this DockerServiceUpdateSettings toolSettings, params string[] mountRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(mountRm);
            toolSettings.MountRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.MountRm"/></em></p>
        ///   <p>Remove a mount by its target path.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveMountRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> mountRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(mountRm);
            toolSettings.MountRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region NetworkAdd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.NetworkAdd"/></em></p>
        ///   <p>Add a network.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetNetworkAdd(this DockerServiceUpdateSettings toolSettings, string networkAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkAdd = networkAdd;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.NetworkAdd"/></em></p>
        ///   <p>Add a network.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetNetworkAdd(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkAdd = null;
            return toolSettings;
        }
        #endregion
        #region NetworkRm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.NetworkRm"/> to a new list</em></p>
        ///   <p>Remove a network.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetNetworkRm(this DockerServiceUpdateSettings toolSettings, params string[] networkRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkRmInternal = networkRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.NetworkRm"/> to a new list</em></p>
        ///   <p>Remove a network.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetNetworkRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> networkRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkRmInternal = networkRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.NetworkRm"/></em></p>
        ///   <p>Remove a network.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddNetworkRm(this DockerServiceUpdateSettings toolSettings, params string[] networkRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkRmInternal.AddRange(networkRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.NetworkRm"/></em></p>
        ///   <p>Remove a network.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddNetworkRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> networkRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkRmInternal.AddRange(networkRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.NetworkRm"/></em></p>
        ///   <p>Remove a network.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearNetworkRm(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkRmInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.NetworkRm"/></em></p>
        ///   <p>Remove a network.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveNetworkRm(this DockerServiceUpdateSettings toolSettings, params string[] networkRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(networkRm);
            toolSettings.NetworkRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.NetworkRm"/></em></p>
        ///   <p>Remove a network.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveNetworkRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> networkRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(networkRm);
            toolSettings.NetworkRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region NoHealthcheck
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetNoHealthcheck(this DockerServiceUpdateSettings toolSettings, bool? noHealthcheck)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = noHealthcheck;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetNoHealthcheck(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceUpdateSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings EnableNoHealthcheck(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceUpdateSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings DisableNoHealthcheck(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceUpdateSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ToggleNoHealthcheck(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = !toolSettings.NoHealthcheck;
            return toolSettings;
        }
        #endregion
        #region NoResolveImage
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.NoResolveImage"/></em></p>
        ///   <p>Do not query the registry to resolve image digest and supported platforms.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetNoResolveImage(this DockerServiceUpdateSettings toolSettings, bool? noResolveImage)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolveImage = noResolveImage;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.NoResolveImage"/></em></p>
        ///   <p>Do not query the registry to resolve image digest and supported platforms.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetNoResolveImage(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolveImage = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceUpdateSettings.NoResolveImage"/></em></p>
        ///   <p>Do not query the registry to resolve image digest and supported platforms.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings EnableNoResolveImage(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolveImage = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceUpdateSettings.NoResolveImage"/></em></p>
        ///   <p>Do not query the registry to resolve image digest and supported platforms.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings DisableNoResolveImage(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolveImage = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceUpdateSettings.NoResolveImage"/></em></p>
        ///   <p>Do not query the registry to resolve image digest and supported platforms.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ToggleNoResolveImage(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolveImage = !toolSettings.NoResolveImage;
            return toolSettings;
        }
        #endregion
        #region PlacementPrefAdd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.PlacementPrefAdd"/></em></p>
        ///   <p>Add a placement preference.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetPlacementPrefAdd(this DockerServiceUpdateSettings toolSettings, string placementPrefAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PlacementPrefAdd = placementPrefAdd;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.PlacementPrefAdd"/></em></p>
        ///   <p>Add a placement preference.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetPlacementPrefAdd(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PlacementPrefAdd = null;
            return toolSettings;
        }
        #endregion
        #region PlacementPrefRm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.PlacementPrefRm"/></em></p>
        ///   <p>Remove a placement preference.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetPlacementPrefRm(this DockerServiceUpdateSettings toolSettings, string placementPrefRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PlacementPrefRm = placementPrefRm;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.PlacementPrefRm"/></em></p>
        ///   <p>Remove a placement preference.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetPlacementPrefRm(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PlacementPrefRm = null;
            return toolSettings;
        }
        #endregion
        #region PublishAdd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.PublishAdd"/></em></p>
        ///   <p>Add or update a published port.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetPublishAdd(this DockerServiceUpdateSettings toolSettings, string publishAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishAdd = publishAdd;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.PublishAdd"/></em></p>
        ///   <p>Add or update a published port.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetPublishAdd(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishAdd = null;
            return toolSettings;
        }
        #endregion
        #region PublishRm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.PublishRm"/></em></p>
        ///   <p>Remove a published port by its target port.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetPublishRm(this DockerServiceUpdateSettings toolSettings, string publishRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishRm = publishRm;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.PublishRm"/></em></p>
        ///   <p>Remove a published port by its target port.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetPublishRm(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishRm = null;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.Quiet"/></em></p>
        ///   <p>Suppress progress output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetQuiet(this DockerServiceUpdateSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.Quiet"/></em></p>
        ///   <p>Suppress progress output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetQuiet(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceUpdateSettings.Quiet"/></em></p>
        ///   <p>Suppress progress output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings EnableQuiet(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceUpdateSettings.Quiet"/></em></p>
        ///   <p>Suppress progress output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings DisableQuiet(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceUpdateSettings.Quiet"/></em></p>
        ///   <p>Suppress progress output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ToggleQuiet(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
        #region ReadOnly
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetReadOnly(this DockerServiceUpdateSettings toolSettings, bool? readOnly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = readOnly;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetReadOnly(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceUpdateSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings EnableReadOnly(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceUpdateSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings DisableReadOnly(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceUpdateSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ToggleReadOnly(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = !toolSettings.ReadOnly;
            return toolSettings;
        }
        #endregion
        #region Replicas
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.Replicas"/></em></p>
        ///   <p>Number of tasks.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetReplicas(this DockerServiceUpdateSettings toolSettings, int? replicas)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Replicas = replicas;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.Replicas"/></em></p>
        ///   <p>Number of tasks.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetReplicas(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Replicas = null;
            return toolSettings;
        }
        #endregion
        #region ReplicasMaxPerNode
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.ReplicasMaxPerNode"/></em></p>
        ///   <p>Maximum number of tasks per node (default 0 = unlimited).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetReplicasMaxPerNode(this DockerServiceUpdateSettings toolSettings, int? replicasMaxPerNode)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReplicasMaxPerNode = replicasMaxPerNode;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.ReplicasMaxPerNode"/></em></p>
        ///   <p>Maximum number of tasks per node (default 0 = unlimited).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetReplicasMaxPerNode(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReplicasMaxPerNode = null;
            return toolSettings;
        }
        #endregion
        #region ReserveCpu
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.ReserveCpu"/></em></p>
        ///   <p>Reserve CPUs.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetReserveCpu(this DockerServiceUpdateSettings toolSettings, decimal? reserveCpu)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReserveCpu = reserveCpu;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.ReserveCpu"/></em></p>
        ///   <p>Reserve CPUs.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetReserveCpu(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReserveCpu = null;
            return toolSettings;
        }
        #endregion
        #region ReserveMemory
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.ReserveMemory"/></em></p>
        ///   <p>Reserve Memory.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetReserveMemory(this DockerServiceUpdateSettings toolSettings, long? reserveMemory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReserveMemory = reserveMemory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.ReserveMemory"/></em></p>
        ///   <p>Reserve Memory.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetReserveMemory(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReserveMemory = null;
            return toolSettings;
        }
        #endregion
        #region RestartCondition
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.RestartCondition"/></em></p>
        ///   <p>Restart when condition is met ("none"|"on-failure"|"any").</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetRestartCondition(this DockerServiceUpdateSettings toolSettings, RestartCondition restartCondition)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RestartCondition = restartCondition;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.RestartCondition"/></em></p>
        ///   <p>Restart when condition is met ("none"|"on-failure"|"any").</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetRestartCondition(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RestartCondition = null;
            return toolSettings;
        }
        #endregion
        #region RestartDelay
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.RestartDelay"/></em></p>
        ///   <p>Delay between restart attempts (ns|us|ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetRestartDelay(this DockerServiceUpdateSettings toolSettings, string restartDelay)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RestartDelay = restartDelay;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.RestartDelay"/></em></p>
        ///   <p>Delay between restart attempts (ns|us|ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetRestartDelay(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RestartDelay = null;
            return toolSettings;
        }
        #endregion
        #region RestartMaxAttempts
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.RestartMaxAttempts"/></em></p>
        ///   <p>Maximum number of restarts before giving up.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetRestartMaxAttempts(this DockerServiceUpdateSettings toolSettings, int? restartMaxAttempts)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RestartMaxAttempts = restartMaxAttempts;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.RestartMaxAttempts"/></em></p>
        ///   <p>Maximum number of restarts before giving up.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetRestartMaxAttempts(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RestartMaxAttempts = null;
            return toolSettings;
        }
        #endregion
        #region RestartWindow
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.RestartWindow"/></em></p>
        ///   <p>Window used to evaluate the restart policy (ns|us|ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetRestartWindow(this DockerServiceUpdateSettings toolSettings, string restartWindow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RestartWindow = restartWindow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.RestartWindow"/></em></p>
        ///   <p>Window used to evaluate the restart policy (ns|us|ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetRestartWindow(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RestartWindow = null;
            return toolSettings;
        }
        #endregion
        #region Rollback
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.Rollback"/></em></p>
        ///   <p>Rollback to previous specification.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetRollback(this DockerServiceUpdateSettings toolSettings, bool? rollback)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rollback = rollback;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.Rollback"/></em></p>
        ///   <p>Rollback to previous specification.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetRollback(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rollback = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceUpdateSettings.Rollback"/></em></p>
        ///   <p>Rollback to previous specification.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings EnableRollback(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rollback = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceUpdateSettings.Rollback"/></em></p>
        ///   <p>Rollback to previous specification.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings DisableRollback(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rollback = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceUpdateSettings.Rollback"/></em></p>
        ///   <p>Rollback to previous specification.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ToggleRollback(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rollback = !toolSettings.Rollback;
            return toolSettings;
        }
        #endregion
        #region RollbackDelay
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.RollbackDelay"/></em></p>
        ///   <p>Delay between task rollbacks (ns|us|ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetRollbackDelay(this DockerServiceUpdateSettings toolSettings, string rollbackDelay)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RollbackDelay = rollbackDelay;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.RollbackDelay"/></em></p>
        ///   <p>Delay between task rollbacks (ns|us|ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetRollbackDelay(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RollbackDelay = null;
            return toolSettings;
        }
        #endregion
        #region RollbackFailureAction
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.RollbackFailureAction"/></em></p>
        ///   <p>Action on rollback failure ("pause"|"continue").</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetRollbackFailureAction(this DockerServiceUpdateSettings toolSettings, RollbackFailureAction rollbackFailureAction)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RollbackFailureAction = rollbackFailureAction;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.RollbackFailureAction"/></em></p>
        ///   <p>Action on rollback failure ("pause"|"continue").</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetRollbackFailureAction(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RollbackFailureAction = null;
            return toolSettings;
        }
        #endregion
        #region RollbackMaxFailureRatio
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.RollbackMaxFailureRatio"/></em></p>
        ///   <p>Failure rate to tolerate during a rollback.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetRollbackMaxFailureRatio(this DockerServiceUpdateSettings toolSettings, float? rollbackMaxFailureRatio)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RollbackMaxFailureRatio = rollbackMaxFailureRatio;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.RollbackMaxFailureRatio"/></em></p>
        ///   <p>Failure rate to tolerate during a rollback.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetRollbackMaxFailureRatio(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RollbackMaxFailureRatio = null;
            return toolSettings;
        }
        #endregion
        #region RollbackMonitor
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.RollbackMonitor"/></em></p>
        ///   <p>Duration after each task rollback to monitor for failure (ns|us|ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetRollbackMonitor(this DockerServiceUpdateSettings toolSettings, string rollbackMonitor)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RollbackMonitor = rollbackMonitor;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.RollbackMonitor"/></em></p>
        ///   <p>Duration after each task rollback to monitor for failure (ns|us|ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetRollbackMonitor(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RollbackMonitor = null;
            return toolSettings;
        }
        #endregion
        #region RollbackOrder
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.RollbackOrder"/></em></p>
        ///   <p>Rollback order ("start-first"|"stop-first").</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetRollbackOrder(this DockerServiceUpdateSettings toolSettings, RollbackOrder rollbackOrder)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RollbackOrder = rollbackOrder;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.RollbackOrder"/></em></p>
        ///   <p>Rollback order ("start-first"|"stop-first").</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetRollbackOrder(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RollbackOrder = null;
            return toolSettings;
        }
        #endregion
        #region RollbackParallelism
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.RollbackParallelism"/></em></p>
        ///   <p>Maximum number of tasks rolled back simultaneously (0 to roll back all at once).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetRollbackParallelism(this DockerServiceUpdateSettings toolSettings, int? rollbackParallelism)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RollbackParallelism = rollbackParallelism;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.RollbackParallelism"/></em></p>
        ///   <p>Maximum number of tasks rolled back simultaneously (0 to roll back all at once).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetRollbackParallelism(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RollbackParallelism = null;
            return toolSettings;
        }
        #endregion
        #region SecretAdd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.SecretAdd"/></em></p>
        ///   <p>Add or update a secret on a service.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetSecretAdd(this DockerServiceUpdateSettings toolSettings, string secretAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretAdd = secretAdd;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.SecretAdd"/></em></p>
        ///   <p>Add or update a secret on a service.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetSecretAdd(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretAdd = null;
            return toolSettings;
        }
        #endregion
        #region SecretRm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.SecretRm"/> to a new list</em></p>
        ///   <p>Remove a secret.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetSecretRm(this DockerServiceUpdateSettings toolSettings, params string[] secretRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretRmInternal = secretRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.SecretRm"/> to a new list</em></p>
        ///   <p>Remove a secret.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetSecretRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> secretRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretRmInternal = secretRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.SecretRm"/></em></p>
        ///   <p>Remove a secret.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddSecretRm(this DockerServiceUpdateSettings toolSettings, params string[] secretRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretRmInternal.AddRange(secretRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.SecretRm"/></em></p>
        ///   <p>Remove a secret.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddSecretRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> secretRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretRmInternal.AddRange(secretRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.SecretRm"/></em></p>
        ///   <p>Remove a secret.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearSecretRm(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecretRmInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.SecretRm"/></em></p>
        ///   <p>Remove a secret.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveSecretRm(this DockerServiceUpdateSettings toolSettings, params string[] secretRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(secretRm);
            toolSettings.SecretRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.SecretRm"/></em></p>
        ///   <p>Remove a secret.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveSecretRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> secretRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(secretRm);
            toolSettings.SecretRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region StopGracePeriod
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.StopGracePeriod"/></em></p>
        ///   <p>Time to wait before force killing a container (ns|us|ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetStopGracePeriod(this DockerServiceUpdateSettings toolSettings, string stopGracePeriod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StopGracePeriod = stopGracePeriod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.StopGracePeriod"/></em></p>
        ///   <p>Time to wait before force killing a container (ns|us|ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetStopGracePeriod(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StopGracePeriod = null;
            return toolSettings;
        }
        #endregion
        #region StopSignal
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.StopSignal"/></em></p>
        ///   <p>Signal to stop the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetStopSignal(this DockerServiceUpdateSettings toolSettings, string stopSignal)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StopSignal = stopSignal;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.StopSignal"/></em></p>
        ///   <p>Signal to stop the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetStopSignal(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StopSignal = null;
            return toolSettings;
        }
        #endregion
        #region SysctlAdd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.SysctlAdd"/> to a new list</em></p>
        ///   <p>Add or update a Sysctl option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetSysctlAdd(this DockerServiceUpdateSettings toolSettings, params string[] sysctlAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlAddInternal = sysctlAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.SysctlAdd"/> to a new list</em></p>
        ///   <p>Add or update a Sysctl option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetSysctlAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> sysctlAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlAddInternal = sysctlAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.SysctlAdd"/></em></p>
        ///   <p>Add or update a Sysctl option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddSysctlAdd(this DockerServiceUpdateSettings toolSettings, params string[] sysctlAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlAddInternal.AddRange(sysctlAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.SysctlAdd"/></em></p>
        ///   <p>Add or update a Sysctl option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddSysctlAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> sysctlAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlAddInternal.AddRange(sysctlAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.SysctlAdd"/></em></p>
        ///   <p>Add or update a Sysctl option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearSysctlAdd(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlAddInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.SysctlAdd"/></em></p>
        ///   <p>Add or update a Sysctl option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveSysctlAdd(this DockerServiceUpdateSettings toolSettings, params string[] sysctlAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(sysctlAdd);
            toolSettings.SysctlAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.SysctlAdd"/></em></p>
        ///   <p>Add or update a Sysctl option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveSysctlAdd(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> sysctlAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(sysctlAdd);
            toolSettings.SysctlAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region SysctlRm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.SysctlRm"/> to a new list</em></p>
        ///   <p>Remove a Sysctl option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetSysctlRm(this DockerServiceUpdateSettings toolSettings, params string[] sysctlRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlRmInternal = sysctlRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.SysctlRm"/> to a new list</em></p>
        ///   <p>Remove a Sysctl option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetSysctlRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> sysctlRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlRmInternal = sysctlRm.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.SysctlRm"/></em></p>
        ///   <p>Remove a Sysctl option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddSysctlRm(this DockerServiceUpdateSettings toolSettings, params string[] sysctlRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlRmInternal.AddRange(sysctlRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceUpdateSettings.SysctlRm"/></em></p>
        ///   <p>Remove a Sysctl option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings AddSysctlRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> sysctlRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlRmInternal.AddRange(sysctlRm);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceUpdateSettings.SysctlRm"/></em></p>
        ///   <p>Remove a Sysctl option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ClearSysctlRm(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlRmInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.SysctlRm"/></em></p>
        ///   <p>Remove a Sysctl option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveSysctlRm(this DockerServiceUpdateSettings toolSettings, params string[] sysctlRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(sysctlRm);
            toolSettings.SysctlRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceUpdateSettings.SysctlRm"/></em></p>
        ///   <p>Remove a Sysctl option.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings RemoveSysctlRm(this DockerServiceUpdateSettings toolSettings, IEnumerable<string> sysctlRm)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(sysctlRm);
            toolSettings.SysctlRmInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Tty
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetTty(this DockerServiceUpdateSettings toolSettings, bool? tty)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = tty;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetTty(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceUpdateSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings EnableTty(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceUpdateSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings DisableTty(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceUpdateSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ToggleTty(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = !toolSettings.Tty;
            return toolSettings;
        }
        #endregion
        #region UpdateDelay
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.UpdateDelay"/></em></p>
        ///   <p>Delay between updates (ns|us|ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetUpdateDelay(this DockerServiceUpdateSettings toolSettings, string updateDelay)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UpdateDelay = updateDelay;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.UpdateDelay"/></em></p>
        ///   <p>Delay between updates (ns|us|ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetUpdateDelay(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UpdateDelay = null;
            return toolSettings;
        }
        #endregion
        #region UpdateFailureAction
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.UpdateFailureAction"/></em></p>
        ///   <p>Action on update failure ("pause"|"continue"|"rollback").</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetUpdateFailureAction(this DockerServiceUpdateSettings toolSettings, UpdateFailureAction updateFailureAction)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UpdateFailureAction = updateFailureAction;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.UpdateFailureAction"/></em></p>
        ///   <p>Action on update failure ("pause"|"continue"|"rollback").</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetUpdateFailureAction(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UpdateFailureAction = null;
            return toolSettings;
        }
        #endregion
        #region UpdateMaxFailureRatio
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.UpdateMaxFailureRatio"/></em></p>
        ///   <p>Failure rate to tolerate during an update.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetUpdateMaxFailureRatio(this DockerServiceUpdateSettings toolSettings, float? updateMaxFailureRatio)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UpdateMaxFailureRatio = updateMaxFailureRatio;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.UpdateMaxFailureRatio"/></em></p>
        ///   <p>Failure rate to tolerate during an update.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetUpdateMaxFailureRatio(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UpdateMaxFailureRatio = null;
            return toolSettings;
        }
        #endregion
        #region UpdateMonitor
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.UpdateMonitor"/></em></p>
        ///   <p>Duration after each task update to monitor for failure (ns|us|ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetUpdateMonitor(this DockerServiceUpdateSettings toolSettings, string updateMonitor)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UpdateMonitor = updateMonitor;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.UpdateMonitor"/></em></p>
        ///   <p>Duration after each task update to monitor for failure (ns|us|ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetUpdateMonitor(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UpdateMonitor = null;
            return toolSettings;
        }
        #endregion
        #region UpdateOrder
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.UpdateOrder"/></em></p>
        ///   <p>Update order ("start-first"|"stop-first").</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetUpdateOrder(this DockerServiceUpdateSettings toolSettings, UpdateOrder updateOrder)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UpdateOrder = updateOrder;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.UpdateOrder"/></em></p>
        ///   <p>Update order ("start-first"|"stop-first").</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetUpdateOrder(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UpdateOrder = null;
            return toolSettings;
        }
        #endregion
        #region UpdateParallelism
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.UpdateParallelism"/></em></p>
        ///   <p>Maximum number of tasks updated simultaneously (0 to update all at once).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetUpdateParallelism(this DockerServiceUpdateSettings toolSettings, int? updateParallelism)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UpdateParallelism = updateParallelism;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.UpdateParallelism"/></em></p>
        ///   <p>Maximum number of tasks updated simultaneously (0 to update all at once).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetUpdateParallelism(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.UpdateParallelism = null;
            return toolSettings;
        }
        #endregion
        #region User
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.User"/></em></p>
        ///   <p>Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetUser(this DockerServiceUpdateSettings toolSettings, string user)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.User = user;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.User"/></em></p>
        ///   <p>Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetUser(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.User = null;
            return toolSettings;
        }
        #endregion
        #region WithRegistryAuth
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.WithRegistryAuth"/></em></p>
        ///   <p>Send registry authentication details to swarm agents.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetWithRegistryAuth(this DockerServiceUpdateSettings toolSettings, bool? withRegistryAuth)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WithRegistryAuth = withRegistryAuth;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.WithRegistryAuth"/></em></p>
        ///   <p>Send registry authentication details to swarm agents.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetWithRegistryAuth(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WithRegistryAuth = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceUpdateSettings.WithRegistryAuth"/></em></p>
        ///   <p>Send registry authentication details to swarm agents.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings EnableWithRegistryAuth(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WithRegistryAuth = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceUpdateSettings.WithRegistryAuth"/></em></p>
        ///   <p>Send registry authentication details to swarm agents.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings DisableWithRegistryAuth(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WithRegistryAuth = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceUpdateSettings.WithRegistryAuth"/></em></p>
        ///   <p>Send registry authentication details to swarm agents.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ToggleWithRegistryAuth(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WithRegistryAuth = !toolSettings.WithRegistryAuth;
            return toolSettings;
        }
        #endregion
        #region Workdir
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.Workdir"/></em></p>
        ///   <p>Working directory inside the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetWorkdir(this DockerServiceUpdateSettings toolSettings, string workdir)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Workdir = workdir;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.Workdir"/></em></p>
        ///   <p>Working directory inside the container.</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetWorkdir(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Workdir = null;
            return toolSettings;
        }
        #endregion
        #region Service
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceUpdateSettings.Service"/></em></p>
        ///   <p>SERVICE</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings SetService(this DockerServiceUpdateSettings toolSettings, string service)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Service = service;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceUpdateSettings.Service"/></em></p>
        ///   <p>SERVICE</p>
        /// </summary>
        [Pure]
        public static DockerServiceUpdateSettings ResetService(this DockerServiceUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Service = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerPortSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerPortSettingsExtensions
    {
        #region Container
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPortSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerPortSettings SetContainer(this DockerPortSettings toolSettings, string container)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = container;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPortSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerPortSettings ResetContainer(this DockerPortSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = null;
            return toolSettings;
        }
        #endregion
        #region PrivatePort
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPortSettings.PrivatePort"/></em></p>
        ///   <p>[PRIVATE_PORT[/PROTO]]</p>
        /// </summary>
        [Pure]
        public static DockerPortSettings SetPrivatePort(this DockerPortSettings toolSettings, string privatePort)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PrivatePort = privatePort;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPortSettings.PrivatePort"/></em></p>
        ///   <p>[PRIVATE_PORT[/PROTO]]</p>
        /// </summary>
        [Pure]
        public static DockerPortSettings ResetPrivatePort(this DockerPortSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PrivatePort = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContainerSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContainerSettingsExtensions
    {
    }
    #endregion
    #region DockerImagePushSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerImagePushSettingsExtensions
    {
        #region DisableContentTrust
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImagePushSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image signing.</p>
        /// </summary>
        [Pure]
        public static DockerImagePushSettings SetDisableContentTrust(this DockerImagePushSettings toolSettings, bool? disableContentTrust)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = disableContentTrust;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImagePushSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image signing.</p>
        /// </summary>
        [Pure]
        public static DockerImagePushSettings ResetDisableContentTrust(this DockerImagePushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImagePushSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image signing.</p>
        /// </summary>
        [Pure]
        public static DockerImagePushSettings EnableDisableContentTrust(this DockerImagePushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImagePushSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image signing.</p>
        /// </summary>
        [Pure]
        public static DockerImagePushSettings DisableDisableContentTrust(this DockerImagePushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImagePushSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image signing.</p>
        /// </summary>
        [Pure]
        public static DockerImagePushSettings ToggleDisableContentTrust(this DockerImagePushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = !toolSettings.DisableContentTrust;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImagePushSettings.Name"/></em></p>
        ///   <p>NAME[:TAG]</p>
        /// </summary>
        [Pure]
        public static DockerImagePushSettings SetName(this DockerImagePushSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImagePushSettings.Name"/></em></p>
        ///   <p>NAME[:TAG]</p>
        /// </summary>
        [Pure]
        public static DockerImagePushSettings ResetName(this DockerImagePushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerServiceInspectSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerServiceInspectSettingsExtensions
    {
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceInspectSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerServiceInspectSettings SetFormat(this DockerServiceInspectSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceInspectSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerServiceInspectSettings ResetFormat(this DockerServiceInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Pretty
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceInspectSettings.Pretty"/></em></p>
        ///   <p>Print the information in a human friendly format.</p>
        /// </summary>
        [Pure]
        public static DockerServiceInspectSettings SetPretty(this DockerServiceInspectSettings toolSettings, bool? pretty)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pretty = pretty;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceInspectSettings.Pretty"/></em></p>
        ///   <p>Print the information in a human friendly format.</p>
        /// </summary>
        [Pure]
        public static DockerServiceInspectSettings ResetPretty(this DockerServiceInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pretty = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceInspectSettings.Pretty"/></em></p>
        ///   <p>Print the information in a human friendly format.</p>
        /// </summary>
        [Pure]
        public static DockerServiceInspectSettings EnablePretty(this DockerServiceInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pretty = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceInspectSettings.Pretty"/></em></p>
        ///   <p>Print the information in a human friendly format.</p>
        /// </summary>
        [Pure]
        public static DockerServiceInspectSettings DisablePretty(this DockerServiceInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pretty = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceInspectSettings.Pretty"/></em></p>
        ///   <p>Print the information in a human friendly format.</p>
        /// </summary>
        [Pure]
        public static DockerServiceInspectSettings TogglePretty(this DockerServiceInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pretty = !toolSettings.Pretty;
            return toolSettings;
        }
        #endregion
        #region Services
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceInspectSettings.Services"/> to a new list</em></p>
        ///   <p>SERVICE</p>
        /// </summary>
        [Pure]
        public static DockerServiceInspectSettings SetServices(this DockerServiceInspectSettings toolSettings, params string[] services)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServicesInternal = services.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceInspectSettings.Services"/> to a new list</em></p>
        ///   <p>SERVICE</p>
        /// </summary>
        [Pure]
        public static DockerServiceInspectSettings SetServices(this DockerServiceInspectSettings toolSettings, IEnumerable<string> services)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServicesInternal = services.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceInspectSettings.Services"/></em></p>
        ///   <p>SERVICE</p>
        /// </summary>
        [Pure]
        public static DockerServiceInspectSettings AddServices(this DockerServiceInspectSettings toolSettings, params string[] services)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServicesInternal.AddRange(services);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerServiceInspectSettings.Services"/></em></p>
        ///   <p>SERVICE</p>
        /// </summary>
        [Pure]
        public static DockerServiceInspectSettings AddServices(this DockerServiceInspectSettings toolSettings, IEnumerable<string> services)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServicesInternal.AddRange(services);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerServiceInspectSettings.Services"/></em></p>
        ///   <p>SERVICE</p>
        /// </summary>
        [Pure]
        public static DockerServiceInspectSettings ClearServices(this DockerServiceInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ServicesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceInspectSettings.Services"/></em></p>
        ///   <p>SERVICE</p>
        /// </summary>
        [Pure]
        public static DockerServiceInspectSettings RemoveServices(this DockerServiceInspectSettings toolSettings, params string[] services)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(services);
            toolSettings.ServicesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerServiceInspectSettings.Services"/></em></p>
        ///   <p>SERVICE</p>
        /// </summary>
        [Pure]
        public static DockerServiceInspectSettings RemoveServices(this DockerServiceInspectSettings toolSettings, IEnumerable<string> services)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(services);
            toolSettings.ServicesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerNetworkConnectSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerNetworkConnectSettingsExtensions
    {
        #region Alias
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkConnectSettings.Alias"/> to a new list</em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings SetAlias(this DockerNetworkConnectSettings toolSettings, params string[] alias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AliasInternal = alias.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkConnectSettings.Alias"/> to a new list</em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings SetAlias(this DockerNetworkConnectSettings toolSettings, IEnumerable<string> alias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AliasInternal = alias.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNetworkConnectSettings.Alias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings AddAlias(this DockerNetworkConnectSettings toolSettings, params string[] alias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AliasInternal.AddRange(alias);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNetworkConnectSettings.Alias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings AddAlias(this DockerNetworkConnectSettings toolSettings, IEnumerable<string> alias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AliasInternal.AddRange(alias);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerNetworkConnectSettings.Alias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings ClearAlias(this DockerNetworkConnectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AliasInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNetworkConnectSettings.Alias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings RemoveAlias(this DockerNetworkConnectSettings toolSettings, params string[] alias)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(alias);
            toolSettings.AliasInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNetworkConnectSettings.Alias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings RemoveAlias(this DockerNetworkConnectSettings toolSettings, IEnumerable<string> alias)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(alias);
            toolSettings.AliasInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DriverOpt
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkConnectSettings.DriverOpt"/> to a new list</em></p>
        ///   <p>driver options for the network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings SetDriverOpt(this DockerNetworkConnectSettings toolSettings, params string[] driverOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DriverOptInternal = driverOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkConnectSettings.DriverOpt"/> to a new list</em></p>
        ///   <p>driver options for the network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings SetDriverOpt(this DockerNetworkConnectSettings toolSettings, IEnumerable<string> driverOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DriverOptInternal = driverOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNetworkConnectSettings.DriverOpt"/></em></p>
        ///   <p>driver options for the network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings AddDriverOpt(this DockerNetworkConnectSettings toolSettings, params string[] driverOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DriverOptInternal.AddRange(driverOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNetworkConnectSettings.DriverOpt"/></em></p>
        ///   <p>driver options for the network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings AddDriverOpt(this DockerNetworkConnectSettings toolSettings, IEnumerable<string> driverOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DriverOptInternal.AddRange(driverOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerNetworkConnectSettings.DriverOpt"/></em></p>
        ///   <p>driver options for the network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings ClearDriverOpt(this DockerNetworkConnectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DriverOptInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNetworkConnectSettings.DriverOpt"/></em></p>
        ///   <p>driver options for the network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings RemoveDriverOpt(this DockerNetworkConnectSettings toolSettings, params string[] driverOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(driverOpt);
            toolSettings.DriverOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNetworkConnectSettings.DriverOpt"/></em></p>
        ///   <p>driver options for the network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings RemoveDriverOpt(this DockerNetworkConnectSettings toolSettings, IEnumerable<string> driverOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(driverOpt);
            toolSettings.DriverOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Ip
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkConnectSettings.Ip"/></em></p>
        ///   <p>IPv4 address (e.g., 172.30.100.104).</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings SetIp(this DockerNetworkConnectSettings toolSettings, string ip)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip = ip;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNetworkConnectSettings.Ip"/></em></p>
        ///   <p>IPv4 address (e.g., 172.30.100.104).</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings ResetIp(this DockerNetworkConnectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip = null;
            return toolSettings;
        }
        #endregion
        #region Ip6
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkConnectSettings.Ip6"/></em></p>
        ///   <p>IPv6 address (e.g., 2001:db8::33).</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings SetIp6(this DockerNetworkConnectSettings toolSettings, string ip6)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip6 = ip6;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNetworkConnectSettings.Ip6"/></em></p>
        ///   <p>IPv6 address (e.g., 2001:db8::33).</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings ResetIp6(this DockerNetworkConnectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip6 = null;
            return toolSettings;
        }
        #endregion
        #region Link
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkConnectSettings.Link"/> to a new list</em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings SetLink(this DockerNetworkConnectSettings toolSettings, params string[] link)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkInternal = link.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkConnectSettings.Link"/> to a new list</em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings SetLink(this DockerNetworkConnectSettings toolSettings, IEnumerable<string> link)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkInternal = link.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNetworkConnectSettings.Link"/></em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings AddLink(this DockerNetworkConnectSettings toolSettings, params string[] link)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkInternal.AddRange(link);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNetworkConnectSettings.Link"/></em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings AddLink(this DockerNetworkConnectSettings toolSettings, IEnumerable<string> link)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkInternal.AddRange(link);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerNetworkConnectSettings.Link"/></em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings ClearLink(this DockerNetworkConnectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNetworkConnectSettings.Link"/></em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings RemoveLink(this DockerNetworkConnectSettings toolSettings, params string[] link)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(link);
            toolSettings.LinkInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNetworkConnectSettings.Link"/></em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings RemoveLink(this DockerNetworkConnectSettings toolSettings, IEnumerable<string> link)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(link);
            toolSettings.LinkInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region LinkLocalIp
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkConnectSettings.LinkLocalIp"/> to a new list</em></p>
        ///   <p>Add a link-local address for the container.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings SetLinkLocalIp(this DockerNetworkConnectSettings toolSettings, params string[] linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkLocalIpInternal = linkLocalIp.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkConnectSettings.LinkLocalIp"/> to a new list</em></p>
        ///   <p>Add a link-local address for the container.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings SetLinkLocalIp(this DockerNetworkConnectSettings toolSettings, IEnumerable<string> linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkLocalIpInternal = linkLocalIp.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNetworkConnectSettings.LinkLocalIp"/></em></p>
        ///   <p>Add a link-local address for the container.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings AddLinkLocalIp(this DockerNetworkConnectSettings toolSettings, params string[] linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkLocalIpInternal.AddRange(linkLocalIp);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNetworkConnectSettings.LinkLocalIp"/></em></p>
        ///   <p>Add a link-local address for the container.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings AddLinkLocalIp(this DockerNetworkConnectSettings toolSettings, IEnumerable<string> linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkLocalIpInternal.AddRange(linkLocalIp);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerNetworkConnectSettings.LinkLocalIp"/></em></p>
        ///   <p>Add a link-local address for the container.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings ClearLinkLocalIp(this DockerNetworkConnectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkLocalIpInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNetworkConnectSettings.LinkLocalIp"/></em></p>
        ///   <p>Add a link-local address for the container.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings RemoveLinkLocalIp(this DockerNetworkConnectSettings toolSettings, params string[] linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(linkLocalIp);
            toolSettings.LinkLocalIpInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNetworkConnectSettings.LinkLocalIp"/></em></p>
        ///   <p>Add a link-local address for the container.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings RemoveLinkLocalIp(this DockerNetworkConnectSettings toolSettings, IEnumerable<string> linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(linkLocalIp);
            toolSettings.LinkLocalIpInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Network
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkConnectSettings.Network"/></em></p>
        ///   <p>NETWORK</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings SetNetwork(this DockerNetworkConnectSettings toolSettings, string network)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Network = network;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNetworkConnectSettings.Network"/></em></p>
        ///   <p>NETWORK</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings ResetNetwork(this DockerNetworkConnectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Network = null;
            return toolSettings;
        }
        #endregion
        #region Container
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkConnectSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings SetContainer(this DockerNetworkConnectSettings toolSettings, string container)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = container;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNetworkConnectSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerNetworkConnectSettings ResetContainer(this DockerNetworkConnectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerSecretLsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerSecretLsSettingsExtensions
    {
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSecretLsSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerSecretLsSettings SetFilter(this DockerSecretLsSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSecretLsSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerSecretLsSettings ResetFilter(this DockerSecretLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSecretLsSettings.Format"/></em></p>
        ///   <p>Pretty-print secrets using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerSecretLsSettings SetFormat(this DockerSecretLsSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSecretLsSettings.Format"/></em></p>
        ///   <p>Pretty-print secrets using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerSecretLsSettings ResetFormat(this DockerSecretLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSecretLsSettings.Quiet"/></em></p>
        ///   <p>Only display IDs.</p>
        /// </summary>
        [Pure]
        public static DockerSecretLsSettings SetQuiet(this DockerSecretLsSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSecretLsSettings.Quiet"/></em></p>
        ///   <p>Only display IDs.</p>
        /// </summary>
        [Pure]
        public static DockerSecretLsSettings ResetQuiet(this DockerSecretLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerSecretLsSettings.Quiet"/></em></p>
        ///   <p>Only display IDs.</p>
        /// </summary>
        [Pure]
        public static DockerSecretLsSettings EnableQuiet(this DockerSecretLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerSecretLsSettings.Quiet"/></em></p>
        ///   <p>Only display IDs.</p>
        /// </summary>
        [Pure]
        public static DockerSecretLsSettings DisableQuiet(this DockerSecretLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerSecretLsSettings.Quiet"/></em></p>
        ///   <p>Only display IDs.</p>
        /// </summary>
        [Pure]
        public static DockerSecretLsSettings ToggleQuiet(this DockerSecretLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerSwarmLeaveSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerSwarmLeaveSettingsExtensions
    {
        #region Force
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmLeaveSettings.Force"/></em></p>
        ///   <p>Force this node to leave the swarm, ignoring warnings.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmLeaveSettings SetForce(this DockerSwarmLeaveSettings toolSettings, bool? force)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = force;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmLeaveSettings.Force"/></em></p>
        ///   <p>Force this node to leave the swarm, ignoring warnings.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmLeaveSettings ResetForce(this DockerSwarmLeaveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerSwarmLeaveSettings.Force"/></em></p>
        ///   <p>Force this node to leave the swarm, ignoring warnings.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmLeaveSettings EnableForce(this DockerSwarmLeaveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerSwarmLeaveSettings.Force"/></em></p>
        ///   <p>Force this node to leave the swarm, ignoring warnings.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmLeaveSettings DisableForce(this DockerSwarmLeaveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerSwarmLeaveSettings.Force"/></em></p>
        ///   <p>Force this node to leave the swarm, ignoring warnings.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmLeaveSettings ToggleForce(this DockerSwarmLeaveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = !toolSettings.Force;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerImagesSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerImagesSettingsExtensions
    {
        #region All
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImagesSettings.All"/></em></p>
        ///   <p>Show all images (default hides intermediate images).</p>
        /// </summary>
        [Pure]
        public static DockerImagesSettings SetAll(this DockerImagesSettings toolSettings, bool? all)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = all;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImagesSettings.All"/></em></p>
        ///   <p>Show all images (default hides intermediate images).</p>
        /// </summary>
        [Pure]
        public static DockerImagesSettings ResetAll(this DockerImagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImagesSettings.All"/></em></p>
        ///   <p>Show all images (default hides intermediate images).</p>
        /// </summary>
        [Pure]
        public static DockerImagesSettings EnableAll(this DockerImagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImagesSettings.All"/></em></p>
        ///   <p>Show all images (default hides intermediate images).</p>
        /// </summary>
        [Pure]
        public static DockerImagesSettings DisableAll(this DockerImagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImagesSettings.All"/></em></p>
        ///   <p>Show all images (default hides intermediate images).</p>
        /// </summary>
        [Pure]
        public static DockerImagesSettings ToggleAll(this DockerImagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = !toolSettings.All;
            return toolSettings;
        }
        #endregion
        #region Digests
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImagesSettings.Digests"/></em></p>
        ///   <p>Show digests.</p>
        /// </summary>
        [Pure]
        public static DockerImagesSettings SetDigests(this DockerImagesSettings toolSettings, bool? digests)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Digests = digests;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImagesSettings.Digests"/></em></p>
        ///   <p>Show digests.</p>
        /// </summary>
        [Pure]
        public static DockerImagesSettings ResetDigests(this DockerImagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Digests = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImagesSettings.Digests"/></em></p>
        ///   <p>Show digests.</p>
        /// </summary>
        [Pure]
        public static DockerImagesSettings EnableDigests(this DockerImagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Digests = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImagesSettings.Digests"/></em></p>
        ///   <p>Show digests.</p>
        /// </summary>
        [Pure]
        public static DockerImagesSettings DisableDigests(this DockerImagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Digests = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImagesSettings.Digests"/></em></p>
        ///   <p>Show digests.</p>
        /// </summary>
        [Pure]
        public static DockerImagesSettings ToggleDigests(this DockerImagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Digests = !toolSettings.Digests;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImagesSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerImagesSettings SetFilter(this DockerImagesSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImagesSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerImagesSettings ResetFilter(this DockerImagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImagesSettings.Format"/></em></p>
        ///   <p>Pretty-print images using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerImagesSettings SetFormat(this DockerImagesSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImagesSettings.Format"/></em></p>
        ///   <p>Pretty-print images using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerImagesSettings ResetFormat(this DockerImagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region NoTrunc
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImagesSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerImagesSettings SetNoTrunc(this DockerImagesSettings toolSettings, bool? noTrunc)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = noTrunc;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImagesSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerImagesSettings ResetNoTrunc(this DockerImagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImagesSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerImagesSettings EnableNoTrunc(this DockerImagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImagesSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerImagesSettings DisableNoTrunc(this DockerImagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImagesSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerImagesSettings ToggleNoTrunc(this DockerImagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = !toolSettings.NoTrunc;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImagesSettings.Quiet"/></em></p>
        ///   <p>Only show numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerImagesSettings SetQuiet(this DockerImagesSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImagesSettings.Quiet"/></em></p>
        ///   <p>Only show numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerImagesSettings ResetQuiet(this DockerImagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImagesSettings.Quiet"/></em></p>
        ///   <p>Only show numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerImagesSettings EnableQuiet(this DockerImagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImagesSettings.Quiet"/></em></p>
        ///   <p>Only show numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerImagesSettings DisableQuiet(this DockerImagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImagesSettings.Quiet"/></em></p>
        ///   <p>Only show numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerImagesSettings ToggleQuiet(this DockerImagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
        #region Repository
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImagesSettings.Repository"/></em></p>
        ///   <p>[REPOSITORY[:TAG]]</p>
        /// </summary>
        [Pure]
        public static DockerImagesSettings SetRepository(this DockerImagesSettings toolSettings, string repository)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = repository;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImagesSettings.Repository"/></em></p>
        ///   <p>[REPOSITORY[:TAG]]</p>
        /// </summary>
        [Pure]
        public static DockerImagesSettings ResetRepository(this DockerImagesSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerEngineUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerEngineUpdateSettingsExtensions
    {
        #region Containerd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerEngineUpdateSettings.Containerd"/></em></p>
        ///   <p>override default location of containerd endpoint.</p>
        /// </summary>
        [Pure]
        public static DockerEngineUpdateSettings SetContainerd(this DockerEngineUpdateSettings toolSettings, string containerd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Containerd = containerd;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerEngineUpdateSettings.Containerd"/></em></p>
        ///   <p>override default location of containerd endpoint.</p>
        /// </summary>
        [Pure]
        public static DockerEngineUpdateSettings ResetContainerd(this DockerEngineUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Containerd = null;
            return toolSettings;
        }
        #endregion
        #region EngineImage
        /// <summary>
        ///   <p><em>Sets <see cref="DockerEngineUpdateSettings.EngineImage"/></em></p>
        ///   <p>Specify engine image (default uses the same image as currently running).</p>
        /// </summary>
        [Pure]
        public static DockerEngineUpdateSettings SetEngineImage(this DockerEngineUpdateSettings toolSettings, string engineImage)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EngineImage = engineImage;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerEngineUpdateSettings.EngineImage"/></em></p>
        ///   <p>Specify engine image (default uses the same image as currently running).</p>
        /// </summary>
        [Pure]
        public static DockerEngineUpdateSettings ResetEngineImage(this DockerEngineUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EngineImage = null;
            return toolSettings;
        }
        #endregion
        #region RegistryPrefix
        /// <summary>
        ///   <p><em>Sets <see cref="DockerEngineUpdateSettings.RegistryPrefix"/></em></p>
        ///   <p>Override the current location where engine images are pulled.</p>
        /// </summary>
        [Pure]
        public static DockerEngineUpdateSettings SetRegistryPrefix(this DockerEngineUpdateSettings toolSettings, string registryPrefix)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RegistryPrefix = registryPrefix;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerEngineUpdateSettings.RegistryPrefix"/></em></p>
        ///   <p>Override the current location where engine images are pulled.</p>
        /// </summary>
        [Pure]
        public static DockerEngineUpdateSettings ResetRegistryPrefix(this DockerEngineUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RegistryPrefix = null;
            return toolSettings;
        }
        #endregion
        #region Version
        /// <summary>
        ///   <p><em>Sets <see cref="DockerEngineUpdateSettings.Version"/></em></p>
        ///   <p>Specify engine version.</p>
        /// </summary>
        [Pure]
        public static DockerEngineUpdateSettings SetVersion(this DockerEngineUpdateSettings toolSettings, string version)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Version = version;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerEngineUpdateSettings.Version"/></em></p>
        ///   <p>Specify engine version.</p>
        /// </summary>
        [Pure]
        public static DockerEngineUpdateSettings ResetVersion(this DockerEngineUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Version = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerSystemEventsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerSystemEventsSettingsExtensions
    {
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSystemEventsSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerSystemEventsSettings SetFilter(this DockerSystemEventsSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSystemEventsSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerSystemEventsSettings ResetFilter(this DockerSystemEventsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSystemEventsSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerSystemEventsSettings SetFormat(this DockerSystemEventsSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSystemEventsSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerSystemEventsSettings ResetFormat(this DockerSystemEventsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Since
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSystemEventsSettings.Since"/></em></p>
        ///   <p>Show all events created since timestamp.</p>
        /// </summary>
        [Pure]
        public static DockerSystemEventsSettings SetSince(this DockerSystemEventsSettings toolSettings, string since)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Since = since;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSystemEventsSettings.Since"/></em></p>
        ///   <p>Show all events created since timestamp.</p>
        /// </summary>
        [Pure]
        public static DockerSystemEventsSettings ResetSince(this DockerSystemEventsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Since = null;
            return toolSettings;
        }
        #endregion
        #region Until
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSystemEventsSettings.Until"/></em></p>
        ///   <p>Stream events until this timestamp.</p>
        /// </summary>
        [Pure]
        public static DockerSystemEventsSettings SetUntil(this DockerSystemEventsSettings toolSettings, string until)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Until = until;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSystemEventsSettings.Until"/></em></p>
        ///   <p>Stream events until this timestamp.</p>
        /// </summary>
        [Pure]
        public static DockerSystemEventsSettings ResetUntil(this DockerSystemEventsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Until = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerInspectSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerInspectSettingsExtensions
    {
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerInspectSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerInspectSettings SetFormat(this DockerInspectSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerInspectSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerInspectSettings ResetFormat(this DockerInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Size
        /// <summary>
        ///   <p><em>Sets <see cref="DockerInspectSettings.Size"/></em></p>
        ///   <p>Display total file sizes if the type is container.</p>
        /// </summary>
        [Pure]
        public static DockerInspectSettings SetSize(this DockerInspectSettings toolSettings, bool? size)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Size = size;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerInspectSettings.Size"/></em></p>
        ///   <p>Display total file sizes if the type is container.</p>
        /// </summary>
        [Pure]
        public static DockerInspectSettings ResetSize(this DockerInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Size = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerInspectSettings.Size"/></em></p>
        ///   <p>Display total file sizes if the type is container.</p>
        /// </summary>
        [Pure]
        public static DockerInspectSettings EnableSize(this DockerInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Size = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerInspectSettings.Size"/></em></p>
        ///   <p>Display total file sizes if the type is container.</p>
        /// </summary>
        [Pure]
        public static DockerInspectSettings DisableSize(this DockerInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Size = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerInspectSettings.Size"/></em></p>
        ///   <p>Display total file sizes if the type is container.</p>
        /// </summary>
        [Pure]
        public static DockerInspectSettings ToggleSize(this DockerInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Size = !toolSettings.Size;
            return toolSettings;
        }
        #endregion
        #region Type
        /// <summary>
        ///   <p><em>Sets <see cref="DockerInspectSettings.Type"/></em></p>
        ///   <p>Return JSON for specified type.</p>
        /// </summary>
        [Pure]
        public static DockerInspectSettings SetType(this DockerInspectSettings toolSettings, string type)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Type = type;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerInspectSettings.Type"/></em></p>
        ///   <p>Return JSON for specified type.</p>
        /// </summary>
        [Pure]
        public static DockerInspectSettings ResetType(this DockerInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Type = null;
            return toolSettings;
        }
        #endregion
        #region Names
        /// <summary>
        ///   <p><em>Sets <see cref="DockerInspectSettings.Names"/> to a new list</em></p>
        ///   <p>NAME|ID</p>
        /// </summary>
        [Pure]
        public static DockerInspectSettings SetNames(this DockerInspectSettings toolSettings, params string[] names)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamesInternal = names.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerInspectSettings.Names"/> to a new list</em></p>
        ///   <p>NAME|ID</p>
        /// </summary>
        [Pure]
        public static DockerInspectSettings SetNames(this DockerInspectSettings toolSettings, IEnumerable<string> names)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamesInternal = names.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerInspectSettings.Names"/></em></p>
        ///   <p>NAME|ID</p>
        /// </summary>
        [Pure]
        public static DockerInspectSettings AddNames(this DockerInspectSettings toolSettings, params string[] names)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamesInternal.AddRange(names);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerInspectSettings.Names"/></em></p>
        ///   <p>NAME|ID</p>
        /// </summary>
        [Pure]
        public static DockerInspectSettings AddNames(this DockerInspectSettings toolSettings, IEnumerable<string> names)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamesInternal.AddRange(names);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerInspectSettings.Names"/></em></p>
        ///   <p>NAME|ID</p>
        /// </summary>
        [Pure]
        public static DockerInspectSettings ClearNames(this DockerInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerInspectSettings.Names"/></em></p>
        ///   <p>NAME|ID</p>
        /// </summary>
        [Pure]
        public static DockerInspectSettings RemoveNames(this DockerInspectSettings toolSettings, params string[] names)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(names);
            toolSettings.NamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerInspectSettings.Names"/></em></p>
        ///   <p>NAME|ID</p>
        /// </summary>
        [Pure]
        public static DockerInspectSettings RemoveNames(this DockerInspectSettings toolSettings, IEnumerable<string> names)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(names);
            toolSettings.NamesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerEngineCheckSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerEngineCheckSettingsExtensions
    {
        #region Containerd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerEngineCheckSettings.Containerd"/></em></p>
        ///   <p>override default location of containerd endpoint.</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings SetContainerd(this DockerEngineCheckSettings toolSettings, string containerd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Containerd = containerd;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerEngineCheckSettings.Containerd"/></em></p>
        ///   <p>override default location of containerd endpoint.</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings ResetContainerd(this DockerEngineCheckSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Containerd = null;
            return toolSettings;
        }
        #endregion
        #region Downgrades
        /// <summary>
        ///   <p><em>Sets <see cref="DockerEngineCheckSettings.Downgrades"/></em></p>
        ///   <p>Report downgrades (default omits older versions).</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings SetDowngrades(this DockerEngineCheckSettings toolSettings, bool? downgrades)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Downgrades = downgrades;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerEngineCheckSettings.Downgrades"/></em></p>
        ///   <p>Report downgrades (default omits older versions).</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings ResetDowngrades(this DockerEngineCheckSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Downgrades = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerEngineCheckSettings.Downgrades"/></em></p>
        ///   <p>Report downgrades (default omits older versions).</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings EnableDowngrades(this DockerEngineCheckSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Downgrades = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerEngineCheckSettings.Downgrades"/></em></p>
        ///   <p>Report downgrades (default omits older versions).</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings DisableDowngrades(this DockerEngineCheckSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Downgrades = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerEngineCheckSettings.Downgrades"/></em></p>
        ///   <p>Report downgrades (default omits older versions).</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings ToggleDowngrades(this DockerEngineCheckSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Downgrades = !toolSettings.Downgrades;
            return toolSettings;
        }
        #endregion
        #region EngineImage
        /// <summary>
        ///   <p><em>Sets <see cref="DockerEngineCheckSettings.EngineImage"/></em></p>
        ///   <p>Specify engine image (default uses the same image as currently running).</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings SetEngineImage(this DockerEngineCheckSettings toolSettings, string engineImage)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EngineImage = engineImage;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerEngineCheckSettings.EngineImage"/></em></p>
        ///   <p>Specify engine image (default uses the same image as currently running).</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings ResetEngineImage(this DockerEngineCheckSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EngineImage = null;
            return toolSettings;
        }
        #endregion
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerEngineCheckSettings.Format"/></em></p>
        ///   <p>Pretty-print updates using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings SetFormat(this DockerEngineCheckSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerEngineCheckSettings.Format"/></em></p>
        ///   <p>Pretty-print updates using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings ResetFormat(this DockerEngineCheckSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region PreReleases
        /// <summary>
        ///   <p><em>Sets <see cref="DockerEngineCheckSettings.PreReleases"/></em></p>
        ///   <p>Include pre-release versions.</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings SetPreReleases(this DockerEngineCheckSettings toolSettings, bool? preReleases)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PreReleases = preReleases;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerEngineCheckSettings.PreReleases"/></em></p>
        ///   <p>Include pre-release versions.</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings ResetPreReleases(this DockerEngineCheckSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PreReleases = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerEngineCheckSettings.PreReleases"/></em></p>
        ///   <p>Include pre-release versions.</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings EnablePreReleases(this DockerEngineCheckSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PreReleases = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerEngineCheckSettings.PreReleases"/></em></p>
        ///   <p>Include pre-release versions.</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings DisablePreReleases(this DockerEngineCheckSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PreReleases = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerEngineCheckSettings.PreReleases"/></em></p>
        ///   <p>Include pre-release versions.</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings TogglePreReleases(this DockerEngineCheckSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PreReleases = !toolSettings.PreReleases;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerEngineCheckSettings.Quiet"/></em></p>
        ///   <p>Only display available versions.</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings SetQuiet(this DockerEngineCheckSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerEngineCheckSettings.Quiet"/></em></p>
        ///   <p>Only display available versions.</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings ResetQuiet(this DockerEngineCheckSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerEngineCheckSettings.Quiet"/></em></p>
        ///   <p>Only display available versions.</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings EnableQuiet(this DockerEngineCheckSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerEngineCheckSettings.Quiet"/></em></p>
        ///   <p>Only display available versions.</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings DisableQuiet(this DockerEngineCheckSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerEngineCheckSettings.Quiet"/></em></p>
        ///   <p>Only display available versions.</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings ToggleQuiet(this DockerEngineCheckSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
        #region RegistryPrefix
        /// <summary>
        ///   <p><em>Sets <see cref="DockerEngineCheckSettings.RegistryPrefix"/></em></p>
        ///   <p>Override the existing location where engine images are pulled.</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings SetRegistryPrefix(this DockerEngineCheckSettings toolSettings, string registryPrefix)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RegistryPrefix = registryPrefix;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerEngineCheckSettings.RegistryPrefix"/></em></p>
        ///   <p>Override the existing location where engine images are pulled.</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings ResetRegistryPrefix(this DockerEngineCheckSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RegistryPrefix = null;
            return toolSettings;
        }
        #endregion
        #region Upgrades
        /// <summary>
        ///   <p><em>Sets <see cref="DockerEngineCheckSettings.Upgrades"/></em></p>
        ///   <p>Report available upgrades.</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings SetUpgrades(this DockerEngineCheckSettings toolSettings, bool? upgrades)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Upgrades = upgrades;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerEngineCheckSettings.Upgrades"/></em></p>
        ///   <p>Report available upgrades.</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings ResetUpgrades(this DockerEngineCheckSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Upgrades = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerEngineCheckSettings.Upgrades"/></em></p>
        ///   <p>Report available upgrades.</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings EnableUpgrades(this DockerEngineCheckSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Upgrades = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerEngineCheckSettings.Upgrades"/></em></p>
        ///   <p>Report available upgrades.</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings DisableUpgrades(this DockerEngineCheckSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Upgrades = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerEngineCheckSettings.Upgrades"/></em></p>
        ///   <p>Report available upgrades.</p>
        /// </summary>
        [Pure]
        public static DockerEngineCheckSettings ToggleUpgrades(this DockerEngineCheckSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Upgrades = !toolSettings.Upgrades;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerAttachSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerAttachSettingsExtensions
    {
        #region DetachKeys
        /// <summary>
        ///   <p><em>Sets <see cref="DockerAttachSettings.DetachKeys"/></em></p>
        ///   <p>Override the key sequence for detaching a container.</p>
        /// </summary>
        [Pure]
        public static DockerAttachSettings SetDetachKeys(this DockerAttachSettings toolSettings, string detachKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DetachKeys = detachKeys;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerAttachSettings.DetachKeys"/></em></p>
        ///   <p>Override the key sequence for detaching a container.</p>
        /// </summary>
        [Pure]
        public static DockerAttachSettings ResetDetachKeys(this DockerAttachSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DetachKeys = null;
            return toolSettings;
        }
        #endregion
        #region NoStdin
        /// <summary>
        ///   <p><em>Sets <see cref="DockerAttachSettings.NoStdin"/></em></p>
        ///   <p>Do not attach STDIN.</p>
        /// </summary>
        [Pure]
        public static DockerAttachSettings SetNoStdin(this DockerAttachSettings toolSettings, bool? noStdin)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoStdin = noStdin;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerAttachSettings.NoStdin"/></em></p>
        ///   <p>Do not attach STDIN.</p>
        /// </summary>
        [Pure]
        public static DockerAttachSettings ResetNoStdin(this DockerAttachSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoStdin = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerAttachSettings.NoStdin"/></em></p>
        ///   <p>Do not attach STDIN.</p>
        /// </summary>
        [Pure]
        public static DockerAttachSettings EnableNoStdin(this DockerAttachSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoStdin = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerAttachSettings.NoStdin"/></em></p>
        ///   <p>Do not attach STDIN.</p>
        /// </summary>
        [Pure]
        public static DockerAttachSettings DisableNoStdin(this DockerAttachSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoStdin = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerAttachSettings.NoStdin"/></em></p>
        ///   <p>Do not attach STDIN.</p>
        /// </summary>
        [Pure]
        public static DockerAttachSettings ToggleNoStdin(this DockerAttachSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoStdin = !toolSettings.NoStdin;
            return toolSettings;
        }
        #endregion
        #region SigProxy
        /// <summary>
        ///   <p><em>Sets <see cref="DockerAttachSettings.SigProxy"/></em></p>
        ///   <p>Proxy all received signals to the process.</p>
        /// </summary>
        [Pure]
        public static DockerAttachSettings SetSigProxy(this DockerAttachSettings toolSettings, bool? sigProxy)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SigProxy = sigProxy;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerAttachSettings.SigProxy"/></em></p>
        ///   <p>Proxy all received signals to the process.</p>
        /// </summary>
        [Pure]
        public static DockerAttachSettings ResetSigProxy(this DockerAttachSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SigProxy = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerAttachSettings.SigProxy"/></em></p>
        ///   <p>Proxy all received signals to the process.</p>
        /// </summary>
        [Pure]
        public static DockerAttachSettings EnableSigProxy(this DockerAttachSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SigProxy = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerAttachSettings.SigProxy"/></em></p>
        ///   <p>Proxy all received signals to the process.</p>
        /// </summary>
        [Pure]
        public static DockerAttachSettings DisableSigProxy(this DockerAttachSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SigProxy = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerAttachSettings.SigProxy"/></em></p>
        ///   <p>Proxy all received signals to the process.</p>
        /// </summary>
        [Pure]
        public static DockerAttachSettings ToggleSigProxy(this DockerAttachSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SigProxy = !toolSettings.SigProxy;
            return toolSettings;
        }
        #endregion
        #region Container
        /// <summary>
        ///   <p><em>Sets <see cref="DockerAttachSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerAttachSettings SetContainer(this DockerAttachSettings toolSettings, string container)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = container;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerAttachSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerAttachSettings ResetContainer(this DockerAttachSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContainerWaitSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContainerWaitSettingsExtensions
    {
        #region Containers
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerWaitSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerWaitSettings SetContainers(this DockerContainerWaitSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerWaitSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerWaitSettings SetContainers(this DockerContainerWaitSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerWaitSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerWaitSettings AddContainers(this DockerContainerWaitSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerWaitSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerWaitSettings AddContainers(this DockerContainerWaitSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerWaitSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerWaitSettings ClearContainers(this DockerContainerWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerWaitSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerWaitSettings RemoveContainers(this DockerContainerWaitSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerWaitSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerWaitSettings RemoveContainers(this DockerContainerWaitSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerSwarmCaSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerSwarmCaSettingsExtensions
    {
        #region CaCert
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmCaSettings.CaCert"/></em></p>
        ///   <p>Path to the PEM-formatted root CA certificate to use for the new cluster.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmCaSettings SetCaCert(this DockerSwarmCaSettings toolSettings, string caCert)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CaCert = caCert;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmCaSettings.CaCert"/></em></p>
        ///   <p>Path to the PEM-formatted root CA certificate to use for the new cluster.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmCaSettings ResetCaCert(this DockerSwarmCaSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CaCert = null;
            return toolSettings;
        }
        #endregion
        #region CaKey
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmCaSettings.CaKey"/></em></p>
        ///   <p>Path to the PEM-formatted root CA key to use for the new cluster.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmCaSettings SetCaKey(this DockerSwarmCaSettings toolSettings, string caKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CaKey = caKey;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmCaSettings.CaKey"/></em></p>
        ///   <p>Path to the PEM-formatted root CA key to use for the new cluster.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmCaSettings ResetCaKey(this DockerSwarmCaSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CaKey = null;
            return toolSettings;
        }
        #endregion
        #region CertExpiry
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmCaSettings.CertExpiry"/></em></p>
        ///   <p>Validity period for node certificates (ns|us|ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmCaSettings SetCertExpiry(this DockerSwarmCaSettings toolSettings, string certExpiry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CertExpiry = certExpiry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmCaSettings.CertExpiry"/></em></p>
        ///   <p>Validity period for node certificates (ns|us|ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmCaSettings ResetCertExpiry(this DockerSwarmCaSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CertExpiry = null;
            return toolSettings;
        }
        #endregion
        #region Detach
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmCaSettings.Detach"/></em></p>
        ///   <p>Exit immediately instead of waiting for the root rotation to converge.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmCaSettings SetDetach(this DockerSwarmCaSettings toolSettings, bool? detach)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = detach;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmCaSettings.Detach"/></em></p>
        ///   <p>Exit immediately instead of waiting for the root rotation to converge.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmCaSettings ResetDetach(this DockerSwarmCaSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerSwarmCaSettings.Detach"/></em></p>
        ///   <p>Exit immediately instead of waiting for the root rotation to converge.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmCaSettings EnableDetach(this DockerSwarmCaSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerSwarmCaSettings.Detach"/></em></p>
        ///   <p>Exit immediately instead of waiting for the root rotation to converge.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmCaSettings DisableDetach(this DockerSwarmCaSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerSwarmCaSettings.Detach"/></em></p>
        ///   <p>Exit immediately instead of waiting for the root rotation to converge.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmCaSettings ToggleDetach(this DockerSwarmCaSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = !toolSettings.Detach;
            return toolSettings;
        }
        #endregion
        #region ExternalCa
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmCaSettings.ExternalCa"/></em></p>
        ///   <p>Specifications of one or more certificate signing endpoints.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmCaSettings SetExternalCa(this DockerSwarmCaSettings toolSettings, string externalCa)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExternalCa = externalCa;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmCaSettings.ExternalCa"/></em></p>
        ///   <p>Specifications of one or more certificate signing endpoints.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmCaSettings ResetExternalCa(this DockerSwarmCaSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExternalCa = null;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmCaSettings.Quiet"/></em></p>
        ///   <p>Suppress progress output.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmCaSettings SetQuiet(this DockerSwarmCaSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmCaSettings.Quiet"/></em></p>
        ///   <p>Suppress progress output.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmCaSettings ResetQuiet(this DockerSwarmCaSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerSwarmCaSettings.Quiet"/></em></p>
        ///   <p>Suppress progress output.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmCaSettings EnableQuiet(this DockerSwarmCaSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerSwarmCaSettings.Quiet"/></em></p>
        ///   <p>Suppress progress output.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmCaSettings DisableQuiet(this DockerSwarmCaSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerSwarmCaSettings.Quiet"/></em></p>
        ///   <p>Suppress progress output.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmCaSettings ToggleQuiet(this DockerSwarmCaSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
        #region Rotate
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmCaSettings.Rotate"/></em></p>
        ///   <p>Rotate the swarm CA - if no certificate or key are provided, new ones will be generated.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmCaSettings SetRotate(this DockerSwarmCaSettings toolSettings, bool? rotate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rotate = rotate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmCaSettings.Rotate"/></em></p>
        ///   <p>Rotate the swarm CA - if no certificate or key are provided, new ones will be generated.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmCaSettings ResetRotate(this DockerSwarmCaSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rotate = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerSwarmCaSettings.Rotate"/></em></p>
        ///   <p>Rotate the swarm CA - if no certificate or key are provided, new ones will be generated.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmCaSettings EnableRotate(this DockerSwarmCaSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rotate = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerSwarmCaSettings.Rotate"/></em></p>
        ///   <p>Rotate the swarm CA - if no certificate or key are provided, new ones will be generated.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmCaSettings DisableRotate(this DockerSwarmCaSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rotate = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerSwarmCaSettings.Rotate"/></em></p>
        ///   <p>Rotate the swarm CA - if no certificate or key are provided, new ones will be generated.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmCaSettings ToggleRotate(this DockerSwarmCaSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rotate = !toolSettings.Rotate;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerEngineSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerEngineSettingsExtensions
    {
        #region Command
        /// <summary>
        ///   <p><em>Sets <see cref="DockerEngineSettings.Command"/></em></p>
        ///   <p>COMMAND</p>
        /// </summary>
        [Pure]
        public static DockerEngineSettings SetCommand(this DockerEngineSettings toolSettings, string command)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Command = command;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerEngineSettings.Command"/></em></p>
        ///   <p>COMMAND</p>
        /// </summary>
        [Pure]
        public static DockerEngineSettings ResetCommand(this DockerEngineSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Command = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerSystemPruneSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerSystemPruneSettingsExtensions
    {
        #region All
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSystemPruneSettings.All"/></em></p>
        ///   <p>Remove all unused images not just dangling ones.</p>
        /// </summary>
        [Pure]
        public static DockerSystemPruneSettings SetAll(this DockerSystemPruneSettings toolSettings, bool? all)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = all;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSystemPruneSettings.All"/></em></p>
        ///   <p>Remove all unused images not just dangling ones.</p>
        /// </summary>
        [Pure]
        public static DockerSystemPruneSettings ResetAll(this DockerSystemPruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerSystemPruneSettings.All"/></em></p>
        ///   <p>Remove all unused images not just dangling ones.</p>
        /// </summary>
        [Pure]
        public static DockerSystemPruneSettings EnableAll(this DockerSystemPruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerSystemPruneSettings.All"/></em></p>
        ///   <p>Remove all unused images not just dangling ones.</p>
        /// </summary>
        [Pure]
        public static DockerSystemPruneSettings DisableAll(this DockerSystemPruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerSystemPruneSettings.All"/></em></p>
        ///   <p>Remove all unused images not just dangling ones.</p>
        /// </summary>
        [Pure]
        public static DockerSystemPruneSettings ToggleAll(this DockerSystemPruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = !toolSettings.All;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSystemPruneSettings.Filter"/></em></p>
        ///   <p>Provide filter values (e.g. 'label=&lt;key&gt;=&lt;value&gt;').</p>
        /// </summary>
        [Pure]
        public static DockerSystemPruneSettings SetFilter(this DockerSystemPruneSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSystemPruneSettings.Filter"/></em></p>
        ///   <p>Provide filter values (e.g. 'label=&lt;key&gt;=&lt;value&gt;').</p>
        /// </summary>
        [Pure]
        public static DockerSystemPruneSettings ResetFilter(this DockerSystemPruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Force
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSystemPruneSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerSystemPruneSettings SetForce(this DockerSystemPruneSettings toolSettings, bool? force)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = force;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSystemPruneSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerSystemPruneSettings ResetForce(this DockerSystemPruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerSystemPruneSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerSystemPruneSettings EnableForce(this DockerSystemPruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerSystemPruneSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerSystemPruneSettings DisableForce(this DockerSystemPruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerSystemPruneSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerSystemPruneSettings ToggleForce(this DockerSystemPruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = !toolSettings.Force;
            return toolSettings;
        }
        #endregion
        #region Volumes
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSystemPruneSettings.Volumes"/></em></p>
        ///   <p>Prune volumes.</p>
        /// </summary>
        [Pure]
        public static DockerSystemPruneSettings SetVolumes(this DockerSystemPruneSettings toolSettings, bool? volumes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Volumes = volumes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSystemPruneSettings.Volumes"/></em></p>
        ///   <p>Prune volumes.</p>
        /// </summary>
        [Pure]
        public static DockerSystemPruneSettings ResetVolumes(this DockerSystemPruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Volumes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerSystemPruneSettings.Volumes"/></em></p>
        ///   <p>Prune volumes.</p>
        /// </summary>
        [Pure]
        public static DockerSystemPruneSettings EnableVolumes(this DockerSystemPruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Volumes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerSystemPruneSettings.Volumes"/></em></p>
        ///   <p>Prune volumes.</p>
        /// </summary>
        [Pure]
        public static DockerSystemPruneSettings DisableVolumes(this DockerSystemPruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Volumes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerSystemPruneSettings.Volumes"/></em></p>
        ///   <p>Prune volumes.</p>
        /// </summary>
        [Pure]
        public static DockerSystemPruneSettings ToggleVolumes(this DockerSystemPruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Volumes = !toolSettings.Volumes;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerBuilderSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerBuilderSettingsExtensions
    {
    }
    #endregion
    #region DockerContainerPauseSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContainerPauseSettingsExtensions
    {
        #region Containers
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerPauseSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerPauseSettings SetContainers(this DockerContainerPauseSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerPauseSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerPauseSettings SetContainers(this DockerContainerPauseSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerPauseSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerPauseSettings AddContainers(this DockerContainerPauseSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerPauseSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerPauseSettings AddContainers(this DockerContainerPauseSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerPauseSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerPauseSettings ClearContainers(this DockerContainerPauseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerPauseSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerPauseSettings RemoveContainers(this DockerContainerPauseSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerPauseSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerPauseSettings RemoveContainers(this DockerContainerPauseSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContainerCommitSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContainerCommitSettingsExtensions
    {
        #region Author
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCommitSettings.Author"/></em></p>
        ///   <p>Author (e.g., "John Hannibal Smith &lt;hannibal@a-team.com&gt;").</p>
        /// </summary>
        [Pure]
        public static DockerContainerCommitSettings SetAuthor(this DockerContainerCommitSettings toolSettings, string author)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Author = author;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCommitSettings.Author"/></em></p>
        ///   <p>Author (e.g., "John Hannibal Smith &lt;hannibal@a-team.com&gt;").</p>
        /// </summary>
        [Pure]
        public static DockerContainerCommitSettings ResetAuthor(this DockerContainerCommitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Author = null;
            return toolSettings;
        }
        #endregion
        #region Change
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCommitSettings.Change"/> to a new list</em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCommitSettings SetChange(this DockerContainerCommitSettings toolSettings, params string[] change)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ChangeInternal = change.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCommitSettings.Change"/> to a new list</em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCommitSettings SetChange(this DockerContainerCommitSettings toolSettings, IEnumerable<string> change)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ChangeInternal = change.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCommitSettings.Change"/></em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCommitSettings AddChange(this DockerContainerCommitSettings toolSettings, params string[] change)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ChangeInternal.AddRange(change);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCommitSettings.Change"/></em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCommitSettings AddChange(this DockerContainerCommitSettings toolSettings, IEnumerable<string> change)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ChangeInternal.AddRange(change);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCommitSettings.Change"/></em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCommitSettings ClearChange(this DockerContainerCommitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ChangeInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCommitSettings.Change"/></em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCommitSettings RemoveChange(this DockerContainerCommitSettings toolSettings, params string[] change)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(change);
            toolSettings.ChangeInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCommitSettings.Change"/></em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCommitSettings RemoveChange(this DockerContainerCommitSettings toolSettings, IEnumerable<string> change)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(change);
            toolSettings.ChangeInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Message
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCommitSettings.Message"/></em></p>
        ///   <p>Commit message.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCommitSettings SetMessage(this DockerContainerCommitSettings toolSettings, string message)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Message = message;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCommitSettings.Message"/></em></p>
        ///   <p>Commit message.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCommitSettings ResetMessage(this DockerContainerCommitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Message = null;
            return toolSettings;
        }
        #endregion
        #region Pause
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCommitSettings.Pause"/></em></p>
        ///   <p>Pause container during commit.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCommitSettings SetPause(this DockerContainerCommitSettings toolSettings, bool? pause)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pause = pause;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCommitSettings.Pause"/></em></p>
        ///   <p>Pause container during commit.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCommitSettings ResetPause(this DockerContainerCommitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pause = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerCommitSettings.Pause"/></em></p>
        ///   <p>Pause container during commit.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCommitSettings EnablePause(this DockerContainerCommitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pause = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerCommitSettings.Pause"/></em></p>
        ///   <p>Pause container during commit.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCommitSettings DisablePause(this DockerContainerCommitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pause = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerCommitSettings.Pause"/></em></p>
        ///   <p>Pause container during commit.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCommitSettings TogglePause(this DockerContainerCommitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pause = !toolSettings.Pause;
            return toolSettings;
        }
        #endregion
        #region Container
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCommitSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerCommitSettings SetContainer(this DockerContainerCommitSettings toolSettings, string container)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = container;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCommitSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerCommitSettings ResetContainer(this DockerContainerCommitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = null;
            return toolSettings;
        }
        #endregion
        #region Repository
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCommitSettings.Repository"/></em></p>
        ///   <p>[REPOSITORY[:TAG]]</p>
        /// </summary>
        [Pure]
        public static DockerContainerCommitSettings SetRepository(this DockerContainerCommitSettings toolSettings, string repository)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = repository;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCommitSettings.Repository"/></em></p>
        ///   <p>[REPOSITORY[:TAG]]</p>
        /// </summary>
        [Pure]
        public static DockerContainerCommitSettings ResetRepository(this DockerContainerCommitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContextLsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContextLsSettingsExtensions
    {
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContextLsSettings.Format"/></em></p>
        ///   <p>Pretty-print contexts using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerContextLsSettings SetFormat(this DockerContextLsSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContextLsSettings.Format"/></em></p>
        ///   <p>Pretty-print contexts using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerContextLsSettings ResetFormat(this DockerContextLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContextLsSettings.Quiet"/></em></p>
        ///   <p>Only show context names.</p>
        /// </summary>
        [Pure]
        public static DockerContextLsSettings SetQuiet(this DockerContextLsSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContextLsSettings.Quiet"/></em></p>
        ///   <p>Only show context names.</p>
        /// </summary>
        [Pure]
        public static DockerContextLsSettings ResetQuiet(this DockerContextLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContextLsSettings.Quiet"/></em></p>
        ///   <p>Only show context names.</p>
        /// </summary>
        [Pure]
        public static DockerContextLsSettings EnableQuiet(this DockerContextLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContextLsSettings.Quiet"/></em></p>
        ///   <p>Only show context names.</p>
        /// </summary>
        [Pure]
        public static DockerContextLsSettings DisableQuiet(this DockerContextLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContextLsSettings.Quiet"/></em></p>
        ///   <p>Only show context names.</p>
        /// </summary>
        [Pure]
        public static DockerContextLsSettings ToggleQuiet(this DockerContextLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContextRmSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContextRmSettingsExtensions
    {
        #region Contexts
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContextRmSettings.Contexts"/> to a new list</em></p>
        ///   <p>CONTEXT</p>
        /// </summary>
        [Pure]
        public static DockerContextRmSettings SetContexts(this DockerContextRmSettings toolSettings, params string[] contexts)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContextsInternal = contexts.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContextRmSettings.Contexts"/> to a new list</em></p>
        ///   <p>CONTEXT</p>
        /// </summary>
        [Pure]
        public static DockerContextRmSettings SetContexts(this DockerContextRmSettings toolSettings, IEnumerable<string> contexts)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContextsInternal = contexts.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContextRmSettings.Contexts"/></em></p>
        ///   <p>CONTEXT</p>
        /// </summary>
        [Pure]
        public static DockerContextRmSettings AddContexts(this DockerContextRmSettings toolSettings, params string[] contexts)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContextsInternal.AddRange(contexts);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContextRmSettings.Contexts"/></em></p>
        ///   <p>CONTEXT</p>
        /// </summary>
        [Pure]
        public static DockerContextRmSettings AddContexts(this DockerContextRmSettings toolSettings, IEnumerable<string> contexts)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContextsInternal.AddRange(contexts);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContextRmSettings.Contexts"/></em></p>
        ///   <p>CONTEXT</p>
        /// </summary>
        [Pure]
        public static DockerContextRmSettings ClearContexts(this DockerContextRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContextsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContextRmSettings.Contexts"/></em></p>
        ///   <p>CONTEXT</p>
        /// </summary>
        [Pure]
        public static DockerContextRmSettings RemoveContexts(this DockerContextRmSettings toolSettings, params string[] contexts)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(contexts);
            toolSettings.ContextsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContextRmSettings.Contexts"/></em></p>
        ///   <p>CONTEXT</p>
        /// </summary>
        [Pure]
        public static DockerContextRmSettings RemoveContexts(this DockerContextRmSettings toolSettings, IEnumerable<string> contexts)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(contexts);
            toolSettings.ContextsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerStackPsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerStackPsSettingsExtensions
    {
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackPsSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerStackPsSettings SetFilter(this DockerStackPsSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStackPsSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerStackPsSettings ResetFilter(this DockerStackPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackPsSettings.Format"/></em></p>
        ///   <p>Pretty-print tasks using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerStackPsSettings SetFormat(this DockerStackPsSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStackPsSettings.Format"/></em></p>
        ///   <p>Pretty-print tasks using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerStackPsSettings ResetFormat(this DockerStackPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Namespace
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackPsSettings.Namespace"/></em></p>
        ///   <p>Kubernetes namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerStackPsSettings SetNamespace(this DockerStackPsSettings toolSettings, string @namespace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Namespace = @namespace;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStackPsSettings.Namespace"/></em></p>
        ///   <p>Kubernetes namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerStackPsSettings ResetNamespace(this DockerStackPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Namespace = null;
            return toolSettings;
        }
        #endregion
        #region NoResolve
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackPsSettings.NoResolve"/></em></p>
        ///   <p>Do not map IDs to Names.</p>
        /// </summary>
        [Pure]
        public static DockerStackPsSettings SetNoResolve(this DockerStackPsSettings toolSettings, bool? noResolve)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolve = noResolve;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStackPsSettings.NoResolve"/></em></p>
        ///   <p>Do not map IDs to Names.</p>
        /// </summary>
        [Pure]
        public static DockerStackPsSettings ResetNoResolve(this DockerStackPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolve = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerStackPsSettings.NoResolve"/></em></p>
        ///   <p>Do not map IDs to Names.</p>
        /// </summary>
        [Pure]
        public static DockerStackPsSettings EnableNoResolve(this DockerStackPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolve = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerStackPsSettings.NoResolve"/></em></p>
        ///   <p>Do not map IDs to Names.</p>
        /// </summary>
        [Pure]
        public static DockerStackPsSettings DisableNoResolve(this DockerStackPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolve = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerStackPsSettings.NoResolve"/></em></p>
        ///   <p>Do not map IDs to Names.</p>
        /// </summary>
        [Pure]
        public static DockerStackPsSettings ToggleNoResolve(this DockerStackPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolve = !toolSettings.NoResolve;
            return toolSettings;
        }
        #endregion
        #region NoTrunc
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackPsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerStackPsSettings SetNoTrunc(this DockerStackPsSettings toolSettings, bool? noTrunc)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = noTrunc;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStackPsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerStackPsSettings ResetNoTrunc(this DockerStackPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerStackPsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerStackPsSettings EnableNoTrunc(this DockerStackPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerStackPsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerStackPsSettings DisableNoTrunc(this DockerStackPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerStackPsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerStackPsSettings ToggleNoTrunc(this DockerStackPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = !toolSettings.NoTrunc;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackPsSettings.Quiet"/></em></p>
        ///   <p>Only display task IDs.</p>
        /// </summary>
        [Pure]
        public static DockerStackPsSettings SetQuiet(this DockerStackPsSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStackPsSettings.Quiet"/></em></p>
        ///   <p>Only display task IDs.</p>
        /// </summary>
        [Pure]
        public static DockerStackPsSettings ResetQuiet(this DockerStackPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerStackPsSettings.Quiet"/></em></p>
        ///   <p>Only display task IDs.</p>
        /// </summary>
        [Pure]
        public static DockerStackPsSettings EnableQuiet(this DockerStackPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerStackPsSettings.Quiet"/></em></p>
        ///   <p>Only display task IDs.</p>
        /// </summary>
        [Pure]
        public static DockerStackPsSettings DisableQuiet(this DockerStackPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerStackPsSettings.Quiet"/></em></p>
        ///   <p>Only display task IDs.</p>
        /// </summary>
        [Pure]
        public static DockerStackPsSettings ToggleQuiet(this DockerStackPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackPsSettings.Stack"/></em></p>
        ///   <p>STACK</p>
        /// </summary>
        [Pure]
        public static DockerStackPsSettings SetStack(this DockerStackPsSettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStackPsSettings.Stack"/></em></p>
        ///   <p>STACK</p>
        /// </summary>
        [Pure]
        public static DockerStackPsSettings ResetStack(this DockerStackPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContainerCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContainerCreateSettingsExtensions
    {
        #region AddHost
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.AddHost"/> to a new list</em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetAddHost(this DockerContainerCreateSettings toolSettings, params string[] addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal = addHost.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.AddHost"/> to a new list</em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetAddHost(this DockerContainerCreateSettings toolSettings, IEnumerable<string> addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal = addHost.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddAddHost(this DockerContainerCreateSettings toolSettings, params string[] addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal.AddRange(addHost);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddAddHost(this DockerContainerCreateSettings toolSettings, IEnumerable<string> addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal.AddRange(addHost);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearAddHost(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveAddHost(this DockerContainerCreateSettings toolSettings, params string[] addHost)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(addHost);
            toolSettings.AddHostInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveAddHost(this DockerContainerCreateSettings toolSettings, IEnumerable<string> addHost)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(addHost);
            toolSettings.AddHostInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Attach
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Attach"/> to a new list</em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetAttach(this DockerContainerCreateSettings toolSettings, params string[] attach)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AttachInternal = attach.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Attach"/> to a new list</em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetAttach(this DockerContainerCreateSettings toolSettings, IEnumerable<string> attach)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AttachInternal = attach.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.Attach"/></em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddAttach(this DockerContainerCreateSettings toolSettings, params string[] attach)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AttachInternal.AddRange(attach);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.Attach"/></em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddAttach(this DockerContainerCreateSettings toolSettings, IEnumerable<string> attach)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AttachInternal.AddRange(attach);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.Attach"/></em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearAttach(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AttachInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.Attach"/></em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveAttach(this DockerContainerCreateSettings toolSettings, params string[] attach)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(attach);
            toolSettings.AttachInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.Attach"/></em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveAttach(this DockerContainerCreateSettings toolSettings, IEnumerable<string> attach)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(attach);
            toolSettings.AttachInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region BlkioWeight
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.BlkioWeight"/></em></p>
        ///   <p>Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetBlkioWeight(this DockerContainerCreateSettings toolSettings, int? blkioWeight)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeight = blkioWeight;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.BlkioWeight"/></em></p>
        ///   <p>Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetBlkioWeight(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeight = null;
            return toolSettings;
        }
        #endregion
        #region BlkioWeightDevice
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.BlkioWeightDevice"/> to a new list</em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetBlkioWeightDevice(this DockerContainerCreateSettings toolSettings, params string[] blkioWeightDevice)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeightDeviceInternal = blkioWeightDevice.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.BlkioWeightDevice"/> to a new list</em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetBlkioWeightDevice(this DockerContainerCreateSettings toolSettings, IEnumerable<string> blkioWeightDevice)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeightDeviceInternal = blkioWeightDevice.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.BlkioWeightDevice"/></em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddBlkioWeightDevice(this DockerContainerCreateSettings toolSettings, params string[] blkioWeightDevice)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeightDeviceInternal.AddRange(blkioWeightDevice);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.BlkioWeightDevice"/></em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddBlkioWeightDevice(this DockerContainerCreateSettings toolSettings, IEnumerable<string> blkioWeightDevice)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeightDeviceInternal.AddRange(blkioWeightDevice);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.BlkioWeightDevice"/></em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearBlkioWeightDevice(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeightDeviceInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.BlkioWeightDevice"/></em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveBlkioWeightDevice(this DockerContainerCreateSettings toolSettings, params string[] blkioWeightDevice)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(blkioWeightDevice);
            toolSettings.BlkioWeightDeviceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.BlkioWeightDevice"/></em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveBlkioWeightDevice(this DockerContainerCreateSettings toolSettings, IEnumerable<string> blkioWeightDevice)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(blkioWeightDevice);
            toolSettings.BlkioWeightDeviceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region CapAdd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.CapAdd"/> to a new list</em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetCapAdd(this DockerContainerCreateSettings toolSettings, params string[] capAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapAddInternal = capAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.CapAdd"/> to a new list</em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetCapAdd(this DockerContainerCreateSettings toolSettings, IEnumerable<string> capAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapAddInternal = capAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.CapAdd"/></em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddCapAdd(this DockerContainerCreateSettings toolSettings, params string[] capAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapAddInternal.AddRange(capAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.CapAdd"/></em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddCapAdd(this DockerContainerCreateSettings toolSettings, IEnumerable<string> capAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapAddInternal.AddRange(capAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.CapAdd"/></em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearCapAdd(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapAddInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.CapAdd"/></em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveCapAdd(this DockerContainerCreateSettings toolSettings, params string[] capAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(capAdd);
            toolSettings.CapAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.CapAdd"/></em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveCapAdd(this DockerContainerCreateSettings toolSettings, IEnumerable<string> capAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(capAdd);
            toolSettings.CapAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region CapDrop
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.CapDrop"/> to a new list</em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetCapDrop(this DockerContainerCreateSettings toolSettings, params string[] capDrop)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapDropInternal = capDrop.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.CapDrop"/> to a new list</em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetCapDrop(this DockerContainerCreateSettings toolSettings, IEnumerable<string> capDrop)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapDropInternal = capDrop.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.CapDrop"/></em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddCapDrop(this DockerContainerCreateSettings toolSettings, params string[] capDrop)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapDropInternal.AddRange(capDrop);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.CapDrop"/></em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddCapDrop(this DockerContainerCreateSettings toolSettings, IEnumerable<string> capDrop)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapDropInternal.AddRange(capDrop);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.CapDrop"/></em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearCapDrop(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapDropInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.CapDrop"/></em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveCapDrop(this DockerContainerCreateSettings toolSettings, params string[] capDrop)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(capDrop);
            toolSettings.CapDropInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.CapDrop"/></em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveCapDrop(this DockerContainerCreateSettings toolSettings, IEnumerable<string> capDrop)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(capDrop);
            toolSettings.CapDropInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region CgroupParent
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.CgroupParent"/></em></p>
        ///   <p>Optional parent cgroup for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetCgroupParent(this DockerContainerCreateSettings toolSettings, string cgroupParent)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CgroupParent = cgroupParent;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.CgroupParent"/></em></p>
        ///   <p>Optional parent cgroup for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetCgroupParent(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CgroupParent = null;
            return toolSettings;
        }
        #endregion
        #region Cidfile
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Cidfile"/></em></p>
        ///   <p>Write the container ID to the file.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetCidfile(this DockerContainerCreateSettings toolSettings, string cidfile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cidfile = cidfile;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Cidfile"/></em></p>
        ///   <p>Write the container ID to the file.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetCidfile(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cidfile = null;
            return toolSettings;
        }
        #endregion
        #region CpuCount
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.CpuCount"/></em></p>
        ///   <p>CPU count (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetCpuCount(this DockerContainerCreateSettings toolSettings, long? cpuCount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuCount = cpuCount;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.CpuCount"/></em></p>
        ///   <p>CPU count (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetCpuCount(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuCount = null;
            return toolSettings;
        }
        #endregion
        #region CpuPercent
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.CpuPercent"/></em></p>
        ///   <p>CPU percent (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetCpuPercent(this DockerContainerCreateSettings toolSettings, long? cpuPercent)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuPercent = cpuPercent;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.CpuPercent"/></em></p>
        ///   <p>CPU percent (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetCpuPercent(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuPercent = null;
            return toolSettings;
        }
        #endregion
        #region CpuPeriod
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.CpuPeriod"/></em></p>
        ///   <p>Limit CPU CFS (Completely Fair Scheduler) period.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetCpuPeriod(this DockerContainerCreateSettings toolSettings, long? cpuPeriod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuPeriod = cpuPeriod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.CpuPeriod"/></em></p>
        ///   <p>Limit CPU CFS (Completely Fair Scheduler) period.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetCpuPeriod(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuPeriod = null;
            return toolSettings;
        }
        #endregion
        #region CpuQuota
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.CpuQuota"/></em></p>
        ///   <p>Limit CPU CFS (Completely Fair Scheduler) quota.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetCpuQuota(this DockerContainerCreateSettings toolSettings, long? cpuQuota)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuQuota = cpuQuota;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.CpuQuota"/></em></p>
        ///   <p>Limit CPU CFS (Completely Fair Scheduler) quota.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetCpuQuota(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuQuota = null;
            return toolSettings;
        }
        #endregion
        #region CpuRtPeriod
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.CpuRtPeriod"/></em></p>
        ///   <p>Limit CPU real-time period in microseconds.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetCpuRtPeriod(this DockerContainerCreateSettings toolSettings, long? cpuRtPeriod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuRtPeriod = cpuRtPeriod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.CpuRtPeriod"/></em></p>
        ///   <p>Limit CPU real-time period in microseconds.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetCpuRtPeriod(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuRtPeriod = null;
            return toolSettings;
        }
        #endregion
        #region CpuRtRuntime
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.CpuRtRuntime"/></em></p>
        ///   <p>Limit CPU real-time runtime in microseconds.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetCpuRtRuntime(this DockerContainerCreateSettings toolSettings, long? cpuRtRuntime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuRtRuntime = cpuRtRuntime;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.CpuRtRuntime"/></em></p>
        ///   <p>Limit CPU real-time runtime in microseconds.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetCpuRtRuntime(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuRtRuntime = null;
            return toolSettings;
        }
        #endregion
        #region CpuShares
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.CpuShares"/></em></p>
        ///   <p>CPU shares (relative weight).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetCpuShares(this DockerContainerCreateSettings toolSettings, long? cpuShares)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuShares = cpuShares;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.CpuShares"/></em></p>
        ///   <p>CPU shares (relative weight).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetCpuShares(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuShares = null;
            return toolSettings;
        }
        #endregion
        #region Cpus
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Cpus"/></em></p>
        ///   <p>Number of CPUs.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetCpus(this DockerContainerCreateSettings toolSettings, decimal? cpus)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cpus = cpus;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Cpus"/></em></p>
        ///   <p>Number of CPUs.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetCpus(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cpus = null;
            return toolSettings;
        }
        #endregion
        #region CpusetCpus
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.CpusetCpus"/></em></p>
        ///   <p>CPUs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetCpusetCpus(this DockerContainerCreateSettings toolSettings, string cpusetCpus)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetCpus = cpusetCpus;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.CpusetCpus"/></em></p>
        ///   <p>CPUs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetCpusetCpus(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetCpus = null;
            return toolSettings;
        }
        #endregion
        #region CpusetMems
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.CpusetMems"/></em></p>
        ///   <p>MEMs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetCpusetMems(this DockerContainerCreateSettings toolSettings, string cpusetMems)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetMems = cpusetMems;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.CpusetMems"/></em></p>
        ///   <p>MEMs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetCpusetMems(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetMems = null;
            return toolSettings;
        }
        #endregion
        #region Device
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Device"/> to a new list</em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetDevice(this DockerContainerCreateSettings toolSettings, params string[] device)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceInternal = device.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Device"/> to a new list</em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetDevice(this DockerContainerCreateSettings toolSettings, IEnumerable<string> device)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceInternal = device.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.Device"/></em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddDevice(this DockerContainerCreateSettings toolSettings, params string[] device)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceInternal.AddRange(device);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.Device"/></em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddDevice(this DockerContainerCreateSettings toolSettings, IEnumerable<string> device)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceInternal.AddRange(device);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.Device"/></em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearDevice(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.Device"/></em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveDevice(this DockerContainerCreateSettings toolSettings, params string[] device)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(device);
            toolSettings.DeviceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.Device"/></em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveDevice(this DockerContainerCreateSettings toolSettings, IEnumerable<string> device)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(device);
            toolSettings.DeviceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DeviceCgroupRule
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.DeviceCgroupRule"/> to a new list</em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetDeviceCgroupRule(this DockerContainerCreateSettings toolSettings, params string[] deviceCgroupRule)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceCgroupRuleInternal = deviceCgroupRule.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.DeviceCgroupRule"/> to a new list</em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetDeviceCgroupRule(this DockerContainerCreateSettings toolSettings, IEnumerable<string> deviceCgroupRule)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceCgroupRuleInternal = deviceCgroupRule.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.DeviceCgroupRule"/></em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddDeviceCgroupRule(this DockerContainerCreateSettings toolSettings, params string[] deviceCgroupRule)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceCgroupRuleInternal.AddRange(deviceCgroupRule);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.DeviceCgroupRule"/></em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddDeviceCgroupRule(this DockerContainerCreateSettings toolSettings, IEnumerable<string> deviceCgroupRule)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceCgroupRuleInternal.AddRange(deviceCgroupRule);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.DeviceCgroupRule"/></em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearDeviceCgroupRule(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceCgroupRuleInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.DeviceCgroupRule"/></em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveDeviceCgroupRule(this DockerContainerCreateSettings toolSettings, params string[] deviceCgroupRule)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceCgroupRule);
            toolSettings.DeviceCgroupRuleInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.DeviceCgroupRule"/></em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveDeviceCgroupRule(this DockerContainerCreateSettings toolSettings, IEnumerable<string> deviceCgroupRule)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceCgroupRule);
            toolSettings.DeviceCgroupRuleInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DeviceReadBps
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.DeviceReadBps"/> to a new list</em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetDeviceReadBps(this DockerContainerCreateSettings toolSettings, params string[] deviceReadBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadBpsInternal = deviceReadBps.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.DeviceReadBps"/> to a new list</em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetDeviceReadBps(this DockerContainerCreateSettings toolSettings, IEnumerable<string> deviceReadBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadBpsInternal = deviceReadBps.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.DeviceReadBps"/></em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddDeviceReadBps(this DockerContainerCreateSettings toolSettings, params string[] deviceReadBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadBpsInternal.AddRange(deviceReadBps);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.DeviceReadBps"/></em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddDeviceReadBps(this DockerContainerCreateSettings toolSettings, IEnumerable<string> deviceReadBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadBpsInternal.AddRange(deviceReadBps);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.DeviceReadBps"/></em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearDeviceReadBps(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadBpsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.DeviceReadBps"/></em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveDeviceReadBps(this DockerContainerCreateSettings toolSettings, params string[] deviceReadBps)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceReadBps);
            toolSettings.DeviceReadBpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.DeviceReadBps"/></em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveDeviceReadBps(this DockerContainerCreateSettings toolSettings, IEnumerable<string> deviceReadBps)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceReadBps);
            toolSettings.DeviceReadBpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DeviceReadIops
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.DeviceReadIops"/> to a new list</em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetDeviceReadIops(this DockerContainerCreateSettings toolSettings, params string[] deviceReadIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadIopsInternal = deviceReadIops.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.DeviceReadIops"/> to a new list</em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetDeviceReadIops(this DockerContainerCreateSettings toolSettings, IEnumerable<string> deviceReadIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadIopsInternal = deviceReadIops.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.DeviceReadIops"/></em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddDeviceReadIops(this DockerContainerCreateSettings toolSettings, params string[] deviceReadIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadIopsInternal.AddRange(deviceReadIops);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.DeviceReadIops"/></em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddDeviceReadIops(this DockerContainerCreateSettings toolSettings, IEnumerable<string> deviceReadIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadIopsInternal.AddRange(deviceReadIops);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.DeviceReadIops"/></em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearDeviceReadIops(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadIopsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.DeviceReadIops"/></em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveDeviceReadIops(this DockerContainerCreateSettings toolSettings, params string[] deviceReadIops)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceReadIops);
            toolSettings.DeviceReadIopsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.DeviceReadIops"/></em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveDeviceReadIops(this DockerContainerCreateSettings toolSettings, IEnumerable<string> deviceReadIops)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceReadIops);
            toolSettings.DeviceReadIopsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DeviceWriteBps
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.DeviceWriteBps"/> to a new list</em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetDeviceWriteBps(this DockerContainerCreateSettings toolSettings, params string[] deviceWriteBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteBpsInternal = deviceWriteBps.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.DeviceWriteBps"/> to a new list</em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetDeviceWriteBps(this DockerContainerCreateSettings toolSettings, IEnumerable<string> deviceWriteBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteBpsInternal = deviceWriteBps.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.DeviceWriteBps"/></em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddDeviceWriteBps(this DockerContainerCreateSettings toolSettings, params string[] deviceWriteBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteBpsInternal.AddRange(deviceWriteBps);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.DeviceWriteBps"/></em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddDeviceWriteBps(this DockerContainerCreateSettings toolSettings, IEnumerable<string> deviceWriteBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteBpsInternal.AddRange(deviceWriteBps);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.DeviceWriteBps"/></em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearDeviceWriteBps(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteBpsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.DeviceWriteBps"/></em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveDeviceWriteBps(this DockerContainerCreateSettings toolSettings, params string[] deviceWriteBps)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceWriteBps);
            toolSettings.DeviceWriteBpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.DeviceWriteBps"/></em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveDeviceWriteBps(this DockerContainerCreateSettings toolSettings, IEnumerable<string> deviceWriteBps)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceWriteBps);
            toolSettings.DeviceWriteBpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DeviceWriteIops
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.DeviceWriteIops"/> to a new list</em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetDeviceWriteIops(this DockerContainerCreateSettings toolSettings, params string[] deviceWriteIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteIopsInternal = deviceWriteIops.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.DeviceWriteIops"/> to a new list</em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetDeviceWriteIops(this DockerContainerCreateSettings toolSettings, IEnumerable<string> deviceWriteIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteIopsInternal = deviceWriteIops.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.DeviceWriteIops"/></em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddDeviceWriteIops(this DockerContainerCreateSettings toolSettings, params string[] deviceWriteIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteIopsInternal.AddRange(deviceWriteIops);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.DeviceWriteIops"/></em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddDeviceWriteIops(this DockerContainerCreateSettings toolSettings, IEnumerable<string> deviceWriteIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteIopsInternal.AddRange(deviceWriteIops);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.DeviceWriteIops"/></em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearDeviceWriteIops(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteIopsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.DeviceWriteIops"/></em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveDeviceWriteIops(this DockerContainerCreateSettings toolSettings, params string[] deviceWriteIops)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceWriteIops);
            toolSettings.DeviceWriteIopsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.DeviceWriteIops"/></em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveDeviceWriteIops(this DockerContainerCreateSettings toolSettings, IEnumerable<string> deviceWriteIops)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceWriteIops);
            toolSettings.DeviceWriteIopsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DisableContentTrust
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetDisableContentTrust(this DockerContainerCreateSettings toolSettings, bool? disableContentTrust)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = disableContentTrust;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetDisableContentTrust(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerCreateSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings EnableDisableContentTrust(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerCreateSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings DisableDisableContentTrust(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerCreateSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ToggleDisableContentTrust(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = !toolSettings.DisableContentTrust;
            return toolSettings;
        }
        #endregion
        #region Dns
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Dns"/> to a new list</em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetDns(this DockerContainerCreateSettings toolSettings, params string[] dns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsInternal = dns.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Dns"/> to a new list</em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetDns(this DockerContainerCreateSettings toolSettings, IEnumerable<string> dns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsInternal = dns.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.Dns"/></em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddDns(this DockerContainerCreateSettings toolSettings, params string[] dns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsInternal.AddRange(dns);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.Dns"/></em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddDns(this DockerContainerCreateSettings toolSettings, IEnumerable<string> dns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsInternal.AddRange(dns);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.Dns"/></em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearDns(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.Dns"/></em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveDns(this DockerContainerCreateSettings toolSettings, params string[] dns)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dns);
            toolSettings.DnsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.Dns"/></em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveDns(this DockerContainerCreateSettings toolSettings, IEnumerable<string> dns)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dns);
            toolSettings.DnsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DnsOpt
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.DnsOpt"/> to a new list</em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetDnsOpt(this DockerContainerCreateSettings toolSettings, params string[] dnsOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptInternal = dnsOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.DnsOpt"/> to a new list</em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetDnsOpt(this DockerContainerCreateSettings toolSettings, IEnumerable<string> dnsOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptInternal = dnsOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.DnsOpt"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddDnsOpt(this DockerContainerCreateSettings toolSettings, params string[] dnsOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptInternal.AddRange(dnsOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.DnsOpt"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddDnsOpt(this DockerContainerCreateSettings toolSettings, IEnumerable<string> dnsOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptInternal.AddRange(dnsOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.DnsOpt"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearDnsOpt(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.DnsOpt"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveDnsOpt(this DockerContainerCreateSettings toolSettings, params string[] dnsOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsOpt);
            toolSettings.DnsOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.DnsOpt"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveDnsOpt(this DockerContainerCreateSettings toolSettings, IEnumerable<string> dnsOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsOpt);
            toolSettings.DnsOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DnsOption
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.DnsOption"/> to a new list</em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetDnsOption(this DockerContainerCreateSettings toolSettings, params string[] dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionInternal = dnsOption.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.DnsOption"/> to a new list</em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetDnsOption(this DockerContainerCreateSettings toolSettings, IEnumerable<string> dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionInternal = dnsOption.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.DnsOption"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddDnsOption(this DockerContainerCreateSettings toolSettings, params string[] dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionInternal.AddRange(dnsOption);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.DnsOption"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddDnsOption(this DockerContainerCreateSettings toolSettings, IEnumerable<string> dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionInternal.AddRange(dnsOption);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.DnsOption"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearDnsOption(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.DnsOption"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveDnsOption(this DockerContainerCreateSettings toolSettings, params string[] dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsOption);
            toolSettings.DnsOptionInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.DnsOption"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveDnsOption(this DockerContainerCreateSettings toolSettings, IEnumerable<string> dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsOption);
            toolSettings.DnsOptionInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DnsSearch
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.DnsSearch"/> to a new list</em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetDnsSearch(this DockerContainerCreateSettings toolSettings, params string[] dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchInternal = dnsSearch.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.DnsSearch"/> to a new list</em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetDnsSearch(this DockerContainerCreateSettings toolSettings, IEnumerable<string> dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchInternal = dnsSearch.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.DnsSearch"/></em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddDnsSearch(this DockerContainerCreateSettings toolSettings, params string[] dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchInternal.AddRange(dnsSearch);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.DnsSearch"/></em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddDnsSearch(this DockerContainerCreateSettings toolSettings, IEnumerable<string> dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchInternal.AddRange(dnsSearch);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.DnsSearch"/></em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearDnsSearch(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.DnsSearch"/></em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveDnsSearch(this DockerContainerCreateSettings toolSettings, params string[] dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsSearch);
            toolSettings.DnsSearchInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.DnsSearch"/></em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveDnsSearch(this DockerContainerCreateSettings toolSettings, IEnumerable<string> dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsSearch);
            toolSettings.DnsSearchInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Domainname
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Domainname"/></em></p>
        ///   <p>Container NIS domain name.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetDomainname(this DockerContainerCreateSettings toolSettings, string domainname)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Domainname = domainname;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Domainname"/></em></p>
        ///   <p>Container NIS domain name.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetDomainname(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Domainname = null;
            return toolSettings;
        }
        #endregion
        #region Entrypoint
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Entrypoint"/></em></p>
        ///   <p>Overwrite the default ENTRYPOINT of the image.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetEntrypoint(this DockerContainerCreateSettings toolSettings, string entrypoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Entrypoint = entrypoint;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Entrypoint"/></em></p>
        ///   <p>Overwrite the default ENTRYPOINT of the image.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetEntrypoint(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Entrypoint = null;
            return toolSettings;
        }
        #endregion
        #region Env
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Env"/> to a new list</em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetEnv(this DockerContainerCreateSettings toolSettings, params string[] env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal = env.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Env"/> to a new list</em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetEnv(this DockerContainerCreateSettings toolSettings, IEnumerable<string> env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal = env.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddEnv(this DockerContainerCreateSettings toolSettings, params string[] env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal.AddRange(env);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddEnv(this DockerContainerCreateSettings toolSettings, IEnumerable<string> env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal.AddRange(env);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearEnv(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveEnv(this DockerContainerCreateSettings toolSettings, params string[] env)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(env);
            toolSettings.EnvInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveEnv(this DockerContainerCreateSettings toolSettings, IEnumerable<string> env)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(env);
            toolSettings.EnvInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region EnvFile
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.EnvFile"/> to a new list</em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetEnvFile(this DockerContainerCreateSettings toolSettings, params string[] envFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvFileInternal = envFile.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.EnvFile"/> to a new list</em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetEnvFile(this DockerContainerCreateSettings toolSettings, IEnumerable<string> envFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvFileInternal = envFile.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.EnvFile"/></em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddEnvFile(this DockerContainerCreateSettings toolSettings, params string[] envFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvFileInternal.AddRange(envFile);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.EnvFile"/></em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddEnvFile(this DockerContainerCreateSettings toolSettings, IEnumerable<string> envFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvFileInternal.AddRange(envFile);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.EnvFile"/></em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearEnvFile(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvFileInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.EnvFile"/></em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveEnvFile(this DockerContainerCreateSettings toolSettings, params string[] envFile)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(envFile);
            toolSettings.EnvFileInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.EnvFile"/></em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveEnvFile(this DockerContainerCreateSettings toolSettings, IEnumerable<string> envFile)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(envFile);
            toolSettings.EnvFileInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Expose
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Expose"/> to a new list</em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetExpose(this DockerContainerCreateSettings toolSettings, params string[] expose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposeInternal = expose.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Expose"/> to a new list</em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetExpose(this DockerContainerCreateSettings toolSettings, IEnumerable<string> expose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposeInternal = expose.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.Expose"/></em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddExpose(this DockerContainerCreateSettings toolSettings, params string[] expose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposeInternal.AddRange(expose);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.Expose"/></em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddExpose(this DockerContainerCreateSettings toolSettings, IEnumerable<string> expose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposeInternal.AddRange(expose);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.Expose"/></em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearExpose(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposeInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.Expose"/></em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveExpose(this DockerContainerCreateSettings toolSettings, params string[] expose)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(expose);
            toolSettings.ExposeInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.Expose"/></em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveExpose(this DockerContainerCreateSettings toolSettings, IEnumerable<string> expose)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(expose);
            toolSettings.ExposeInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Gpus
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Gpus"/></em></p>
        ///   <p>GPU devices to add to the container ('all' to pass all GPUs).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetGpus(this DockerContainerCreateSettings toolSettings, string gpus)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Gpus = gpus;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Gpus"/></em></p>
        ///   <p>GPU devices to add to the container ('all' to pass all GPUs).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetGpus(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Gpus = null;
            return toolSettings;
        }
        #endregion
        #region GroupAdd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.GroupAdd"/> to a new list</em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetGroupAdd(this DockerContainerCreateSettings toolSettings, params string[] groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupAddInternal = groupAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.GroupAdd"/> to a new list</em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetGroupAdd(this DockerContainerCreateSettings toolSettings, IEnumerable<string> groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupAddInternal = groupAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.GroupAdd"/></em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddGroupAdd(this DockerContainerCreateSettings toolSettings, params string[] groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupAddInternal.AddRange(groupAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.GroupAdd"/></em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddGroupAdd(this DockerContainerCreateSettings toolSettings, IEnumerable<string> groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupAddInternal.AddRange(groupAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.GroupAdd"/></em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearGroupAdd(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupAddInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.GroupAdd"/></em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveGroupAdd(this DockerContainerCreateSettings toolSettings, params string[] groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(groupAdd);
            toolSettings.GroupAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.GroupAdd"/></em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveGroupAdd(this DockerContainerCreateSettings toolSettings, IEnumerable<string> groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(groupAdd);
            toolSettings.GroupAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region HealthCmd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.HealthCmd"/></em></p>
        ///   <p>Command to run to check health.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetHealthCmd(this DockerContainerCreateSettings toolSettings, string healthCmd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthCmd = healthCmd;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.HealthCmd"/></em></p>
        ///   <p>Command to run to check health.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetHealthCmd(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthCmd = null;
            return toolSettings;
        }
        #endregion
        #region HealthInterval
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.HealthInterval"/></em></p>
        ///   <p>Time between running the check (ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetHealthInterval(this DockerContainerCreateSettings toolSettings, string healthInterval)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthInterval = healthInterval;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.HealthInterval"/></em></p>
        ///   <p>Time between running the check (ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetHealthInterval(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthInterval = null;
            return toolSettings;
        }
        #endregion
        #region HealthRetries
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.HealthRetries"/></em></p>
        ///   <p>Consecutive failures needed to report unhealthy.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetHealthRetries(this DockerContainerCreateSettings toolSettings, int? healthRetries)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthRetries = healthRetries;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.HealthRetries"/></em></p>
        ///   <p>Consecutive failures needed to report unhealthy.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetHealthRetries(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthRetries = null;
            return toolSettings;
        }
        #endregion
        #region HealthStartPeriod
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.HealthStartPeriod"/></em></p>
        ///   <p>Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetHealthStartPeriod(this DockerContainerCreateSettings toolSettings, string healthStartPeriod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthStartPeriod = healthStartPeriod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.HealthStartPeriod"/></em></p>
        ///   <p>Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetHealthStartPeriod(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthStartPeriod = null;
            return toolSettings;
        }
        #endregion
        #region HealthTimeout
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.HealthTimeout"/></em></p>
        ///   <p>Maximum time to allow one check to run (ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetHealthTimeout(this DockerContainerCreateSettings toolSettings, string healthTimeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthTimeout = healthTimeout;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.HealthTimeout"/></em></p>
        ///   <p>Maximum time to allow one check to run (ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetHealthTimeout(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthTimeout = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Help"/></em></p>
        ///   <p>Print usage.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetHelp(this DockerContainerCreateSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Help"/></em></p>
        ///   <p>Print usage.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetHelp(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerCreateSettings.Help"/></em></p>
        ///   <p>Print usage.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings EnableHelp(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerCreateSettings.Help"/></em></p>
        ///   <p>Print usage.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings DisableHelp(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerCreateSettings.Help"/></em></p>
        ///   <p>Print usage.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ToggleHelp(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region Hostname
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Hostname"/></em></p>
        ///   <p>Container host name.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetHostname(this DockerContainerCreateSettings toolSettings, string hostname)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Hostname = hostname;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Hostname"/></em></p>
        ///   <p>Container host name.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetHostname(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Hostname = null;
            return toolSettings;
        }
        #endregion
        #region Init
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Init"/></em></p>
        ///   <p>Run an init inside the container that forwards signals and reaps processes.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetInit(this DockerContainerCreateSettings toolSettings, bool? init)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = init;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Init"/></em></p>
        ///   <p>Run an init inside the container that forwards signals and reaps processes.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetInit(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerCreateSettings.Init"/></em></p>
        ///   <p>Run an init inside the container that forwards signals and reaps processes.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings EnableInit(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerCreateSettings.Init"/></em></p>
        ///   <p>Run an init inside the container that forwards signals and reaps processes.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings DisableInit(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerCreateSettings.Init"/></em></p>
        ///   <p>Run an init inside the container that forwards signals and reaps processes.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ToggleInit(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = !toolSettings.Init;
            return toolSettings;
        }
        #endregion
        #region Interactive
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetInteractive(this DockerContainerCreateSettings toolSettings, bool? interactive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = interactive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetInteractive(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerCreateSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings EnableInteractive(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerCreateSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings DisableInteractive(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerCreateSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ToggleInteractive(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = !toolSettings.Interactive;
            return toolSettings;
        }
        #endregion
        #region IoMaxbandwidth
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.IoMaxbandwidth"/></em></p>
        ///   <p>Maximum IO bandwidth limit for the system drive (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetIoMaxbandwidth(this DockerContainerCreateSettings toolSettings, long? ioMaxbandwidth)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IoMaxbandwidth = ioMaxbandwidth;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.IoMaxbandwidth"/></em></p>
        ///   <p>Maximum IO bandwidth limit for the system drive (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetIoMaxbandwidth(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IoMaxbandwidth = null;
            return toolSettings;
        }
        #endregion
        #region IoMaxiops
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.IoMaxiops"/></em></p>
        ///   <p>Maximum IOps limit for the system drive (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetIoMaxiops(this DockerContainerCreateSettings toolSettings, int? ioMaxiops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IoMaxiops = ioMaxiops;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.IoMaxiops"/></em></p>
        ///   <p>Maximum IOps limit for the system drive (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetIoMaxiops(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IoMaxiops = null;
            return toolSettings;
        }
        #endregion
        #region Ip
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Ip"/></em></p>
        ///   <p>IPv4 address (e.g., 172.30.100.104).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetIp(this DockerContainerCreateSettings toolSettings, string ip)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip = ip;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Ip"/></em></p>
        ///   <p>IPv4 address (e.g., 172.30.100.104).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetIp(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip = null;
            return toolSettings;
        }
        #endregion
        #region Ip6
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Ip6"/></em></p>
        ///   <p>IPv6 address (e.g., 2001:db8::33).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetIp6(this DockerContainerCreateSettings toolSettings, string ip6)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip6 = ip6;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Ip6"/></em></p>
        ///   <p>IPv6 address (e.g., 2001:db8::33).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetIp6(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip6 = null;
            return toolSettings;
        }
        #endregion
        #region Ipc
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Ipc"/></em></p>
        ///   <p>IPC mode to use.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetIpc(this DockerContainerCreateSettings toolSettings, string ipc)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ipc = ipc;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Ipc"/></em></p>
        ///   <p>IPC mode to use.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetIpc(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ipc = null;
            return toolSettings;
        }
        #endregion
        #region Isolation
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Isolation"/></em></p>
        ///   <p>Container isolation technology.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetIsolation(this DockerContainerCreateSettings toolSettings, string isolation)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Isolation = isolation;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Isolation"/></em></p>
        ///   <p>Container isolation technology.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetIsolation(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Isolation = null;
            return toolSettings;
        }
        #endregion
        #region KernelMemory
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.KernelMemory"/></em></p>
        ///   <p>Kernel memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetKernelMemory(this DockerContainerCreateSettings toolSettings, long? kernelMemory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KernelMemory = kernelMemory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.KernelMemory"/></em></p>
        ///   <p>Kernel memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetKernelMemory(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KernelMemory = null;
            return toolSettings;
        }
        #endregion
        #region Label
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Label"/> to a new list</em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetLabel(this DockerContainerCreateSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal = label.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Label"/> to a new list</em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetLabel(this DockerContainerCreateSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal = label.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.Label"/></em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddLabel(this DockerContainerCreateSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.AddRange(label);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.Label"/></em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddLabel(this DockerContainerCreateSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.AddRange(label);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.Label"/></em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearLabel(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.Label"/></em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveLabel(this DockerContainerCreateSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(label);
            toolSettings.LabelInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.Label"/></em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveLabel(this DockerContainerCreateSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(label);
            toolSettings.LabelInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region LabelFile
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.LabelFile"/> to a new list</em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetLabelFile(this DockerContainerCreateSettings toolSettings, params string[] labelFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelFileInternal = labelFile.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.LabelFile"/> to a new list</em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetLabelFile(this DockerContainerCreateSettings toolSettings, IEnumerable<string> labelFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelFileInternal = labelFile.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.LabelFile"/></em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddLabelFile(this DockerContainerCreateSettings toolSettings, params string[] labelFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelFileInternal.AddRange(labelFile);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.LabelFile"/></em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddLabelFile(this DockerContainerCreateSettings toolSettings, IEnumerable<string> labelFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelFileInternal.AddRange(labelFile);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.LabelFile"/></em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearLabelFile(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelFileInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.LabelFile"/></em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveLabelFile(this DockerContainerCreateSettings toolSettings, params string[] labelFile)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(labelFile);
            toolSettings.LabelFileInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.LabelFile"/></em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveLabelFile(this DockerContainerCreateSettings toolSettings, IEnumerable<string> labelFile)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(labelFile);
            toolSettings.LabelFileInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Link
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Link"/> to a new list</em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetLink(this DockerContainerCreateSettings toolSettings, params string[] link)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkInternal = link.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Link"/> to a new list</em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetLink(this DockerContainerCreateSettings toolSettings, IEnumerable<string> link)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkInternal = link.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.Link"/></em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddLink(this DockerContainerCreateSettings toolSettings, params string[] link)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkInternal.AddRange(link);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.Link"/></em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddLink(this DockerContainerCreateSettings toolSettings, IEnumerable<string> link)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkInternal.AddRange(link);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.Link"/></em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearLink(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.Link"/></em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveLink(this DockerContainerCreateSettings toolSettings, params string[] link)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(link);
            toolSettings.LinkInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.Link"/></em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveLink(this DockerContainerCreateSettings toolSettings, IEnumerable<string> link)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(link);
            toolSettings.LinkInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region LinkLocalIp
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.LinkLocalIp"/> to a new list</em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetLinkLocalIp(this DockerContainerCreateSettings toolSettings, params string[] linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkLocalIpInternal = linkLocalIp.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.LinkLocalIp"/> to a new list</em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetLinkLocalIp(this DockerContainerCreateSettings toolSettings, IEnumerable<string> linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkLocalIpInternal = linkLocalIp.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.LinkLocalIp"/></em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddLinkLocalIp(this DockerContainerCreateSettings toolSettings, params string[] linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkLocalIpInternal.AddRange(linkLocalIp);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.LinkLocalIp"/></em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddLinkLocalIp(this DockerContainerCreateSettings toolSettings, IEnumerable<string> linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkLocalIpInternal.AddRange(linkLocalIp);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.LinkLocalIp"/></em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearLinkLocalIp(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkLocalIpInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.LinkLocalIp"/></em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveLinkLocalIp(this DockerContainerCreateSettings toolSettings, params string[] linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(linkLocalIp);
            toolSettings.LinkLocalIpInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.LinkLocalIp"/></em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveLinkLocalIp(this DockerContainerCreateSettings toolSettings, IEnumerable<string> linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(linkLocalIp);
            toolSettings.LinkLocalIpInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region LogDriver
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.LogDriver"/></em></p>
        ///   <p>Logging driver for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetLogDriver(this DockerContainerCreateSettings toolSettings, string logDriver)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogDriver = logDriver;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.LogDriver"/></em></p>
        ///   <p>Logging driver for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetLogDriver(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogDriver = null;
            return toolSettings;
        }
        #endregion
        #region LogOpt
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.LogOpt"/> to a new list</em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetLogOpt(this DockerContainerCreateSettings toolSettings, params string[] logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal = logOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.LogOpt"/> to a new list</em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetLogOpt(this DockerContainerCreateSettings toolSettings, IEnumerable<string> logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal = logOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.LogOpt"/></em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddLogOpt(this DockerContainerCreateSettings toolSettings, params string[] logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal.AddRange(logOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.LogOpt"/></em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddLogOpt(this DockerContainerCreateSettings toolSettings, IEnumerable<string> logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal.AddRange(logOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.LogOpt"/></em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearLogOpt(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.LogOpt"/></em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveLogOpt(this DockerContainerCreateSettings toolSettings, params string[] logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(logOpt);
            toolSettings.LogOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.LogOpt"/></em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveLogOpt(this DockerContainerCreateSettings toolSettings, IEnumerable<string> logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(logOpt);
            toolSettings.LogOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region MacAddress
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.MacAddress"/></em></p>
        ///   <p>Container MAC address (e.g., 92:d0:c6:0a:29:33).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetMacAddress(this DockerContainerCreateSettings toolSettings, string macAddress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MacAddress = macAddress;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.MacAddress"/></em></p>
        ///   <p>Container MAC address (e.g., 92:d0:c6:0a:29:33).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetMacAddress(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MacAddress = null;
            return toolSettings;
        }
        #endregion
        #region Memory
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Memory"/></em></p>
        ///   <p>Memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetMemory(this DockerContainerCreateSettings toolSettings, long? memory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Memory = memory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Memory"/></em></p>
        ///   <p>Memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetMemory(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Memory = null;
            return toolSettings;
        }
        #endregion
        #region MemoryReservation
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.MemoryReservation"/></em></p>
        ///   <p>Memory soft limit.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetMemoryReservation(this DockerContainerCreateSettings toolSettings, long? memoryReservation)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemoryReservation = memoryReservation;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.MemoryReservation"/></em></p>
        ///   <p>Memory soft limit.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetMemoryReservation(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemoryReservation = null;
            return toolSettings;
        }
        #endregion
        #region MemorySwap
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.MemorySwap"/></em></p>
        ///   <p>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetMemorySwap(this DockerContainerCreateSettings toolSettings, long? memorySwap)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemorySwap = memorySwap;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.MemorySwap"/></em></p>
        ///   <p>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetMemorySwap(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemorySwap = null;
            return toolSettings;
        }
        #endregion
        #region MemorySwappiness
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.MemorySwappiness"/></em></p>
        ///   <p>Tune container memory swappiness (0 to 100).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetMemorySwappiness(this DockerContainerCreateSettings toolSettings, long? memorySwappiness)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemorySwappiness = memorySwappiness;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.MemorySwappiness"/></em></p>
        ///   <p>Tune container memory swappiness (0 to 100).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetMemorySwappiness(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemorySwappiness = null;
            return toolSettings;
        }
        #endregion
        #region Mount
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Mount"/></em></p>
        ///   <p>Attach a filesystem mount to the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetMount(this DockerContainerCreateSettings toolSettings, string mount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Mount = mount;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Mount"/></em></p>
        ///   <p>Attach a filesystem mount to the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetMount(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Mount = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Name"/></em></p>
        ///   <p>Assign a name to the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetName(this DockerContainerCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Name"/></em></p>
        ///   <p>Assign a name to the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetName(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Net
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Net"/></em></p>
        ///   <p>Connect a container to a network.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetNet(this DockerContainerCreateSettings toolSettings, string net)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Net = net;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Net"/></em></p>
        ///   <p>Connect a container to a network.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetNet(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Net = null;
            return toolSettings;
        }
        #endregion
        #region NetAlias
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.NetAlias"/> to a new list</em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetNetAlias(this DockerContainerCreateSettings toolSettings, params string[] netAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetAliasInternal = netAlias.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.NetAlias"/> to a new list</em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetNetAlias(this DockerContainerCreateSettings toolSettings, IEnumerable<string> netAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetAliasInternal = netAlias.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.NetAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddNetAlias(this DockerContainerCreateSettings toolSettings, params string[] netAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetAliasInternal.AddRange(netAlias);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.NetAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddNetAlias(this DockerContainerCreateSettings toolSettings, IEnumerable<string> netAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetAliasInternal.AddRange(netAlias);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.NetAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearNetAlias(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetAliasInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.NetAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveNetAlias(this DockerContainerCreateSettings toolSettings, params string[] netAlias)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(netAlias);
            toolSettings.NetAliasInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.NetAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveNetAlias(this DockerContainerCreateSettings toolSettings, IEnumerable<string> netAlias)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(netAlias);
            toolSettings.NetAliasInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Network
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Network"/></em></p>
        ///   <p>Connect a container to a network.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetNetwork(this DockerContainerCreateSettings toolSettings, string network)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Network = network;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Network"/></em></p>
        ///   <p>Connect a container to a network.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetNetwork(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Network = null;
            return toolSettings;
        }
        #endregion
        #region NetworkAlias
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.NetworkAlias"/> to a new list</em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetNetworkAlias(this DockerContainerCreateSettings toolSettings, params string[] networkAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkAliasInternal = networkAlias.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.NetworkAlias"/> to a new list</em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetNetworkAlias(this DockerContainerCreateSettings toolSettings, IEnumerable<string> networkAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkAliasInternal = networkAlias.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.NetworkAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddNetworkAlias(this DockerContainerCreateSettings toolSettings, params string[] networkAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkAliasInternal.AddRange(networkAlias);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.NetworkAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddNetworkAlias(this DockerContainerCreateSettings toolSettings, IEnumerable<string> networkAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkAliasInternal.AddRange(networkAlias);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.NetworkAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearNetworkAlias(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkAliasInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.NetworkAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveNetworkAlias(this DockerContainerCreateSettings toolSettings, params string[] networkAlias)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(networkAlias);
            toolSettings.NetworkAliasInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.NetworkAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveNetworkAlias(this DockerContainerCreateSettings toolSettings, IEnumerable<string> networkAlias)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(networkAlias);
            toolSettings.NetworkAliasInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region NoHealthcheck
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetNoHealthcheck(this DockerContainerCreateSettings toolSettings, bool? noHealthcheck)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = noHealthcheck;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetNoHealthcheck(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerCreateSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings EnableNoHealthcheck(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerCreateSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings DisableNoHealthcheck(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerCreateSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ToggleNoHealthcheck(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = !toolSettings.NoHealthcheck;
            return toolSettings;
        }
        #endregion
        #region OomKillDisable
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.OomKillDisable"/></em></p>
        ///   <p>Disable OOM Killer.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetOomKillDisable(this DockerContainerCreateSettings toolSettings, bool? oomKillDisable)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomKillDisable = oomKillDisable;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.OomKillDisable"/></em></p>
        ///   <p>Disable OOM Killer.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetOomKillDisable(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomKillDisable = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerCreateSettings.OomKillDisable"/></em></p>
        ///   <p>Disable OOM Killer.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings EnableOomKillDisable(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomKillDisable = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerCreateSettings.OomKillDisable"/></em></p>
        ///   <p>Disable OOM Killer.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings DisableOomKillDisable(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomKillDisable = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerCreateSettings.OomKillDisable"/></em></p>
        ///   <p>Disable OOM Killer.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ToggleOomKillDisable(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomKillDisable = !toolSettings.OomKillDisable;
            return toolSettings;
        }
        #endregion
        #region OomScoreAdj
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.OomScoreAdj"/></em></p>
        ///   <p>Tune host's OOM preferences (-1000 to 1000).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetOomScoreAdj(this DockerContainerCreateSettings toolSettings, int? oomScoreAdj)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomScoreAdj = oomScoreAdj;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.OomScoreAdj"/></em></p>
        ///   <p>Tune host's OOM preferences (-1000 to 1000).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetOomScoreAdj(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomScoreAdj = null;
            return toolSettings;
        }
        #endregion
        #region Pid
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Pid"/></em></p>
        ///   <p>PID namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetPid(this DockerContainerCreateSettings toolSettings, string pid)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pid = pid;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Pid"/></em></p>
        ///   <p>PID namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetPid(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pid = null;
            return toolSettings;
        }
        #endregion
        #region PidsLimit
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.PidsLimit"/></em></p>
        ///   <p>Tune container pids limit (set -1 for unlimited).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetPidsLimit(this DockerContainerCreateSettings toolSettings, long? pidsLimit)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PidsLimit = pidsLimit;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.PidsLimit"/></em></p>
        ///   <p>Tune container pids limit (set -1 for unlimited).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetPidsLimit(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PidsLimit = null;
            return toolSettings;
        }
        #endregion
        #region Platform
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Platform"/></em></p>
        ///   <p>Set platform if server is multi-platform capable.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetPlatform(this DockerContainerCreateSettings toolSettings, string platform)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = platform;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Platform"/></em></p>
        ///   <p>Set platform if server is multi-platform capable.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetPlatform(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = null;
            return toolSettings;
        }
        #endregion
        #region Privileged
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to this container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetPrivileged(this DockerContainerCreateSettings toolSettings, bool? privileged)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = privileged;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to this container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetPrivileged(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerCreateSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to this container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings EnablePrivileged(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerCreateSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to this container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings DisablePrivileged(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerCreateSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to this container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings TogglePrivileged(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = !toolSettings.Privileged;
            return toolSettings;
        }
        #endregion
        #region Publish
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Publish"/> to a new list</em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetPublish(this DockerContainerCreateSettings toolSettings, params string[] publish)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishInternal = publish.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Publish"/> to a new list</em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetPublish(this DockerContainerCreateSettings toolSettings, IEnumerable<string> publish)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishInternal = publish.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.Publish"/></em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddPublish(this DockerContainerCreateSettings toolSettings, params string[] publish)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishInternal.AddRange(publish);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.Publish"/></em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddPublish(this DockerContainerCreateSettings toolSettings, IEnumerable<string> publish)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishInternal.AddRange(publish);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.Publish"/></em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearPublish(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.Publish"/></em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemovePublish(this DockerContainerCreateSettings toolSettings, params string[] publish)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(publish);
            toolSettings.PublishInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.Publish"/></em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemovePublish(this DockerContainerCreateSettings toolSettings, IEnumerable<string> publish)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(publish);
            toolSettings.PublishInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region PublishAll
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.PublishAll"/></em></p>
        ///   <p>Publish all exposed ports to random ports.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetPublishAll(this DockerContainerCreateSettings toolSettings, bool? publishAll)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishAll = publishAll;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.PublishAll"/></em></p>
        ///   <p>Publish all exposed ports to random ports.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetPublishAll(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishAll = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerCreateSettings.PublishAll"/></em></p>
        ///   <p>Publish all exposed ports to random ports.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings EnablePublishAll(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishAll = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerCreateSettings.PublishAll"/></em></p>
        ///   <p>Publish all exposed ports to random ports.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings DisablePublishAll(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishAll = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerCreateSettings.PublishAll"/></em></p>
        ///   <p>Publish all exposed ports to random ports.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings TogglePublishAll(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishAll = !toolSettings.PublishAll;
            return toolSettings;
        }
        #endregion
        #region ReadOnly
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetReadOnly(this DockerContainerCreateSettings toolSettings, bool? readOnly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = readOnly;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetReadOnly(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerCreateSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings EnableReadOnly(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerCreateSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings DisableReadOnly(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerCreateSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ToggleReadOnly(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = !toolSettings.ReadOnly;
            return toolSettings;
        }
        #endregion
        #region Restart
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Restart"/></em></p>
        ///   <p>Restart policy to apply when a container exits.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetRestart(this DockerContainerCreateSettings toolSettings, string restart)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Restart = restart;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Restart"/></em></p>
        ///   <p>Restart policy to apply when a container exits.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetRestart(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Restart = null;
            return toolSettings;
        }
        #endregion
        #region Rm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Rm"/></em></p>
        ///   <p>Automatically remove the container when it exits.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetRm(this DockerContainerCreateSettings toolSettings, bool? rm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = rm;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Rm"/></em></p>
        ///   <p>Automatically remove the container when it exits.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetRm(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerCreateSettings.Rm"/></em></p>
        ///   <p>Automatically remove the container when it exits.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings EnableRm(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerCreateSettings.Rm"/></em></p>
        ///   <p>Automatically remove the container when it exits.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings DisableRm(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerCreateSettings.Rm"/></em></p>
        ///   <p>Automatically remove the container when it exits.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ToggleRm(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = !toolSettings.Rm;
            return toolSettings;
        }
        #endregion
        #region Runtime
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Runtime"/></em></p>
        ///   <p>Runtime to use for this container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetRuntime(this DockerContainerCreateSettings toolSettings, string runtime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Runtime = runtime;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Runtime"/></em></p>
        ///   <p>Runtime to use for this container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetRuntime(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Runtime = null;
            return toolSettings;
        }
        #endregion
        #region SecurityOpt
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.SecurityOpt"/> to a new list</em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetSecurityOpt(this DockerContainerCreateSettings toolSettings, params string[] securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal = securityOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.SecurityOpt"/> to a new list</em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetSecurityOpt(this DockerContainerCreateSettings toolSettings, IEnumerable<string> securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal = securityOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.SecurityOpt"/></em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddSecurityOpt(this DockerContainerCreateSettings toolSettings, params string[] securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal.AddRange(securityOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.SecurityOpt"/></em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddSecurityOpt(this DockerContainerCreateSettings toolSettings, IEnumerable<string> securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal.AddRange(securityOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.SecurityOpt"/></em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearSecurityOpt(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.SecurityOpt"/></em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveSecurityOpt(this DockerContainerCreateSettings toolSettings, params string[] securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(securityOpt);
            toolSettings.SecurityOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.SecurityOpt"/></em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveSecurityOpt(this DockerContainerCreateSettings toolSettings, IEnumerable<string> securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(securityOpt);
            toolSettings.SecurityOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ShmSize
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.ShmSize"/></em></p>
        ///   <p>Size of /dev/shm.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetShmSize(this DockerContainerCreateSettings toolSettings, long? shmSize)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShmSize = shmSize;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.ShmSize"/></em></p>
        ///   <p>Size of /dev/shm.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetShmSize(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShmSize = null;
            return toolSettings;
        }
        #endregion
        #region StopSignal
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.StopSignal"/></em></p>
        ///   <p>Signal to stop a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetStopSignal(this DockerContainerCreateSettings toolSettings, string stopSignal)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StopSignal = stopSignal;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.StopSignal"/></em></p>
        ///   <p>Signal to stop a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetStopSignal(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StopSignal = null;
            return toolSettings;
        }
        #endregion
        #region StopTimeout
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.StopTimeout"/></em></p>
        ///   <p>Timeout (in seconds) to stop a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetStopTimeout(this DockerContainerCreateSettings toolSettings, int? stopTimeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StopTimeout = stopTimeout;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.StopTimeout"/></em></p>
        ///   <p>Timeout (in seconds) to stop a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetStopTimeout(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StopTimeout = null;
            return toolSettings;
        }
        #endregion
        #region StorageOpt
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.StorageOpt"/> to a new list</em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetStorageOpt(this DockerContainerCreateSettings toolSettings, params string[] storageOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageOptInternal = storageOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.StorageOpt"/> to a new list</em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetStorageOpt(this DockerContainerCreateSettings toolSettings, IEnumerable<string> storageOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageOptInternal = storageOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.StorageOpt"/></em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddStorageOpt(this DockerContainerCreateSettings toolSettings, params string[] storageOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageOptInternal.AddRange(storageOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.StorageOpt"/></em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddStorageOpt(this DockerContainerCreateSettings toolSettings, IEnumerable<string> storageOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageOptInternal.AddRange(storageOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.StorageOpt"/></em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearStorageOpt(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageOptInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.StorageOpt"/></em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveStorageOpt(this DockerContainerCreateSettings toolSettings, params string[] storageOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(storageOpt);
            toolSettings.StorageOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.StorageOpt"/></em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveStorageOpt(this DockerContainerCreateSettings toolSettings, IEnumerable<string> storageOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(storageOpt);
            toolSettings.StorageOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Sysctl
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Sysctl"/> to a new dictionary</em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetSysctl(this DockerContainerCreateSettings toolSettings, IDictionary<string, string> sysctl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlInternal = sysctl.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.Sysctl"/></em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearSysctl(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds a new key-value-pair <see cref="DockerContainerCreateSettings.Sysctl"/></em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddSysctl(this DockerContainerCreateSettings toolSettings, string sysctlKey, string sysctlValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlInternal.Add(sysctlKey, sysctlValue);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes a key-value-pair from <see cref="DockerContainerCreateSettings.Sysctl"/></em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveSysctl(this DockerContainerCreateSettings toolSettings, string sysctlKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlInternal.Remove(sysctlKey);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets a key-value-pair in <see cref="DockerContainerCreateSettings.Sysctl"/></em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetSysctl(this DockerContainerCreateSettings toolSettings, string sysctlKey, string sysctlValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlInternal[sysctlKey] = sysctlValue;
            return toolSettings;
        }
        #endregion
        #region Tmpfs
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Tmpfs"/> to a new list</em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetTmpfs(this DockerContainerCreateSettings toolSettings, params string[] tmpfs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TmpfsInternal = tmpfs.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Tmpfs"/> to a new list</em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetTmpfs(this DockerContainerCreateSettings toolSettings, IEnumerable<string> tmpfs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TmpfsInternal = tmpfs.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.Tmpfs"/></em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddTmpfs(this DockerContainerCreateSettings toolSettings, params string[] tmpfs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TmpfsInternal.AddRange(tmpfs);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.Tmpfs"/></em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddTmpfs(this DockerContainerCreateSettings toolSettings, IEnumerable<string> tmpfs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TmpfsInternal.AddRange(tmpfs);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.Tmpfs"/></em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearTmpfs(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TmpfsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.Tmpfs"/></em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveTmpfs(this DockerContainerCreateSettings toolSettings, params string[] tmpfs)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(tmpfs);
            toolSettings.TmpfsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.Tmpfs"/></em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveTmpfs(this DockerContainerCreateSettings toolSettings, IEnumerable<string> tmpfs)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(tmpfs);
            toolSettings.TmpfsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Tty
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetTty(this DockerContainerCreateSettings toolSettings, bool? tty)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = tty;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetTty(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerCreateSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings EnableTty(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerCreateSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings DisableTty(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerCreateSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ToggleTty(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = !toolSettings.Tty;
            return toolSettings;
        }
        #endregion
        #region Ulimit
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Ulimit"/></em></p>
        ///   <p>Ulimit options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetUlimit(this DockerContainerCreateSettings toolSettings, string ulimit)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ulimit = ulimit;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Ulimit"/></em></p>
        ///   <p>Ulimit options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetUlimit(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ulimit = null;
            return toolSettings;
        }
        #endregion
        #region User
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.User"/></em></p>
        ///   <p>Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetUser(this DockerContainerCreateSettings toolSettings, string user)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.User = user;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.User"/></em></p>
        ///   <p>Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetUser(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.User = null;
            return toolSettings;
        }
        #endregion
        #region Userns
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Userns"/></em></p>
        ///   <p>User namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetUserns(this DockerContainerCreateSettings toolSettings, string userns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Userns = userns;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Userns"/></em></p>
        ///   <p>User namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetUserns(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Userns = null;
            return toolSettings;
        }
        #endregion
        #region Uts
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Uts"/></em></p>
        ///   <p>UTS namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetUts(this DockerContainerCreateSettings toolSettings, string uts)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Uts = uts;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Uts"/></em></p>
        ///   <p>UTS namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetUts(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Uts = null;
            return toolSettings;
        }
        #endregion
        #region Volume
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Volume"/> to a new list</em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetVolume(this DockerContainerCreateSettings toolSettings, params string[] volume)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeInternal = volume.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Volume"/> to a new list</em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetVolume(this DockerContainerCreateSettings toolSettings, IEnumerable<string> volume)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeInternal = volume.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.Volume"/></em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddVolume(this DockerContainerCreateSettings toolSettings, params string[] volume)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeInternal.AddRange(volume);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.Volume"/></em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddVolume(this DockerContainerCreateSettings toolSettings, IEnumerable<string> volume)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeInternal.AddRange(volume);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.Volume"/></em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearVolume(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.Volume"/></em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveVolume(this DockerContainerCreateSettings toolSettings, params string[] volume)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(volume);
            toolSettings.VolumeInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.Volume"/></em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveVolume(this DockerContainerCreateSettings toolSettings, IEnumerable<string> volume)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(volume);
            toolSettings.VolumeInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region VolumeDriver
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.VolumeDriver"/></em></p>
        ///   <p>Optional volume driver for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetVolumeDriver(this DockerContainerCreateSettings toolSettings, string volumeDriver)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeDriver = volumeDriver;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.VolumeDriver"/></em></p>
        ///   <p>Optional volume driver for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetVolumeDriver(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeDriver = null;
            return toolSettings;
        }
        #endregion
        #region VolumesFrom
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.VolumesFrom"/> to a new list</em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetVolumesFrom(this DockerContainerCreateSettings toolSettings, params string[] volumesFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesFromInternal = volumesFrom.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.VolumesFrom"/> to a new list</em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetVolumesFrom(this DockerContainerCreateSettings toolSettings, IEnumerable<string> volumesFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesFromInternal = volumesFrom.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.VolumesFrom"/></em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddVolumesFrom(this DockerContainerCreateSettings toolSettings, params string[] volumesFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesFromInternal.AddRange(volumesFrom);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.VolumesFrom"/></em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddVolumesFrom(this DockerContainerCreateSettings toolSettings, IEnumerable<string> volumesFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesFromInternal.AddRange(volumesFrom);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.VolumesFrom"/></em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearVolumesFrom(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesFromInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.VolumesFrom"/></em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveVolumesFrom(this DockerContainerCreateSettings toolSettings, params string[] volumesFrom)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(volumesFrom);
            toolSettings.VolumesFromInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.VolumesFrom"/></em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveVolumesFrom(this DockerContainerCreateSettings toolSettings, IEnumerable<string> volumesFrom)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(volumesFrom);
            toolSettings.VolumesFromInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Workdir
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Workdir"/></em></p>
        ///   <p>Working directory inside the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetWorkdir(this DockerContainerCreateSettings toolSettings, string workdir)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Workdir = workdir;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Workdir"/></em></p>
        ///   <p>Working directory inside the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetWorkdir(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Workdir = null;
            return toolSettings;
        }
        #endregion
        #region Image
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Image"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetImage(this DockerContainerCreateSettings toolSettings, string image)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = image;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Image"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetImage(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = null;
            return toolSettings;
        }
        #endregion
        #region Command
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Command"/></em></p>
        ///   <p>[COMMAND]</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetCommand(this DockerContainerCreateSettings toolSettings, string command)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Command = command;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerCreateSettings.Command"/></em></p>
        ///   <p>[COMMAND]</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ResetCommand(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Command = null;
            return toolSettings;
        }
        #endregion
        #region Args
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Args"/> to a new list</em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetArgs(this DockerContainerCreateSettings toolSettings, params string[] args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal = args.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerCreateSettings.Args"/> to a new list</em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings SetArgs(this DockerContainerCreateSettings toolSettings, IEnumerable<string> args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal = args.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddArgs(this DockerContainerCreateSettings toolSettings, params string[] args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal.AddRange(args);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerCreateSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings AddArgs(this DockerContainerCreateSettings toolSettings, IEnumerable<string> args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal.AddRange(args);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerCreateSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings ClearArgs(this DockerContainerCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveArgs(this DockerContainerCreateSettings toolSettings, params string[] args)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(args);
            toolSettings.ArgsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerCreateSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerCreateSettings RemoveArgs(this DockerContainerCreateSettings toolSettings, IEnumerable<string> args)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(args);
            toolSettings.ArgsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerVolumeCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerVolumeCreateSettingsExtensions
    {
        #region Driver
        /// <summary>
        ///   <p><em>Sets <see cref="DockerVolumeCreateSettings.Driver"/></em></p>
        ///   <p>Specify volume driver name.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeCreateSettings SetDriver(this DockerVolumeCreateSettings toolSettings, string driver)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Driver = driver;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerVolumeCreateSettings.Driver"/></em></p>
        ///   <p>Specify volume driver name.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeCreateSettings ResetDriver(this DockerVolumeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Driver = null;
            return toolSettings;
        }
        #endregion
        #region Label
        /// <summary>
        ///   <p><em>Sets <see cref="DockerVolumeCreateSettings.Label"/> to a new list</em></p>
        ///   <p>Set metadata for a volume.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeCreateSettings SetLabel(this DockerVolumeCreateSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal = label.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerVolumeCreateSettings.Label"/> to a new list</em></p>
        ///   <p>Set metadata for a volume.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeCreateSettings SetLabel(this DockerVolumeCreateSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal = label.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerVolumeCreateSettings.Label"/></em></p>
        ///   <p>Set metadata for a volume.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeCreateSettings AddLabel(this DockerVolumeCreateSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.AddRange(label);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerVolumeCreateSettings.Label"/></em></p>
        ///   <p>Set metadata for a volume.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeCreateSettings AddLabel(this DockerVolumeCreateSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.AddRange(label);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerVolumeCreateSettings.Label"/></em></p>
        ///   <p>Set metadata for a volume.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeCreateSettings ClearLabel(this DockerVolumeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerVolumeCreateSettings.Label"/></em></p>
        ///   <p>Set metadata for a volume.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeCreateSettings RemoveLabel(this DockerVolumeCreateSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(label);
            toolSettings.LabelInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerVolumeCreateSettings.Label"/></em></p>
        ///   <p>Set metadata for a volume.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeCreateSettings RemoveLabel(this DockerVolumeCreateSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(label);
            toolSettings.LabelInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="DockerVolumeCreateSettings.Name"/></em></p>
        ///   <p>Specify volume name.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeCreateSettings SetName(this DockerVolumeCreateSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerVolumeCreateSettings.Name"/></em></p>
        ///   <p>Specify volume name.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeCreateSettings ResetName(this DockerVolumeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Opt
        /// <summary>
        ///   <p><em>Sets <see cref="DockerVolumeCreateSettings.Opt"/> to a new dictionary</em></p>
        ///   <p>Set driver specific options.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeCreateSettings SetOpt(this DockerVolumeCreateSettings toolSettings, IDictionary<string, string> opt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OptInternal = opt.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerVolumeCreateSettings.Opt"/></em></p>
        ///   <p>Set driver specific options.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeCreateSettings ClearOpt(this DockerVolumeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OptInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds a new key-value-pair <see cref="DockerVolumeCreateSettings.Opt"/></em></p>
        ///   <p>Set driver specific options.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeCreateSettings AddOpt(this DockerVolumeCreateSettings toolSettings, string optKey, string optValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OptInternal.Add(optKey, optValue);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes a key-value-pair from <see cref="DockerVolumeCreateSettings.Opt"/></em></p>
        ///   <p>Set driver specific options.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeCreateSettings RemoveOpt(this DockerVolumeCreateSettings toolSettings, string optKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OptInternal.Remove(optKey);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets a key-value-pair in <see cref="DockerVolumeCreateSettings.Opt"/></em></p>
        ///   <p>Set driver specific options.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeCreateSettings SetOpt(this DockerVolumeCreateSettings toolSettings, string optKey, string optValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OptInternal[optKey] = optValue;
            return toolSettings;
        }
        #endregion
        #region Volume
        /// <summary>
        ///   <p><em>Sets <see cref="DockerVolumeCreateSettings.Volume"/></em></p>
        ///   <p>[VOLUME]</p>
        /// </summary>
        [Pure]
        public static DockerVolumeCreateSettings SetVolume(this DockerVolumeCreateSettings toolSettings, string volume)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Volume = volume;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerVolumeCreateSettings.Volume"/></em></p>
        ///   <p>[VOLUME]</p>
        /// </summary>
        [Pure]
        public static DockerVolumeCreateSettings ResetVolume(this DockerVolumeCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Volume = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerPluginSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerPluginSettingsExtensions
    {
    }
    #endregion
    #region DockerLoginSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerLoginSettingsExtensions
    {
        #region Password
        /// <summary>
        ///   <p><em>Sets <see cref="DockerLoginSettings.Password"/></em></p>
        ///   <p>Password.</p>
        /// </summary>
        [Pure]
        public static DockerLoginSettings SetPassword(this DockerLoginSettings toolSettings, string password)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = password;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerLoginSettings.Password"/></em></p>
        ///   <p>Password.</p>
        /// </summary>
        [Pure]
        public static DockerLoginSettings ResetPassword(this DockerLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Password = null;
            return toolSettings;
        }
        #endregion
        #region Username
        /// <summary>
        ///   <p><em>Sets <see cref="DockerLoginSettings.Username"/></em></p>
        ///   <p>Username.</p>
        /// </summary>
        [Pure]
        public static DockerLoginSettings SetUsername(this DockerLoginSettings toolSettings, string username)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = username;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerLoginSettings.Username"/></em></p>
        ///   <p>Username.</p>
        /// </summary>
        [Pure]
        public static DockerLoginSettings ResetUsername(this DockerLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Username = null;
            return toolSettings;
        }
        #endregion
        #region Server
        /// <summary>
        ///   <p><em>Sets <see cref="DockerLoginSettings.Server"/></em></p>
        ///   <p>[SERVER]</p>
        /// </summary>
        [Pure]
        public static DockerLoginSettings SetServer(this DockerLoginSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerLoginSettings.Server"/></em></p>
        ///   <p>[SERVER]</p>
        /// </summary>
        [Pure]
        public static DockerLoginSettings ResetServer(this DockerLoginSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerSwarmUnlockKeySettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerSwarmUnlockKeySettingsExtensions
    {
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmUnlockKeySettings.Quiet"/></em></p>
        ///   <p>Only display token.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUnlockKeySettings SetQuiet(this DockerSwarmUnlockKeySettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmUnlockKeySettings.Quiet"/></em></p>
        ///   <p>Only display token.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUnlockKeySettings ResetQuiet(this DockerSwarmUnlockKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerSwarmUnlockKeySettings.Quiet"/></em></p>
        ///   <p>Only display token.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUnlockKeySettings EnableQuiet(this DockerSwarmUnlockKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerSwarmUnlockKeySettings.Quiet"/></em></p>
        ///   <p>Only display token.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUnlockKeySettings DisableQuiet(this DockerSwarmUnlockKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerSwarmUnlockKeySettings.Quiet"/></em></p>
        ///   <p>Only display token.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUnlockKeySettings ToggleQuiet(this DockerSwarmUnlockKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
        #region Rotate
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmUnlockKeySettings.Rotate"/></em></p>
        ///   <p>Rotate unlock key.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUnlockKeySettings SetRotate(this DockerSwarmUnlockKeySettings toolSettings, bool? rotate)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rotate = rotate;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmUnlockKeySettings.Rotate"/></em></p>
        ///   <p>Rotate unlock key.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUnlockKeySettings ResetRotate(this DockerSwarmUnlockKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rotate = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerSwarmUnlockKeySettings.Rotate"/></em></p>
        ///   <p>Rotate unlock key.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUnlockKeySettings EnableRotate(this DockerSwarmUnlockKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rotate = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerSwarmUnlockKeySettings.Rotate"/></em></p>
        ///   <p>Rotate unlock key.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUnlockKeySettings DisableRotate(this DockerSwarmUnlockKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rotate = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerSwarmUnlockKeySettings.Rotate"/></em></p>
        ///   <p>Rotate unlock key.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmUnlockKeySettings ToggleRotate(this DockerSwarmUnlockKeySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rotate = !toolSettings.Rotate;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerStartSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerStartSettingsExtensions
    {
        #region Attach
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStartSettings.Attach"/></em></p>
        ///   <p>Attach STDOUT/STDERR and forward signals.</p>
        /// </summary>
        [Pure]
        public static DockerStartSettings SetAttach(this DockerStartSettings toolSettings, bool? attach)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Attach = attach;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStartSettings.Attach"/></em></p>
        ///   <p>Attach STDOUT/STDERR and forward signals.</p>
        /// </summary>
        [Pure]
        public static DockerStartSettings ResetAttach(this DockerStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Attach = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerStartSettings.Attach"/></em></p>
        ///   <p>Attach STDOUT/STDERR and forward signals.</p>
        /// </summary>
        [Pure]
        public static DockerStartSettings EnableAttach(this DockerStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Attach = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerStartSettings.Attach"/></em></p>
        ///   <p>Attach STDOUT/STDERR and forward signals.</p>
        /// </summary>
        [Pure]
        public static DockerStartSettings DisableAttach(this DockerStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Attach = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerStartSettings.Attach"/></em></p>
        ///   <p>Attach STDOUT/STDERR and forward signals.</p>
        /// </summary>
        [Pure]
        public static DockerStartSettings ToggleAttach(this DockerStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Attach = !toolSettings.Attach;
            return toolSettings;
        }
        #endregion
        #region Checkpoint
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStartSettings.Checkpoint"/></em></p>
        ///   <p>Restore from this checkpoint.</p>
        /// </summary>
        [Pure]
        public static DockerStartSettings SetCheckpoint(this DockerStartSettings toolSettings, string checkpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Checkpoint = checkpoint;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStartSettings.Checkpoint"/></em></p>
        ///   <p>Restore from this checkpoint.</p>
        /// </summary>
        [Pure]
        public static DockerStartSettings ResetCheckpoint(this DockerStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Checkpoint = null;
            return toolSettings;
        }
        #endregion
        #region CheckpointDir
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStartSettings.CheckpointDir"/></em></p>
        ///   <p>Use a custom checkpoint storage directory.</p>
        /// </summary>
        [Pure]
        public static DockerStartSettings SetCheckpointDir(this DockerStartSettings toolSettings, string checkpointDir)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CheckpointDir = checkpointDir;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStartSettings.CheckpointDir"/></em></p>
        ///   <p>Use a custom checkpoint storage directory.</p>
        /// </summary>
        [Pure]
        public static DockerStartSettings ResetCheckpointDir(this DockerStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CheckpointDir = null;
            return toolSettings;
        }
        #endregion
        #region DetachKeys
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStartSettings.DetachKeys"/></em></p>
        ///   <p>Override the key sequence for detaching a container.</p>
        /// </summary>
        [Pure]
        public static DockerStartSettings SetDetachKeys(this DockerStartSettings toolSettings, string detachKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DetachKeys = detachKeys;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStartSettings.DetachKeys"/></em></p>
        ///   <p>Override the key sequence for detaching a container.</p>
        /// </summary>
        [Pure]
        public static DockerStartSettings ResetDetachKeys(this DockerStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DetachKeys = null;
            return toolSettings;
        }
        #endregion
        #region Interactive
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStartSettings.Interactive"/></em></p>
        ///   <p>Attach container's STDIN.</p>
        /// </summary>
        [Pure]
        public static DockerStartSettings SetInteractive(this DockerStartSettings toolSettings, bool? interactive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = interactive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStartSettings.Interactive"/></em></p>
        ///   <p>Attach container's STDIN.</p>
        /// </summary>
        [Pure]
        public static DockerStartSettings ResetInteractive(this DockerStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerStartSettings.Interactive"/></em></p>
        ///   <p>Attach container's STDIN.</p>
        /// </summary>
        [Pure]
        public static DockerStartSettings EnableInteractive(this DockerStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerStartSettings.Interactive"/></em></p>
        ///   <p>Attach container's STDIN.</p>
        /// </summary>
        [Pure]
        public static DockerStartSettings DisableInteractive(this DockerStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerStartSettings.Interactive"/></em></p>
        ///   <p>Attach container's STDIN.</p>
        /// </summary>
        [Pure]
        public static DockerStartSettings ToggleInteractive(this DockerStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = !toolSettings.Interactive;
            return toolSettings;
        }
        #endregion
        #region Containers
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStartSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerStartSettings SetContainers(this DockerStartSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStartSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerStartSettings SetContainers(this DockerStartSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerStartSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerStartSettings AddContainers(this DockerStartSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerStartSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerStartSettings AddContainers(this DockerStartSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerStartSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerStartSettings ClearContainers(this DockerStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerStartSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerStartSettings RemoveContainers(this DockerStartSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerStartSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerStartSettings RemoveContainers(this DockerStartSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerSwarmInitSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerSwarmInitSettingsExtensions
    {
        #region AdvertiseAddr
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmInitSettings.AdvertiseAddr"/></em></p>
        ///   <p>Advertised address (format: &lt;ip|interface&gt;[:port]).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings SetAdvertiseAddr(this DockerSwarmInitSettings toolSettings, string advertiseAddr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdvertiseAddr = advertiseAddr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmInitSettings.AdvertiseAddr"/></em></p>
        ///   <p>Advertised address (format: &lt;ip|interface&gt;[:port]).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings ResetAdvertiseAddr(this DockerSwarmInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdvertiseAddr = null;
            return toolSettings;
        }
        #endregion
        #region Autolock
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmInitSettings.Autolock"/></em></p>
        ///   <p>Enable manager autolocking (requiring an unlock key to start a stopped manager).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings SetAutolock(this DockerSwarmInitSettings toolSettings, bool? autolock)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Autolock = autolock;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmInitSettings.Autolock"/></em></p>
        ///   <p>Enable manager autolocking (requiring an unlock key to start a stopped manager).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings ResetAutolock(this DockerSwarmInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Autolock = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerSwarmInitSettings.Autolock"/></em></p>
        ///   <p>Enable manager autolocking (requiring an unlock key to start a stopped manager).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings EnableAutolock(this DockerSwarmInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Autolock = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerSwarmInitSettings.Autolock"/></em></p>
        ///   <p>Enable manager autolocking (requiring an unlock key to start a stopped manager).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings DisableAutolock(this DockerSwarmInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Autolock = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerSwarmInitSettings.Autolock"/></em></p>
        ///   <p>Enable manager autolocking (requiring an unlock key to start a stopped manager).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings ToggleAutolock(this DockerSwarmInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Autolock = !toolSettings.Autolock;
            return toolSettings;
        }
        #endregion
        #region Availability
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmInitSettings.Availability"/></em></p>
        ///   <p>Availability of the node ("active"|"pause"|"drain").</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings SetAvailability(this DockerSwarmInitSettings toolSettings, Availability availability)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Availability = availability;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmInitSettings.Availability"/></em></p>
        ///   <p>Availability of the node ("active"|"pause"|"drain").</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings ResetAvailability(this DockerSwarmInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Availability = null;
            return toolSettings;
        }
        #endregion
        #region CertExpiry
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmInitSettings.CertExpiry"/></em></p>
        ///   <p>Validity period for node certificates (ns|us|ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings SetCertExpiry(this DockerSwarmInitSettings toolSettings, string certExpiry)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CertExpiry = certExpiry;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmInitSettings.CertExpiry"/></em></p>
        ///   <p>Validity period for node certificates (ns|us|ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings ResetCertExpiry(this DockerSwarmInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CertExpiry = null;
            return toolSettings;
        }
        #endregion
        #region DataPathAddr
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmInitSettings.DataPathAddr"/></em></p>
        ///   <p>Address or interface to use for data path traffic (format: &lt;ip|interface&gt;).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings SetDataPathAddr(this DockerSwarmInitSettings toolSettings, string dataPathAddr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DataPathAddr = dataPathAddr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmInitSettings.DataPathAddr"/></em></p>
        ///   <p>Address or interface to use for data path traffic (format: &lt;ip|interface&gt;).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings ResetDataPathAddr(this DockerSwarmInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DataPathAddr = null;
            return toolSettings;
        }
        #endregion
        #region DataPathPort
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmInitSettings.DataPathPort"/></em></p>
        ///   <p>Port number to use for data path traffic (1024 - 49151). If no value is set or is set to 0, the default port (4789) is used.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings SetDataPathPort(this DockerSwarmInitSettings toolSettings, string dataPathPort)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DataPathPort = dataPathPort;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmInitSettings.DataPathPort"/></em></p>
        ///   <p>Port number to use for data path traffic (1024 - 49151). If no value is set or is set to 0, the default port (4789) is used.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings ResetDataPathPort(this DockerSwarmInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DataPathPort = null;
            return toolSettings;
        }
        #endregion
        #region DefaultAddrPool
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmInitSettings.DefaultAddrPool"/></em></p>
        ///   <p>default address pool in CIDR format.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings SetDefaultAddrPool(this DockerSwarmInitSettings toolSettings, string defaultAddrPool)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultAddrPool = defaultAddrPool;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmInitSettings.DefaultAddrPool"/></em></p>
        ///   <p>default address pool in CIDR format.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings ResetDefaultAddrPool(this DockerSwarmInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultAddrPool = null;
            return toolSettings;
        }
        #endregion
        #region DefaultAddrPoolMaskLength
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmInitSettings.DefaultAddrPoolMaskLength"/></em></p>
        ///   <p>default address pool subnet mask length.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings SetDefaultAddrPoolMaskLength(this DockerSwarmInitSettings toolSettings, string defaultAddrPoolMaskLength)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultAddrPoolMaskLength = defaultAddrPoolMaskLength;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmInitSettings.DefaultAddrPoolMaskLength"/></em></p>
        ///   <p>default address pool subnet mask length.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings ResetDefaultAddrPoolMaskLength(this DockerSwarmInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DefaultAddrPoolMaskLength = null;
            return toolSettings;
        }
        #endregion
        #region DispatcherHeartbeat
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmInitSettings.DispatcherHeartbeat"/></em></p>
        ///   <p>Dispatcher heartbeat period (ns|us|ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings SetDispatcherHeartbeat(this DockerSwarmInitSettings toolSettings, string dispatcherHeartbeat)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DispatcherHeartbeat = dispatcherHeartbeat;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmInitSettings.DispatcherHeartbeat"/></em></p>
        ///   <p>Dispatcher heartbeat period (ns|us|ms|s|m|h).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings ResetDispatcherHeartbeat(this DockerSwarmInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DispatcherHeartbeat = null;
            return toolSettings;
        }
        #endregion
        #region ExternalCa
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmInitSettings.ExternalCa"/></em></p>
        ///   <p>Specifications of one or more certificate signing endpoints.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings SetExternalCa(this DockerSwarmInitSettings toolSettings, string externalCa)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExternalCa = externalCa;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmInitSettings.ExternalCa"/></em></p>
        ///   <p>Specifications of one or more certificate signing endpoints.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings ResetExternalCa(this DockerSwarmInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExternalCa = null;
            return toolSettings;
        }
        #endregion
        #region ForceNewCluster
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmInitSettings.ForceNewCluster"/></em></p>
        ///   <p>Force create a new cluster from current state.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings SetForceNewCluster(this DockerSwarmInitSettings toolSettings, bool? forceNewCluster)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceNewCluster = forceNewCluster;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmInitSettings.ForceNewCluster"/></em></p>
        ///   <p>Force create a new cluster from current state.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings ResetForceNewCluster(this DockerSwarmInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceNewCluster = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerSwarmInitSettings.ForceNewCluster"/></em></p>
        ///   <p>Force create a new cluster from current state.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings EnableForceNewCluster(this DockerSwarmInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceNewCluster = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerSwarmInitSettings.ForceNewCluster"/></em></p>
        ///   <p>Force create a new cluster from current state.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings DisableForceNewCluster(this DockerSwarmInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceNewCluster = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerSwarmInitSettings.ForceNewCluster"/></em></p>
        ///   <p>Force create a new cluster from current state.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings ToggleForceNewCluster(this DockerSwarmInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceNewCluster = !toolSettings.ForceNewCluster;
            return toolSettings;
        }
        #endregion
        #region ListenAddr
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmInitSettings.ListenAddr"/></em></p>
        ///   <p>Listen address (format: &lt;ip|interface&gt;[:port]).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings SetListenAddr(this DockerSwarmInitSettings toolSettings, string listenAddr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ListenAddr = listenAddr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmInitSettings.ListenAddr"/></em></p>
        ///   <p>Listen address (format: &lt;ip|interface&gt;[:port]).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings ResetListenAddr(this DockerSwarmInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ListenAddr = null;
            return toolSettings;
        }
        #endregion
        #region MaxSnapshots
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmInitSettings.MaxSnapshots"/></em></p>
        ///   <p>Number of additional Raft snapshots to retain.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings SetMaxSnapshots(this DockerSwarmInitSettings toolSettings, int? maxSnapshots)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxSnapshots = maxSnapshots;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmInitSettings.MaxSnapshots"/></em></p>
        ///   <p>Number of additional Raft snapshots to retain.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings ResetMaxSnapshots(this DockerSwarmInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MaxSnapshots = null;
            return toolSettings;
        }
        #endregion
        #region SnapshotInterval
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmInitSettings.SnapshotInterval"/></em></p>
        ///   <p>Number of log entries between Raft snapshots.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings SetSnapshotInterval(this DockerSwarmInitSettings toolSettings, int? snapshotInterval)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SnapshotInterval = snapshotInterval;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmInitSettings.SnapshotInterval"/></em></p>
        ///   <p>Number of log entries between Raft snapshots.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings ResetSnapshotInterval(this DockerSwarmInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SnapshotInterval = null;
            return toolSettings;
        }
        #endregion
        #region TaskHistoryLimit
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmInitSettings.TaskHistoryLimit"/></em></p>
        ///   <p>Task history retention limit.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings SetTaskHistoryLimit(this DockerSwarmInitSettings toolSettings, long? taskHistoryLimit)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TaskHistoryLimit = taskHistoryLimit;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmInitSettings.TaskHistoryLimit"/></em></p>
        ///   <p>Task history retention limit.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmInitSettings ResetTaskHistoryLimit(this DockerSwarmInitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TaskHistoryLimit = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContainerDiffSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContainerDiffSettingsExtensions
    {
        #region Container
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerDiffSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerDiffSettings SetContainer(this DockerContainerDiffSettings toolSettings, string container)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = container;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerDiffSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerDiffSettings ResetContainer(this DockerContainerDiffSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContainerRestartSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContainerRestartSettingsExtensions
    {
        #region Time
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRestartSettings.Time"/></em></p>
        ///   <p>Seconds to wait for stop before killing the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRestartSettings SetTime(this DockerContainerRestartSettings toolSettings, int? time)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Time = time;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRestartSettings.Time"/></em></p>
        ///   <p>Seconds to wait for stop before killing the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRestartSettings ResetTime(this DockerContainerRestartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Time = null;
            return toolSettings;
        }
        #endregion
        #region Containers
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRestartSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerRestartSettings SetContainers(this DockerContainerRestartSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRestartSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerRestartSettings SetContainers(this DockerContainerRestartSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRestartSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerRestartSettings AddContainers(this DockerContainerRestartSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRestartSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerRestartSettings AddContainers(this DockerContainerRestartSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRestartSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerRestartSettings ClearContainers(this DockerContainerRestartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRestartSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerRestartSettings RemoveContainers(this DockerContainerRestartSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRestartSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerRestartSettings RemoveContainers(this DockerContainerRestartSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerConfigSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerConfigSettingsExtensions
    {
    }
    #endregion
    #region DockerPluginDisableSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerPluginDisableSettingsExtensions
    {
        #region Force
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginDisableSettings.Force"/></em></p>
        ///   <p>Force the disable of an active plugin.</p>
        /// </summary>
        [Pure]
        public static DockerPluginDisableSettings SetForce(this DockerPluginDisableSettings toolSettings, bool? force)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = force;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPluginDisableSettings.Force"/></em></p>
        ///   <p>Force the disable of an active plugin.</p>
        /// </summary>
        [Pure]
        public static DockerPluginDisableSettings ResetForce(this DockerPluginDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerPluginDisableSettings.Force"/></em></p>
        ///   <p>Force the disable of an active plugin.</p>
        /// </summary>
        [Pure]
        public static DockerPluginDisableSettings EnableForce(this DockerPluginDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerPluginDisableSettings.Force"/></em></p>
        ///   <p>Force the disable of an active plugin.</p>
        /// </summary>
        [Pure]
        public static DockerPluginDisableSettings DisableForce(this DockerPluginDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerPluginDisableSettings.Force"/></em></p>
        ///   <p>Force the disable of an active plugin.</p>
        /// </summary>
        [Pure]
        public static DockerPluginDisableSettings ToggleForce(this DockerPluginDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = !toolSettings.Force;
            return toolSettings;
        }
        #endregion
        #region Plugin
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginDisableSettings.Plugin"/></em></p>
        ///   <p>PLUGIN</p>
        /// </summary>
        [Pure]
        public static DockerPluginDisableSettings SetPlugin(this DockerPluginDisableSettings toolSettings, string plugin)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Plugin = plugin;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPluginDisableSettings.Plugin"/></em></p>
        ///   <p>PLUGIN</p>
        /// </summary>
        [Pure]
        public static DockerPluginDisableSettings ResetPlugin(this DockerPluginDisableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Plugin = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContainerUnpauseSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContainerUnpauseSettingsExtensions
    {
        #region Containers
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerUnpauseSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerUnpauseSettings SetContainers(this DockerContainerUnpauseSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerUnpauseSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerUnpauseSettings SetContainers(this DockerContainerUnpauseSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerUnpauseSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerUnpauseSettings AddContainers(this DockerContainerUnpauseSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerUnpauseSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerUnpauseSettings AddContainers(this DockerContainerUnpauseSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerUnpauseSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerUnpauseSettings ClearContainers(this DockerContainerUnpauseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerUnpauseSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerUnpauseSettings RemoveContainers(this DockerContainerUnpauseSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerUnpauseSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerUnpauseSettings RemoveContainers(this DockerContainerUnpauseSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContextImportSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContextImportSettingsExtensions
    {
        #region Context
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContextImportSettings.Context"/></em></p>
        ///   <p>CONTEXT</p>
        /// </summary>
        [Pure]
        public static DockerContextImportSettings SetContext(this DockerContextImportSettings toolSettings, string context)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Context = context;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContextImportSettings.Context"/></em></p>
        ///   <p>CONTEXT</p>
        /// </summary>
        [Pure]
        public static DockerContextImportSettings ResetContext(this DockerContextImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Context = null;
            return toolSettings;
        }
        #endregion
        #region File
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContextImportSettings.File"/></em></p>
        ///   <p>FILE|-</p>
        /// </summary>
        [Pure]
        public static DockerContextImportSettings SetFile(this DockerContextImportSettings toolSettings, string file)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = file;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContextImportSettings.File"/></em></p>
        ///   <p>FILE|-</p>
        /// </summary>
        [Pure]
        public static DockerContextImportSettings ResetFile(this DockerContextImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerRmSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerRmSettingsExtensions
    {
        #region Force
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRmSettings.Force"/></em></p>
        ///   <p>Force the removal of a running container (uses SIGKILL).</p>
        /// </summary>
        [Pure]
        public static DockerRmSettings SetForce(this DockerRmSettings toolSettings, bool? force)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = force;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRmSettings.Force"/></em></p>
        ///   <p>Force the removal of a running container (uses SIGKILL).</p>
        /// </summary>
        [Pure]
        public static DockerRmSettings ResetForce(this DockerRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerRmSettings.Force"/></em></p>
        ///   <p>Force the removal of a running container (uses SIGKILL).</p>
        /// </summary>
        [Pure]
        public static DockerRmSettings EnableForce(this DockerRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerRmSettings.Force"/></em></p>
        ///   <p>Force the removal of a running container (uses SIGKILL).</p>
        /// </summary>
        [Pure]
        public static DockerRmSettings DisableForce(this DockerRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerRmSettings.Force"/></em></p>
        ///   <p>Force the removal of a running container (uses SIGKILL).</p>
        /// </summary>
        [Pure]
        public static DockerRmSettings ToggleForce(this DockerRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = !toolSettings.Force;
            return toolSettings;
        }
        #endregion
        #region Link
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRmSettings.Link"/></em></p>
        ///   <p>Remove the specified link.</p>
        /// </summary>
        [Pure]
        public static DockerRmSettings SetLink(this DockerRmSettings toolSettings, bool? link)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Link = link;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRmSettings.Link"/></em></p>
        ///   <p>Remove the specified link.</p>
        /// </summary>
        [Pure]
        public static DockerRmSettings ResetLink(this DockerRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Link = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerRmSettings.Link"/></em></p>
        ///   <p>Remove the specified link.</p>
        /// </summary>
        [Pure]
        public static DockerRmSettings EnableLink(this DockerRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Link = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerRmSettings.Link"/></em></p>
        ///   <p>Remove the specified link.</p>
        /// </summary>
        [Pure]
        public static DockerRmSettings DisableLink(this DockerRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Link = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerRmSettings.Link"/></em></p>
        ///   <p>Remove the specified link.</p>
        /// </summary>
        [Pure]
        public static DockerRmSettings ToggleLink(this DockerRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Link = !toolSettings.Link;
            return toolSettings;
        }
        #endregion
        #region Volumes
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRmSettings.Volumes"/></em></p>
        ///   <p>Remove the volumes associated with the container.</p>
        /// </summary>
        [Pure]
        public static DockerRmSettings SetVolumes(this DockerRmSettings toolSettings, bool? volumes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Volumes = volumes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRmSettings.Volumes"/></em></p>
        ///   <p>Remove the volumes associated with the container.</p>
        /// </summary>
        [Pure]
        public static DockerRmSettings ResetVolumes(this DockerRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Volumes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerRmSettings.Volumes"/></em></p>
        ///   <p>Remove the volumes associated with the container.</p>
        /// </summary>
        [Pure]
        public static DockerRmSettings EnableVolumes(this DockerRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Volumes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerRmSettings.Volumes"/></em></p>
        ///   <p>Remove the volumes associated with the container.</p>
        /// </summary>
        [Pure]
        public static DockerRmSettings DisableVolumes(this DockerRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Volumes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerRmSettings.Volumes"/></em></p>
        ///   <p>Remove the volumes associated with the container.</p>
        /// </summary>
        [Pure]
        public static DockerRmSettings ToggleVolumes(this DockerRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Volumes = !toolSettings.Volumes;
            return toolSettings;
        }
        #endregion
        #region Containers
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRmSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerRmSettings SetContainers(this DockerRmSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRmSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerRmSettings SetContainers(this DockerRmSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRmSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerRmSettings AddContainers(this DockerRmSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRmSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerRmSettings AddContainers(this DockerRmSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRmSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerRmSettings ClearContainers(this DockerRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRmSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerRmSettings RemoveContainers(this DockerRmSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRmSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerRmSettings RemoveContainers(this DockerRmSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerDeploySettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerDeploySettingsExtensions
    {
        #region BundleFile
        /// <summary>
        ///   <p><em>Sets <see cref="DockerDeploySettings.BundleFile"/></em></p>
        ///   <p>Path to a Distributed Application Bundle file.</p>
        /// </summary>
        [Pure]
        public static DockerDeploySettings SetBundleFile(this DockerDeploySettings toolSettings, string bundleFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BundleFile = bundleFile;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerDeploySettings.BundleFile"/></em></p>
        ///   <p>Path to a Distributed Application Bundle file.</p>
        /// </summary>
        [Pure]
        public static DockerDeploySettings ResetBundleFile(this DockerDeploySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BundleFile = null;
            return toolSettings;
        }
        #endregion
        #region ComposeFile
        /// <summary>
        ///   <p><em>Sets <see cref="DockerDeploySettings.ComposeFile"/> to a new list</em></p>
        ///   <p>Path to a Compose file, or "-" to read from stdin.</p>
        /// </summary>
        [Pure]
        public static DockerDeploySettings SetComposeFile(this DockerDeploySettings toolSettings, params string[] composeFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ComposeFileInternal = composeFile.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerDeploySettings.ComposeFile"/> to a new list</em></p>
        ///   <p>Path to a Compose file, or "-" to read from stdin.</p>
        /// </summary>
        [Pure]
        public static DockerDeploySettings SetComposeFile(this DockerDeploySettings toolSettings, IEnumerable<string> composeFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ComposeFileInternal = composeFile.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerDeploySettings.ComposeFile"/></em></p>
        ///   <p>Path to a Compose file, or "-" to read from stdin.</p>
        /// </summary>
        [Pure]
        public static DockerDeploySettings AddComposeFile(this DockerDeploySettings toolSettings, params string[] composeFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ComposeFileInternal.AddRange(composeFile);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerDeploySettings.ComposeFile"/></em></p>
        ///   <p>Path to a Compose file, or "-" to read from stdin.</p>
        /// </summary>
        [Pure]
        public static DockerDeploySettings AddComposeFile(this DockerDeploySettings toolSettings, IEnumerable<string> composeFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ComposeFileInternal.AddRange(composeFile);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerDeploySettings.ComposeFile"/></em></p>
        ///   <p>Path to a Compose file, or "-" to read from stdin.</p>
        /// </summary>
        [Pure]
        public static DockerDeploySettings ClearComposeFile(this DockerDeploySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ComposeFileInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerDeploySettings.ComposeFile"/></em></p>
        ///   <p>Path to a Compose file, or "-" to read from stdin.</p>
        /// </summary>
        [Pure]
        public static DockerDeploySettings RemoveComposeFile(this DockerDeploySettings toolSettings, params string[] composeFile)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(composeFile);
            toolSettings.ComposeFileInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerDeploySettings.ComposeFile"/></em></p>
        ///   <p>Path to a Compose file, or "-" to read from stdin.</p>
        /// </summary>
        [Pure]
        public static DockerDeploySettings RemoveComposeFile(this DockerDeploySettings toolSettings, IEnumerable<string> composeFile)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(composeFile);
            toolSettings.ComposeFileInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Namespace
        /// <summary>
        ///   <p><em>Sets <see cref="DockerDeploySettings.Namespace"/></em></p>
        ///   <p>Kubernetes namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerDeploySettings SetNamespace(this DockerDeploySettings toolSettings, string @namespace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Namespace = @namespace;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerDeploySettings.Namespace"/></em></p>
        ///   <p>Kubernetes namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerDeploySettings ResetNamespace(this DockerDeploySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Namespace = null;
            return toolSettings;
        }
        #endregion
        #region Prune
        /// <summary>
        ///   <p><em>Sets <see cref="DockerDeploySettings.Prune"/></em></p>
        ///   <p>Prune services that are no longer referenced.</p>
        /// </summary>
        [Pure]
        public static DockerDeploySettings SetPrune(this DockerDeploySettings toolSettings, bool? prune)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Prune = prune;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerDeploySettings.Prune"/></em></p>
        ///   <p>Prune services that are no longer referenced.</p>
        /// </summary>
        [Pure]
        public static DockerDeploySettings ResetPrune(this DockerDeploySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Prune = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerDeploySettings.Prune"/></em></p>
        ///   <p>Prune services that are no longer referenced.</p>
        /// </summary>
        [Pure]
        public static DockerDeploySettings EnablePrune(this DockerDeploySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Prune = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerDeploySettings.Prune"/></em></p>
        ///   <p>Prune services that are no longer referenced.</p>
        /// </summary>
        [Pure]
        public static DockerDeploySettings DisablePrune(this DockerDeploySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Prune = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerDeploySettings.Prune"/></em></p>
        ///   <p>Prune services that are no longer referenced.</p>
        /// </summary>
        [Pure]
        public static DockerDeploySettings TogglePrune(this DockerDeploySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Prune = !toolSettings.Prune;
            return toolSettings;
        }
        #endregion
        #region ResolveImage
        /// <summary>
        ///   <p><em>Sets <see cref="DockerDeploySettings.ResolveImage"/></em></p>
        ///   <p>Query the registry to resolve image digest and supported platforms ("always"|"changed"|"never").</p>
        /// </summary>
        [Pure]
        public static DockerDeploySettings SetResolveImage(this DockerDeploySettings toolSettings, ResolveImage resolveImage)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResolveImage = resolveImage;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerDeploySettings.ResolveImage"/></em></p>
        ///   <p>Query the registry to resolve image digest and supported platforms ("always"|"changed"|"never").</p>
        /// </summary>
        [Pure]
        public static DockerDeploySettings ResetResolveImage(this DockerDeploySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ResolveImage = null;
            return toolSettings;
        }
        #endregion
        #region WithRegistryAuth
        /// <summary>
        ///   <p><em>Sets <see cref="DockerDeploySettings.WithRegistryAuth"/></em></p>
        ///   <p>Send registry authentication details to Swarm agents.</p>
        /// </summary>
        [Pure]
        public static DockerDeploySettings SetWithRegistryAuth(this DockerDeploySettings toolSettings, bool? withRegistryAuth)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WithRegistryAuth = withRegistryAuth;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerDeploySettings.WithRegistryAuth"/></em></p>
        ///   <p>Send registry authentication details to Swarm agents.</p>
        /// </summary>
        [Pure]
        public static DockerDeploySettings ResetWithRegistryAuth(this DockerDeploySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WithRegistryAuth = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerDeploySettings.WithRegistryAuth"/></em></p>
        ///   <p>Send registry authentication details to Swarm agents.</p>
        /// </summary>
        [Pure]
        public static DockerDeploySettings EnableWithRegistryAuth(this DockerDeploySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WithRegistryAuth = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerDeploySettings.WithRegistryAuth"/></em></p>
        ///   <p>Send registry authentication details to Swarm agents.</p>
        /// </summary>
        [Pure]
        public static DockerDeploySettings DisableWithRegistryAuth(this DockerDeploySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WithRegistryAuth = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerDeploySettings.WithRegistryAuth"/></em></p>
        ///   <p>Send registry authentication details to Swarm agents.</p>
        /// </summary>
        [Pure]
        public static DockerDeploySettings ToggleWithRegistryAuth(this DockerDeploySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.WithRegistryAuth = !toolSettings.WithRegistryAuth;
            return toolSettings;
        }
        #endregion
        #region Stack
        /// <summary>
        ///   <p><em>Sets <see cref="DockerDeploySettings.Stack"/></em></p>
        ///   <p>STACK</p>
        /// </summary>
        [Pure]
        public static DockerDeploySettings SetStack(this DockerDeploySettings toolSettings, string stack)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = stack;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerDeploySettings.Stack"/></em></p>
        ///   <p>STACK</p>
        /// </summary>
        [Pure]
        public static DockerDeploySettings ResetStack(this DockerDeploySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stack = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerNodeRmSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerNodeRmSettingsExtensions
    {
        #region Force
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodeRmSettings.Force"/></em></p>
        ///   <p>Force remove a node from the swarm.</p>
        /// </summary>
        [Pure]
        public static DockerNodeRmSettings SetForce(this DockerNodeRmSettings toolSettings, bool? force)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = force;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNodeRmSettings.Force"/></em></p>
        ///   <p>Force remove a node from the swarm.</p>
        /// </summary>
        [Pure]
        public static DockerNodeRmSettings ResetForce(this DockerNodeRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerNodeRmSettings.Force"/></em></p>
        ///   <p>Force remove a node from the swarm.</p>
        /// </summary>
        [Pure]
        public static DockerNodeRmSettings EnableForce(this DockerNodeRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerNodeRmSettings.Force"/></em></p>
        ///   <p>Force remove a node from the swarm.</p>
        /// </summary>
        [Pure]
        public static DockerNodeRmSettings DisableForce(this DockerNodeRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerNodeRmSettings.Force"/></em></p>
        ///   <p>Force remove a node from the swarm.</p>
        /// </summary>
        [Pure]
        public static DockerNodeRmSettings ToggleForce(this DockerNodeRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = !toolSettings.Force;
            return toolSettings;
        }
        #endregion
        #region Nodes
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodeRmSettings.Nodes"/> to a new list</em></p>
        ///   <p>NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodeRmSettings SetNodes(this DockerNodeRmSettings toolSettings, params string[] nodes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodesInternal = nodes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodeRmSettings.Nodes"/> to a new list</em></p>
        ///   <p>NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodeRmSettings SetNodes(this DockerNodeRmSettings toolSettings, IEnumerable<string> nodes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodesInternal = nodes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNodeRmSettings.Nodes"/></em></p>
        ///   <p>NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodeRmSettings AddNodes(this DockerNodeRmSettings toolSettings, params string[] nodes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodesInternal.AddRange(nodes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNodeRmSettings.Nodes"/></em></p>
        ///   <p>NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodeRmSettings AddNodes(this DockerNodeRmSettings toolSettings, IEnumerable<string> nodes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodesInternal.AddRange(nodes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerNodeRmSettings.Nodes"/></em></p>
        ///   <p>NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodeRmSettings ClearNodes(this DockerNodeRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNodeRmSettings.Nodes"/></em></p>
        ///   <p>NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodeRmSettings RemoveNodes(this DockerNodeRmSettings toolSettings, params string[] nodes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(nodes);
            toolSettings.NodesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNodeRmSettings.Nodes"/></em></p>
        ///   <p>NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodeRmSettings RemoveNodes(this DockerNodeRmSettings toolSettings, IEnumerable<string> nodes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(nodes);
            toolSettings.NodesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerCheckpointRmSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerCheckpointRmSettingsExtensions
    {
        #region CheckpointDir
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCheckpointRmSettings.CheckpointDir"/></em></p>
        ///   <p>Use a custom checkpoint storage directory.</p>
        /// </summary>
        [Pure]
        public static DockerCheckpointRmSettings SetCheckpointDir(this DockerCheckpointRmSettings toolSettings, string checkpointDir)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CheckpointDir = checkpointDir;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCheckpointRmSettings.CheckpointDir"/></em></p>
        ///   <p>Use a custom checkpoint storage directory.</p>
        /// </summary>
        [Pure]
        public static DockerCheckpointRmSettings ResetCheckpointDir(this DockerCheckpointRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CheckpointDir = null;
            return toolSettings;
        }
        #endregion
        #region Container
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCheckpointRmSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerCheckpointRmSettings SetContainer(this DockerCheckpointRmSettings toolSettings, string container)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = container;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCheckpointRmSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerCheckpointRmSettings ResetContainer(this DockerCheckpointRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = null;
            return toolSettings;
        }
        #endregion
        #region Checkpoint
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCheckpointRmSettings.Checkpoint"/></em></p>
        ///   <p>CHECKPOINT</p>
        /// </summary>
        [Pure]
        public static DockerCheckpointRmSettings SetCheckpoint(this DockerCheckpointRmSettings toolSettings, string checkpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Checkpoint = checkpoint;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCheckpointRmSettings.Checkpoint"/></em></p>
        ///   <p>CHECKPOINT</p>
        /// </summary>
        [Pure]
        public static DockerCheckpointRmSettings ResetCheckpoint(this DockerCheckpointRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Checkpoint = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerPushSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerPushSettingsExtensions
    {
        #region DisableContentTrust
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPushSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image signing.</p>
        /// </summary>
        [Pure]
        public static DockerPushSettings SetDisableContentTrust(this DockerPushSettings toolSettings, bool? disableContentTrust)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = disableContentTrust;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPushSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image signing.</p>
        /// </summary>
        [Pure]
        public static DockerPushSettings ResetDisableContentTrust(this DockerPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerPushSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image signing.</p>
        /// </summary>
        [Pure]
        public static DockerPushSettings EnableDisableContentTrust(this DockerPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerPushSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image signing.</p>
        /// </summary>
        [Pure]
        public static DockerPushSettings DisableDisableContentTrust(this DockerPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerPushSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image signing.</p>
        /// </summary>
        [Pure]
        public static DockerPushSettings ToggleDisableContentTrust(this DockerPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = !toolSettings.DisableContentTrust;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPushSettings.Name"/></em></p>
        ///   <p>NAME[:TAG]</p>
        /// </summary>
        [Pure]
        public static DockerPushSettings SetName(this DockerPushSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPushSettings.Name"/></em></p>
        ///   <p>NAME[:TAG]</p>
        /// </summary>
        [Pure]
        public static DockerPushSettings ResetName(this DockerPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerNetworkCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerNetworkCreateSettingsExtensions
    {
        #region Attachable
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkCreateSettings.Attachable"/></em></p>
        ///   <p>Enable manual container attachment.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings SetAttachable(this DockerNetworkCreateSettings toolSettings, bool? attachable)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Attachable = attachable;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNetworkCreateSettings.Attachable"/></em></p>
        ///   <p>Enable manual container attachment.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings ResetAttachable(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Attachable = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerNetworkCreateSettings.Attachable"/></em></p>
        ///   <p>Enable manual container attachment.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings EnableAttachable(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Attachable = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerNetworkCreateSettings.Attachable"/></em></p>
        ///   <p>Enable manual container attachment.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings DisableAttachable(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Attachable = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerNetworkCreateSettings.Attachable"/></em></p>
        ///   <p>Enable manual container attachment.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings ToggleAttachable(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Attachable = !toolSettings.Attachable;
            return toolSettings;
        }
        #endregion
        #region AuxAddress
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkCreateSettings.AuxAddress"/> to a new dictionary</em></p>
        ///   <p>Auxiliary IPv4 or IPv6 addresses used by Network driver.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings SetAuxAddress(this DockerNetworkCreateSettings toolSettings, IDictionary<string, string> auxAddress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuxAddressInternal = auxAddress.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerNetworkCreateSettings.AuxAddress"/></em></p>
        ///   <p>Auxiliary IPv4 or IPv6 addresses used by Network driver.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings ClearAuxAddress(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuxAddressInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds a new key-value-pair <see cref="DockerNetworkCreateSettings.AuxAddress"/></em></p>
        ///   <p>Auxiliary IPv4 or IPv6 addresses used by Network driver.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings AddAuxAddress(this DockerNetworkCreateSettings toolSettings, string auxAddressKey, string auxAddressValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuxAddressInternal.Add(auxAddressKey, auxAddressValue);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes a key-value-pair from <see cref="DockerNetworkCreateSettings.AuxAddress"/></em></p>
        ///   <p>Auxiliary IPv4 or IPv6 addresses used by Network driver.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings RemoveAuxAddress(this DockerNetworkCreateSettings toolSettings, string auxAddressKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuxAddressInternal.Remove(auxAddressKey);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets a key-value-pair in <see cref="DockerNetworkCreateSettings.AuxAddress"/></em></p>
        ///   <p>Auxiliary IPv4 or IPv6 addresses used by Network driver.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings SetAuxAddress(this DockerNetworkCreateSettings toolSettings, string auxAddressKey, string auxAddressValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AuxAddressInternal[auxAddressKey] = auxAddressValue;
            return toolSettings;
        }
        #endregion
        #region ConfigFrom
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkCreateSettings.ConfigFrom"/></em></p>
        ///   <p>The network from which copying the configuration.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings SetConfigFrom(this DockerNetworkCreateSettings toolSettings, string configFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigFrom = configFrom;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNetworkCreateSettings.ConfigFrom"/></em></p>
        ///   <p>The network from which copying the configuration.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings ResetConfigFrom(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigFrom = null;
            return toolSettings;
        }
        #endregion
        #region ConfigOnly
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkCreateSettings.ConfigOnly"/></em></p>
        ///   <p>Create a configuration only network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings SetConfigOnly(this DockerNetworkCreateSettings toolSettings, bool? configOnly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigOnly = configOnly;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNetworkCreateSettings.ConfigOnly"/></em></p>
        ///   <p>Create a configuration only network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings ResetConfigOnly(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigOnly = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerNetworkCreateSettings.ConfigOnly"/></em></p>
        ///   <p>Create a configuration only network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings EnableConfigOnly(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigOnly = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerNetworkCreateSettings.ConfigOnly"/></em></p>
        ///   <p>Create a configuration only network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings DisableConfigOnly(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigOnly = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerNetworkCreateSettings.ConfigOnly"/></em></p>
        ///   <p>Create a configuration only network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings ToggleConfigOnly(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ConfigOnly = !toolSettings.ConfigOnly;
            return toolSettings;
        }
        #endregion
        #region Driver
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkCreateSettings.Driver"/></em></p>
        ///   <p>Driver to manage the Network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings SetDriver(this DockerNetworkCreateSettings toolSettings, string driver)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Driver = driver;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNetworkCreateSettings.Driver"/></em></p>
        ///   <p>Driver to manage the Network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings ResetDriver(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Driver = null;
            return toolSettings;
        }
        #endregion
        #region Gateway
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkCreateSettings.Gateway"/> to a new list</em></p>
        ///   <p>IPv4 or IPv6 Gateway for the master subnet.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings SetGateway(this DockerNetworkCreateSettings toolSettings, params string[] gateway)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GatewayInternal = gateway.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkCreateSettings.Gateway"/> to a new list</em></p>
        ///   <p>IPv4 or IPv6 Gateway for the master subnet.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings SetGateway(this DockerNetworkCreateSettings toolSettings, IEnumerable<string> gateway)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GatewayInternal = gateway.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNetworkCreateSettings.Gateway"/></em></p>
        ///   <p>IPv4 or IPv6 Gateway for the master subnet.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings AddGateway(this DockerNetworkCreateSettings toolSettings, params string[] gateway)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GatewayInternal.AddRange(gateway);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNetworkCreateSettings.Gateway"/></em></p>
        ///   <p>IPv4 or IPv6 Gateway for the master subnet.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings AddGateway(this DockerNetworkCreateSettings toolSettings, IEnumerable<string> gateway)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GatewayInternal.AddRange(gateway);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerNetworkCreateSettings.Gateway"/></em></p>
        ///   <p>IPv4 or IPv6 Gateway for the master subnet.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings ClearGateway(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GatewayInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNetworkCreateSettings.Gateway"/></em></p>
        ///   <p>IPv4 or IPv6 Gateway for the master subnet.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings RemoveGateway(this DockerNetworkCreateSettings toolSettings, params string[] gateway)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(gateway);
            toolSettings.GatewayInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNetworkCreateSettings.Gateway"/></em></p>
        ///   <p>IPv4 or IPv6 Gateway for the master subnet.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings RemoveGateway(this DockerNetworkCreateSettings toolSettings, IEnumerable<string> gateway)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(gateway);
            toolSettings.GatewayInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Ingress
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkCreateSettings.Ingress"/></em></p>
        ///   <p>Create swarm routing-mesh network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings SetIngress(this DockerNetworkCreateSettings toolSettings, bool? ingress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ingress = ingress;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNetworkCreateSettings.Ingress"/></em></p>
        ///   <p>Create swarm routing-mesh network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings ResetIngress(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ingress = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerNetworkCreateSettings.Ingress"/></em></p>
        ///   <p>Create swarm routing-mesh network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings EnableIngress(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ingress = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerNetworkCreateSettings.Ingress"/></em></p>
        ///   <p>Create swarm routing-mesh network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings DisableIngress(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ingress = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerNetworkCreateSettings.Ingress"/></em></p>
        ///   <p>Create swarm routing-mesh network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings ToggleIngress(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ingress = !toolSettings.Ingress;
            return toolSettings;
        }
        #endregion
        #region Internal
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkCreateSettings.Internal"/></em></p>
        ///   <p>Restrict external access to the network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings SetInternal(this DockerNetworkCreateSettings toolSettings, bool? @internal)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Internal = @internal;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNetworkCreateSettings.Internal"/></em></p>
        ///   <p>Restrict external access to the network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings ResetInternal(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Internal = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerNetworkCreateSettings.Internal"/></em></p>
        ///   <p>Restrict external access to the network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings EnableInternal(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Internal = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerNetworkCreateSettings.Internal"/></em></p>
        ///   <p>Restrict external access to the network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings DisableInternal(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Internal = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerNetworkCreateSettings.Internal"/></em></p>
        ///   <p>Restrict external access to the network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings ToggleInternal(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Internal = !toolSettings.Internal;
            return toolSettings;
        }
        #endregion
        #region IpRange
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkCreateSettings.IpRange"/> to a new list</em></p>
        ///   <p>Allocate container ip from a sub-range.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings SetIpRange(this DockerNetworkCreateSettings toolSettings, params string[] ipRange)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpRangeInternal = ipRange.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkCreateSettings.IpRange"/> to a new list</em></p>
        ///   <p>Allocate container ip from a sub-range.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings SetIpRange(this DockerNetworkCreateSettings toolSettings, IEnumerable<string> ipRange)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpRangeInternal = ipRange.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNetworkCreateSettings.IpRange"/></em></p>
        ///   <p>Allocate container ip from a sub-range.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings AddIpRange(this DockerNetworkCreateSettings toolSettings, params string[] ipRange)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpRangeInternal.AddRange(ipRange);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNetworkCreateSettings.IpRange"/></em></p>
        ///   <p>Allocate container ip from a sub-range.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings AddIpRange(this DockerNetworkCreateSettings toolSettings, IEnumerable<string> ipRange)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpRangeInternal.AddRange(ipRange);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerNetworkCreateSettings.IpRange"/></em></p>
        ///   <p>Allocate container ip from a sub-range.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings ClearIpRange(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpRangeInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNetworkCreateSettings.IpRange"/></em></p>
        ///   <p>Allocate container ip from a sub-range.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings RemoveIpRange(this DockerNetworkCreateSettings toolSettings, params string[] ipRange)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ipRange);
            toolSettings.IpRangeInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNetworkCreateSettings.IpRange"/></em></p>
        ///   <p>Allocate container ip from a sub-range.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings RemoveIpRange(this DockerNetworkCreateSettings toolSettings, IEnumerable<string> ipRange)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(ipRange);
            toolSettings.IpRangeInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region IpamDriver
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkCreateSettings.IpamDriver"/></em></p>
        ///   <p>IP Address Management Driver.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings SetIpamDriver(this DockerNetworkCreateSettings toolSettings, string ipamDriver)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpamDriver = ipamDriver;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNetworkCreateSettings.IpamDriver"/></em></p>
        ///   <p>IP Address Management Driver.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings ResetIpamDriver(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpamDriver = null;
            return toolSettings;
        }
        #endregion
        #region IpamOpt
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkCreateSettings.IpamOpt"/> to a new dictionary</em></p>
        ///   <p>Set IPAM driver specific options.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings SetIpamOpt(this DockerNetworkCreateSettings toolSettings, IDictionary<string, string> ipamOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpamOptInternal = ipamOpt.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerNetworkCreateSettings.IpamOpt"/></em></p>
        ///   <p>Set IPAM driver specific options.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings ClearIpamOpt(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpamOptInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds a new key-value-pair <see cref="DockerNetworkCreateSettings.IpamOpt"/></em></p>
        ///   <p>Set IPAM driver specific options.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings AddIpamOpt(this DockerNetworkCreateSettings toolSettings, string ipamOptKey, string ipamOptValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpamOptInternal.Add(ipamOptKey, ipamOptValue);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes a key-value-pair from <see cref="DockerNetworkCreateSettings.IpamOpt"/></em></p>
        ///   <p>Set IPAM driver specific options.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings RemoveIpamOpt(this DockerNetworkCreateSettings toolSettings, string ipamOptKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpamOptInternal.Remove(ipamOptKey);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets a key-value-pair in <see cref="DockerNetworkCreateSettings.IpamOpt"/></em></p>
        ///   <p>Set IPAM driver specific options.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings SetIpamOpt(this DockerNetworkCreateSettings toolSettings, string ipamOptKey, string ipamOptValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IpamOptInternal[ipamOptKey] = ipamOptValue;
            return toolSettings;
        }
        #endregion
        #region Ipv6
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkCreateSettings.Ipv6"/></em></p>
        ///   <p>Enable IPv6 networking.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings SetIpv6(this DockerNetworkCreateSettings toolSettings, bool? ipv6)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ipv6 = ipv6;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNetworkCreateSettings.Ipv6"/></em></p>
        ///   <p>Enable IPv6 networking.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings ResetIpv6(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ipv6 = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerNetworkCreateSettings.Ipv6"/></em></p>
        ///   <p>Enable IPv6 networking.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings EnableIpv6(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ipv6 = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerNetworkCreateSettings.Ipv6"/></em></p>
        ///   <p>Enable IPv6 networking.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings DisableIpv6(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ipv6 = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerNetworkCreateSettings.Ipv6"/></em></p>
        ///   <p>Enable IPv6 networking.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings ToggleIpv6(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ipv6 = !toolSettings.Ipv6;
            return toolSettings;
        }
        #endregion
        #region Label
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkCreateSettings.Label"/> to a new list</em></p>
        ///   <p>Set metadata on a network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings SetLabel(this DockerNetworkCreateSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal = label.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkCreateSettings.Label"/> to a new list</em></p>
        ///   <p>Set metadata on a network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings SetLabel(this DockerNetworkCreateSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal = label.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNetworkCreateSettings.Label"/></em></p>
        ///   <p>Set metadata on a network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings AddLabel(this DockerNetworkCreateSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.AddRange(label);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNetworkCreateSettings.Label"/></em></p>
        ///   <p>Set metadata on a network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings AddLabel(this DockerNetworkCreateSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.AddRange(label);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerNetworkCreateSettings.Label"/></em></p>
        ///   <p>Set metadata on a network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings ClearLabel(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNetworkCreateSettings.Label"/></em></p>
        ///   <p>Set metadata on a network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings RemoveLabel(this DockerNetworkCreateSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(label);
            toolSettings.LabelInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNetworkCreateSettings.Label"/></em></p>
        ///   <p>Set metadata on a network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings RemoveLabel(this DockerNetworkCreateSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(label);
            toolSettings.LabelInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Opt
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkCreateSettings.Opt"/> to a new dictionary</em></p>
        ///   <p>Set driver specific options.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings SetOpt(this DockerNetworkCreateSettings toolSettings, IDictionary<string, string> opt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OptInternal = opt.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerNetworkCreateSettings.Opt"/></em></p>
        ///   <p>Set driver specific options.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings ClearOpt(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OptInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds a new key-value-pair <see cref="DockerNetworkCreateSettings.Opt"/></em></p>
        ///   <p>Set driver specific options.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings AddOpt(this DockerNetworkCreateSettings toolSettings, string optKey, string optValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OptInternal.Add(optKey, optValue);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes a key-value-pair from <see cref="DockerNetworkCreateSettings.Opt"/></em></p>
        ///   <p>Set driver specific options.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings RemoveOpt(this DockerNetworkCreateSettings toolSettings, string optKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OptInternal.Remove(optKey);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets a key-value-pair in <see cref="DockerNetworkCreateSettings.Opt"/></em></p>
        ///   <p>Set driver specific options.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings SetOpt(this DockerNetworkCreateSettings toolSettings, string optKey, string optValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OptInternal[optKey] = optValue;
            return toolSettings;
        }
        #endregion
        #region Scope
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkCreateSettings.Scope"/></em></p>
        ///   <p>Control the network's scope.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings SetScope(this DockerNetworkCreateSettings toolSettings, string scope)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Scope = scope;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNetworkCreateSettings.Scope"/></em></p>
        ///   <p>Control the network's scope.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings ResetScope(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Scope = null;
            return toolSettings;
        }
        #endregion
        #region Subnet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkCreateSettings.Subnet"/> to a new list</em></p>
        ///   <p>Subnet in CIDR format that represents a network segment.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings SetSubnet(this DockerNetworkCreateSettings toolSettings, params string[] subnet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SubnetInternal = subnet.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkCreateSettings.Subnet"/> to a new list</em></p>
        ///   <p>Subnet in CIDR format that represents a network segment.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings SetSubnet(this DockerNetworkCreateSettings toolSettings, IEnumerable<string> subnet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SubnetInternal = subnet.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNetworkCreateSettings.Subnet"/></em></p>
        ///   <p>Subnet in CIDR format that represents a network segment.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings AddSubnet(this DockerNetworkCreateSettings toolSettings, params string[] subnet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SubnetInternal.AddRange(subnet);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNetworkCreateSettings.Subnet"/></em></p>
        ///   <p>Subnet in CIDR format that represents a network segment.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings AddSubnet(this DockerNetworkCreateSettings toolSettings, IEnumerable<string> subnet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SubnetInternal.AddRange(subnet);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerNetworkCreateSettings.Subnet"/></em></p>
        ///   <p>Subnet in CIDR format that represents a network segment.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings ClearSubnet(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SubnetInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNetworkCreateSettings.Subnet"/></em></p>
        ///   <p>Subnet in CIDR format that represents a network segment.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings RemoveSubnet(this DockerNetworkCreateSettings toolSettings, params string[] subnet)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(subnet);
            toolSettings.SubnetInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNetworkCreateSettings.Subnet"/></em></p>
        ///   <p>Subnet in CIDR format that represents a network segment.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings RemoveSubnet(this DockerNetworkCreateSettings toolSettings, IEnumerable<string> subnet)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(subnet);
            toolSettings.SubnetInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Network
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkCreateSettings.Network"/></em></p>
        ///   <p>NETWORK</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings SetNetwork(this DockerNetworkCreateSettings toolSettings, string network)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Network = network;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNetworkCreateSettings.Network"/></em></p>
        ///   <p>NETWORK</p>
        /// </summary>
        [Pure]
        public static DockerNetworkCreateSettings ResetNetwork(this DockerNetworkCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Network = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerVolumeLsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerVolumeLsSettingsExtensions
    {
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="DockerVolumeLsSettings.Filter"/></em></p>
        ///   <p>Provide filter values (e.g. 'dangling=true').</p>
        /// </summary>
        [Pure]
        public static DockerVolumeLsSettings SetFilter(this DockerVolumeLsSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerVolumeLsSettings.Filter"/></em></p>
        ///   <p>Provide filter values (e.g. 'dangling=true').</p>
        /// </summary>
        [Pure]
        public static DockerVolumeLsSettings ResetFilter(this DockerVolumeLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerVolumeLsSettings.Format"/></em></p>
        ///   <p>Pretty-print volumes using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeLsSettings SetFormat(this DockerVolumeLsSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerVolumeLsSettings.Format"/></em></p>
        ///   <p>Pretty-print volumes using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeLsSettings ResetFormat(this DockerVolumeLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerVolumeLsSettings.Quiet"/></em></p>
        ///   <p>Only display volume names.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeLsSettings SetQuiet(this DockerVolumeLsSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerVolumeLsSettings.Quiet"/></em></p>
        ///   <p>Only display volume names.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeLsSettings ResetQuiet(this DockerVolumeLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerVolumeLsSettings.Quiet"/></em></p>
        ///   <p>Only display volume names.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeLsSettings EnableQuiet(this DockerVolumeLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerVolumeLsSettings.Quiet"/></em></p>
        ///   <p>Only display volume names.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeLsSettings DisableQuiet(this DockerVolumeLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerVolumeLsSettings.Quiet"/></em></p>
        ///   <p>Only display volume names.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeLsSettings ToggleQuiet(this DockerVolumeLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerTrustInspectSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerTrustInspectSettingsExtensions
    {
        #region Images
        /// <summary>
        ///   <p><em>Sets <see cref="DockerTrustInspectSettings.Images"/> to a new list</em></p>
        ///   <p>IMAGE[:TAG]</p>
        /// </summary>
        [Pure]
        public static DockerTrustInspectSettings SetImages(this DockerTrustInspectSettings toolSettings, params string[] images)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal = images.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerTrustInspectSettings.Images"/> to a new list</em></p>
        ///   <p>IMAGE[:TAG]</p>
        /// </summary>
        [Pure]
        public static DockerTrustInspectSettings SetImages(this DockerTrustInspectSettings toolSettings, IEnumerable<string> images)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal = images.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerTrustInspectSettings.Images"/></em></p>
        ///   <p>IMAGE[:TAG]</p>
        /// </summary>
        [Pure]
        public static DockerTrustInspectSettings AddImages(this DockerTrustInspectSettings toolSettings, params string[] images)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal.AddRange(images);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerTrustInspectSettings.Images"/></em></p>
        ///   <p>IMAGE[:TAG]</p>
        /// </summary>
        [Pure]
        public static DockerTrustInspectSettings AddImages(this DockerTrustInspectSettings toolSettings, IEnumerable<string> images)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal.AddRange(images);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerTrustInspectSettings.Images"/></em></p>
        ///   <p>IMAGE[:TAG]</p>
        /// </summary>
        [Pure]
        public static DockerTrustInspectSettings ClearImages(this DockerTrustInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerTrustInspectSettings.Images"/></em></p>
        ///   <p>IMAGE[:TAG]</p>
        /// </summary>
        [Pure]
        public static DockerTrustInspectSettings RemoveImages(this DockerTrustInspectSettings toolSettings, params string[] images)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(images);
            toolSettings.ImagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerTrustInspectSettings.Images"/></em></p>
        ///   <p>IMAGE[:TAG]</p>
        /// </summary>
        [Pure]
        public static DockerTrustInspectSettings RemoveImages(this DockerTrustInspectSettings toolSettings, IEnumerable<string> images)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(images);
            toolSettings.ImagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerNetworkInspectSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerNetworkInspectSettingsExtensions
    {
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkInspectSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkInspectSettings SetFormat(this DockerNetworkInspectSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNetworkInspectSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkInspectSettings ResetFormat(this DockerNetworkInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkInspectSettings.Verbose"/></em></p>
        ///   <p>Verbose output for diagnostics.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkInspectSettings SetVerbose(this DockerNetworkInspectSettings toolSettings, bool? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNetworkInspectSettings.Verbose"/></em></p>
        ///   <p>Verbose output for diagnostics.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkInspectSettings ResetVerbose(this DockerNetworkInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerNetworkInspectSettings.Verbose"/></em></p>
        ///   <p>Verbose output for diagnostics.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkInspectSettings EnableVerbose(this DockerNetworkInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerNetworkInspectSettings.Verbose"/></em></p>
        ///   <p>Verbose output for diagnostics.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkInspectSettings DisableVerbose(this DockerNetworkInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerNetworkInspectSettings.Verbose"/></em></p>
        ///   <p>Verbose output for diagnostics.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkInspectSettings ToggleVerbose(this DockerNetworkInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = !toolSettings.Verbose;
            return toolSettings;
        }
        #endregion
        #region Networks
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkInspectSettings.Networks"/> to a new list</em></p>
        ///   <p>NETWORK</p>
        /// </summary>
        [Pure]
        public static DockerNetworkInspectSettings SetNetworks(this DockerNetworkInspectSettings toolSettings, params string[] networks)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworksInternal = networks.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkInspectSettings.Networks"/> to a new list</em></p>
        ///   <p>NETWORK</p>
        /// </summary>
        [Pure]
        public static DockerNetworkInspectSettings SetNetworks(this DockerNetworkInspectSettings toolSettings, IEnumerable<string> networks)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworksInternal = networks.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNetworkInspectSettings.Networks"/></em></p>
        ///   <p>NETWORK</p>
        /// </summary>
        [Pure]
        public static DockerNetworkInspectSettings AddNetworks(this DockerNetworkInspectSettings toolSettings, params string[] networks)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworksInternal.AddRange(networks);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNetworkInspectSettings.Networks"/></em></p>
        ///   <p>NETWORK</p>
        /// </summary>
        [Pure]
        public static DockerNetworkInspectSettings AddNetworks(this DockerNetworkInspectSettings toolSettings, IEnumerable<string> networks)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworksInternal.AddRange(networks);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerNetworkInspectSettings.Networks"/></em></p>
        ///   <p>NETWORK</p>
        /// </summary>
        [Pure]
        public static DockerNetworkInspectSettings ClearNetworks(this DockerNetworkInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworksInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNetworkInspectSettings.Networks"/></em></p>
        ///   <p>NETWORK</p>
        /// </summary>
        [Pure]
        public static DockerNetworkInspectSettings RemoveNetworks(this DockerNetworkInspectSettings toolSettings, params string[] networks)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(networks);
            toolSettings.NetworksInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNetworkInspectSettings.Networks"/></em></p>
        ///   <p>NETWORK</p>
        /// </summary>
        [Pure]
        public static DockerNetworkInspectSettings RemoveNetworks(this DockerNetworkInspectSettings toolSettings, IEnumerable<string> networks)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(networks);
            toolSettings.NetworksInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerEngineActivateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerEngineActivateSettingsExtensions
    {
        #region Containerd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerEngineActivateSettings.Containerd"/></em></p>
        ///   <p>override default location of containerd endpoint.</p>
        /// </summary>
        [Pure]
        public static DockerEngineActivateSettings SetContainerd(this DockerEngineActivateSettings toolSettings, string containerd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Containerd = containerd;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerEngineActivateSettings.Containerd"/></em></p>
        ///   <p>override default location of containerd endpoint.</p>
        /// </summary>
        [Pure]
        public static DockerEngineActivateSettings ResetContainerd(this DockerEngineActivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Containerd = null;
            return toolSettings;
        }
        #endregion
        #region DisplayOnly
        /// <summary>
        ///   <p><em>Sets <see cref="DockerEngineActivateSettings.DisplayOnly"/></em></p>
        ///   <p>only display license information and exit.</p>
        /// </summary>
        [Pure]
        public static DockerEngineActivateSettings SetDisplayOnly(this DockerEngineActivateSettings toolSettings, bool? displayOnly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisplayOnly = displayOnly;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerEngineActivateSettings.DisplayOnly"/></em></p>
        ///   <p>only display license information and exit.</p>
        /// </summary>
        [Pure]
        public static DockerEngineActivateSettings ResetDisplayOnly(this DockerEngineActivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisplayOnly = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerEngineActivateSettings.DisplayOnly"/></em></p>
        ///   <p>only display license information and exit.</p>
        /// </summary>
        [Pure]
        public static DockerEngineActivateSettings EnableDisplayOnly(this DockerEngineActivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisplayOnly = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerEngineActivateSettings.DisplayOnly"/></em></p>
        ///   <p>only display license information and exit.</p>
        /// </summary>
        [Pure]
        public static DockerEngineActivateSettings DisableDisplayOnly(this DockerEngineActivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisplayOnly = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerEngineActivateSettings.DisplayOnly"/></em></p>
        ///   <p>only display license information and exit.</p>
        /// </summary>
        [Pure]
        public static DockerEngineActivateSettings ToggleDisplayOnly(this DockerEngineActivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisplayOnly = !toolSettings.DisplayOnly;
            return toolSettings;
        }
        #endregion
        #region EngineImage
        /// <summary>
        ///   <p><em>Sets <see cref="DockerEngineActivateSettings.EngineImage"/></em></p>
        ///   <p>Specify engine image.</p>
        /// </summary>
        [Pure]
        public static DockerEngineActivateSettings SetEngineImage(this DockerEngineActivateSettings toolSettings, string engineImage)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EngineImage = engineImage;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerEngineActivateSettings.EngineImage"/></em></p>
        ///   <p>Specify engine image.</p>
        /// </summary>
        [Pure]
        public static DockerEngineActivateSettings ResetEngineImage(this DockerEngineActivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EngineImage = null;
            return toolSettings;
        }
        #endregion
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerEngineActivateSettings.Format"/></em></p>
        ///   <p>Pretty-print licenses using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerEngineActivateSettings SetFormat(this DockerEngineActivateSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerEngineActivateSettings.Format"/></em></p>
        ///   <p>Pretty-print licenses using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerEngineActivateSettings ResetFormat(this DockerEngineActivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region License
        /// <summary>
        ///   <p><em>Sets <see cref="DockerEngineActivateSettings.License"/></em></p>
        ///   <p>License File.</p>
        /// </summary>
        [Pure]
        public static DockerEngineActivateSettings SetLicense(this DockerEngineActivateSettings toolSettings, string license)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.License = license;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerEngineActivateSettings.License"/></em></p>
        ///   <p>License File.</p>
        /// </summary>
        [Pure]
        public static DockerEngineActivateSettings ResetLicense(this DockerEngineActivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.License = null;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerEngineActivateSettings.Quiet"/></em></p>
        ///   <p>Only display available licenses by ID.</p>
        /// </summary>
        [Pure]
        public static DockerEngineActivateSettings SetQuiet(this DockerEngineActivateSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerEngineActivateSettings.Quiet"/></em></p>
        ///   <p>Only display available licenses by ID.</p>
        /// </summary>
        [Pure]
        public static DockerEngineActivateSettings ResetQuiet(this DockerEngineActivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerEngineActivateSettings.Quiet"/></em></p>
        ///   <p>Only display available licenses by ID.</p>
        /// </summary>
        [Pure]
        public static DockerEngineActivateSettings EnableQuiet(this DockerEngineActivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerEngineActivateSettings.Quiet"/></em></p>
        ///   <p>Only display available licenses by ID.</p>
        /// </summary>
        [Pure]
        public static DockerEngineActivateSettings DisableQuiet(this DockerEngineActivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerEngineActivateSettings.Quiet"/></em></p>
        ///   <p>Only display available licenses by ID.</p>
        /// </summary>
        [Pure]
        public static DockerEngineActivateSettings ToggleQuiet(this DockerEngineActivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
        #region RegistryPrefix
        /// <summary>
        ///   <p><em>Sets <see cref="DockerEngineActivateSettings.RegistryPrefix"/></em></p>
        ///   <p>Override the default location where engine images are pulled.</p>
        /// </summary>
        [Pure]
        public static DockerEngineActivateSettings SetRegistryPrefix(this DockerEngineActivateSettings toolSettings, string registryPrefix)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RegistryPrefix = registryPrefix;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerEngineActivateSettings.RegistryPrefix"/></em></p>
        ///   <p>Override the default location where engine images are pulled.</p>
        /// </summary>
        [Pure]
        public static DockerEngineActivateSettings ResetRegistryPrefix(this DockerEngineActivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RegistryPrefix = null;
            return toolSettings;
        }
        #endregion
        #region Version
        /// <summary>
        ///   <p><em>Sets <see cref="DockerEngineActivateSettings.Version"/></em></p>
        ///   <p>Specify engine version (default is to use currently running version).</p>
        /// </summary>
        [Pure]
        public static DockerEngineActivateSettings SetVersion(this DockerEngineActivateSettings toolSettings, string version)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Version = version;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerEngineActivateSettings.Version"/></em></p>
        ///   <p>Specify engine version (default is to use currently running version).</p>
        /// </summary>
        [Pure]
        public static DockerEngineActivateSettings ResetVersion(this DockerEngineActivateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Version = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContextUseSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContextUseSettingsExtensions
    {
        #region Context
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContextUseSettings.Context"/></em></p>
        ///   <p>CONTEXT</p>
        /// </summary>
        [Pure]
        public static DockerContextUseSettings SetContext(this DockerContextUseSettings toolSettings, string context)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Context = context;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContextUseSettings.Context"/></em></p>
        ///   <p>CONTEXT</p>
        /// </summary>
        [Pure]
        public static DockerContextUseSettings ResetContext(this DockerContextUseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Context = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerVolumeRmSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerVolumeRmSettingsExtensions
    {
        #region Force
        /// <summary>
        ///   <p><em>Sets <see cref="DockerVolumeRmSettings.Force"/></em></p>
        ///   <p>Force the removal of one or more volumes.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeRmSettings SetForce(this DockerVolumeRmSettings toolSettings, bool? force)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = force;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerVolumeRmSettings.Force"/></em></p>
        ///   <p>Force the removal of one or more volumes.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeRmSettings ResetForce(this DockerVolumeRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerVolumeRmSettings.Force"/></em></p>
        ///   <p>Force the removal of one or more volumes.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeRmSettings EnableForce(this DockerVolumeRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerVolumeRmSettings.Force"/></em></p>
        ///   <p>Force the removal of one or more volumes.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeRmSettings DisableForce(this DockerVolumeRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerVolumeRmSettings.Force"/></em></p>
        ///   <p>Force the removal of one or more volumes.</p>
        /// </summary>
        [Pure]
        public static DockerVolumeRmSettings ToggleForce(this DockerVolumeRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = !toolSettings.Force;
            return toolSettings;
        }
        #endregion
        #region Volumes
        /// <summary>
        ///   <p><em>Sets <see cref="DockerVolumeRmSettings.Volumes"/> to a new list</em></p>
        ///   <p>VOLUME</p>
        /// </summary>
        [Pure]
        public static DockerVolumeRmSettings SetVolumes(this DockerVolumeRmSettings toolSettings, params string[] volumes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesInternal = volumes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerVolumeRmSettings.Volumes"/> to a new list</em></p>
        ///   <p>VOLUME</p>
        /// </summary>
        [Pure]
        public static DockerVolumeRmSettings SetVolumes(this DockerVolumeRmSettings toolSettings, IEnumerable<string> volumes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesInternal = volumes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerVolumeRmSettings.Volumes"/></em></p>
        ///   <p>VOLUME</p>
        /// </summary>
        [Pure]
        public static DockerVolumeRmSettings AddVolumes(this DockerVolumeRmSettings toolSettings, params string[] volumes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesInternal.AddRange(volumes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerVolumeRmSettings.Volumes"/></em></p>
        ///   <p>VOLUME</p>
        /// </summary>
        [Pure]
        public static DockerVolumeRmSettings AddVolumes(this DockerVolumeRmSettings toolSettings, IEnumerable<string> volumes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesInternal.AddRange(volumes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerVolumeRmSettings.Volumes"/></em></p>
        ///   <p>VOLUME</p>
        /// </summary>
        [Pure]
        public static DockerVolumeRmSettings ClearVolumes(this DockerVolumeRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerVolumeRmSettings.Volumes"/></em></p>
        ///   <p>VOLUME</p>
        /// </summary>
        [Pure]
        public static DockerVolumeRmSettings RemoveVolumes(this DockerVolumeRmSettings toolSettings, params string[] volumes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(volumes);
            toolSettings.VolumesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerVolumeRmSettings.Volumes"/></em></p>
        ///   <p>VOLUME</p>
        /// </summary>
        [Pure]
        public static DockerVolumeRmSettings RemoveVolumes(this DockerVolumeRmSettings toolSettings, IEnumerable<string> volumes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(volumes);
            toolSettings.VolumesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerManifestCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerManifestCreateSettingsExtensions
    {
        #region ManifestList
        /// <summary>
        ///   <p><em>Sets <see cref="DockerManifestCreateSettings.ManifestList"/></em></p>
        ///   <p>MANIFEST_LIST</p>
        /// </summary>
        [Pure]
        public static DockerManifestCreateSettings SetManifestList(this DockerManifestCreateSettings toolSettings, string manifestList)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManifestList = manifestList;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerManifestCreateSettings.ManifestList"/></em></p>
        ///   <p>MANIFEST_LIST</p>
        /// </summary>
        [Pure]
        public static DockerManifestCreateSettings ResetManifestList(this DockerManifestCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManifestList = null;
            return toolSettings;
        }
        #endregion
        #region Manifests
        /// <summary>
        ///   <p><em>Sets <see cref="DockerManifestCreateSettings.Manifests"/> to a new list</em></p>
        ///   <p>MANIFEST</p>
        /// </summary>
        [Pure]
        public static DockerManifestCreateSettings SetManifests(this DockerManifestCreateSettings toolSettings, params string[] manifests)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManifestsInternal = manifests.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerManifestCreateSettings.Manifests"/> to a new list</em></p>
        ///   <p>MANIFEST</p>
        /// </summary>
        [Pure]
        public static DockerManifestCreateSettings SetManifests(this DockerManifestCreateSettings toolSettings, IEnumerable<string> manifests)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManifestsInternal = manifests.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerManifestCreateSettings.Manifests"/></em></p>
        ///   <p>MANIFEST</p>
        /// </summary>
        [Pure]
        public static DockerManifestCreateSettings AddManifests(this DockerManifestCreateSettings toolSettings, params string[] manifests)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManifestsInternal.AddRange(manifests);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerManifestCreateSettings.Manifests"/></em></p>
        ///   <p>MANIFEST</p>
        /// </summary>
        [Pure]
        public static DockerManifestCreateSettings AddManifests(this DockerManifestCreateSettings toolSettings, IEnumerable<string> manifests)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManifestsInternal.AddRange(manifests);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerManifestCreateSettings.Manifests"/></em></p>
        ///   <p>MANIFEST</p>
        /// </summary>
        [Pure]
        public static DockerManifestCreateSettings ClearManifests(this DockerManifestCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManifestsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerManifestCreateSettings.Manifests"/></em></p>
        ///   <p>MANIFEST</p>
        /// </summary>
        [Pure]
        public static DockerManifestCreateSettings RemoveManifests(this DockerManifestCreateSettings toolSettings, params string[] manifests)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(manifests);
            toolSettings.ManifestsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerManifestCreateSettings.Manifests"/></em></p>
        ///   <p>MANIFEST</p>
        /// </summary>
        [Pure]
        public static DockerManifestCreateSettings RemoveManifests(this DockerManifestCreateSettings toolSettings, IEnumerable<string> manifests)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(manifests);
            toolSettings.ManifestsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerManifestPushSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerManifestPushSettingsExtensions
    {
        #region Insecure
        /// <summary>
        ///   <p><em>Sets <see cref="DockerManifestPushSettings.Insecure"/></em></p>
        ///   <p>Allow push to an insecure registry.</p>
        /// </summary>
        [Pure]
        public static DockerManifestPushSettings SetInsecure(this DockerManifestPushSettings toolSettings, bool? insecure)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Insecure = insecure;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerManifestPushSettings.Insecure"/></em></p>
        ///   <p>Allow push to an insecure registry.</p>
        /// </summary>
        [Pure]
        public static DockerManifestPushSettings ResetInsecure(this DockerManifestPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Insecure = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerManifestPushSettings.Insecure"/></em></p>
        ///   <p>Allow push to an insecure registry.</p>
        /// </summary>
        [Pure]
        public static DockerManifestPushSettings EnableInsecure(this DockerManifestPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Insecure = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerManifestPushSettings.Insecure"/></em></p>
        ///   <p>Allow push to an insecure registry.</p>
        /// </summary>
        [Pure]
        public static DockerManifestPushSettings DisableInsecure(this DockerManifestPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Insecure = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerManifestPushSettings.Insecure"/></em></p>
        ///   <p>Allow push to an insecure registry.</p>
        /// </summary>
        [Pure]
        public static DockerManifestPushSettings ToggleInsecure(this DockerManifestPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Insecure = !toolSettings.Insecure;
            return toolSettings;
        }
        #endregion
        #region Purge
        /// <summary>
        ///   <p><em>Sets <see cref="DockerManifestPushSettings.Purge"/></em></p>
        ///   <p>Remove the local manifest list after push.</p>
        /// </summary>
        [Pure]
        public static DockerManifestPushSettings SetPurge(this DockerManifestPushSettings toolSettings, bool? purge)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Purge = purge;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerManifestPushSettings.Purge"/></em></p>
        ///   <p>Remove the local manifest list after push.</p>
        /// </summary>
        [Pure]
        public static DockerManifestPushSettings ResetPurge(this DockerManifestPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Purge = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerManifestPushSettings.Purge"/></em></p>
        ///   <p>Remove the local manifest list after push.</p>
        /// </summary>
        [Pure]
        public static DockerManifestPushSettings EnablePurge(this DockerManifestPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Purge = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerManifestPushSettings.Purge"/></em></p>
        ///   <p>Remove the local manifest list after push.</p>
        /// </summary>
        [Pure]
        public static DockerManifestPushSettings DisablePurge(this DockerManifestPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Purge = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerManifestPushSettings.Purge"/></em></p>
        ///   <p>Remove the local manifest list after push.</p>
        /// </summary>
        [Pure]
        public static DockerManifestPushSettings TogglePurge(this DockerManifestPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Purge = !toolSettings.Purge;
            return toolSettings;
        }
        #endregion
        #region ManifestList
        /// <summary>
        ///   <p><em>Sets <see cref="DockerManifestPushSettings.ManifestList"/></em></p>
        ///   <p>MANIFEST_LIST</p>
        /// </summary>
        [Pure]
        public static DockerManifestPushSettings SetManifestList(this DockerManifestPushSettings toolSettings, string manifestList)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManifestList = manifestList;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerManifestPushSettings.ManifestList"/></em></p>
        ///   <p>MANIFEST_LIST</p>
        /// </summary>
        [Pure]
        public static DockerManifestPushSettings ResetManifestList(this DockerManifestPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManifestList = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerPluginEnableSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerPluginEnableSettingsExtensions
    {
        #region Timeout
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginEnableSettings.Timeout"/></em></p>
        ///   <p>HTTP client timeout (in seconds).</p>
        /// </summary>
        [Pure]
        public static DockerPluginEnableSettings SetTimeout(this DockerPluginEnableSettings toolSettings, int? timeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = timeout;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPluginEnableSettings.Timeout"/></em></p>
        ///   <p>HTTP client timeout (in seconds).</p>
        /// </summary>
        [Pure]
        public static DockerPluginEnableSettings ResetTimeout(this DockerPluginEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timeout = null;
            return toolSettings;
        }
        #endregion
        #region Plugin
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginEnableSettings.Plugin"/></em></p>
        ///   <p>PLUGIN</p>
        /// </summary>
        [Pure]
        public static DockerPluginEnableSettings SetPlugin(this DockerPluginEnableSettings toolSettings, string plugin)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Plugin = plugin;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPluginEnableSettings.Plugin"/></em></p>
        ///   <p>PLUGIN</p>
        /// </summary>
        [Pure]
        public static DockerPluginEnableSettings ResetPlugin(this DockerPluginEnableSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Plugin = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerImportSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerImportSettingsExtensions
    {
        #region Change
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImportSettings.Change"/> to a new list</em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerImportSettings SetChange(this DockerImportSettings toolSettings, params string[] change)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ChangeInternal = change.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImportSettings.Change"/> to a new list</em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerImportSettings SetChange(this DockerImportSettings toolSettings, IEnumerable<string> change)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ChangeInternal = change.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerImportSettings.Change"/></em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerImportSettings AddChange(this DockerImportSettings toolSettings, params string[] change)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ChangeInternal.AddRange(change);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerImportSettings.Change"/></em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerImportSettings AddChange(this DockerImportSettings toolSettings, IEnumerable<string> change)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ChangeInternal.AddRange(change);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerImportSettings.Change"/></em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerImportSettings ClearChange(this DockerImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ChangeInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerImportSettings.Change"/></em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerImportSettings RemoveChange(this DockerImportSettings toolSettings, params string[] change)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(change);
            toolSettings.ChangeInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerImportSettings.Change"/></em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerImportSettings RemoveChange(this DockerImportSettings toolSettings, IEnumerable<string> change)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(change);
            toolSettings.ChangeInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Message
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImportSettings.Message"/></em></p>
        ///   <p>Set commit message for imported image.</p>
        /// </summary>
        [Pure]
        public static DockerImportSettings SetMessage(this DockerImportSettings toolSettings, string message)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Message = message;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImportSettings.Message"/></em></p>
        ///   <p>Set commit message for imported image.</p>
        /// </summary>
        [Pure]
        public static DockerImportSettings ResetMessage(this DockerImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Message = null;
            return toolSettings;
        }
        #endregion
        #region Platform
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImportSettings.Platform"/></em></p>
        ///   <p>Set platform if server is multi-platform capable.</p>
        /// </summary>
        [Pure]
        public static DockerImportSettings SetPlatform(this DockerImportSettings toolSettings, string platform)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = platform;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImportSettings.Platform"/></em></p>
        ///   <p>Set platform if server is multi-platform capable.</p>
        /// </summary>
        [Pure]
        public static DockerImportSettings ResetPlatform(this DockerImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = null;
            return toolSettings;
        }
        #endregion
        #region File
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImportSettings.File"/></em></p>
        ///   <p>file|URL|-</p>
        /// </summary>
        [Pure]
        public static DockerImportSettings SetFile(this DockerImportSettings toolSettings, string file)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = file;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImportSettings.File"/></em></p>
        ///   <p>file|URL|-</p>
        /// </summary>
        [Pure]
        public static DockerImportSettings ResetFile(this DockerImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = null;
            return toolSettings;
        }
        #endregion
        #region Repository
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImportSettings.Repository"/></em></p>
        ///   <p>[REPOSITORY[:TAG]]</p>
        /// </summary>
        [Pure]
        public static DockerImportSettings SetRepository(this DockerImportSettings toolSettings, string repository)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = repository;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImportSettings.Repository"/></em></p>
        ///   <p>[REPOSITORY[:TAG]]</p>
        /// </summary>
        [Pure]
        public static DockerImportSettings ResetRepository(this DockerImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContainerRunSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContainerRunSettingsExtensions
    {
        #region AddHost
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.AddHost"/> to a new list</em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetAddHost(this DockerContainerRunSettings toolSettings, params string[] addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal = addHost.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.AddHost"/> to a new list</em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetAddHost(this DockerContainerRunSettings toolSettings, IEnumerable<string> addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal = addHost.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddAddHost(this DockerContainerRunSettings toolSettings, params string[] addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal.AddRange(addHost);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddAddHost(this DockerContainerRunSettings toolSettings, IEnumerable<string> addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal.AddRange(addHost);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearAddHost(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveAddHost(this DockerContainerRunSettings toolSettings, params string[] addHost)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(addHost);
            toolSettings.AddHostInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveAddHost(this DockerContainerRunSettings toolSettings, IEnumerable<string> addHost)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(addHost);
            toolSettings.AddHostInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Attach
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Attach"/> to a new list</em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetAttach(this DockerContainerRunSettings toolSettings, params string[] attach)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AttachInternal = attach.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Attach"/> to a new list</em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetAttach(this DockerContainerRunSettings toolSettings, IEnumerable<string> attach)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AttachInternal = attach.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.Attach"/></em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddAttach(this DockerContainerRunSettings toolSettings, params string[] attach)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AttachInternal.AddRange(attach);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.Attach"/></em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddAttach(this DockerContainerRunSettings toolSettings, IEnumerable<string> attach)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AttachInternal.AddRange(attach);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.Attach"/></em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearAttach(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AttachInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.Attach"/></em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveAttach(this DockerContainerRunSettings toolSettings, params string[] attach)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(attach);
            toolSettings.AttachInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.Attach"/></em></p>
        ///   <p>Attach to STDIN, STDOUT or STDERR.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveAttach(this DockerContainerRunSettings toolSettings, IEnumerable<string> attach)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(attach);
            toolSettings.AttachInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region BlkioWeight
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.BlkioWeight"/></em></p>
        ///   <p>Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetBlkioWeight(this DockerContainerRunSettings toolSettings, int? blkioWeight)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeight = blkioWeight;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.BlkioWeight"/></em></p>
        ///   <p>Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetBlkioWeight(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeight = null;
            return toolSettings;
        }
        #endregion
        #region BlkioWeightDevice
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.BlkioWeightDevice"/> to a new list</em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetBlkioWeightDevice(this DockerContainerRunSettings toolSettings, params string[] blkioWeightDevice)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeightDeviceInternal = blkioWeightDevice.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.BlkioWeightDevice"/> to a new list</em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetBlkioWeightDevice(this DockerContainerRunSettings toolSettings, IEnumerable<string> blkioWeightDevice)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeightDeviceInternal = blkioWeightDevice.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.BlkioWeightDevice"/></em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddBlkioWeightDevice(this DockerContainerRunSettings toolSettings, params string[] blkioWeightDevice)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeightDeviceInternal.AddRange(blkioWeightDevice);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.BlkioWeightDevice"/></em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddBlkioWeightDevice(this DockerContainerRunSettings toolSettings, IEnumerable<string> blkioWeightDevice)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeightDeviceInternal.AddRange(blkioWeightDevice);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.BlkioWeightDevice"/></em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearBlkioWeightDevice(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeightDeviceInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.BlkioWeightDevice"/></em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveBlkioWeightDevice(this DockerContainerRunSettings toolSettings, params string[] blkioWeightDevice)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(blkioWeightDevice);
            toolSettings.BlkioWeightDeviceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.BlkioWeightDevice"/></em></p>
        ///   <p>Block IO weight (relative device weight).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveBlkioWeightDevice(this DockerContainerRunSettings toolSettings, IEnumerable<string> blkioWeightDevice)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(blkioWeightDevice);
            toolSettings.BlkioWeightDeviceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region CapAdd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.CapAdd"/> to a new list</em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetCapAdd(this DockerContainerRunSettings toolSettings, params string[] capAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapAddInternal = capAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.CapAdd"/> to a new list</em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetCapAdd(this DockerContainerRunSettings toolSettings, IEnumerable<string> capAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapAddInternal = capAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.CapAdd"/></em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddCapAdd(this DockerContainerRunSettings toolSettings, params string[] capAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapAddInternal.AddRange(capAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.CapAdd"/></em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddCapAdd(this DockerContainerRunSettings toolSettings, IEnumerable<string> capAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapAddInternal.AddRange(capAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.CapAdd"/></em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearCapAdd(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapAddInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.CapAdd"/></em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveCapAdd(this DockerContainerRunSettings toolSettings, params string[] capAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(capAdd);
            toolSettings.CapAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.CapAdd"/></em></p>
        ///   <p>Add Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveCapAdd(this DockerContainerRunSettings toolSettings, IEnumerable<string> capAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(capAdd);
            toolSettings.CapAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region CapDrop
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.CapDrop"/> to a new list</em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetCapDrop(this DockerContainerRunSettings toolSettings, params string[] capDrop)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapDropInternal = capDrop.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.CapDrop"/> to a new list</em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetCapDrop(this DockerContainerRunSettings toolSettings, IEnumerable<string> capDrop)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapDropInternal = capDrop.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.CapDrop"/></em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddCapDrop(this DockerContainerRunSettings toolSettings, params string[] capDrop)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapDropInternal.AddRange(capDrop);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.CapDrop"/></em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddCapDrop(this DockerContainerRunSettings toolSettings, IEnumerable<string> capDrop)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapDropInternal.AddRange(capDrop);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.CapDrop"/></em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearCapDrop(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CapDropInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.CapDrop"/></em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveCapDrop(this DockerContainerRunSettings toolSettings, params string[] capDrop)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(capDrop);
            toolSettings.CapDropInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.CapDrop"/></em></p>
        ///   <p>Drop Linux capabilities.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveCapDrop(this DockerContainerRunSettings toolSettings, IEnumerable<string> capDrop)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(capDrop);
            toolSettings.CapDropInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region CgroupParent
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.CgroupParent"/></em></p>
        ///   <p>Optional parent cgroup for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetCgroupParent(this DockerContainerRunSettings toolSettings, string cgroupParent)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CgroupParent = cgroupParent;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.CgroupParent"/></em></p>
        ///   <p>Optional parent cgroup for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetCgroupParent(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CgroupParent = null;
            return toolSettings;
        }
        #endregion
        #region Cidfile
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Cidfile"/></em></p>
        ///   <p>Write the container ID to the file.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetCidfile(this DockerContainerRunSettings toolSettings, string cidfile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cidfile = cidfile;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Cidfile"/></em></p>
        ///   <p>Write the container ID to the file.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetCidfile(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cidfile = null;
            return toolSettings;
        }
        #endregion
        #region CpuCount
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.CpuCount"/></em></p>
        ///   <p>CPU count (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetCpuCount(this DockerContainerRunSettings toolSettings, long? cpuCount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuCount = cpuCount;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.CpuCount"/></em></p>
        ///   <p>CPU count (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetCpuCount(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuCount = null;
            return toolSettings;
        }
        #endregion
        #region CpuPercent
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.CpuPercent"/></em></p>
        ///   <p>CPU percent (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetCpuPercent(this DockerContainerRunSettings toolSettings, long? cpuPercent)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuPercent = cpuPercent;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.CpuPercent"/></em></p>
        ///   <p>CPU percent (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetCpuPercent(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuPercent = null;
            return toolSettings;
        }
        #endregion
        #region CpuPeriod
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.CpuPeriod"/></em></p>
        ///   <p>Limit CPU CFS (Completely Fair Scheduler) period.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetCpuPeriod(this DockerContainerRunSettings toolSettings, long? cpuPeriod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuPeriod = cpuPeriod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.CpuPeriod"/></em></p>
        ///   <p>Limit CPU CFS (Completely Fair Scheduler) period.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetCpuPeriod(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuPeriod = null;
            return toolSettings;
        }
        #endregion
        #region CpuQuota
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.CpuQuota"/></em></p>
        ///   <p>Limit CPU CFS (Completely Fair Scheduler) quota.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetCpuQuota(this DockerContainerRunSettings toolSettings, long? cpuQuota)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuQuota = cpuQuota;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.CpuQuota"/></em></p>
        ///   <p>Limit CPU CFS (Completely Fair Scheduler) quota.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetCpuQuota(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuQuota = null;
            return toolSettings;
        }
        #endregion
        #region CpuRtPeriod
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.CpuRtPeriod"/></em></p>
        ///   <p>Limit CPU real-time period in microseconds.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetCpuRtPeriod(this DockerContainerRunSettings toolSettings, long? cpuRtPeriod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuRtPeriod = cpuRtPeriod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.CpuRtPeriod"/></em></p>
        ///   <p>Limit CPU real-time period in microseconds.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetCpuRtPeriod(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuRtPeriod = null;
            return toolSettings;
        }
        #endregion
        #region CpuRtRuntime
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.CpuRtRuntime"/></em></p>
        ///   <p>Limit CPU real-time runtime in microseconds.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetCpuRtRuntime(this DockerContainerRunSettings toolSettings, long? cpuRtRuntime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuRtRuntime = cpuRtRuntime;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.CpuRtRuntime"/></em></p>
        ///   <p>Limit CPU real-time runtime in microseconds.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetCpuRtRuntime(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuRtRuntime = null;
            return toolSettings;
        }
        #endregion
        #region CpuShares
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.CpuShares"/></em></p>
        ///   <p>CPU shares (relative weight).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetCpuShares(this DockerContainerRunSettings toolSettings, long? cpuShares)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuShares = cpuShares;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.CpuShares"/></em></p>
        ///   <p>CPU shares (relative weight).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetCpuShares(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuShares = null;
            return toolSettings;
        }
        #endregion
        #region Cpus
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Cpus"/></em></p>
        ///   <p>Number of CPUs.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetCpus(this DockerContainerRunSettings toolSettings, decimal? cpus)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cpus = cpus;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Cpus"/></em></p>
        ///   <p>Number of CPUs.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetCpus(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cpus = null;
            return toolSettings;
        }
        #endregion
        #region CpusetCpus
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.CpusetCpus"/></em></p>
        ///   <p>CPUs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetCpusetCpus(this DockerContainerRunSettings toolSettings, string cpusetCpus)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetCpus = cpusetCpus;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.CpusetCpus"/></em></p>
        ///   <p>CPUs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetCpusetCpus(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetCpus = null;
            return toolSettings;
        }
        #endregion
        #region CpusetMems
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.CpusetMems"/></em></p>
        ///   <p>MEMs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetCpusetMems(this DockerContainerRunSettings toolSettings, string cpusetMems)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetMems = cpusetMems;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.CpusetMems"/></em></p>
        ///   <p>MEMs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetCpusetMems(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetMems = null;
            return toolSettings;
        }
        #endregion
        #region Detach
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Detach"/></em></p>
        ///   <p>Run container in background and print container ID.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetDetach(this DockerContainerRunSettings toolSettings, bool? detach)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = detach;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Detach"/></em></p>
        ///   <p>Run container in background and print container ID.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetDetach(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerRunSettings.Detach"/></em></p>
        ///   <p>Run container in background and print container ID.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings EnableDetach(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerRunSettings.Detach"/></em></p>
        ///   <p>Run container in background and print container ID.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings DisableDetach(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerRunSettings.Detach"/></em></p>
        ///   <p>Run container in background and print container ID.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ToggleDetach(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = !toolSettings.Detach;
            return toolSettings;
        }
        #endregion
        #region DetachKeys
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.DetachKeys"/></em></p>
        ///   <p>Override the key sequence for detaching a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetDetachKeys(this DockerContainerRunSettings toolSettings, string detachKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DetachKeys = detachKeys;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.DetachKeys"/></em></p>
        ///   <p>Override the key sequence for detaching a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetDetachKeys(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DetachKeys = null;
            return toolSettings;
        }
        #endregion
        #region Device
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Device"/> to a new list</em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetDevice(this DockerContainerRunSettings toolSettings, params string[] device)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceInternal = device.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Device"/> to a new list</em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetDevice(this DockerContainerRunSettings toolSettings, IEnumerable<string> device)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceInternal = device.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.Device"/></em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddDevice(this DockerContainerRunSettings toolSettings, params string[] device)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceInternal.AddRange(device);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.Device"/></em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddDevice(this DockerContainerRunSettings toolSettings, IEnumerable<string> device)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceInternal.AddRange(device);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.Device"/></em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearDevice(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.Device"/></em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveDevice(this DockerContainerRunSettings toolSettings, params string[] device)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(device);
            toolSettings.DeviceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.Device"/></em></p>
        ///   <p>Add a host device to the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveDevice(this DockerContainerRunSettings toolSettings, IEnumerable<string> device)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(device);
            toolSettings.DeviceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DeviceCgroupRule
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.DeviceCgroupRule"/> to a new list</em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetDeviceCgroupRule(this DockerContainerRunSettings toolSettings, params string[] deviceCgroupRule)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceCgroupRuleInternal = deviceCgroupRule.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.DeviceCgroupRule"/> to a new list</em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetDeviceCgroupRule(this DockerContainerRunSettings toolSettings, IEnumerable<string> deviceCgroupRule)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceCgroupRuleInternal = deviceCgroupRule.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.DeviceCgroupRule"/></em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddDeviceCgroupRule(this DockerContainerRunSettings toolSettings, params string[] deviceCgroupRule)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceCgroupRuleInternal.AddRange(deviceCgroupRule);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.DeviceCgroupRule"/></em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddDeviceCgroupRule(this DockerContainerRunSettings toolSettings, IEnumerable<string> deviceCgroupRule)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceCgroupRuleInternal.AddRange(deviceCgroupRule);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.DeviceCgroupRule"/></em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearDeviceCgroupRule(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceCgroupRuleInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.DeviceCgroupRule"/></em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveDeviceCgroupRule(this DockerContainerRunSettings toolSettings, params string[] deviceCgroupRule)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceCgroupRule);
            toolSettings.DeviceCgroupRuleInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.DeviceCgroupRule"/></em></p>
        ///   <p>Add a rule to the cgroup allowed devices list.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveDeviceCgroupRule(this DockerContainerRunSettings toolSettings, IEnumerable<string> deviceCgroupRule)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceCgroupRule);
            toolSettings.DeviceCgroupRuleInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DeviceReadBps
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.DeviceReadBps"/> to a new list</em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetDeviceReadBps(this DockerContainerRunSettings toolSettings, params string[] deviceReadBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadBpsInternal = deviceReadBps.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.DeviceReadBps"/> to a new list</em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetDeviceReadBps(this DockerContainerRunSettings toolSettings, IEnumerable<string> deviceReadBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadBpsInternal = deviceReadBps.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.DeviceReadBps"/></em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddDeviceReadBps(this DockerContainerRunSettings toolSettings, params string[] deviceReadBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadBpsInternal.AddRange(deviceReadBps);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.DeviceReadBps"/></em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddDeviceReadBps(this DockerContainerRunSettings toolSettings, IEnumerable<string> deviceReadBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadBpsInternal.AddRange(deviceReadBps);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.DeviceReadBps"/></em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearDeviceReadBps(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadBpsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.DeviceReadBps"/></em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveDeviceReadBps(this DockerContainerRunSettings toolSettings, params string[] deviceReadBps)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceReadBps);
            toolSettings.DeviceReadBpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.DeviceReadBps"/></em></p>
        ///   <p>Limit read rate (bytes per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveDeviceReadBps(this DockerContainerRunSettings toolSettings, IEnumerable<string> deviceReadBps)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceReadBps);
            toolSettings.DeviceReadBpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DeviceReadIops
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.DeviceReadIops"/> to a new list</em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetDeviceReadIops(this DockerContainerRunSettings toolSettings, params string[] deviceReadIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadIopsInternal = deviceReadIops.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.DeviceReadIops"/> to a new list</em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetDeviceReadIops(this DockerContainerRunSettings toolSettings, IEnumerable<string> deviceReadIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadIopsInternal = deviceReadIops.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.DeviceReadIops"/></em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddDeviceReadIops(this DockerContainerRunSettings toolSettings, params string[] deviceReadIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadIopsInternal.AddRange(deviceReadIops);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.DeviceReadIops"/></em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddDeviceReadIops(this DockerContainerRunSettings toolSettings, IEnumerable<string> deviceReadIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadIopsInternal.AddRange(deviceReadIops);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.DeviceReadIops"/></em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearDeviceReadIops(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceReadIopsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.DeviceReadIops"/></em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveDeviceReadIops(this DockerContainerRunSettings toolSettings, params string[] deviceReadIops)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceReadIops);
            toolSettings.DeviceReadIopsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.DeviceReadIops"/></em></p>
        ///   <p>Limit read rate (IO per second) from a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveDeviceReadIops(this DockerContainerRunSettings toolSettings, IEnumerable<string> deviceReadIops)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceReadIops);
            toolSettings.DeviceReadIopsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DeviceWriteBps
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.DeviceWriteBps"/> to a new list</em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetDeviceWriteBps(this DockerContainerRunSettings toolSettings, params string[] deviceWriteBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteBpsInternal = deviceWriteBps.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.DeviceWriteBps"/> to a new list</em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetDeviceWriteBps(this DockerContainerRunSettings toolSettings, IEnumerable<string> deviceWriteBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteBpsInternal = deviceWriteBps.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.DeviceWriteBps"/></em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddDeviceWriteBps(this DockerContainerRunSettings toolSettings, params string[] deviceWriteBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteBpsInternal.AddRange(deviceWriteBps);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.DeviceWriteBps"/></em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddDeviceWriteBps(this DockerContainerRunSettings toolSettings, IEnumerable<string> deviceWriteBps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteBpsInternal.AddRange(deviceWriteBps);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.DeviceWriteBps"/></em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearDeviceWriteBps(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteBpsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.DeviceWriteBps"/></em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveDeviceWriteBps(this DockerContainerRunSettings toolSettings, params string[] deviceWriteBps)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceWriteBps);
            toolSettings.DeviceWriteBpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.DeviceWriteBps"/></em></p>
        ///   <p>Limit write rate (bytes per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveDeviceWriteBps(this DockerContainerRunSettings toolSettings, IEnumerable<string> deviceWriteBps)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceWriteBps);
            toolSettings.DeviceWriteBpsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DeviceWriteIops
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.DeviceWriteIops"/> to a new list</em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetDeviceWriteIops(this DockerContainerRunSettings toolSettings, params string[] deviceWriteIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteIopsInternal = deviceWriteIops.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.DeviceWriteIops"/> to a new list</em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetDeviceWriteIops(this DockerContainerRunSettings toolSettings, IEnumerable<string> deviceWriteIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteIopsInternal = deviceWriteIops.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.DeviceWriteIops"/></em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddDeviceWriteIops(this DockerContainerRunSettings toolSettings, params string[] deviceWriteIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteIopsInternal.AddRange(deviceWriteIops);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.DeviceWriteIops"/></em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddDeviceWriteIops(this DockerContainerRunSettings toolSettings, IEnumerable<string> deviceWriteIops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteIopsInternal.AddRange(deviceWriteIops);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.DeviceWriteIops"/></em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearDeviceWriteIops(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DeviceWriteIopsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.DeviceWriteIops"/></em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveDeviceWriteIops(this DockerContainerRunSettings toolSettings, params string[] deviceWriteIops)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceWriteIops);
            toolSettings.DeviceWriteIopsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.DeviceWriteIops"/></em></p>
        ///   <p>Limit write rate (IO per second) to a device.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveDeviceWriteIops(this DockerContainerRunSettings toolSettings, IEnumerable<string> deviceWriteIops)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(deviceWriteIops);
            toolSettings.DeviceWriteIopsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DisableContentTrust
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetDisableContentTrust(this DockerContainerRunSettings toolSettings, bool? disableContentTrust)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = disableContentTrust;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetDisableContentTrust(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerRunSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings EnableDisableContentTrust(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerRunSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings DisableDisableContentTrust(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerRunSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ToggleDisableContentTrust(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = !toolSettings.DisableContentTrust;
            return toolSettings;
        }
        #endregion
        #region Dns
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Dns"/> to a new list</em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetDns(this DockerContainerRunSettings toolSettings, params string[] dns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsInternal = dns.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Dns"/> to a new list</em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetDns(this DockerContainerRunSettings toolSettings, IEnumerable<string> dns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsInternal = dns.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.Dns"/></em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddDns(this DockerContainerRunSettings toolSettings, params string[] dns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsInternal.AddRange(dns);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.Dns"/></em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddDns(this DockerContainerRunSettings toolSettings, IEnumerable<string> dns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsInternal.AddRange(dns);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.Dns"/></em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearDns(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.Dns"/></em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveDns(this DockerContainerRunSettings toolSettings, params string[] dns)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dns);
            toolSettings.DnsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.Dns"/></em></p>
        ///   <p>Set custom DNS servers.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveDns(this DockerContainerRunSettings toolSettings, IEnumerable<string> dns)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dns);
            toolSettings.DnsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DnsOpt
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.DnsOpt"/> to a new list</em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetDnsOpt(this DockerContainerRunSettings toolSettings, params string[] dnsOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptInternal = dnsOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.DnsOpt"/> to a new list</em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetDnsOpt(this DockerContainerRunSettings toolSettings, IEnumerable<string> dnsOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptInternal = dnsOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.DnsOpt"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddDnsOpt(this DockerContainerRunSettings toolSettings, params string[] dnsOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptInternal.AddRange(dnsOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.DnsOpt"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddDnsOpt(this DockerContainerRunSettings toolSettings, IEnumerable<string> dnsOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptInternal.AddRange(dnsOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.DnsOpt"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearDnsOpt(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.DnsOpt"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveDnsOpt(this DockerContainerRunSettings toolSettings, params string[] dnsOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsOpt);
            toolSettings.DnsOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.DnsOpt"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveDnsOpt(this DockerContainerRunSettings toolSettings, IEnumerable<string> dnsOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsOpt);
            toolSettings.DnsOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DnsOption
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.DnsOption"/> to a new list</em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetDnsOption(this DockerContainerRunSettings toolSettings, params string[] dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionInternal = dnsOption.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.DnsOption"/> to a new list</em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetDnsOption(this DockerContainerRunSettings toolSettings, IEnumerable<string> dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionInternal = dnsOption.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.DnsOption"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddDnsOption(this DockerContainerRunSettings toolSettings, params string[] dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionInternal.AddRange(dnsOption);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.DnsOption"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddDnsOption(this DockerContainerRunSettings toolSettings, IEnumerable<string> dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionInternal.AddRange(dnsOption);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.DnsOption"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearDnsOption(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsOptionInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.DnsOption"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveDnsOption(this DockerContainerRunSettings toolSettings, params string[] dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsOption);
            toolSettings.DnsOptionInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.DnsOption"/></em></p>
        ///   <p>Set DNS options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveDnsOption(this DockerContainerRunSettings toolSettings, IEnumerable<string> dnsOption)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsOption);
            toolSettings.DnsOptionInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region DnsSearch
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.DnsSearch"/> to a new list</em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetDnsSearch(this DockerContainerRunSettings toolSettings, params string[] dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchInternal = dnsSearch.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.DnsSearch"/> to a new list</em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetDnsSearch(this DockerContainerRunSettings toolSettings, IEnumerable<string> dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchInternal = dnsSearch.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.DnsSearch"/></em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddDnsSearch(this DockerContainerRunSettings toolSettings, params string[] dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchInternal.AddRange(dnsSearch);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.DnsSearch"/></em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddDnsSearch(this DockerContainerRunSettings toolSettings, IEnumerable<string> dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchInternal.AddRange(dnsSearch);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.DnsSearch"/></em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearDnsSearch(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DnsSearchInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.DnsSearch"/></em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveDnsSearch(this DockerContainerRunSettings toolSettings, params string[] dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsSearch);
            toolSettings.DnsSearchInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.DnsSearch"/></em></p>
        ///   <p>Set custom DNS search domains.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveDnsSearch(this DockerContainerRunSettings toolSettings, IEnumerable<string> dnsSearch)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(dnsSearch);
            toolSettings.DnsSearchInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Domainname
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Domainname"/></em></p>
        ///   <p>Container NIS domain name.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetDomainname(this DockerContainerRunSettings toolSettings, string domainname)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Domainname = domainname;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Domainname"/></em></p>
        ///   <p>Container NIS domain name.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetDomainname(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Domainname = null;
            return toolSettings;
        }
        #endregion
        #region Entrypoint
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Entrypoint"/></em></p>
        ///   <p>Overwrite the default ENTRYPOINT of the image.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetEntrypoint(this DockerContainerRunSettings toolSettings, string entrypoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Entrypoint = entrypoint;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Entrypoint"/></em></p>
        ///   <p>Overwrite the default ENTRYPOINT of the image.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetEntrypoint(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Entrypoint = null;
            return toolSettings;
        }
        #endregion
        #region Env
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Env"/> to a new list</em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetEnv(this DockerContainerRunSettings toolSettings, params string[] env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal = env.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Env"/> to a new list</em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetEnv(this DockerContainerRunSettings toolSettings, IEnumerable<string> env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal = env.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddEnv(this DockerContainerRunSettings toolSettings, params string[] env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal.AddRange(env);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddEnv(this DockerContainerRunSettings toolSettings, IEnumerable<string> env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal.AddRange(env);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearEnv(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveEnv(this DockerContainerRunSettings toolSettings, params string[] env)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(env);
            toolSettings.EnvInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveEnv(this DockerContainerRunSettings toolSettings, IEnumerable<string> env)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(env);
            toolSettings.EnvInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region EnvFile
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.EnvFile"/> to a new list</em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetEnvFile(this DockerContainerRunSettings toolSettings, params string[] envFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvFileInternal = envFile.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.EnvFile"/> to a new list</em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetEnvFile(this DockerContainerRunSettings toolSettings, IEnumerable<string> envFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvFileInternal = envFile.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.EnvFile"/></em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddEnvFile(this DockerContainerRunSettings toolSettings, params string[] envFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvFileInternal.AddRange(envFile);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.EnvFile"/></em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddEnvFile(this DockerContainerRunSettings toolSettings, IEnumerable<string> envFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvFileInternal.AddRange(envFile);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.EnvFile"/></em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearEnvFile(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvFileInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.EnvFile"/></em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveEnvFile(this DockerContainerRunSettings toolSettings, params string[] envFile)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(envFile);
            toolSettings.EnvFileInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.EnvFile"/></em></p>
        ///   <p>Read in a file of environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveEnvFile(this DockerContainerRunSettings toolSettings, IEnumerable<string> envFile)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(envFile);
            toolSettings.EnvFileInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Expose
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Expose"/> to a new list</em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetExpose(this DockerContainerRunSettings toolSettings, params string[] expose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposeInternal = expose.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Expose"/> to a new list</em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetExpose(this DockerContainerRunSettings toolSettings, IEnumerable<string> expose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposeInternal = expose.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.Expose"/></em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddExpose(this DockerContainerRunSettings toolSettings, params string[] expose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposeInternal.AddRange(expose);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.Expose"/></em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddExpose(this DockerContainerRunSettings toolSettings, IEnumerable<string> expose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposeInternal.AddRange(expose);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.Expose"/></em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearExpose(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ExposeInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.Expose"/></em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveExpose(this DockerContainerRunSettings toolSettings, params string[] expose)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(expose);
            toolSettings.ExposeInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.Expose"/></em></p>
        ///   <p>Expose a port or a range of ports.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveExpose(this DockerContainerRunSettings toolSettings, IEnumerable<string> expose)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(expose);
            toolSettings.ExposeInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Gpus
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Gpus"/></em></p>
        ///   <p>GPU devices to add to the container ('all' to pass all GPUs).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetGpus(this DockerContainerRunSettings toolSettings, string gpus)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Gpus = gpus;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Gpus"/></em></p>
        ///   <p>GPU devices to add to the container ('all' to pass all GPUs).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetGpus(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Gpus = null;
            return toolSettings;
        }
        #endregion
        #region GroupAdd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.GroupAdd"/> to a new list</em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetGroupAdd(this DockerContainerRunSettings toolSettings, params string[] groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupAddInternal = groupAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.GroupAdd"/> to a new list</em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetGroupAdd(this DockerContainerRunSettings toolSettings, IEnumerable<string> groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupAddInternal = groupAdd.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.GroupAdd"/></em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddGroupAdd(this DockerContainerRunSettings toolSettings, params string[] groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupAddInternal.AddRange(groupAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.GroupAdd"/></em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddGroupAdd(this DockerContainerRunSettings toolSettings, IEnumerable<string> groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupAddInternal.AddRange(groupAdd);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.GroupAdd"/></em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearGroupAdd(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GroupAddInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.GroupAdd"/></em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveGroupAdd(this DockerContainerRunSettings toolSettings, params string[] groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(groupAdd);
            toolSettings.GroupAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.GroupAdd"/></em></p>
        ///   <p>Add additional groups to join.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveGroupAdd(this DockerContainerRunSettings toolSettings, IEnumerable<string> groupAdd)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(groupAdd);
            toolSettings.GroupAddInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region HealthCmd
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.HealthCmd"/></em></p>
        ///   <p>Command to run to check health.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetHealthCmd(this DockerContainerRunSettings toolSettings, string healthCmd)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthCmd = healthCmd;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.HealthCmd"/></em></p>
        ///   <p>Command to run to check health.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetHealthCmd(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthCmd = null;
            return toolSettings;
        }
        #endregion
        #region HealthInterval
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.HealthInterval"/></em></p>
        ///   <p>Time between running the check (ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetHealthInterval(this DockerContainerRunSettings toolSettings, string healthInterval)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthInterval = healthInterval;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.HealthInterval"/></em></p>
        ///   <p>Time between running the check (ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetHealthInterval(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthInterval = null;
            return toolSettings;
        }
        #endregion
        #region HealthRetries
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.HealthRetries"/></em></p>
        ///   <p>Consecutive failures needed to report unhealthy.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetHealthRetries(this DockerContainerRunSettings toolSettings, int? healthRetries)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthRetries = healthRetries;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.HealthRetries"/></em></p>
        ///   <p>Consecutive failures needed to report unhealthy.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetHealthRetries(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthRetries = null;
            return toolSettings;
        }
        #endregion
        #region HealthStartPeriod
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.HealthStartPeriod"/></em></p>
        ///   <p>Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetHealthStartPeriod(this DockerContainerRunSettings toolSettings, string healthStartPeriod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthStartPeriod = healthStartPeriod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.HealthStartPeriod"/></em></p>
        ///   <p>Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetHealthStartPeriod(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthStartPeriod = null;
            return toolSettings;
        }
        #endregion
        #region HealthTimeout
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.HealthTimeout"/></em></p>
        ///   <p>Maximum time to allow one check to run (ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetHealthTimeout(this DockerContainerRunSettings toolSettings, string healthTimeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthTimeout = healthTimeout;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.HealthTimeout"/></em></p>
        ///   <p>Maximum time to allow one check to run (ms|s|m|h) (default 0s).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetHealthTimeout(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.HealthTimeout = null;
            return toolSettings;
        }
        #endregion
        #region Help
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Help"/></em></p>
        ///   <p>Print usage.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetHelp(this DockerContainerRunSettings toolSettings, bool? help)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = help;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Help"/></em></p>
        ///   <p>Print usage.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetHelp(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerRunSettings.Help"/></em></p>
        ///   <p>Print usage.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings EnableHelp(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerRunSettings.Help"/></em></p>
        ///   <p>Print usage.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings DisableHelp(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerRunSettings.Help"/></em></p>
        ///   <p>Print usage.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ToggleHelp(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Help = !toolSettings.Help;
            return toolSettings;
        }
        #endregion
        #region Hostname
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Hostname"/></em></p>
        ///   <p>Container host name.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetHostname(this DockerContainerRunSettings toolSettings, string hostname)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Hostname = hostname;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Hostname"/></em></p>
        ///   <p>Container host name.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetHostname(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Hostname = null;
            return toolSettings;
        }
        #endregion
        #region Init
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Init"/></em></p>
        ///   <p>Run an init inside the container that forwards signals and reaps processes.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetInit(this DockerContainerRunSettings toolSettings, bool? init)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = init;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Init"/></em></p>
        ///   <p>Run an init inside the container that forwards signals and reaps processes.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetInit(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerRunSettings.Init"/></em></p>
        ///   <p>Run an init inside the container that forwards signals and reaps processes.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings EnableInit(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerRunSettings.Init"/></em></p>
        ///   <p>Run an init inside the container that forwards signals and reaps processes.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings DisableInit(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerRunSettings.Init"/></em></p>
        ///   <p>Run an init inside the container that forwards signals and reaps processes.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ToggleInit(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Init = !toolSettings.Init;
            return toolSettings;
        }
        #endregion
        #region Interactive
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetInteractive(this DockerContainerRunSettings toolSettings, bool? interactive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = interactive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetInteractive(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerRunSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings EnableInteractive(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerRunSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings DisableInteractive(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerRunSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ToggleInteractive(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = !toolSettings.Interactive;
            return toolSettings;
        }
        #endregion
        #region IoMaxbandwidth
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.IoMaxbandwidth"/></em></p>
        ///   <p>Maximum IO bandwidth limit for the system drive (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetIoMaxbandwidth(this DockerContainerRunSettings toolSettings, long? ioMaxbandwidth)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IoMaxbandwidth = ioMaxbandwidth;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.IoMaxbandwidth"/></em></p>
        ///   <p>Maximum IO bandwidth limit for the system drive (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetIoMaxbandwidth(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IoMaxbandwidth = null;
            return toolSettings;
        }
        #endregion
        #region IoMaxiops
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.IoMaxiops"/></em></p>
        ///   <p>Maximum IOps limit for the system drive (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetIoMaxiops(this DockerContainerRunSettings toolSettings, int? ioMaxiops)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IoMaxiops = ioMaxiops;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.IoMaxiops"/></em></p>
        ///   <p>Maximum IOps limit for the system drive (Windows only).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetIoMaxiops(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.IoMaxiops = null;
            return toolSettings;
        }
        #endregion
        #region Ip
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Ip"/></em></p>
        ///   <p>IPv4 address (e.g., 172.30.100.104).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetIp(this DockerContainerRunSettings toolSettings, string ip)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip = ip;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Ip"/></em></p>
        ///   <p>IPv4 address (e.g., 172.30.100.104).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetIp(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip = null;
            return toolSettings;
        }
        #endregion
        #region Ip6
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Ip6"/></em></p>
        ///   <p>IPv6 address (e.g., 2001:db8::33).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetIp6(this DockerContainerRunSettings toolSettings, string ip6)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip6 = ip6;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Ip6"/></em></p>
        ///   <p>IPv6 address (e.g., 2001:db8::33).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetIp6(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ip6 = null;
            return toolSettings;
        }
        #endregion
        #region Ipc
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Ipc"/></em></p>
        ///   <p>IPC mode to use.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetIpc(this DockerContainerRunSettings toolSettings, string ipc)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ipc = ipc;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Ipc"/></em></p>
        ///   <p>IPC mode to use.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetIpc(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ipc = null;
            return toolSettings;
        }
        #endregion
        #region Isolation
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Isolation"/></em></p>
        ///   <p>Container isolation technology.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetIsolation(this DockerContainerRunSettings toolSettings, string isolation)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Isolation = isolation;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Isolation"/></em></p>
        ///   <p>Container isolation technology.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetIsolation(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Isolation = null;
            return toolSettings;
        }
        #endregion
        #region KernelMemory
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.KernelMemory"/></em></p>
        ///   <p>Kernel memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetKernelMemory(this DockerContainerRunSettings toolSettings, long? kernelMemory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KernelMemory = kernelMemory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.KernelMemory"/></em></p>
        ///   <p>Kernel memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetKernelMemory(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KernelMemory = null;
            return toolSettings;
        }
        #endregion
        #region Label
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Label"/> to a new list</em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetLabel(this DockerContainerRunSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal = label.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Label"/> to a new list</em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetLabel(this DockerContainerRunSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal = label.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.Label"/></em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddLabel(this DockerContainerRunSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.AddRange(label);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.Label"/></em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddLabel(this DockerContainerRunSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.AddRange(label);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.Label"/></em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearLabel(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.Label"/></em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveLabel(this DockerContainerRunSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(label);
            toolSettings.LabelInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.Label"/></em></p>
        ///   <p>Set meta data on a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveLabel(this DockerContainerRunSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(label);
            toolSettings.LabelInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region LabelFile
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.LabelFile"/> to a new list</em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetLabelFile(this DockerContainerRunSettings toolSettings, params string[] labelFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelFileInternal = labelFile.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.LabelFile"/> to a new list</em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetLabelFile(this DockerContainerRunSettings toolSettings, IEnumerable<string> labelFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelFileInternal = labelFile.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.LabelFile"/></em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddLabelFile(this DockerContainerRunSettings toolSettings, params string[] labelFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelFileInternal.AddRange(labelFile);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.LabelFile"/></em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddLabelFile(this DockerContainerRunSettings toolSettings, IEnumerable<string> labelFile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelFileInternal.AddRange(labelFile);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.LabelFile"/></em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearLabelFile(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelFileInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.LabelFile"/></em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveLabelFile(this DockerContainerRunSettings toolSettings, params string[] labelFile)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(labelFile);
            toolSettings.LabelFileInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.LabelFile"/></em></p>
        ///   <p>Read in a line delimited file of labels.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveLabelFile(this DockerContainerRunSettings toolSettings, IEnumerable<string> labelFile)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(labelFile);
            toolSettings.LabelFileInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Link
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Link"/> to a new list</em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetLink(this DockerContainerRunSettings toolSettings, params string[] link)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkInternal = link.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Link"/> to a new list</em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetLink(this DockerContainerRunSettings toolSettings, IEnumerable<string> link)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkInternal = link.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.Link"/></em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddLink(this DockerContainerRunSettings toolSettings, params string[] link)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkInternal.AddRange(link);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.Link"/></em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddLink(this DockerContainerRunSettings toolSettings, IEnumerable<string> link)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkInternal.AddRange(link);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.Link"/></em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearLink(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.Link"/></em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveLink(this DockerContainerRunSettings toolSettings, params string[] link)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(link);
            toolSettings.LinkInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.Link"/></em></p>
        ///   <p>Add link to another container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveLink(this DockerContainerRunSettings toolSettings, IEnumerable<string> link)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(link);
            toolSettings.LinkInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region LinkLocalIp
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.LinkLocalIp"/> to a new list</em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetLinkLocalIp(this DockerContainerRunSettings toolSettings, params string[] linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkLocalIpInternal = linkLocalIp.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.LinkLocalIp"/> to a new list</em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetLinkLocalIp(this DockerContainerRunSettings toolSettings, IEnumerable<string> linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkLocalIpInternal = linkLocalIp.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.LinkLocalIp"/></em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddLinkLocalIp(this DockerContainerRunSettings toolSettings, params string[] linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkLocalIpInternal.AddRange(linkLocalIp);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.LinkLocalIp"/></em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddLinkLocalIp(this DockerContainerRunSettings toolSettings, IEnumerable<string> linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkLocalIpInternal.AddRange(linkLocalIp);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.LinkLocalIp"/></em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearLinkLocalIp(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LinkLocalIpInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.LinkLocalIp"/></em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveLinkLocalIp(this DockerContainerRunSettings toolSettings, params string[] linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(linkLocalIp);
            toolSettings.LinkLocalIpInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.LinkLocalIp"/></em></p>
        ///   <p>Container IPv4/IPv6 link-local addresses.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveLinkLocalIp(this DockerContainerRunSettings toolSettings, IEnumerable<string> linkLocalIp)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(linkLocalIp);
            toolSettings.LinkLocalIpInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region LogDriver
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.LogDriver"/></em></p>
        ///   <p>Logging driver for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetLogDriver(this DockerContainerRunSettings toolSettings, string logDriver)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogDriver = logDriver;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.LogDriver"/></em></p>
        ///   <p>Logging driver for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetLogDriver(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogDriver = null;
            return toolSettings;
        }
        #endregion
        #region LogOpt
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.LogOpt"/> to a new list</em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetLogOpt(this DockerContainerRunSettings toolSettings, params string[] logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal = logOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.LogOpt"/> to a new list</em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetLogOpt(this DockerContainerRunSettings toolSettings, IEnumerable<string> logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal = logOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.LogOpt"/></em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddLogOpt(this DockerContainerRunSettings toolSettings, params string[] logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal.AddRange(logOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.LogOpt"/></em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddLogOpt(this DockerContainerRunSettings toolSettings, IEnumerable<string> logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal.AddRange(logOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.LogOpt"/></em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearLogOpt(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LogOptInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.LogOpt"/></em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveLogOpt(this DockerContainerRunSettings toolSettings, params string[] logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(logOpt);
            toolSettings.LogOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.LogOpt"/></em></p>
        ///   <p>Log driver options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveLogOpt(this DockerContainerRunSettings toolSettings, IEnumerable<string> logOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(logOpt);
            toolSettings.LogOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region MacAddress
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.MacAddress"/></em></p>
        ///   <p>Container MAC address (e.g., 92:d0:c6:0a:29:33).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetMacAddress(this DockerContainerRunSettings toolSettings, string macAddress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MacAddress = macAddress;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.MacAddress"/></em></p>
        ///   <p>Container MAC address (e.g., 92:d0:c6:0a:29:33).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetMacAddress(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MacAddress = null;
            return toolSettings;
        }
        #endregion
        #region Memory
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Memory"/></em></p>
        ///   <p>Memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetMemory(this DockerContainerRunSettings toolSettings, long? memory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Memory = memory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Memory"/></em></p>
        ///   <p>Memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetMemory(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Memory = null;
            return toolSettings;
        }
        #endregion
        #region MemoryReservation
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.MemoryReservation"/></em></p>
        ///   <p>Memory soft limit.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetMemoryReservation(this DockerContainerRunSettings toolSettings, long? memoryReservation)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemoryReservation = memoryReservation;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.MemoryReservation"/></em></p>
        ///   <p>Memory soft limit.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetMemoryReservation(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemoryReservation = null;
            return toolSettings;
        }
        #endregion
        #region MemorySwap
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.MemorySwap"/></em></p>
        ///   <p>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetMemorySwap(this DockerContainerRunSettings toolSettings, long? memorySwap)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemorySwap = memorySwap;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.MemorySwap"/></em></p>
        ///   <p>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetMemorySwap(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemorySwap = null;
            return toolSettings;
        }
        #endregion
        #region MemorySwappiness
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.MemorySwappiness"/></em></p>
        ///   <p>Tune container memory swappiness (0 to 100).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetMemorySwappiness(this DockerContainerRunSettings toolSettings, long? memorySwappiness)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemorySwappiness = memorySwappiness;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.MemorySwappiness"/></em></p>
        ///   <p>Tune container memory swappiness (0 to 100).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetMemorySwappiness(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemorySwappiness = null;
            return toolSettings;
        }
        #endregion
        #region Mount
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Mount"/></em></p>
        ///   <p>Attach a filesystem mount to the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetMount(this DockerContainerRunSettings toolSettings, string mount)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Mount = mount;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Mount"/></em></p>
        ///   <p>Attach a filesystem mount to the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetMount(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Mount = null;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Name"/></em></p>
        ///   <p>Assign a name to the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetName(this DockerContainerRunSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Name"/></em></p>
        ///   <p>Assign a name to the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetName(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Net
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Net"/></em></p>
        ///   <p>Connect a container to a network.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetNet(this DockerContainerRunSettings toolSettings, string net)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Net = net;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Net"/></em></p>
        ///   <p>Connect a container to a network.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetNet(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Net = null;
            return toolSettings;
        }
        #endregion
        #region NetAlias
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.NetAlias"/> to a new list</em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetNetAlias(this DockerContainerRunSettings toolSettings, params string[] netAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetAliasInternal = netAlias.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.NetAlias"/> to a new list</em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetNetAlias(this DockerContainerRunSettings toolSettings, IEnumerable<string> netAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetAliasInternal = netAlias.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.NetAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddNetAlias(this DockerContainerRunSettings toolSettings, params string[] netAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetAliasInternal.AddRange(netAlias);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.NetAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddNetAlias(this DockerContainerRunSettings toolSettings, IEnumerable<string> netAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetAliasInternal.AddRange(netAlias);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.NetAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearNetAlias(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetAliasInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.NetAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveNetAlias(this DockerContainerRunSettings toolSettings, params string[] netAlias)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(netAlias);
            toolSettings.NetAliasInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.NetAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveNetAlias(this DockerContainerRunSettings toolSettings, IEnumerable<string> netAlias)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(netAlias);
            toolSettings.NetAliasInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Network
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Network"/></em></p>
        ///   <p>Connect a container to a network.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetNetwork(this DockerContainerRunSettings toolSettings, string network)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Network = network;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Network"/></em></p>
        ///   <p>Connect a container to a network.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetNetwork(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Network = null;
            return toolSettings;
        }
        #endregion
        #region NetworkAlias
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.NetworkAlias"/> to a new list</em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetNetworkAlias(this DockerContainerRunSettings toolSettings, params string[] networkAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkAliasInternal = networkAlias.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.NetworkAlias"/> to a new list</em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetNetworkAlias(this DockerContainerRunSettings toolSettings, IEnumerable<string> networkAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkAliasInternal = networkAlias.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.NetworkAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddNetworkAlias(this DockerContainerRunSettings toolSettings, params string[] networkAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkAliasInternal.AddRange(networkAlias);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.NetworkAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddNetworkAlias(this DockerContainerRunSettings toolSettings, IEnumerable<string> networkAlias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkAliasInternal.AddRange(networkAlias);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.NetworkAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearNetworkAlias(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NetworkAliasInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.NetworkAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveNetworkAlias(this DockerContainerRunSettings toolSettings, params string[] networkAlias)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(networkAlias);
            toolSettings.NetworkAliasInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.NetworkAlias"/></em></p>
        ///   <p>Add network-scoped alias for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveNetworkAlias(this DockerContainerRunSettings toolSettings, IEnumerable<string> networkAlias)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(networkAlias);
            toolSettings.NetworkAliasInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region NoHealthcheck
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetNoHealthcheck(this DockerContainerRunSettings toolSettings, bool? noHealthcheck)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = noHealthcheck;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetNoHealthcheck(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerRunSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings EnableNoHealthcheck(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerRunSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings DisableNoHealthcheck(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerRunSettings.NoHealthcheck"/></em></p>
        ///   <p>Disable any container-specified HEALTHCHECK.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ToggleNoHealthcheck(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoHealthcheck = !toolSettings.NoHealthcheck;
            return toolSettings;
        }
        #endregion
        #region OomKillDisable
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.OomKillDisable"/></em></p>
        ///   <p>Disable OOM Killer.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetOomKillDisable(this DockerContainerRunSettings toolSettings, bool? oomKillDisable)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomKillDisable = oomKillDisable;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.OomKillDisable"/></em></p>
        ///   <p>Disable OOM Killer.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetOomKillDisable(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomKillDisable = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerRunSettings.OomKillDisable"/></em></p>
        ///   <p>Disable OOM Killer.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings EnableOomKillDisable(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomKillDisable = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerRunSettings.OomKillDisable"/></em></p>
        ///   <p>Disable OOM Killer.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings DisableOomKillDisable(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomKillDisable = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerRunSettings.OomKillDisable"/></em></p>
        ///   <p>Disable OOM Killer.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ToggleOomKillDisable(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomKillDisable = !toolSettings.OomKillDisable;
            return toolSettings;
        }
        #endregion
        #region OomScoreAdj
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.OomScoreAdj"/></em></p>
        ///   <p>Tune host's OOM preferences (-1000 to 1000).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetOomScoreAdj(this DockerContainerRunSettings toolSettings, int? oomScoreAdj)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomScoreAdj = oomScoreAdj;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.OomScoreAdj"/></em></p>
        ///   <p>Tune host's OOM preferences (-1000 to 1000).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetOomScoreAdj(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OomScoreAdj = null;
            return toolSettings;
        }
        #endregion
        #region Pid
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Pid"/></em></p>
        ///   <p>PID namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetPid(this DockerContainerRunSettings toolSettings, string pid)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pid = pid;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Pid"/></em></p>
        ///   <p>PID namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetPid(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pid = null;
            return toolSettings;
        }
        #endregion
        #region PidsLimit
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.PidsLimit"/></em></p>
        ///   <p>Tune container pids limit (set -1 for unlimited).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetPidsLimit(this DockerContainerRunSettings toolSettings, long? pidsLimit)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PidsLimit = pidsLimit;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.PidsLimit"/></em></p>
        ///   <p>Tune container pids limit (set -1 for unlimited).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetPidsLimit(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PidsLimit = null;
            return toolSettings;
        }
        #endregion
        #region Platform
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Platform"/></em></p>
        ///   <p>Set platform if server is multi-platform capable.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetPlatform(this DockerContainerRunSettings toolSettings, string platform)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = platform;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Platform"/></em></p>
        ///   <p>Set platform if server is multi-platform capable.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetPlatform(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = null;
            return toolSettings;
        }
        #endregion
        #region Privileged
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to this container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetPrivileged(this DockerContainerRunSettings toolSettings, bool? privileged)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = privileged;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to this container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetPrivileged(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerRunSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to this container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings EnablePrivileged(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerRunSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to this container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings DisablePrivileged(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerRunSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to this container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings TogglePrivileged(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = !toolSettings.Privileged;
            return toolSettings;
        }
        #endregion
        #region Publish
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Publish"/> to a new list</em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetPublish(this DockerContainerRunSettings toolSettings, params string[] publish)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishInternal = publish.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Publish"/> to a new list</em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetPublish(this DockerContainerRunSettings toolSettings, IEnumerable<string> publish)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishInternal = publish.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.Publish"/></em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddPublish(this DockerContainerRunSettings toolSettings, params string[] publish)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishInternal.AddRange(publish);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.Publish"/></em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddPublish(this DockerContainerRunSettings toolSettings, IEnumerable<string> publish)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishInternal.AddRange(publish);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.Publish"/></em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearPublish(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.Publish"/></em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemovePublish(this DockerContainerRunSettings toolSettings, params string[] publish)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(publish);
            toolSettings.PublishInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.Publish"/></em></p>
        ///   <p>Publish a container's port(s) to the host.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemovePublish(this DockerContainerRunSettings toolSettings, IEnumerable<string> publish)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(publish);
            toolSettings.PublishInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region PublishAll
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.PublishAll"/></em></p>
        ///   <p>Publish all exposed ports to random ports.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetPublishAll(this DockerContainerRunSettings toolSettings, bool? publishAll)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishAll = publishAll;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.PublishAll"/></em></p>
        ///   <p>Publish all exposed ports to random ports.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetPublishAll(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishAll = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerRunSettings.PublishAll"/></em></p>
        ///   <p>Publish all exposed ports to random ports.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings EnablePublishAll(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishAll = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerRunSettings.PublishAll"/></em></p>
        ///   <p>Publish all exposed ports to random ports.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings DisablePublishAll(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishAll = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerRunSettings.PublishAll"/></em></p>
        ///   <p>Publish all exposed ports to random ports.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings TogglePublishAll(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PublishAll = !toolSettings.PublishAll;
            return toolSettings;
        }
        #endregion
        #region ReadOnly
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetReadOnly(this DockerContainerRunSettings toolSettings, bool? readOnly)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = readOnly;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetReadOnly(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerRunSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings EnableReadOnly(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerRunSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings DisableReadOnly(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerRunSettings.ReadOnly"/></em></p>
        ///   <p>Mount the container's root filesystem as read only.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ToggleReadOnly(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ReadOnly = !toolSettings.ReadOnly;
            return toolSettings;
        }
        #endregion
        #region Restart
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Restart"/></em></p>
        ///   <p>Restart policy to apply when a container exits.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetRestart(this DockerContainerRunSettings toolSettings, string restart)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Restart = restart;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Restart"/></em></p>
        ///   <p>Restart policy to apply when a container exits.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetRestart(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Restart = null;
            return toolSettings;
        }
        #endregion
        #region Rm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Rm"/></em></p>
        ///   <p>Automatically remove the container when it exits.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetRm(this DockerContainerRunSettings toolSettings, bool? rm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = rm;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Rm"/></em></p>
        ///   <p>Automatically remove the container when it exits.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetRm(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerRunSettings.Rm"/></em></p>
        ///   <p>Automatically remove the container when it exits.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings EnableRm(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerRunSettings.Rm"/></em></p>
        ///   <p>Automatically remove the container when it exits.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings DisableRm(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerRunSettings.Rm"/></em></p>
        ///   <p>Automatically remove the container when it exits.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ToggleRm(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = !toolSettings.Rm;
            return toolSettings;
        }
        #endregion
        #region Runtime
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Runtime"/></em></p>
        ///   <p>Runtime to use for this container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetRuntime(this DockerContainerRunSettings toolSettings, string runtime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Runtime = runtime;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Runtime"/></em></p>
        ///   <p>Runtime to use for this container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetRuntime(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Runtime = null;
            return toolSettings;
        }
        #endregion
        #region SecurityOpt
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.SecurityOpt"/> to a new list</em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetSecurityOpt(this DockerContainerRunSettings toolSettings, params string[] securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal = securityOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.SecurityOpt"/> to a new list</em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetSecurityOpt(this DockerContainerRunSettings toolSettings, IEnumerable<string> securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal = securityOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.SecurityOpt"/></em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddSecurityOpt(this DockerContainerRunSettings toolSettings, params string[] securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal.AddRange(securityOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.SecurityOpt"/></em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddSecurityOpt(this DockerContainerRunSettings toolSettings, IEnumerable<string> securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal.AddRange(securityOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.SecurityOpt"/></em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearSecurityOpt(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.SecurityOpt"/></em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveSecurityOpt(this DockerContainerRunSettings toolSettings, params string[] securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(securityOpt);
            toolSettings.SecurityOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.SecurityOpt"/></em></p>
        ///   <p>Security Options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveSecurityOpt(this DockerContainerRunSettings toolSettings, IEnumerable<string> securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(securityOpt);
            toolSettings.SecurityOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ShmSize
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.ShmSize"/></em></p>
        ///   <p>Size of /dev/shm.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetShmSize(this DockerContainerRunSettings toolSettings, long? shmSize)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShmSize = shmSize;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.ShmSize"/></em></p>
        ///   <p>Size of /dev/shm.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetShmSize(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShmSize = null;
            return toolSettings;
        }
        #endregion
        #region SigProxy
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.SigProxy"/></em></p>
        ///   <p>Proxy received signals to the process.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetSigProxy(this DockerContainerRunSettings toolSettings, bool? sigProxy)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SigProxy = sigProxy;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.SigProxy"/></em></p>
        ///   <p>Proxy received signals to the process.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetSigProxy(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SigProxy = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerRunSettings.SigProxy"/></em></p>
        ///   <p>Proxy received signals to the process.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings EnableSigProxy(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SigProxy = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerRunSettings.SigProxy"/></em></p>
        ///   <p>Proxy received signals to the process.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings DisableSigProxy(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SigProxy = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerRunSettings.SigProxy"/></em></p>
        ///   <p>Proxy received signals to the process.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ToggleSigProxy(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SigProxy = !toolSettings.SigProxy;
            return toolSettings;
        }
        #endregion
        #region StopSignal
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.StopSignal"/></em></p>
        ///   <p>Signal to stop a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetStopSignal(this DockerContainerRunSettings toolSettings, string stopSignal)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StopSignal = stopSignal;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.StopSignal"/></em></p>
        ///   <p>Signal to stop a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetStopSignal(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StopSignal = null;
            return toolSettings;
        }
        #endregion
        #region StopTimeout
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.StopTimeout"/></em></p>
        ///   <p>Timeout (in seconds) to stop a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetStopTimeout(this DockerContainerRunSettings toolSettings, int? stopTimeout)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StopTimeout = stopTimeout;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.StopTimeout"/></em></p>
        ///   <p>Timeout (in seconds) to stop a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetStopTimeout(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StopTimeout = null;
            return toolSettings;
        }
        #endregion
        #region StorageOpt
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.StorageOpt"/> to a new list</em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetStorageOpt(this DockerContainerRunSettings toolSettings, params string[] storageOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageOptInternal = storageOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.StorageOpt"/> to a new list</em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetStorageOpt(this DockerContainerRunSettings toolSettings, IEnumerable<string> storageOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageOptInternal = storageOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.StorageOpt"/></em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddStorageOpt(this DockerContainerRunSettings toolSettings, params string[] storageOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageOptInternal.AddRange(storageOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.StorageOpt"/></em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddStorageOpt(this DockerContainerRunSettings toolSettings, IEnumerable<string> storageOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageOptInternal.AddRange(storageOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.StorageOpt"/></em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearStorageOpt(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StorageOptInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.StorageOpt"/></em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveStorageOpt(this DockerContainerRunSettings toolSettings, params string[] storageOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(storageOpt);
            toolSettings.StorageOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.StorageOpt"/></em></p>
        ///   <p>Storage driver options for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveStorageOpt(this DockerContainerRunSettings toolSettings, IEnumerable<string> storageOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(storageOpt);
            toolSettings.StorageOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Sysctl
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Sysctl"/> to a new dictionary</em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetSysctl(this DockerContainerRunSettings toolSettings, IDictionary<string, string> sysctl)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlInternal = sysctl.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.Sysctl"/></em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearSysctl(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds a new key-value-pair <see cref="DockerContainerRunSettings.Sysctl"/></em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddSysctl(this DockerContainerRunSettings toolSettings, string sysctlKey, string sysctlValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlInternal.Add(sysctlKey, sysctlValue);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes a key-value-pair from <see cref="DockerContainerRunSettings.Sysctl"/></em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveSysctl(this DockerContainerRunSettings toolSettings, string sysctlKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlInternal.Remove(sysctlKey);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets a key-value-pair in <see cref="DockerContainerRunSettings.Sysctl"/></em></p>
        ///   <p>Sysctl options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetSysctl(this DockerContainerRunSettings toolSettings, string sysctlKey, string sysctlValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SysctlInternal[sysctlKey] = sysctlValue;
            return toolSettings;
        }
        #endregion
        #region Tmpfs
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Tmpfs"/> to a new list</em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetTmpfs(this DockerContainerRunSettings toolSettings, params string[] tmpfs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TmpfsInternal = tmpfs.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Tmpfs"/> to a new list</em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetTmpfs(this DockerContainerRunSettings toolSettings, IEnumerable<string> tmpfs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TmpfsInternal = tmpfs.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.Tmpfs"/></em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddTmpfs(this DockerContainerRunSettings toolSettings, params string[] tmpfs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TmpfsInternal.AddRange(tmpfs);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.Tmpfs"/></em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddTmpfs(this DockerContainerRunSettings toolSettings, IEnumerable<string> tmpfs)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TmpfsInternal.AddRange(tmpfs);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.Tmpfs"/></em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearTmpfs(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TmpfsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.Tmpfs"/></em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveTmpfs(this DockerContainerRunSettings toolSettings, params string[] tmpfs)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(tmpfs);
            toolSettings.TmpfsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.Tmpfs"/></em></p>
        ///   <p>Mount a tmpfs directory.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveTmpfs(this DockerContainerRunSettings toolSettings, IEnumerable<string> tmpfs)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(tmpfs);
            toolSettings.TmpfsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Tty
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetTty(this DockerContainerRunSettings toolSettings, bool? tty)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = tty;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetTty(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerRunSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings EnableTty(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerRunSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings DisableTty(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerRunSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ToggleTty(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = !toolSettings.Tty;
            return toolSettings;
        }
        #endregion
        #region Ulimit
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Ulimit"/></em></p>
        ///   <p>Ulimit options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetUlimit(this DockerContainerRunSettings toolSettings, string ulimit)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ulimit = ulimit;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Ulimit"/></em></p>
        ///   <p>Ulimit options.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetUlimit(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ulimit = null;
            return toolSettings;
        }
        #endregion
        #region User
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.User"/></em></p>
        ///   <p>Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetUser(this DockerContainerRunSettings toolSettings, string user)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.User = user;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.User"/></em></p>
        ///   <p>Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetUser(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.User = null;
            return toolSettings;
        }
        #endregion
        #region Userns
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Userns"/></em></p>
        ///   <p>User namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetUserns(this DockerContainerRunSettings toolSettings, string userns)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Userns = userns;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Userns"/></em></p>
        ///   <p>User namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetUserns(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Userns = null;
            return toolSettings;
        }
        #endregion
        #region Uts
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Uts"/></em></p>
        ///   <p>UTS namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetUts(this DockerContainerRunSettings toolSettings, string uts)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Uts = uts;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Uts"/></em></p>
        ///   <p>UTS namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetUts(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Uts = null;
            return toolSettings;
        }
        #endregion
        #region Volume
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Volume"/> to a new list</em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetVolume(this DockerContainerRunSettings toolSettings, params string[] volume)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeInternal = volume.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Volume"/> to a new list</em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetVolume(this DockerContainerRunSettings toolSettings, IEnumerable<string> volume)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeInternal = volume.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.Volume"/></em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddVolume(this DockerContainerRunSettings toolSettings, params string[] volume)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeInternal.AddRange(volume);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.Volume"/></em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddVolume(this DockerContainerRunSettings toolSettings, IEnumerable<string> volume)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeInternal.AddRange(volume);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.Volume"/></em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearVolume(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.Volume"/></em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveVolume(this DockerContainerRunSettings toolSettings, params string[] volume)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(volume);
            toolSettings.VolumeInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.Volume"/></em></p>
        ///   <p>Bind mount a volume.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveVolume(this DockerContainerRunSettings toolSettings, IEnumerable<string> volume)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(volume);
            toolSettings.VolumeInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region VolumeDriver
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.VolumeDriver"/></em></p>
        ///   <p>Optional volume driver for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetVolumeDriver(this DockerContainerRunSettings toolSettings, string volumeDriver)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeDriver = volumeDriver;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.VolumeDriver"/></em></p>
        ///   <p>Optional volume driver for the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetVolumeDriver(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumeDriver = null;
            return toolSettings;
        }
        #endregion
        #region VolumesFrom
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.VolumesFrom"/> to a new list</em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetVolumesFrom(this DockerContainerRunSettings toolSettings, params string[] volumesFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesFromInternal = volumesFrom.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.VolumesFrom"/> to a new list</em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetVolumesFrom(this DockerContainerRunSettings toolSettings, IEnumerable<string> volumesFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesFromInternal = volumesFrom.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.VolumesFrom"/></em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddVolumesFrom(this DockerContainerRunSettings toolSettings, params string[] volumesFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesFromInternal.AddRange(volumesFrom);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.VolumesFrom"/></em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddVolumesFrom(this DockerContainerRunSettings toolSettings, IEnumerable<string> volumesFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesFromInternal.AddRange(volumesFrom);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.VolumesFrom"/></em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearVolumesFrom(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.VolumesFromInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.VolumesFrom"/></em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveVolumesFrom(this DockerContainerRunSettings toolSettings, params string[] volumesFrom)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(volumesFrom);
            toolSettings.VolumesFromInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.VolumesFrom"/></em></p>
        ///   <p>Mount volumes from the specified container(s).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveVolumesFrom(this DockerContainerRunSettings toolSettings, IEnumerable<string> volumesFrom)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(volumesFrom);
            toolSettings.VolumesFromInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Workdir
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Workdir"/></em></p>
        ///   <p>Working directory inside the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetWorkdir(this DockerContainerRunSettings toolSettings, string workdir)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Workdir = workdir;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Workdir"/></em></p>
        ///   <p>Working directory inside the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetWorkdir(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Workdir = null;
            return toolSettings;
        }
        #endregion
        #region Image
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Image"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetImage(this DockerContainerRunSettings toolSettings, string image)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = image;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Image"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetImage(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = null;
            return toolSettings;
        }
        #endregion
        #region Command
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Command"/></em></p>
        ///   <p>[COMMAND]</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetCommand(this DockerContainerRunSettings toolSettings, string command)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Command = command;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRunSettings.Command"/></em></p>
        ///   <p>[COMMAND]</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ResetCommand(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Command = null;
            return toolSettings;
        }
        #endregion
        #region Args
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Args"/> to a new list</em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetArgs(this DockerContainerRunSettings toolSettings, params string[] args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal = args.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRunSettings.Args"/> to a new list</em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings SetArgs(this DockerContainerRunSettings toolSettings, IEnumerable<string> args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal = args.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddArgs(this DockerContainerRunSettings toolSettings, params string[] args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal.AddRange(args);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRunSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings AddArgs(this DockerContainerRunSettings toolSettings, IEnumerable<string> args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal.AddRange(args);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRunSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings ClearArgs(this DockerContainerRunSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveArgs(this DockerContainerRunSettings toolSettings, params string[] args)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(args);
            toolSettings.ArgsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRunSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerRunSettings RemoveArgs(this DockerContainerRunSettings toolSettings, IEnumerable<string> args)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(args);
            toolSettings.ArgsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerNodeInspectSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerNodeInspectSettingsExtensions
    {
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodeInspectSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerNodeInspectSettings SetFormat(this DockerNodeInspectSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNodeInspectSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerNodeInspectSettings ResetFormat(this DockerNodeInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Pretty
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodeInspectSettings.Pretty"/></em></p>
        ///   <p>Print the information in a human friendly format.</p>
        /// </summary>
        [Pure]
        public static DockerNodeInspectSettings SetPretty(this DockerNodeInspectSettings toolSettings, bool? pretty)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pretty = pretty;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNodeInspectSettings.Pretty"/></em></p>
        ///   <p>Print the information in a human friendly format.</p>
        /// </summary>
        [Pure]
        public static DockerNodeInspectSettings ResetPretty(this DockerNodeInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pretty = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerNodeInspectSettings.Pretty"/></em></p>
        ///   <p>Print the information in a human friendly format.</p>
        /// </summary>
        [Pure]
        public static DockerNodeInspectSettings EnablePretty(this DockerNodeInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pretty = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerNodeInspectSettings.Pretty"/></em></p>
        ///   <p>Print the information in a human friendly format.</p>
        /// </summary>
        [Pure]
        public static DockerNodeInspectSettings DisablePretty(this DockerNodeInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pretty = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerNodeInspectSettings.Pretty"/></em></p>
        ///   <p>Print the information in a human friendly format.</p>
        /// </summary>
        [Pure]
        public static DockerNodeInspectSettings TogglePretty(this DockerNodeInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pretty = !toolSettings.Pretty;
            return toolSettings;
        }
        #endregion
        #region Selves
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodeInspectSettings.Selves"/> to a new list</em></p>
        ///   <p>self|NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodeInspectSettings SetSelves(this DockerNodeInspectSettings toolSettings, params string[] selves)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SelvesInternal = selves.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodeInspectSettings.Selves"/> to a new list</em></p>
        ///   <p>self|NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodeInspectSettings SetSelves(this DockerNodeInspectSettings toolSettings, IEnumerable<string> selves)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SelvesInternal = selves.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNodeInspectSettings.Selves"/></em></p>
        ///   <p>self|NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodeInspectSettings AddSelves(this DockerNodeInspectSettings toolSettings, params string[] selves)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SelvesInternal.AddRange(selves);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNodeInspectSettings.Selves"/></em></p>
        ///   <p>self|NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodeInspectSettings AddSelves(this DockerNodeInspectSettings toolSettings, IEnumerable<string> selves)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SelvesInternal.AddRange(selves);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerNodeInspectSettings.Selves"/></em></p>
        ///   <p>self|NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodeInspectSettings ClearSelves(this DockerNodeInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SelvesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNodeInspectSettings.Selves"/></em></p>
        ///   <p>self|NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodeInspectSettings RemoveSelves(this DockerNodeInspectSettings toolSettings, params string[] selves)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(selves);
            toolSettings.SelvesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNodeInspectSettings.Selves"/></em></p>
        ///   <p>self|NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodeInspectSettings RemoveSelves(this DockerNodeInspectSettings toolSettings, IEnumerable<string> selves)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(selves);
            toolSettings.SelvesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerSaveSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerSaveSettingsExtensions
    {
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSaveSettings.Output"/></em></p>
        ///   <p>Write to a file, instead of STDOUT.</p>
        /// </summary>
        [Pure]
        public static DockerSaveSettings SetOutput(this DockerSaveSettings toolSettings, string output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSaveSettings.Output"/></em></p>
        ///   <p>Write to a file, instead of STDOUT.</p>
        /// </summary>
        [Pure]
        public static DockerSaveSettings ResetOutput(this DockerSaveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Images
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSaveSettings.Images"/> to a new list</em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerSaveSettings SetImages(this DockerSaveSettings toolSettings, params string[] images)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal = images.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSaveSettings.Images"/> to a new list</em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerSaveSettings SetImages(this DockerSaveSettings toolSettings, IEnumerable<string> images)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal = images.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerSaveSettings.Images"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerSaveSettings AddImages(this DockerSaveSettings toolSettings, params string[] images)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal.AddRange(images);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerSaveSettings.Images"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerSaveSettings AddImages(this DockerSaveSettings toolSettings, IEnumerable<string> images)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal.AddRange(images);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerSaveSettings.Images"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerSaveSettings ClearImages(this DockerSaveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerSaveSettings.Images"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerSaveSettings RemoveImages(this DockerSaveSettings toolSettings, params string[] images)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(images);
            toolSettings.ImagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerSaveSettings.Images"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerSaveSettings RemoveImages(this DockerSaveSettings toolSettings, IEnumerable<string> images)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(images);
            toolSettings.ImagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContainerStatsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContainerStatsSettingsExtensions
    {
        #region All
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerStatsSettings.All"/></em></p>
        ///   <p>Show all containers (default shows just running).</p>
        /// </summary>
        [Pure]
        public static DockerContainerStatsSettings SetAll(this DockerContainerStatsSettings toolSettings, bool? all)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = all;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerStatsSettings.All"/></em></p>
        ///   <p>Show all containers (default shows just running).</p>
        /// </summary>
        [Pure]
        public static DockerContainerStatsSettings ResetAll(this DockerContainerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerStatsSettings.All"/></em></p>
        ///   <p>Show all containers (default shows just running).</p>
        /// </summary>
        [Pure]
        public static DockerContainerStatsSettings EnableAll(this DockerContainerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerStatsSettings.All"/></em></p>
        ///   <p>Show all containers (default shows just running).</p>
        /// </summary>
        [Pure]
        public static DockerContainerStatsSettings DisableAll(this DockerContainerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerStatsSettings.All"/></em></p>
        ///   <p>Show all containers (default shows just running).</p>
        /// </summary>
        [Pure]
        public static DockerContainerStatsSettings ToggleAll(this DockerContainerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = !toolSettings.All;
            return toolSettings;
        }
        #endregion
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerStatsSettings.Format"/></em></p>
        ///   <p>Pretty-print images using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStatsSettings SetFormat(this DockerContainerStatsSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerStatsSettings.Format"/></em></p>
        ///   <p>Pretty-print images using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStatsSettings ResetFormat(this DockerContainerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region NoStream
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerStatsSettings.NoStream"/></em></p>
        ///   <p>Disable streaming stats and only pull the first result.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStatsSettings SetNoStream(this DockerContainerStatsSettings toolSettings, bool? noStream)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoStream = noStream;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerStatsSettings.NoStream"/></em></p>
        ///   <p>Disable streaming stats and only pull the first result.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStatsSettings ResetNoStream(this DockerContainerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoStream = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerStatsSettings.NoStream"/></em></p>
        ///   <p>Disable streaming stats and only pull the first result.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStatsSettings EnableNoStream(this DockerContainerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoStream = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerStatsSettings.NoStream"/></em></p>
        ///   <p>Disable streaming stats and only pull the first result.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStatsSettings DisableNoStream(this DockerContainerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoStream = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerStatsSettings.NoStream"/></em></p>
        ///   <p>Disable streaming stats and only pull the first result.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStatsSettings ToggleNoStream(this DockerContainerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoStream = !toolSettings.NoStream;
            return toolSettings;
        }
        #endregion
        #region NoTrunc
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerStatsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStatsSettings SetNoTrunc(this DockerContainerStatsSettings toolSettings, bool? noTrunc)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = noTrunc;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerStatsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStatsSettings ResetNoTrunc(this DockerContainerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerStatsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStatsSettings EnableNoTrunc(this DockerContainerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerStatsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStatsSettings DisableNoTrunc(this DockerContainerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerStatsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStatsSettings ToggleNoTrunc(this DockerContainerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = !toolSettings.NoTrunc;
            return toolSettings;
        }
        #endregion
        #region Containers
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerStatsSettings.Containers"/> to a new list</em></p>
        ///   <p>[CONTAINER...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerStatsSettings SetContainers(this DockerContainerStatsSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerStatsSettings.Containers"/> to a new list</em></p>
        ///   <p>[CONTAINER...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerStatsSettings SetContainers(this DockerContainerStatsSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerStatsSettings.Containers"/></em></p>
        ///   <p>[CONTAINER...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerStatsSettings AddContainers(this DockerContainerStatsSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerStatsSettings.Containers"/></em></p>
        ///   <p>[CONTAINER...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerStatsSettings AddContainers(this DockerContainerStatsSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerStatsSettings.Containers"/></em></p>
        ///   <p>[CONTAINER...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerStatsSettings ClearContainers(this DockerContainerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerStatsSettings.Containers"/></em></p>
        ///   <p>[CONTAINER...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerStatsSettings RemoveContainers(this DockerContainerStatsSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerStatsSettings.Containers"/></em></p>
        ///   <p>[CONTAINER...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerStatsSettings RemoveContainers(this DockerContainerStatsSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContainerExecSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContainerExecSettingsExtensions
    {
        #region Detach
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerExecSettings.Detach"/></em></p>
        ///   <p>Detached mode: run command in the background.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings SetDetach(this DockerContainerExecSettings toolSettings, bool? detach)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = detach;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerExecSettings.Detach"/></em></p>
        ///   <p>Detached mode: run command in the background.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings ResetDetach(this DockerContainerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerExecSettings.Detach"/></em></p>
        ///   <p>Detached mode: run command in the background.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings EnableDetach(this DockerContainerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerExecSettings.Detach"/></em></p>
        ///   <p>Detached mode: run command in the background.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings DisableDetach(this DockerContainerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerExecSettings.Detach"/></em></p>
        ///   <p>Detached mode: run command in the background.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings ToggleDetach(this DockerContainerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = !toolSettings.Detach;
            return toolSettings;
        }
        #endregion
        #region DetachKeys
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerExecSettings.DetachKeys"/></em></p>
        ///   <p>Override the key sequence for detaching a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings SetDetachKeys(this DockerContainerExecSettings toolSettings, string detachKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DetachKeys = detachKeys;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerExecSettings.DetachKeys"/></em></p>
        ///   <p>Override the key sequence for detaching a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings ResetDetachKeys(this DockerContainerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DetachKeys = null;
            return toolSettings;
        }
        #endregion
        #region Env
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerExecSettings.Env"/> to a new list</em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings SetEnv(this DockerContainerExecSettings toolSettings, params string[] env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal = env.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerExecSettings.Env"/> to a new list</em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings SetEnv(this DockerContainerExecSettings toolSettings, IEnumerable<string> env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal = env.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerExecSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings AddEnv(this DockerContainerExecSettings toolSettings, params string[] env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal.AddRange(env);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerExecSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings AddEnv(this DockerContainerExecSettings toolSettings, IEnumerable<string> env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal.AddRange(env);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerExecSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings ClearEnv(this DockerContainerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerExecSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings RemoveEnv(this DockerContainerExecSettings toolSettings, params string[] env)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(env);
            toolSettings.EnvInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerExecSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings RemoveEnv(this DockerContainerExecSettings toolSettings, IEnumerable<string> env)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(env);
            toolSettings.EnvInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Interactive
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerExecSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings SetInteractive(this DockerContainerExecSettings toolSettings, bool? interactive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = interactive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerExecSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings ResetInteractive(this DockerContainerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerExecSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings EnableInteractive(this DockerContainerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerExecSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings DisableInteractive(this DockerContainerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerExecSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings ToggleInteractive(this DockerContainerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = !toolSettings.Interactive;
            return toolSettings;
        }
        #endregion
        #region Privileged
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerExecSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to the command.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings SetPrivileged(this DockerContainerExecSettings toolSettings, bool? privileged)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = privileged;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerExecSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to the command.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings ResetPrivileged(this DockerContainerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerExecSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to the command.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings EnablePrivileged(this DockerContainerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerExecSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to the command.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings DisablePrivileged(this DockerContainerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerExecSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to the command.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings TogglePrivileged(this DockerContainerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = !toolSettings.Privileged;
            return toolSettings;
        }
        #endregion
        #region Tty
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerExecSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings SetTty(this DockerContainerExecSettings toolSettings, bool? tty)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = tty;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerExecSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings ResetTty(this DockerContainerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerExecSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings EnableTty(this DockerContainerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerExecSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings DisableTty(this DockerContainerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerExecSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings ToggleTty(this DockerContainerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = !toolSettings.Tty;
            return toolSettings;
        }
        #endregion
        #region User
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerExecSettings.User"/></em></p>
        ///   <p>Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings SetUser(this DockerContainerExecSettings toolSettings, string user)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.User = user;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerExecSettings.User"/></em></p>
        ///   <p>Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings ResetUser(this DockerContainerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.User = null;
            return toolSettings;
        }
        #endregion
        #region Workdir
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerExecSettings.Workdir"/></em></p>
        ///   <p>Working directory inside the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings SetWorkdir(this DockerContainerExecSettings toolSettings, string workdir)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Workdir = workdir;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerExecSettings.Workdir"/></em></p>
        ///   <p>Working directory inside the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings ResetWorkdir(this DockerContainerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Workdir = null;
            return toolSettings;
        }
        #endregion
        #region Container
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerExecSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings SetContainer(this DockerContainerExecSettings toolSettings, string container)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = container;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerExecSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings ResetContainer(this DockerContainerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = null;
            return toolSettings;
        }
        #endregion
        #region Command
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerExecSettings.Command"/></em></p>
        ///   <p>COMMAND</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings SetCommand(this DockerContainerExecSettings toolSettings, string command)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Command = command;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerExecSettings.Command"/></em></p>
        ///   <p>COMMAND</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings ResetCommand(this DockerContainerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Command = null;
            return toolSettings;
        }
        #endregion
        #region Args
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerExecSettings.Args"/> to a new list</em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings SetArgs(this DockerContainerExecSettings toolSettings, params string[] args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal = args.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerExecSettings.Args"/> to a new list</em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings SetArgs(this DockerContainerExecSettings toolSettings, IEnumerable<string> args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal = args.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerExecSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings AddArgs(this DockerContainerExecSettings toolSettings, params string[] args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal.AddRange(args);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerExecSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings AddArgs(this DockerContainerExecSettings toolSettings, IEnumerable<string> args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal.AddRange(args);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerExecSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings ClearArgs(this DockerContainerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerExecSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings RemoveArgs(this DockerContainerExecSettings toolSettings, params string[] args)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(args);
            toolSettings.ArgsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerExecSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerContainerExecSettings RemoveArgs(this DockerContainerExecSettings toolSettings, IEnumerable<string> args)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(args);
            toolSettings.ArgsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerNodeLsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerNodeLsSettingsExtensions
    {
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodeLsSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerNodeLsSettings SetFilter(this DockerNodeLsSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNodeLsSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerNodeLsSettings ResetFilter(this DockerNodeLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodeLsSettings.Format"/></em></p>
        ///   <p>Pretty-print nodes using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerNodeLsSettings SetFormat(this DockerNodeLsSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNodeLsSettings.Format"/></em></p>
        ///   <p>Pretty-print nodes using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerNodeLsSettings ResetFormat(this DockerNodeLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodeLsSettings.Quiet"/></em></p>
        ///   <p>Only display IDs.</p>
        /// </summary>
        [Pure]
        public static DockerNodeLsSettings SetQuiet(this DockerNodeLsSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNodeLsSettings.Quiet"/></em></p>
        ///   <p>Only display IDs.</p>
        /// </summary>
        [Pure]
        public static DockerNodeLsSettings ResetQuiet(this DockerNodeLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerNodeLsSettings.Quiet"/></em></p>
        ///   <p>Only display IDs.</p>
        /// </summary>
        [Pure]
        public static DockerNodeLsSettings EnableQuiet(this DockerNodeLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerNodeLsSettings.Quiet"/></em></p>
        ///   <p>Only display IDs.</p>
        /// </summary>
        [Pure]
        public static DockerNodeLsSettings DisableQuiet(this DockerNodeLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerNodeLsSettings.Quiet"/></em></p>
        ///   <p>Only display IDs.</p>
        /// </summary>
        [Pure]
        public static DockerNodeLsSettings ToggleQuiet(this DockerNodeLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerSwarmJoinSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerSwarmJoinSettingsExtensions
    {
        #region AdvertiseAddr
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmJoinSettings.AdvertiseAddr"/></em></p>
        ///   <p>Advertised address (format: &lt;ip|interface&gt;[:port]).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmJoinSettings SetAdvertiseAddr(this DockerSwarmJoinSettings toolSettings, string advertiseAddr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdvertiseAddr = advertiseAddr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmJoinSettings.AdvertiseAddr"/></em></p>
        ///   <p>Advertised address (format: &lt;ip|interface&gt;[:port]).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmJoinSettings ResetAdvertiseAddr(this DockerSwarmJoinSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AdvertiseAddr = null;
            return toolSettings;
        }
        #endregion
        #region Availability
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmJoinSettings.Availability"/></em></p>
        ///   <p>Availability of the node ("active"|"pause"|"drain").</p>
        /// </summary>
        [Pure]
        public static DockerSwarmJoinSettings SetAvailability(this DockerSwarmJoinSettings toolSettings, Availability availability)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Availability = availability;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmJoinSettings.Availability"/></em></p>
        ///   <p>Availability of the node ("active"|"pause"|"drain").</p>
        /// </summary>
        [Pure]
        public static DockerSwarmJoinSettings ResetAvailability(this DockerSwarmJoinSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Availability = null;
            return toolSettings;
        }
        #endregion
        #region DataPathAddr
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmJoinSettings.DataPathAddr"/></em></p>
        ///   <p>Address or interface to use for data path traffic (format: &lt;ip|interface&gt;).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmJoinSettings SetDataPathAddr(this DockerSwarmJoinSettings toolSettings, string dataPathAddr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DataPathAddr = dataPathAddr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmJoinSettings.DataPathAddr"/></em></p>
        ///   <p>Address or interface to use for data path traffic (format: &lt;ip|interface&gt;).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmJoinSettings ResetDataPathAddr(this DockerSwarmJoinSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DataPathAddr = null;
            return toolSettings;
        }
        #endregion
        #region ListenAddr
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmJoinSettings.ListenAddr"/></em></p>
        ///   <p>Listen address (format: &lt;ip|interface&gt;[:port]).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmJoinSettings SetListenAddr(this DockerSwarmJoinSettings toolSettings, string listenAddr)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ListenAddr = listenAddr;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmJoinSettings.ListenAddr"/></em></p>
        ///   <p>Listen address (format: &lt;ip|interface&gt;[:port]).</p>
        /// </summary>
        [Pure]
        public static DockerSwarmJoinSettings ResetListenAddr(this DockerSwarmJoinSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ListenAddr = null;
            return toolSettings;
        }
        #endregion
        #region Token
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSwarmJoinSettings.Token"/></em></p>
        ///   <p>Token for entry into the swarm.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmJoinSettings SetToken(this DockerSwarmJoinSettings toolSettings, string token)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Token = token;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSwarmJoinSettings.Token"/></em></p>
        ///   <p>Token for entry into the swarm.</p>
        /// </summary>
        [Pure]
        public static DockerSwarmJoinSettings ResetToken(this DockerSwarmJoinSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Token = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContainerLogsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContainerLogsSettingsExtensions
    {
        #region Details
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerLogsSettings.Details"/></em></p>
        ///   <p>Show extra details provided to logs.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLogsSettings SetDetails(this DockerContainerLogsSettings toolSettings, bool? details)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Details = details;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerLogsSettings.Details"/></em></p>
        ///   <p>Show extra details provided to logs.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLogsSettings ResetDetails(this DockerContainerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Details = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerLogsSettings.Details"/></em></p>
        ///   <p>Show extra details provided to logs.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLogsSettings EnableDetails(this DockerContainerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Details = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerLogsSettings.Details"/></em></p>
        ///   <p>Show extra details provided to logs.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLogsSettings DisableDetails(this DockerContainerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Details = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerLogsSettings.Details"/></em></p>
        ///   <p>Show extra details provided to logs.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLogsSettings ToggleDetails(this DockerContainerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Details = !toolSettings.Details;
            return toolSettings;
        }
        #endregion
        #region Follow
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerLogsSettings.Follow"/></em></p>
        ///   <p>Follow log output.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLogsSettings SetFollow(this DockerContainerLogsSettings toolSettings, bool? follow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Follow = follow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerLogsSettings.Follow"/></em></p>
        ///   <p>Follow log output.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLogsSettings ResetFollow(this DockerContainerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Follow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerLogsSettings.Follow"/></em></p>
        ///   <p>Follow log output.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLogsSettings EnableFollow(this DockerContainerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Follow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerLogsSettings.Follow"/></em></p>
        ///   <p>Follow log output.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLogsSettings DisableFollow(this DockerContainerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Follow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerLogsSettings.Follow"/></em></p>
        ///   <p>Follow log output.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLogsSettings ToggleFollow(this DockerContainerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Follow = !toolSettings.Follow;
            return toolSettings;
        }
        #endregion
        #region Since
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerLogsSettings.Since"/></em></p>
        ///   <p>Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes).</p>
        /// </summary>
        [Pure]
        public static DockerContainerLogsSettings SetSince(this DockerContainerLogsSettings toolSettings, string since)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Since = since;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerLogsSettings.Since"/></em></p>
        ///   <p>Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes).</p>
        /// </summary>
        [Pure]
        public static DockerContainerLogsSettings ResetSince(this DockerContainerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Since = null;
            return toolSettings;
        }
        #endregion
        #region Tail
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerLogsSettings.Tail"/></em></p>
        ///   <p>Number of lines to show from the end of the logs.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLogsSettings SetTail(this DockerContainerLogsSettings toolSettings, string tail)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tail = tail;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerLogsSettings.Tail"/></em></p>
        ///   <p>Number of lines to show from the end of the logs.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLogsSettings ResetTail(this DockerContainerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tail = null;
            return toolSettings;
        }
        #endregion
        #region Timestamps
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerLogsSettings.Timestamps"/></em></p>
        ///   <p>Show timestamps.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLogsSettings SetTimestamps(this DockerContainerLogsSettings toolSettings, bool? timestamps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timestamps = timestamps;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerLogsSettings.Timestamps"/></em></p>
        ///   <p>Show timestamps.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLogsSettings ResetTimestamps(this DockerContainerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timestamps = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerLogsSettings.Timestamps"/></em></p>
        ///   <p>Show timestamps.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLogsSettings EnableTimestamps(this DockerContainerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timestamps = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerLogsSettings.Timestamps"/></em></p>
        ///   <p>Show timestamps.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLogsSettings DisableTimestamps(this DockerContainerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timestamps = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerLogsSettings.Timestamps"/></em></p>
        ///   <p>Show timestamps.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLogsSettings ToggleTimestamps(this DockerContainerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timestamps = !toolSettings.Timestamps;
            return toolSettings;
        }
        #endregion
        #region Until
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerLogsSettings.Until"/></em></p>
        ///   <p>Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes).</p>
        /// </summary>
        [Pure]
        public static DockerContainerLogsSettings SetUntil(this DockerContainerLogsSettings toolSettings, string until)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Until = until;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerLogsSettings.Until"/></em></p>
        ///   <p>Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes).</p>
        /// </summary>
        [Pure]
        public static DockerContainerLogsSettings ResetUntil(this DockerContainerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Until = null;
            return toolSettings;
        }
        #endregion
        #region Container
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerLogsSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerLogsSettings SetContainer(this DockerContainerLogsSettings toolSettings, string container)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = container;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerLogsSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerLogsSettings ResetContainer(this DockerContainerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerCheckpointLsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerCheckpointLsSettingsExtensions
    {
        #region CheckpointDir
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCheckpointLsSettings.CheckpointDir"/></em></p>
        ///   <p>Use a custom checkpoint storage directory.</p>
        /// </summary>
        [Pure]
        public static DockerCheckpointLsSettings SetCheckpointDir(this DockerCheckpointLsSettings toolSettings, string checkpointDir)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CheckpointDir = checkpointDir;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCheckpointLsSettings.CheckpointDir"/></em></p>
        ///   <p>Use a custom checkpoint storage directory.</p>
        /// </summary>
        [Pure]
        public static DockerCheckpointLsSettings ResetCheckpointDir(this DockerCheckpointLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CheckpointDir = null;
            return toolSettings;
        }
        #endregion
        #region Container
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCheckpointLsSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerCheckpointLsSettings SetContainer(this DockerCheckpointLsSettings toolSettings, string container)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = container;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCheckpointLsSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerCheckpointLsSettings ResetContainer(this DockerCheckpointLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContainerKillSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContainerKillSettingsExtensions
    {
        #region Signal
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerKillSettings.Signal"/></em></p>
        ///   <p>Signal to send to the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerKillSettings SetSignal(this DockerContainerKillSettings toolSettings, string signal)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Signal = signal;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerKillSettings.Signal"/></em></p>
        ///   <p>Signal to send to the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerKillSettings ResetSignal(this DockerContainerKillSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Signal = null;
            return toolSettings;
        }
        #endregion
        #region Containers
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerKillSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerKillSettings SetContainers(this DockerContainerKillSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerKillSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerKillSettings SetContainers(this DockerContainerKillSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerKillSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerKillSettings AddContainers(this DockerContainerKillSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerKillSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerKillSettings AddContainers(this DockerContainerKillSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerKillSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerKillSettings ClearContainers(this DockerContainerKillSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerKillSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerKillSettings RemoveContainers(this DockerContainerKillSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerKillSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerKillSettings RemoveContainers(this DockerContainerKillSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerPluginInstallSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerPluginInstallSettingsExtensions
    {
        #region Alias
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginInstallSettings.Alias"/></em></p>
        ///   <p>Local name for plugin.</p>
        /// </summary>
        [Pure]
        public static DockerPluginInstallSettings SetAlias(this DockerPluginInstallSettings toolSettings, string alias)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Alias = alias;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPluginInstallSettings.Alias"/></em></p>
        ///   <p>Local name for plugin.</p>
        /// </summary>
        [Pure]
        public static DockerPluginInstallSettings ResetAlias(this DockerPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Alias = null;
            return toolSettings;
        }
        #endregion
        #region Disable
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginInstallSettings.Disable"/></em></p>
        ///   <p>Do not enable the plugin on install.</p>
        /// </summary>
        [Pure]
        public static DockerPluginInstallSettings SetDisable(this DockerPluginInstallSettings toolSettings, bool? disable)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Disable = disable;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPluginInstallSettings.Disable"/></em></p>
        ///   <p>Do not enable the plugin on install.</p>
        /// </summary>
        [Pure]
        public static DockerPluginInstallSettings ResetDisable(this DockerPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Disable = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerPluginInstallSettings.Disable"/></em></p>
        ///   <p>Do not enable the plugin on install.</p>
        /// </summary>
        [Pure]
        public static DockerPluginInstallSettings EnableDisable(this DockerPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Disable = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerPluginInstallSettings.Disable"/></em></p>
        ///   <p>Do not enable the plugin on install.</p>
        /// </summary>
        [Pure]
        public static DockerPluginInstallSettings DisableDisable(this DockerPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Disable = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerPluginInstallSettings.Disable"/></em></p>
        ///   <p>Do not enable the plugin on install.</p>
        /// </summary>
        [Pure]
        public static DockerPluginInstallSettings ToggleDisable(this DockerPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Disable = !toolSettings.Disable;
            return toolSettings;
        }
        #endregion
        #region DisableContentTrust
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginInstallSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerPluginInstallSettings SetDisableContentTrust(this DockerPluginInstallSettings toolSettings, bool? disableContentTrust)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = disableContentTrust;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPluginInstallSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerPluginInstallSettings ResetDisableContentTrust(this DockerPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerPluginInstallSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerPluginInstallSettings EnableDisableContentTrust(this DockerPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerPluginInstallSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerPluginInstallSettings DisableDisableContentTrust(this DockerPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerPluginInstallSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerPluginInstallSettings ToggleDisableContentTrust(this DockerPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = !toolSettings.DisableContentTrust;
            return toolSettings;
        }
        #endregion
        #region GrantAllPermissions
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginInstallSettings.GrantAllPermissions"/></em></p>
        ///   <p>Grant all permissions necessary to run the plugin.</p>
        /// </summary>
        [Pure]
        public static DockerPluginInstallSettings SetGrantAllPermissions(this DockerPluginInstallSettings toolSettings, bool? grantAllPermissions)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GrantAllPermissions = grantAllPermissions;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPluginInstallSettings.GrantAllPermissions"/></em></p>
        ///   <p>Grant all permissions necessary to run the plugin.</p>
        /// </summary>
        [Pure]
        public static DockerPluginInstallSettings ResetGrantAllPermissions(this DockerPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GrantAllPermissions = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerPluginInstallSettings.GrantAllPermissions"/></em></p>
        ///   <p>Grant all permissions necessary to run the plugin.</p>
        /// </summary>
        [Pure]
        public static DockerPluginInstallSettings EnableGrantAllPermissions(this DockerPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GrantAllPermissions = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerPluginInstallSettings.GrantAllPermissions"/></em></p>
        ///   <p>Grant all permissions necessary to run the plugin.</p>
        /// </summary>
        [Pure]
        public static DockerPluginInstallSettings DisableGrantAllPermissions(this DockerPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GrantAllPermissions = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerPluginInstallSettings.GrantAllPermissions"/></em></p>
        ///   <p>Grant all permissions necessary to run the plugin.</p>
        /// </summary>
        [Pure]
        public static DockerPluginInstallSettings ToggleGrantAllPermissions(this DockerPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.GrantAllPermissions = !toolSettings.GrantAllPermissions;
            return toolSettings;
        }
        #endregion
        #region Plugin
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginInstallSettings.Plugin"/></em></p>
        ///   <p>PLUGIN</p>
        /// </summary>
        [Pure]
        public static DockerPluginInstallSettings SetPlugin(this DockerPluginInstallSettings toolSettings, string plugin)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Plugin = plugin;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPluginInstallSettings.Plugin"/></em></p>
        ///   <p>PLUGIN</p>
        /// </summary>
        [Pure]
        public static DockerPluginInstallSettings ResetPlugin(this DockerPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Plugin = null;
            return toolSettings;
        }
        #endregion
        #region KeyValues
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginInstallSettings.KeyValues"/> to a new dictionary</em></p>
        ///   <p>[KEY=VALUE...]</p>
        /// </summary>
        [Pure]
        public static DockerPluginInstallSettings SetKeyValues(this DockerPluginInstallSettings toolSettings, IDictionary<string, string> keyValues)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyValuesInternal = keyValues.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerPluginInstallSettings.KeyValues"/></em></p>
        ///   <p>[KEY=VALUE...]</p>
        /// </summary>
        [Pure]
        public static DockerPluginInstallSettings ClearKeyValues(this DockerPluginInstallSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyValuesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds a new key-value-pair <see cref="DockerPluginInstallSettings.KeyValues"/></em></p>
        ///   <p>[KEY=VALUE...]</p>
        /// </summary>
        [Pure]
        public static DockerPluginInstallSettings AddKeyValue(this DockerPluginInstallSettings toolSettings, string keyValueKey, string keyValueValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyValuesInternal.Add(keyValueKey, keyValueValue);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes a key-value-pair from <see cref="DockerPluginInstallSettings.KeyValues"/></em></p>
        ///   <p>[KEY=VALUE...]</p>
        /// </summary>
        [Pure]
        public static DockerPluginInstallSettings RemoveKeyValue(this DockerPluginInstallSettings toolSettings, string keyValueKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyValuesInternal.Remove(keyValueKey);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets a key-value-pair in <see cref="DockerPluginInstallSettings.KeyValues"/></em></p>
        ///   <p>[KEY=VALUE...]</p>
        /// </summary>
        [Pure]
        public static DockerPluginInstallSettings SetKeyValue(this DockerPluginInstallSettings toolSettings, string keyValueKey, string keyValueValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyValuesInternal[keyValueKey] = keyValueValue;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerImagePruneSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerImagePruneSettingsExtensions
    {
        #region All
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImagePruneSettings.All"/></em></p>
        ///   <p>Remove all unused images, not just dangling ones.</p>
        /// </summary>
        [Pure]
        public static DockerImagePruneSettings SetAll(this DockerImagePruneSettings toolSettings, bool? all)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = all;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImagePruneSettings.All"/></em></p>
        ///   <p>Remove all unused images, not just dangling ones.</p>
        /// </summary>
        [Pure]
        public static DockerImagePruneSettings ResetAll(this DockerImagePruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImagePruneSettings.All"/></em></p>
        ///   <p>Remove all unused images, not just dangling ones.</p>
        /// </summary>
        [Pure]
        public static DockerImagePruneSettings EnableAll(this DockerImagePruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImagePruneSettings.All"/></em></p>
        ///   <p>Remove all unused images, not just dangling ones.</p>
        /// </summary>
        [Pure]
        public static DockerImagePruneSettings DisableAll(this DockerImagePruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImagePruneSettings.All"/></em></p>
        ///   <p>Remove all unused images, not just dangling ones.</p>
        /// </summary>
        [Pure]
        public static DockerImagePruneSettings ToggleAll(this DockerImagePruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = !toolSettings.All;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImagePruneSettings.Filter"/></em></p>
        ///   <p>Provide filter values (e.g. 'until=&lt;timestamp&gt;').</p>
        /// </summary>
        [Pure]
        public static DockerImagePruneSettings SetFilter(this DockerImagePruneSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImagePruneSettings.Filter"/></em></p>
        ///   <p>Provide filter values (e.g. 'until=&lt;timestamp&gt;').</p>
        /// </summary>
        [Pure]
        public static DockerImagePruneSettings ResetFilter(this DockerImagePruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Force
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImagePruneSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerImagePruneSettings SetForce(this DockerImagePruneSettings toolSettings, bool? force)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = force;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImagePruneSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerImagePruneSettings ResetForce(this DockerImagePruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImagePruneSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerImagePruneSettings EnableForce(this DockerImagePruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImagePruneSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerImagePruneSettings DisableForce(this DockerImagePruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImagePruneSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation.</p>
        /// </summary>
        [Pure]
        public static DockerImagePruneSettings ToggleForce(this DockerImagePruneSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = !toolSettings.Force;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerImageImportSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerImageImportSettingsExtensions
    {
        #region Change
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageImportSettings.Change"/> to a new list</em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerImageImportSettings SetChange(this DockerImageImportSettings toolSettings, params string[] change)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ChangeInternal = change.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageImportSettings.Change"/> to a new list</em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerImageImportSettings SetChange(this DockerImageImportSettings toolSettings, IEnumerable<string> change)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ChangeInternal = change.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerImageImportSettings.Change"/></em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerImageImportSettings AddChange(this DockerImageImportSettings toolSettings, params string[] change)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ChangeInternal.AddRange(change);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerImageImportSettings.Change"/></em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerImageImportSettings AddChange(this DockerImageImportSettings toolSettings, IEnumerable<string> change)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ChangeInternal.AddRange(change);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerImageImportSettings.Change"/></em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerImageImportSettings ClearChange(this DockerImageImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ChangeInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerImageImportSettings.Change"/></em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerImageImportSettings RemoveChange(this DockerImageImportSettings toolSettings, params string[] change)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(change);
            toolSettings.ChangeInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerImageImportSettings.Change"/></em></p>
        ///   <p>Apply Dockerfile instruction to the created image.</p>
        /// </summary>
        [Pure]
        public static DockerImageImportSettings RemoveChange(this DockerImageImportSettings toolSettings, IEnumerable<string> change)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(change);
            toolSettings.ChangeInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Message
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageImportSettings.Message"/></em></p>
        ///   <p>Set commit message for imported image.</p>
        /// </summary>
        [Pure]
        public static DockerImageImportSettings SetMessage(this DockerImageImportSettings toolSettings, string message)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Message = message;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageImportSettings.Message"/></em></p>
        ///   <p>Set commit message for imported image.</p>
        /// </summary>
        [Pure]
        public static DockerImageImportSettings ResetMessage(this DockerImageImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Message = null;
            return toolSettings;
        }
        #endregion
        #region Platform
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageImportSettings.Platform"/></em></p>
        ///   <p>Set platform if server is multi-platform capable.</p>
        /// </summary>
        [Pure]
        public static DockerImageImportSettings SetPlatform(this DockerImageImportSettings toolSettings, string platform)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = platform;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageImportSettings.Platform"/></em></p>
        ///   <p>Set platform if server is multi-platform capable.</p>
        /// </summary>
        [Pure]
        public static DockerImageImportSettings ResetPlatform(this DockerImageImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = null;
            return toolSettings;
        }
        #endregion
        #region File
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageImportSettings.File"/></em></p>
        ///   <p>file|URL|-</p>
        /// </summary>
        [Pure]
        public static DockerImageImportSettings SetFile(this DockerImageImportSettings toolSettings, string file)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = file;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageImportSettings.File"/></em></p>
        ///   <p>file|URL|-</p>
        /// </summary>
        [Pure]
        public static DockerImageImportSettings ResetFile(this DockerImageImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = null;
            return toolSettings;
        }
        #endregion
        #region Repository
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageImportSettings.Repository"/></em></p>
        ///   <p>[REPOSITORY[:TAG]]</p>
        /// </summary>
        [Pure]
        public static DockerImageImportSettings SetRepository(this DockerImageImportSettings toolSettings, string repository)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = repository;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageImportSettings.Repository"/></em></p>
        ///   <p>[REPOSITORY[:TAG]]</p>
        /// </summary>
        [Pure]
        public static DockerImageImportSettings ResetRepository(this DockerImageImportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerDiffSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerDiffSettingsExtensions
    {
        #region Container
        /// <summary>
        ///   <p><em>Sets <see cref="DockerDiffSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerDiffSettings SetContainer(this DockerDiffSettings toolSettings, string container)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = container;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerDiffSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerDiffSettings ResetContainer(this DockerDiffSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerUnpauseSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerUnpauseSettingsExtensions
    {
        #region Containers
        /// <summary>
        ///   <p><em>Sets <see cref="DockerUnpauseSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerUnpauseSettings SetContainers(this DockerUnpauseSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerUnpauseSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerUnpauseSettings SetContainers(this DockerUnpauseSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerUnpauseSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerUnpauseSettings AddContainers(this DockerUnpauseSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerUnpauseSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerUnpauseSettings AddContainers(this DockerUnpauseSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerUnpauseSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerUnpauseSettings ClearContainers(this DockerUnpauseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerUnpauseSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerUnpauseSettings RemoveContainers(this DockerUnpauseSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerUnpauseSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerUnpauseSettings RemoveContainers(this DockerUnpauseSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContainerLsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContainerLsSettingsExtensions
    {
        #region All
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerLsSettings.All"/></em></p>
        ///   <p>Show all containers (default shows just running).</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings SetAll(this DockerContainerLsSettings toolSettings, bool? all)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = all;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerLsSettings.All"/></em></p>
        ///   <p>Show all containers (default shows just running).</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings ResetAll(this DockerContainerLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerLsSettings.All"/></em></p>
        ///   <p>Show all containers (default shows just running).</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings EnableAll(this DockerContainerLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerLsSettings.All"/></em></p>
        ///   <p>Show all containers (default shows just running).</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings DisableAll(this DockerContainerLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerLsSettings.All"/></em></p>
        ///   <p>Show all containers (default shows just running).</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings ToggleAll(this DockerContainerLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = !toolSettings.All;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerLsSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings SetFilter(this DockerContainerLsSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerLsSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings ResetFilter(this DockerContainerLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerLsSettings.Format"/></em></p>
        ///   <p>Pretty-print containers using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings SetFormat(this DockerContainerLsSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerLsSettings.Format"/></em></p>
        ///   <p>Pretty-print containers using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings ResetFormat(this DockerContainerLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Last
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerLsSettings.Last"/></em></p>
        ///   <p>Show n last created containers (includes all states).</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings SetLast(this DockerContainerLsSettings toolSettings, int? last)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Last = last;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerLsSettings.Last"/></em></p>
        ///   <p>Show n last created containers (includes all states).</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings ResetLast(this DockerContainerLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Last = null;
            return toolSettings;
        }
        #endregion
        #region Latest
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerLsSettings.Latest"/></em></p>
        ///   <p>Show the latest created container (includes all states).</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings SetLatest(this DockerContainerLsSettings toolSettings, bool? latest)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Latest = latest;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerLsSettings.Latest"/></em></p>
        ///   <p>Show the latest created container (includes all states).</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings ResetLatest(this DockerContainerLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Latest = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerLsSettings.Latest"/></em></p>
        ///   <p>Show the latest created container (includes all states).</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings EnableLatest(this DockerContainerLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Latest = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerLsSettings.Latest"/></em></p>
        ///   <p>Show the latest created container (includes all states).</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings DisableLatest(this DockerContainerLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Latest = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerLsSettings.Latest"/></em></p>
        ///   <p>Show the latest created container (includes all states).</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings ToggleLatest(this DockerContainerLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Latest = !toolSettings.Latest;
            return toolSettings;
        }
        #endregion
        #region NoTrunc
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerLsSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings SetNoTrunc(this DockerContainerLsSettings toolSettings, bool? noTrunc)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = noTrunc;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerLsSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings ResetNoTrunc(this DockerContainerLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerLsSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings EnableNoTrunc(this DockerContainerLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerLsSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings DisableNoTrunc(this DockerContainerLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerLsSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings ToggleNoTrunc(this DockerContainerLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = !toolSettings.NoTrunc;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerLsSettings.Quiet"/></em></p>
        ///   <p>Only display numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings SetQuiet(this DockerContainerLsSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerLsSettings.Quiet"/></em></p>
        ///   <p>Only display numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings ResetQuiet(this DockerContainerLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerLsSettings.Quiet"/></em></p>
        ///   <p>Only display numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings EnableQuiet(this DockerContainerLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerLsSettings.Quiet"/></em></p>
        ///   <p>Only display numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings DisableQuiet(this DockerContainerLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerLsSettings.Quiet"/></em></p>
        ///   <p>Only display numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings ToggleQuiet(this DockerContainerLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
        #region Size
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerLsSettings.Size"/></em></p>
        ///   <p>Display total file sizes.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings SetSize(this DockerContainerLsSettings toolSettings, bool? size)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Size = size;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerLsSettings.Size"/></em></p>
        ///   <p>Display total file sizes.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings ResetSize(this DockerContainerLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Size = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerLsSettings.Size"/></em></p>
        ///   <p>Display total file sizes.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings EnableSize(this DockerContainerLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Size = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerLsSettings.Size"/></em></p>
        ///   <p>Display total file sizes.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings DisableSize(this DockerContainerLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Size = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerLsSettings.Size"/></em></p>
        ///   <p>Display total file sizes.</p>
        /// </summary>
        [Pure]
        public static DockerContainerLsSettings ToggleSize(this DockerContainerLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Size = !toolSettings.Size;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerNodePsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerNodePsSettingsExtensions
    {
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodePsSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerNodePsSettings SetFilter(this DockerNodePsSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNodePsSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerNodePsSettings ResetFilter(this DockerNodePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodePsSettings.Format"/></em></p>
        ///   <p>Pretty-print tasks using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerNodePsSettings SetFormat(this DockerNodePsSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNodePsSettings.Format"/></em></p>
        ///   <p>Pretty-print tasks using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerNodePsSettings ResetFormat(this DockerNodePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region NoResolve
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodePsSettings.NoResolve"/></em></p>
        ///   <p>Do not map IDs to Names.</p>
        /// </summary>
        [Pure]
        public static DockerNodePsSettings SetNoResolve(this DockerNodePsSettings toolSettings, bool? noResolve)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolve = noResolve;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNodePsSettings.NoResolve"/></em></p>
        ///   <p>Do not map IDs to Names.</p>
        /// </summary>
        [Pure]
        public static DockerNodePsSettings ResetNoResolve(this DockerNodePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolve = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerNodePsSettings.NoResolve"/></em></p>
        ///   <p>Do not map IDs to Names.</p>
        /// </summary>
        [Pure]
        public static DockerNodePsSettings EnableNoResolve(this DockerNodePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolve = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerNodePsSettings.NoResolve"/></em></p>
        ///   <p>Do not map IDs to Names.</p>
        /// </summary>
        [Pure]
        public static DockerNodePsSettings DisableNoResolve(this DockerNodePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolve = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerNodePsSettings.NoResolve"/></em></p>
        ///   <p>Do not map IDs to Names.</p>
        /// </summary>
        [Pure]
        public static DockerNodePsSettings ToggleNoResolve(this DockerNodePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoResolve = !toolSettings.NoResolve;
            return toolSettings;
        }
        #endregion
        #region NoTrunc
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodePsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerNodePsSettings SetNoTrunc(this DockerNodePsSettings toolSettings, bool? noTrunc)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = noTrunc;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNodePsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerNodePsSettings ResetNoTrunc(this DockerNodePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerNodePsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerNodePsSettings EnableNoTrunc(this DockerNodePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerNodePsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerNodePsSettings DisableNoTrunc(this DockerNodePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerNodePsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerNodePsSettings ToggleNoTrunc(this DockerNodePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = !toolSettings.NoTrunc;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodePsSettings.Quiet"/></em></p>
        ///   <p>Only display task IDs.</p>
        /// </summary>
        [Pure]
        public static DockerNodePsSettings SetQuiet(this DockerNodePsSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNodePsSettings.Quiet"/></em></p>
        ///   <p>Only display task IDs.</p>
        /// </summary>
        [Pure]
        public static DockerNodePsSettings ResetQuiet(this DockerNodePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerNodePsSettings.Quiet"/></em></p>
        ///   <p>Only display task IDs.</p>
        /// </summary>
        [Pure]
        public static DockerNodePsSettings EnableQuiet(this DockerNodePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerNodePsSettings.Quiet"/></em></p>
        ///   <p>Only display task IDs.</p>
        /// </summary>
        [Pure]
        public static DockerNodePsSettings DisableQuiet(this DockerNodePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerNodePsSettings.Quiet"/></em></p>
        ///   <p>Only display task IDs.</p>
        /// </summary>
        [Pure]
        public static DockerNodePsSettings ToggleQuiet(this DockerNodePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
        #region Nodes
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodePsSettings.Nodes"/> to a new list</em></p>
        ///   <p>[NODE...]</p>
        /// </summary>
        [Pure]
        public static DockerNodePsSettings SetNodes(this DockerNodePsSettings toolSettings, params string[] nodes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodesInternal = nodes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodePsSettings.Nodes"/> to a new list</em></p>
        ///   <p>[NODE...]</p>
        /// </summary>
        [Pure]
        public static DockerNodePsSettings SetNodes(this DockerNodePsSettings toolSettings, IEnumerable<string> nodes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodesInternal = nodes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNodePsSettings.Nodes"/></em></p>
        ///   <p>[NODE...]</p>
        /// </summary>
        [Pure]
        public static DockerNodePsSettings AddNodes(this DockerNodePsSettings toolSettings, params string[] nodes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodesInternal.AddRange(nodes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNodePsSettings.Nodes"/></em></p>
        ///   <p>[NODE...]</p>
        /// </summary>
        [Pure]
        public static DockerNodePsSettings AddNodes(this DockerNodePsSettings toolSettings, IEnumerable<string> nodes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodesInternal.AddRange(nodes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerNodePsSettings.Nodes"/></em></p>
        ///   <p>[NODE...]</p>
        /// </summary>
        [Pure]
        public static DockerNodePsSettings ClearNodes(this DockerNodePsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNodePsSettings.Nodes"/></em></p>
        ///   <p>[NODE...]</p>
        /// </summary>
        [Pure]
        public static DockerNodePsSettings RemoveNodes(this DockerNodePsSettings toolSettings, params string[] nodes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(nodes);
            toolSettings.NodesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNodePsSettings.Nodes"/></em></p>
        ///   <p>[NODE...]</p>
        /// </summary>
        [Pure]
        public static DockerNodePsSettings RemoveNodes(this DockerNodePsSettings toolSettings, IEnumerable<string> nodes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(nodes);
            toolSettings.NodesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContainerTopSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContainerTopSettingsExtensions
    {
        #region Container
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerTopSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerTopSettings SetContainer(this DockerContainerTopSettings toolSettings, string container)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = container;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerTopSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerTopSettings ResetContainer(this DockerContainerTopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = null;
            return toolSettings;
        }
        #endregion
        #region Options
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerTopSettings.Options"/></em></p>
        ///   <p>OPTIONS]</p>
        /// </summary>
        [Pure]
        public static DockerContainerTopSettings SetOptions(this DockerContainerTopSettings toolSettings, string options)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Options = options;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerTopSettings.Options"/></em></p>
        ///   <p>OPTIONS]</p>
        /// </summary>
        [Pure]
        public static DockerContainerTopSettings ResetOptions(this DockerContainerTopSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Options = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContainerRenameSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContainerRenameSettingsExtensions
    {
        #region Container
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRenameSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerRenameSettings SetContainer(this DockerContainerRenameSettings toolSettings, string container)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = container;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRenameSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerRenameSettings ResetContainer(this DockerContainerRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = null;
            return toolSettings;
        }
        #endregion
        #region NewName
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRenameSettings.NewName"/></em></p>
        ///   <p>NEW_NAME</p>
        /// </summary>
        [Pure]
        public static DockerContainerRenameSettings SetNewName(this DockerContainerRenameSettings toolSettings, string newName)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NewName = newName;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRenameSettings.NewName"/></em></p>
        ///   <p>NEW_NAME</p>
        /// </summary>
        [Pure]
        public static DockerContainerRenameSettings ResetNewName(this DockerContainerRenameSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NewName = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerImageHistorySettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerImageHistorySettingsExtensions
    {
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageHistorySettings.Format"/></em></p>
        ///   <p>Pretty-print images using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerImageHistorySettings SetFormat(this DockerImageHistorySettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageHistorySettings.Format"/></em></p>
        ///   <p>Pretty-print images using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerImageHistorySettings ResetFormat(this DockerImageHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Human
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageHistorySettings.Human"/></em></p>
        ///   <p>Print sizes and dates in human readable format.</p>
        /// </summary>
        [Pure]
        public static DockerImageHistorySettings SetHuman(this DockerImageHistorySettings toolSettings, bool? human)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Human = human;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageHistorySettings.Human"/></em></p>
        ///   <p>Print sizes and dates in human readable format.</p>
        /// </summary>
        [Pure]
        public static DockerImageHistorySettings ResetHuman(this DockerImageHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Human = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImageHistorySettings.Human"/></em></p>
        ///   <p>Print sizes and dates in human readable format.</p>
        /// </summary>
        [Pure]
        public static DockerImageHistorySettings EnableHuman(this DockerImageHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Human = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImageHistorySettings.Human"/></em></p>
        ///   <p>Print sizes and dates in human readable format.</p>
        /// </summary>
        [Pure]
        public static DockerImageHistorySettings DisableHuman(this DockerImageHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Human = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImageHistorySettings.Human"/></em></p>
        ///   <p>Print sizes and dates in human readable format.</p>
        /// </summary>
        [Pure]
        public static DockerImageHistorySettings ToggleHuman(this DockerImageHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Human = !toolSettings.Human;
            return toolSettings;
        }
        #endregion
        #region NoTrunc
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageHistorySettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerImageHistorySettings SetNoTrunc(this DockerImageHistorySettings toolSettings, bool? noTrunc)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = noTrunc;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageHistorySettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerImageHistorySettings ResetNoTrunc(this DockerImageHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImageHistorySettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerImageHistorySettings EnableNoTrunc(this DockerImageHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImageHistorySettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerImageHistorySettings DisableNoTrunc(this DockerImageHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImageHistorySettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerImageHistorySettings ToggleNoTrunc(this DockerImageHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = !toolSettings.NoTrunc;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageHistorySettings.Quiet"/></em></p>
        ///   <p>Only show numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerImageHistorySettings SetQuiet(this DockerImageHistorySettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageHistorySettings.Quiet"/></em></p>
        ///   <p>Only show numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerImageHistorySettings ResetQuiet(this DockerImageHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImageHistorySettings.Quiet"/></em></p>
        ///   <p>Only show numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerImageHistorySettings EnableQuiet(this DockerImageHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImageHistorySettings.Quiet"/></em></p>
        ///   <p>Only show numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerImageHistorySettings DisableQuiet(this DockerImageHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImageHistorySettings.Quiet"/></em></p>
        ///   <p>Only show numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerImageHistorySettings ToggleQuiet(this DockerImageHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
        #region Image
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageHistorySettings.Image"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerImageHistorySettings SetImage(this DockerImageHistorySettings toolSettings, string image)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = image;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageHistorySettings.Image"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerImageHistorySettings ResetImage(this DockerImageHistorySettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Image = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerPsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerPsSettingsExtensions
    {
        #region All
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPsSettings.All"/></em></p>
        ///   <p>Show all containers (default shows just running).</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings SetAll(this DockerPsSettings toolSettings, bool? all)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = all;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPsSettings.All"/></em></p>
        ///   <p>Show all containers (default shows just running).</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings ResetAll(this DockerPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerPsSettings.All"/></em></p>
        ///   <p>Show all containers (default shows just running).</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings EnableAll(this DockerPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerPsSettings.All"/></em></p>
        ///   <p>Show all containers (default shows just running).</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings DisableAll(this DockerPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerPsSettings.All"/></em></p>
        ///   <p>Show all containers (default shows just running).</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings ToggleAll(this DockerPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = !toolSettings.All;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPsSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings SetFilter(this DockerPsSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPsSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings ResetFilter(this DockerPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPsSettings.Format"/></em></p>
        ///   <p>Pretty-print containers using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings SetFormat(this DockerPsSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPsSettings.Format"/></em></p>
        ///   <p>Pretty-print containers using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings ResetFormat(this DockerPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Last
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPsSettings.Last"/></em></p>
        ///   <p>Show n last created containers (includes all states).</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings SetLast(this DockerPsSettings toolSettings, int? last)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Last = last;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPsSettings.Last"/></em></p>
        ///   <p>Show n last created containers (includes all states).</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings ResetLast(this DockerPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Last = null;
            return toolSettings;
        }
        #endregion
        #region Latest
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPsSettings.Latest"/></em></p>
        ///   <p>Show the latest created container (includes all states).</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings SetLatest(this DockerPsSettings toolSettings, bool? latest)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Latest = latest;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPsSettings.Latest"/></em></p>
        ///   <p>Show the latest created container (includes all states).</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings ResetLatest(this DockerPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Latest = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerPsSettings.Latest"/></em></p>
        ///   <p>Show the latest created container (includes all states).</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings EnableLatest(this DockerPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Latest = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerPsSettings.Latest"/></em></p>
        ///   <p>Show the latest created container (includes all states).</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings DisableLatest(this DockerPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Latest = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerPsSettings.Latest"/></em></p>
        ///   <p>Show the latest created container (includes all states).</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings ToggleLatest(this DockerPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Latest = !toolSettings.Latest;
            return toolSettings;
        }
        #endregion
        #region NoTrunc
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPsSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings SetNoTrunc(this DockerPsSettings toolSettings, bool? noTrunc)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = noTrunc;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPsSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings ResetNoTrunc(this DockerPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerPsSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings EnableNoTrunc(this DockerPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerPsSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings DisableNoTrunc(this DockerPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerPsSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings ToggleNoTrunc(this DockerPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = !toolSettings.NoTrunc;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPsSettings.Quiet"/></em></p>
        ///   <p>Only display numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings SetQuiet(this DockerPsSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPsSettings.Quiet"/></em></p>
        ///   <p>Only display numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings ResetQuiet(this DockerPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerPsSettings.Quiet"/></em></p>
        ///   <p>Only display numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings EnableQuiet(this DockerPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerPsSettings.Quiet"/></em></p>
        ///   <p>Only display numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings DisableQuiet(this DockerPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerPsSettings.Quiet"/></em></p>
        ///   <p>Only display numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings ToggleQuiet(this DockerPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
        #region Size
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPsSettings.Size"/></em></p>
        ///   <p>Display total file sizes.</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings SetSize(this DockerPsSettings toolSettings, bool? size)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Size = size;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPsSettings.Size"/></em></p>
        ///   <p>Display total file sizes.</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings ResetSize(this DockerPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Size = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerPsSettings.Size"/></em></p>
        ///   <p>Display total file sizes.</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings EnableSize(this DockerPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Size = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerPsSettings.Size"/></em></p>
        ///   <p>Display total file sizes.</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings DisableSize(this DockerPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Size = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerPsSettings.Size"/></em></p>
        ///   <p>Display total file sizes.</p>
        /// </summary>
        [Pure]
        public static DockerPsSettings ToggleSize(this DockerPsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Size = !toolSettings.Size;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerImageTagSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerImageTagSettingsExtensions
    {
        #region SourceImage
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageTagSettings.SourceImage"/></em></p>
        ///   <p>SOURCE_IMAGE[:TAG]</p>
        /// </summary>
        [Pure]
        public static DockerImageTagSettings SetSourceImage(this DockerImageTagSettings toolSettings, string sourceImage)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceImage = sourceImage;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageTagSettings.SourceImage"/></em></p>
        ///   <p>SOURCE_IMAGE[:TAG]</p>
        /// </summary>
        [Pure]
        public static DockerImageTagSettings ResetSourceImage(this DockerImageTagSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SourceImage = null;
            return toolSettings;
        }
        #endregion
        #region TargetImage
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageTagSettings.TargetImage"/></em></p>
        ///   <p>TARGET_IMAGE[:TAG]</p>
        /// </summary>
        [Pure]
        public static DockerImageTagSettings SetTargetImage(this DockerImageTagSettings toolSettings, string targetImage)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetImage = targetImage;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageTagSettings.TargetImage"/></em></p>
        ///   <p>TARGET_IMAGE[:TAG]</p>
        /// </summary>
        [Pure]
        public static DockerImageTagSettings ResetTargetImage(this DockerImageTagSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TargetImage = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerExportSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerExportSettingsExtensions
    {
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="DockerExportSettings.Output"/></em></p>
        ///   <p>Write to a file, instead of STDOUT.</p>
        /// </summary>
        [Pure]
        public static DockerExportSettings SetOutput(this DockerExportSettings toolSettings, string output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerExportSettings.Output"/></em></p>
        ///   <p>Write to a file, instead of STDOUT.</p>
        /// </summary>
        [Pure]
        public static DockerExportSettings ResetOutput(this DockerExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Container
        /// <summary>
        ///   <p><em>Sets <see cref="DockerExportSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerExportSettings SetContainer(this DockerExportSettings toolSettings, string container)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = container;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerExportSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerExportSettings ResetContainer(this DockerExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerNetworkDisconnectSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerNetworkDisconnectSettingsExtensions
    {
        #region Force
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkDisconnectSettings.Force"/></em></p>
        ///   <p>Force the container to disconnect from a network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkDisconnectSettings SetForce(this DockerNetworkDisconnectSettings toolSettings, bool? force)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = force;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNetworkDisconnectSettings.Force"/></em></p>
        ///   <p>Force the container to disconnect from a network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkDisconnectSettings ResetForce(this DockerNetworkDisconnectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerNetworkDisconnectSettings.Force"/></em></p>
        ///   <p>Force the container to disconnect from a network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkDisconnectSettings EnableForce(this DockerNetworkDisconnectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerNetworkDisconnectSettings.Force"/></em></p>
        ///   <p>Force the container to disconnect from a network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkDisconnectSettings DisableForce(this DockerNetworkDisconnectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerNetworkDisconnectSettings.Force"/></em></p>
        ///   <p>Force the container to disconnect from a network.</p>
        /// </summary>
        [Pure]
        public static DockerNetworkDisconnectSettings ToggleForce(this DockerNetworkDisconnectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = !toolSettings.Force;
            return toolSettings;
        }
        #endregion
        #region Network
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkDisconnectSettings.Network"/></em></p>
        ///   <p>NETWORK</p>
        /// </summary>
        [Pure]
        public static DockerNetworkDisconnectSettings SetNetwork(this DockerNetworkDisconnectSettings toolSettings, string network)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Network = network;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNetworkDisconnectSettings.Network"/></em></p>
        ///   <p>NETWORK</p>
        /// </summary>
        [Pure]
        public static DockerNetworkDisconnectSettings ResetNetwork(this DockerNetworkDisconnectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Network = null;
            return toolSettings;
        }
        #endregion
        #region Container
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNetworkDisconnectSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerNetworkDisconnectSettings SetContainer(this DockerNetworkDisconnectSettings toolSettings, string container)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = container;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerNetworkDisconnectSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerNetworkDisconnectSettings ResetContainer(this DockerNetworkDisconnectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerBuilderBuildSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerBuilderBuildSettingsExtensions
    {
        #region AddHost
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.AddHost"/> to a new list</em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetAddHost(this DockerBuilderBuildSettings toolSettings, params string[] addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal = addHost.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.AddHost"/> to a new list</em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetAddHost(this DockerBuilderBuildSettings toolSettings, IEnumerable<string> addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal = addHost.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerBuilderBuildSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings AddAddHost(this DockerBuilderBuildSettings toolSettings, params string[] addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal.AddRange(addHost);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerBuilderBuildSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings AddAddHost(this DockerBuilderBuildSettings toolSettings, IEnumerable<string> addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal.AddRange(addHost);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerBuilderBuildSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ClearAddHost(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerBuilderBuildSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings RemoveAddHost(this DockerBuilderBuildSettings toolSettings, params string[] addHost)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(addHost);
            toolSettings.AddHostInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerBuilderBuildSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings RemoveAddHost(this DockerBuilderBuildSettings toolSettings, IEnumerable<string> addHost)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(addHost);
            toolSettings.AddHostInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region BuildArg
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.BuildArg"/> to a new list</em></p>
        ///   <p>Set build-time variables.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetBuildArg(this DockerBuilderBuildSettings toolSettings, params string[] buildArg)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BuildArgInternal = buildArg.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.BuildArg"/> to a new list</em></p>
        ///   <p>Set build-time variables.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetBuildArg(this DockerBuilderBuildSettings toolSettings, IEnumerable<string> buildArg)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BuildArgInternal = buildArg.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerBuilderBuildSettings.BuildArg"/></em></p>
        ///   <p>Set build-time variables.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings AddBuildArg(this DockerBuilderBuildSettings toolSettings, params string[] buildArg)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BuildArgInternal.AddRange(buildArg);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerBuilderBuildSettings.BuildArg"/></em></p>
        ///   <p>Set build-time variables.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings AddBuildArg(this DockerBuilderBuildSettings toolSettings, IEnumerable<string> buildArg)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BuildArgInternal.AddRange(buildArg);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerBuilderBuildSettings.BuildArg"/></em></p>
        ///   <p>Set build-time variables.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ClearBuildArg(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BuildArgInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerBuilderBuildSettings.BuildArg"/></em></p>
        ///   <p>Set build-time variables.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings RemoveBuildArg(this DockerBuilderBuildSettings toolSettings, params string[] buildArg)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(buildArg);
            toolSettings.BuildArgInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerBuilderBuildSettings.BuildArg"/></em></p>
        ///   <p>Set build-time variables.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings RemoveBuildArg(this DockerBuilderBuildSettings toolSettings, IEnumerable<string> buildArg)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(buildArg);
            toolSettings.BuildArgInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region CacheFrom
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.CacheFrom"/> to a new list</em></p>
        ///   <p>Images to consider as cache sources.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetCacheFrom(this DockerBuilderBuildSettings toolSettings, params string[] cacheFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CacheFromInternal = cacheFrom.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.CacheFrom"/> to a new list</em></p>
        ///   <p>Images to consider as cache sources.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetCacheFrom(this DockerBuilderBuildSettings toolSettings, IEnumerable<string> cacheFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CacheFromInternal = cacheFrom.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerBuilderBuildSettings.CacheFrom"/></em></p>
        ///   <p>Images to consider as cache sources.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings AddCacheFrom(this DockerBuilderBuildSettings toolSettings, params string[] cacheFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CacheFromInternal.AddRange(cacheFrom);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerBuilderBuildSettings.CacheFrom"/></em></p>
        ///   <p>Images to consider as cache sources.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings AddCacheFrom(this DockerBuilderBuildSettings toolSettings, IEnumerable<string> cacheFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CacheFromInternal.AddRange(cacheFrom);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerBuilderBuildSettings.CacheFrom"/></em></p>
        ///   <p>Images to consider as cache sources.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ClearCacheFrom(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CacheFromInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerBuilderBuildSettings.CacheFrom"/></em></p>
        ///   <p>Images to consider as cache sources.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings RemoveCacheFrom(this DockerBuilderBuildSettings toolSettings, params string[] cacheFrom)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(cacheFrom);
            toolSettings.CacheFromInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerBuilderBuildSettings.CacheFrom"/></em></p>
        ///   <p>Images to consider as cache sources.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings RemoveCacheFrom(this DockerBuilderBuildSettings toolSettings, IEnumerable<string> cacheFrom)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(cacheFrom);
            toolSettings.CacheFromInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region CgroupParent
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.CgroupParent"/></em></p>
        ///   <p>Optional parent cgroup for the container.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetCgroupParent(this DockerBuilderBuildSettings toolSettings, string cgroupParent)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CgroupParent = cgroupParent;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.CgroupParent"/></em></p>
        ///   <p>Optional parent cgroup for the container.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetCgroupParent(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CgroupParent = null;
            return toolSettings;
        }
        #endregion
        #region Compress
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.Compress"/></em></p>
        ///   <p>Compress the build context using gzip.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetCompress(this DockerBuilderBuildSettings toolSettings, bool? compress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Compress = compress;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.Compress"/></em></p>
        ///   <p>Compress the build context using gzip.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetCompress(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Compress = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerBuilderBuildSettings.Compress"/></em></p>
        ///   <p>Compress the build context using gzip.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings EnableCompress(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Compress = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerBuilderBuildSettings.Compress"/></em></p>
        ///   <p>Compress the build context using gzip.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings DisableCompress(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Compress = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerBuilderBuildSettings.Compress"/></em></p>
        ///   <p>Compress the build context using gzip.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ToggleCompress(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Compress = !toolSettings.Compress;
            return toolSettings;
        }
        #endregion
        #region CpuPeriod
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.CpuPeriod"/></em></p>
        ///   <p>Limit the CPU CFS (Completely Fair Scheduler) period.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetCpuPeriod(this DockerBuilderBuildSettings toolSettings, long? cpuPeriod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuPeriod = cpuPeriod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.CpuPeriod"/></em></p>
        ///   <p>Limit the CPU CFS (Completely Fair Scheduler) period.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetCpuPeriod(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuPeriod = null;
            return toolSettings;
        }
        #endregion
        #region CpuQuota
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.CpuQuota"/></em></p>
        ///   <p>Limit the CPU CFS (Completely Fair Scheduler) quota.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetCpuQuota(this DockerBuilderBuildSettings toolSettings, long? cpuQuota)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuQuota = cpuQuota;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.CpuQuota"/></em></p>
        ///   <p>Limit the CPU CFS (Completely Fair Scheduler) quota.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetCpuQuota(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuQuota = null;
            return toolSettings;
        }
        #endregion
        #region CpuShares
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.CpuShares"/></em></p>
        ///   <p>CPU shares (relative weight).</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetCpuShares(this DockerBuilderBuildSettings toolSettings, long? cpuShares)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuShares = cpuShares;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.CpuShares"/></em></p>
        ///   <p>CPU shares (relative weight).</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetCpuShares(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuShares = null;
            return toolSettings;
        }
        #endregion
        #region CpusetCpus
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.CpusetCpus"/></em></p>
        ///   <p>CPUs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetCpusetCpus(this DockerBuilderBuildSettings toolSettings, string cpusetCpus)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetCpus = cpusetCpus;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.CpusetCpus"/></em></p>
        ///   <p>CPUs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetCpusetCpus(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetCpus = null;
            return toolSettings;
        }
        #endregion
        #region CpusetMems
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.CpusetMems"/></em></p>
        ///   <p>MEMs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetCpusetMems(this DockerBuilderBuildSettings toolSettings, string cpusetMems)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetMems = cpusetMems;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.CpusetMems"/></em></p>
        ///   <p>MEMs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetCpusetMems(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetMems = null;
            return toolSettings;
        }
        #endregion
        #region DisableContentTrust
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetDisableContentTrust(this DockerBuilderBuildSettings toolSettings, bool? disableContentTrust)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = disableContentTrust;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetDisableContentTrust(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerBuilderBuildSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings EnableDisableContentTrust(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerBuilderBuildSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings DisableDisableContentTrust(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerBuilderBuildSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ToggleDisableContentTrust(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = !toolSettings.DisableContentTrust;
            return toolSettings;
        }
        #endregion
        #region File
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.File"/></em></p>
        ///   <p>Name of the Dockerfile (Default is 'PATH/Dockerfile').</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetFile(this DockerBuilderBuildSettings toolSettings, string file)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = file;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.File"/></em></p>
        ///   <p>Name of the Dockerfile (Default is 'PATH/Dockerfile').</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetFile(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = null;
            return toolSettings;
        }
        #endregion
        #region ForceRm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.ForceRm"/></em></p>
        ///   <p>Always remove intermediate containers.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetForceRm(this DockerBuilderBuildSettings toolSettings, bool? forceRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceRm = forceRm;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.ForceRm"/></em></p>
        ///   <p>Always remove intermediate containers.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetForceRm(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceRm = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerBuilderBuildSettings.ForceRm"/></em></p>
        ///   <p>Always remove intermediate containers.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings EnableForceRm(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceRm = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerBuilderBuildSettings.ForceRm"/></em></p>
        ///   <p>Always remove intermediate containers.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings DisableForceRm(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceRm = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerBuilderBuildSettings.ForceRm"/></em></p>
        ///   <p>Always remove intermediate containers.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ToggleForceRm(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceRm = !toolSettings.ForceRm;
            return toolSettings;
        }
        #endregion
        #region Iidfile
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.Iidfile"/></em></p>
        ///   <p>Write the image ID to the file.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetIidfile(this DockerBuilderBuildSettings toolSettings, string iidfile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Iidfile = iidfile;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.Iidfile"/></em></p>
        ///   <p>Write the image ID to the file.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetIidfile(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Iidfile = null;
            return toolSettings;
        }
        #endregion
        #region Isolation
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.Isolation"/></em></p>
        ///   <p>Container isolation technology.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetIsolation(this DockerBuilderBuildSettings toolSettings, string isolation)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Isolation = isolation;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.Isolation"/></em></p>
        ///   <p>Container isolation technology.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetIsolation(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Isolation = null;
            return toolSettings;
        }
        #endregion
        #region Label
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.Label"/> to a new list</em></p>
        ///   <p>Set metadata for an image.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetLabel(this DockerBuilderBuildSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal = label.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.Label"/> to a new list</em></p>
        ///   <p>Set metadata for an image.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetLabel(this DockerBuilderBuildSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal = label.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerBuilderBuildSettings.Label"/></em></p>
        ///   <p>Set metadata for an image.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings AddLabel(this DockerBuilderBuildSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.AddRange(label);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerBuilderBuildSettings.Label"/></em></p>
        ///   <p>Set metadata for an image.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings AddLabel(this DockerBuilderBuildSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.AddRange(label);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerBuilderBuildSettings.Label"/></em></p>
        ///   <p>Set metadata for an image.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ClearLabel(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerBuilderBuildSettings.Label"/></em></p>
        ///   <p>Set metadata for an image.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings RemoveLabel(this DockerBuilderBuildSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(label);
            toolSettings.LabelInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerBuilderBuildSettings.Label"/></em></p>
        ///   <p>Set metadata for an image.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings RemoveLabel(this DockerBuilderBuildSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(label);
            toolSettings.LabelInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Memory
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.Memory"/></em></p>
        ///   <p>Memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetMemory(this DockerBuilderBuildSettings toolSettings, long? memory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Memory = memory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.Memory"/></em></p>
        ///   <p>Memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetMemory(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Memory = null;
            return toolSettings;
        }
        #endregion
        #region MemorySwap
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.MemorySwap"/></em></p>
        ///   <p>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetMemorySwap(this DockerBuilderBuildSettings toolSettings, long? memorySwap)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemorySwap = memorySwap;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.MemorySwap"/></em></p>
        ///   <p>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetMemorySwap(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemorySwap = null;
            return toolSettings;
        }
        #endregion
        #region Network
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.Network"/></em></p>
        ///   <p>Set the networking mode for the RUN instructions during build.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetNetwork(this DockerBuilderBuildSettings toolSettings, string network)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Network = network;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.Network"/></em></p>
        ///   <p>Set the networking mode for the RUN instructions during build.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetNetwork(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Network = null;
            return toolSettings;
        }
        #endregion
        #region NoCache
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.NoCache"/></em></p>
        ///   <p>Do not use cache when building the image.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetNoCache(this DockerBuilderBuildSettings toolSettings, bool? noCache)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoCache = noCache;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.NoCache"/></em></p>
        ///   <p>Do not use cache when building the image.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetNoCache(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoCache = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerBuilderBuildSettings.NoCache"/></em></p>
        ///   <p>Do not use cache when building the image.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings EnableNoCache(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoCache = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerBuilderBuildSettings.NoCache"/></em></p>
        ///   <p>Do not use cache when building the image.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings DisableNoCache(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoCache = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerBuilderBuildSettings.NoCache"/></em></p>
        ///   <p>Do not use cache when building the image.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ToggleNoCache(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoCache = !toolSettings.NoCache;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.Output"/></em></p>
        ///   <p>Output destination (format: type=local,dest=path).</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetOutput(this DockerBuilderBuildSettings toolSettings, string output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.Output"/></em></p>
        ///   <p>Output destination (format: type=local,dest=path).</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetOutput(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Platform
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.Platform"/></em></p>
        ///   <p>Set platform if server is multi-platform capable.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetPlatform(this DockerBuilderBuildSettings toolSettings, string platform)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = platform;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.Platform"/></em></p>
        ///   <p>Set platform if server is multi-platform capable.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetPlatform(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = null;
            return toolSettings;
        }
        #endregion
        #region Progress
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.Progress"/></em></p>
        ///   <p>Set type of progress output (auto, plain, tty). Use plain to show container output.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetProgress(this DockerBuilderBuildSettings toolSettings, string progress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Progress = progress;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.Progress"/></em></p>
        ///   <p>Set type of progress output (auto, plain, tty). Use plain to show container output.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetProgress(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Progress = null;
            return toolSettings;
        }
        #endregion
        #region Pull
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.Pull"/></em></p>
        ///   <p>Always attempt to pull a newer version of the image.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetPull(this DockerBuilderBuildSettings toolSettings, bool? pull)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pull = pull;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.Pull"/></em></p>
        ///   <p>Always attempt to pull a newer version of the image.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetPull(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pull = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerBuilderBuildSettings.Pull"/></em></p>
        ///   <p>Always attempt to pull a newer version of the image.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings EnablePull(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pull = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerBuilderBuildSettings.Pull"/></em></p>
        ///   <p>Always attempt to pull a newer version of the image.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings DisablePull(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pull = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerBuilderBuildSettings.Pull"/></em></p>
        ///   <p>Always attempt to pull a newer version of the image.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings TogglePull(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pull = !toolSettings.Pull;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.Quiet"/></em></p>
        ///   <p>Suppress the build output and print image ID on success.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetQuiet(this DockerBuilderBuildSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.Quiet"/></em></p>
        ///   <p>Suppress the build output and print image ID on success.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetQuiet(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerBuilderBuildSettings.Quiet"/></em></p>
        ///   <p>Suppress the build output and print image ID on success.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings EnableQuiet(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerBuilderBuildSettings.Quiet"/></em></p>
        ///   <p>Suppress the build output and print image ID on success.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings DisableQuiet(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerBuilderBuildSettings.Quiet"/></em></p>
        ///   <p>Suppress the build output and print image ID on success.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ToggleQuiet(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
        #region Rm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.Rm"/></em></p>
        ///   <p>Remove intermediate containers after a successful build.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetRm(this DockerBuilderBuildSettings toolSettings, bool? rm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = rm;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.Rm"/></em></p>
        ///   <p>Remove intermediate containers after a successful build.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetRm(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerBuilderBuildSettings.Rm"/></em></p>
        ///   <p>Remove intermediate containers after a successful build.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings EnableRm(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerBuilderBuildSettings.Rm"/></em></p>
        ///   <p>Remove intermediate containers after a successful build.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings DisableRm(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerBuilderBuildSettings.Rm"/></em></p>
        ///   <p>Remove intermediate containers after a successful build.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ToggleRm(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = !toolSettings.Rm;
            return toolSettings;
        }
        #endregion
        #region Secret
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.Secret"/></em></p>
        ///   <p>Secret file to expose to the build (only if BuildKit enabled): id=mysecret,src=/local/secret.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetSecret(this DockerBuilderBuildSettings toolSettings, string secret)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Secret = secret;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.Secret"/></em></p>
        ///   <p>Secret file to expose to the build (only if BuildKit enabled): id=mysecret,src=/local/secret.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetSecret(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Secret = null;
            return toolSettings;
        }
        #endregion
        #region SecurityOpt
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.SecurityOpt"/> to a new list</em></p>
        ///   <p>Security options.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetSecurityOpt(this DockerBuilderBuildSettings toolSettings, params string[] securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal = securityOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.SecurityOpt"/> to a new list</em></p>
        ///   <p>Security options.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetSecurityOpt(this DockerBuilderBuildSettings toolSettings, IEnumerable<string> securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal = securityOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerBuilderBuildSettings.SecurityOpt"/></em></p>
        ///   <p>Security options.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings AddSecurityOpt(this DockerBuilderBuildSettings toolSettings, params string[] securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal.AddRange(securityOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerBuilderBuildSettings.SecurityOpt"/></em></p>
        ///   <p>Security options.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings AddSecurityOpt(this DockerBuilderBuildSettings toolSettings, IEnumerable<string> securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal.AddRange(securityOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerBuilderBuildSettings.SecurityOpt"/></em></p>
        ///   <p>Security options.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ClearSecurityOpt(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerBuilderBuildSettings.SecurityOpt"/></em></p>
        ///   <p>Security options.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings RemoveSecurityOpt(this DockerBuilderBuildSettings toolSettings, params string[] securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(securityOpt);
            toolSettings.SecurityOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerBuilderBuildSettings.SecurityOpt"/></em></p>
        ///   <p>Security options.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings RemoveSecurityOpt(this DockerBuilderBuildSettings toolSettings, IEnumerable<string> securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(securityOpt);
            toolSettings.SecurityOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ShmSize
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.ShmSize"/></em></p>
        ///   <p>Size of /dev/shm.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetShmSize(this DockerBuilderBuildSettings toolSettings, long? shmSize)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShmSize = shmSize;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.ShmSize"/></em></p>
        ///   <p>Size of /dev/shm.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetShmSize(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShmSize = null;
            return toolSettings;
        }
        #endregion
        #region Squash
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.Squash"/></em></p>
        ///   <p>Squash newly built layers into a single new layer.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetSquash(this DockerBuilderBuildSettings toolSettings, bool? squash)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Squash = squash;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.Squash"/></em></p>
        ///   <p>Squash newly built layers into a single new layer.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetSquash(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Squash = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerBuilderBuildSettings.Squash"/></em></p>
        ///   <p>Squash newly built layers into a single new layer.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings EnableSquash(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Squash = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerBuilderBuildSettings.Squash"/></em></p>
        ///   <p>Squash newly built layers into a single new layer.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings DisableSquash(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Squash = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerBuilderBuildSettings.Squash"/></em></p>
        ///   <p>Squash newly built layers into a single new layer.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ToggleSquash(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Squash = !toolSettings.Squash;
            return toolSettings;
        }
        #endregion
        #region Ssh
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.Ssh"/></em></p>
        ///   <p>SSH agent socket or keys to expose to the build (only if BuildKit enabled) (format: default|&lt;id&gt;[=&lt;socket&gt;|&lt;key&gt;[,&lt;key&gt;]]).</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetSsh(this DockerBuilderBuildSettings toolSettings, string ssh)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ssh = ssh;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.Ssh"/></em></p>
        ///   <p>SSH agent socket or keys to expose to the build (only if BuildKit enabled) (format: default|&lt;id&gt;[=&lt;socket&gt;|&lt;key&gt;[,&lt;key&gt;]]).</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetSsh(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ssh = null;
            return toolSettings;
        }
        #endregion
        #region Stream
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.Stream"/></em></p>
        ///   <p>Stream attaches to server to negotiate build context.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetStream(this DockerBuilderBuildSettings toolSettings, bool? stream)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stream = stream;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.Stream"/></em></p>
        ///   <p>Stream attaches to server to negotiate build context.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetStream(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stream = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerBuilderBuildSettings.Stream"/></em></p>
        ///   <p>Stream attaches to server to negotiate build context.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings EnableStream(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stream = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerBuilderBuildSettings.Stream"/></em></p>
        ///   <p>Stream attaches to server to negotiate build context.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings DisableStream(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stream = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerBuilderBuildSettings.Stream"/></em></p>
        ///   <p>Stream attaches to server to negotiate build context.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ToggleStream(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stream = !toolSettings.Stream;
            return toolSettings;
        }
        #endregion
        #region Tag
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.Tag"/> to a new list</em></p>
        ///   <p>Name and optionally a tag in the 'name:tag' format.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetTag(this DockerBuilderBuildSettings toolSettings, params string[] tag)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TagInternal = tag.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.Tag"/> to a new list</em></p>
        ///   <p>Name and optionally a tag in the 'name:tag' format.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetTag(this DockerBuilderBuildSettings toolSettings, IEnumerable<string> tag)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TagInternal = tag.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerBuilderBuildSettings.Tag"/></em></p>
        ///   <p>Name and optionally a tag in the 'name:tag' format.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings AddTag(this DockerBuilderBuildSettings toolSettings, params string[] tag)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TagInternal.AddRange(tag);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerBuilderBuildSettings.Tag"/></em></p>
        ///   <p>Name and optionally a tag in the 'name:tag' format.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings AddTag(this DockerBuilderBuildSettings toolSettings, IEnumerable<string> tag)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TagInternal.AddRange(tag);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerBuilderBuildSettings.Tag"/></em></p>
        ///   <p>Name and optionally a tag in the 'name:tag' format.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ClearTag(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TagInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerBuilderBuildSettings.Tag"/></em></p>
        ///   <p>Name and optionally a tag in the 'name:tag' format.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings RemoveTag(this DockerBuilderBuildSettings toolSettings, params string[] tag)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(tag);
            toolSettings.TagInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerBuilderBuildSettings.Tag"/></em></p>
        ///   <p>Name and optionally a tag in the 'name:tag' format.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings RemoveTag(this DockerBuilderBuildSettings toolSettings, IEnumerable<string> tag)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(tag);
            toolSettings.TagInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Target
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.Target"/></em></p>
        ///   <p>Set the target build stage to build.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetTarget(this DockerBuilderBuildSettings toolSettings, string target)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Target = target;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.Target"/></em></p>
        ///   <p>Set the target build stage to build.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetTarget(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Target = null;
            return toolSettings;
        }
        #endregion
        #region Ulimit
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.Ulimit"/></em></p>
        ///   <p>Ulimit options.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetUlimit(this DockerBuilderBuildSettings toolSettings, string ulimit)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ulimit = ulimit;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.Ulimit"/></em></p>
        ///   <p>Ulimit options.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetUlimit(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ulimit = null;
            return toolSettings;
        }
        #endregion
        #region Path
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuilderBuildSettings.Path"/></em></p>
        ///   <p>Path or url where the build context is located.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings SetPath(this DockerBuilderBuildSettings toolSettings, string path)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = path;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuilderBuildSettings.Path"/></em></p>
        ///   <p>Path or url where the build context is located.</p>
        /// </summary>
        [Pure]
        public static DockerBuilderBuildSettings ResetPath(this DockerBuilderBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerStatsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerStatsSettingsExtensions
    {
        #region All
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStatsSettings.All"/></em></p>
        ///   <p>Show all containers (default shows just running).</p>
        /// </summary>
        [Pure]
        public static DockerStatsSettings SetAll(this DockerStatsSettings toolSettings, bool? all)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = all;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStatsSettings.All"/></em></p>
        ///   <p>Show all containers (default shows just running).</p>
        /// </summary>
        [Pure]
        public static DockerStatsSettings ResetAll(this DockerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerStatsSettings.All"/></em></p>
        ///   <p>Show all containers (default shows just running).</p>
        /// </summary>
        [Pure]
        public static DockerStatsSettings EnableAll(this DockerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerStatsSettings.All"/></em></p>
        ///   <p>Show all containers (default shows just running).</p>
        /// </summary>
        [Pure]
        public static DockerStatsSettings DisableAll(this DockerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerStatsSettings.All"/></em></p>
        ///   <p>Show all containers (default shows just running).</p>
        /// </summary>
        [Pure]
        public static DockerStatsSettings ToggleAll(this DockerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = !toolSettings.All;
            return toolSettings;
        }
        #endregion
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStatsSettings.Format"/></em></p>
        ///   <p>Pretty-print images using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerStatsSettings SetFormat(this DockerStatsSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStatsSettings.Format"/></em></p>
        ///   <p>Pretty-print images using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerStatsSettings ResetFormat(this DockerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region NoStream
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStatsSettings.NoStream"/></em></p>
        ///   <p>Disable streaming stats and only pull the first result.</p>
        /// </summary>
        [Pure]
        public static DockerStatsSettings SetNoStream(this DockerStatsSettings toolSettings, bool? noStream)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoStream = noStream;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStatsSettings.NoStream"/></em></p>
        ///   <p>Disable streaming stats and only pull the first result.</p>
        /// </summary>
        [Pure]
        public static DockerStatsSettings ResetNoStream(this DockerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoStream = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerStatsSettings.NoStream"/></em></p>
        ///   <p>Disable streaming stats and only pull the first result.</p>
        /// </summary>
        [Pure]
        public static DockerStatsSettings EnableNoStream(this DockerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoStream = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerStatsSettings.NoStream"/></em></p>
        ///   <p>Disable streaming stats and only pull the first result.</p>
        /// </summary>
        [Pure]
        public static DockerStatsSettings DisableNoStream(this DockerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoStream = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerStatsSettings.NoStream"/></em></p>
        ///   <p>Disable streaming stats and only pull the first result.</p>
        /// </summary>
        [Pure]
        public static DockerStatsSettings ToggleNoStream(this DockerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoStream = !toolSettings.NoStream;
            return toolSettings;
        }
        #endregion
        #region NoTrunc
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStatsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerStatsSettings SetNoTrunc(this DockerStatsSettings toolSettings, bool? noTrunc)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = noTrunc;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStatsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerStatsSettings ResetNoTrunc(this DockerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerStatsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerStatsSettings EnableNoTrunc(this DockerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerStatsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerStatsSettings DisableNoTrunc(this DockerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerStatsSettings.NoTrunc"/></em></p>
        ///   <p>Do not truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerStatsSettings ToggleNoTrunc(this DockerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = !toolSettings.NoTrunc;
            return toolSettings;
        }
        #endregion
        #region Containers
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStatsSettings.Containers"/> to a new list</em></p>
        ///   <p>[CONTAINER...]</p>
        /// </summary>
        [Pure]
        public static DockerStatsSettings SetContainers(this DockerStatsSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStatsSettings.Containers"/> to a new list</em></p>
        ///   <p>[CONTAINER...]</p>
        /// </summary>
        [Pure]
        public static DockerStatsSettings SetContainers(this DockerStatsSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerStatsSettings.Containers"/></em></p>
        ///   <p>[CONTAINER...]</p>
        /// </summary>
        [Pure]
        public static DockerStatsSettings AddContainers(this DockerStatsSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerStatsSettings.Containers"/></em></p>
        ///   <p>[CONTAINER...]</p>
        /// </summary>
        [Pure]
        public static DockerStatsSettings AddContainers(this DockerStatsSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerStatsSettings.Containers"/></em></p>
        ///   <p>[CONTAINER...]</p>
        /// </summary>
        [Pure]
        public static DockerStatsSettings ClearContainers(this DockerStatsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerStatsSettings.Containers"/></em></p>
        ///   <p>[CONTAINER...]</p>
        /// </summary>
        [Pure]
        public static DockerStatsSettings RemoveContainers(this DockerStatsSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerStatsSettings.Containers"/></em></p>
        ///   <p>[CONTAINER...]</p>
        /// </summary>
        [Pure]
        public static DockerStatsSettings RemoveContainers(this DockerStatsSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerSearchSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerSearchSettingsExtensions
    {
        #region Automated
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSearchSettings.Automated"/></em></p>
        ///   <p>Only show automated builds.</p>
        /// </summary>
        [Pure]
        public static DockerSearchSettings SetAutomated(this DockerSearchSettings toolSettings, bool? automated)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Automated = automated;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSearchSettings.Automated"/></em></p>
        ///   <p>Only show automated builds.</p>
        /// </summary>
        [Pure]
        public static DockerSearchSettings ResetAutomated(this DockerSearchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Automated = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerSearchSettings.Automated"/></em></p>
        ///   <p>Only show automated builds.</p>
        /// </summary>
        [Pure]
        public static DockerSearchSettings EnableAutomated(this DockerSearchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Automated = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerSearchSettings.Automated"/></em></p>
        ///   <p>Only show automated builds.</p>
        /// </summary>
        [Pure]
        public static DockerSearchSettings DisableAutomated(this DockerSearchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Automated = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerSearchSettings.Automated"/></em></p>
        ///   <p>Only show automated builds.</p>
        /// </summary>
        [Pure]
        public static DockerSearchSettings ToggleAutomated(this DockerSearchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Automated = !toolSettings.Automated;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSearchSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerSearchSettings SetFilter(this DockerSearchSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSearchSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerSearchSettings ResetFilter(this DockerSearchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSearchSettings.Format"/></em></p>
        ///   <p>Pretty-print search using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerSearchSettings SetFormat(this DockerSearchSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSearchSettings.Format"/></em></p>
        ///   <p>Pretty-print search using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerSearchSettings ResetFormat(this DockerSearchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Limit
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSearchSettings.Limit"/></em></p>
        ///   <p>Max number of search results.</p>
        /// </summary>
        [Pure]
        public static DockerSearchSettings SetLimit(this DockerSearchSettings toolSettings, int? limit)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Limit = limit;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSearchSettings.Limit"/></em></p>
        ///   <p>Max number of search results.</p>
        /// </summary>
        [Pure]
        public static DockerSearchSettings ResetLimit(this DockerSearchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Limit = null;
            return toolSettings;
        }
        #endregion
        #region NoTrunc
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSearchSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerSearchSettings SetNoTrunc(this DockerSearchSettings toolSettings, bool? noTrunc)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = noTrunc;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSearchSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerSearchSettings ResetNoTrunc(this DockerSearchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerSearchSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerSearchSettings EnableNoTrunc(this DockerSearchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerSearchSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerSearchSettings DisableNoTrunc(this DockerSearchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerSearchSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerSearchSettings ToggleNoTrunc(this DockerSearchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = !toolSettings.NoTrunc;
            return toolSettings;
        }
        #endregion
        #region Stars
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSearchSettings.Stars"/></em></p>
        ///   <p>Only displays with at least x stars.</p>
        /// </summary>
        [Pure]
        public static DockerSearchSettings SetStars(this DockerSearchSettings toolSettings, int? stars)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stars = stars;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSearchSettings.Stars"/></em></p>
        ///   <p>Only displays with at least x stars.</p>
        /// </summary>
        [Pure]
        public static DockerSearchSettings ResetStars(this DockerSearchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stars = null;
            return toolSettings;
        }
        #endregion
        #region Term
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSearchSettings.Term"/></em></p>
        ///   <p>TERM</p>
        /// </summary>
        [Pure]
        public static DockerSearchSettings SetTerm(this DockerSearchSettings toolSettings, string term)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Term = term;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSearchSettings.Term"/></em></p>
        ///   <p>TERM</p>
        /// </summary>
        [Pure]
        public static DockerSearchSettings ResetTerm(this DockerSearchSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Term = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerManifestSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerManifestSettingsExtensions
    {
        #region Command
        /// <summary>
        ///   <p><em>Sets <see cref="DockerManifestSettings.Command"/></em></p>
        ///   <p>COMMAND</p>
        /// </summary>
        [Pure]
        public static DockerManifestSettings SetCommand(this DockerManifestSettings toolSettings, string command)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Command = command;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerManifestSettings.Command"/></em></p>
        ///   <p>COMMAND</p>
        /// </summary>
        [Pure]
        public static DockerManifestSettings ResetCommand(this DockerManifestSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Command = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerPluginPushSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerPluginPushSettingsExtensions
    {
        #region DisableContentTrust
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginPushSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image signing.</p>
        /// </summary>
        [Pure]
        public static DockerPluginPushSettings SetDisableContentTrust(this DockerPluginPushSettings toolSettings, bool? disableContentTrust)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = disableContentTrust;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPluginPushSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image signing.</p>
        /// </summary>
        [Pure]
        public static DockerPluginPushSettings ResetDisableContentTrust(this DockerPluginPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerPluginPushSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image signing.</p>
        /// </summary>
        [Pure]
        public static DockerPluginPushSettings EnableDisableContentTrust(this DockerPluginPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerPluginPushSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image signing.</p>
        /// </summary>
        [Pure]
        public static DockerPluginPushSettings DisableDisableContentTrust(this DockerPluginPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerPluginPushSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image signing.</p>
        /// </summary>
        [Pure]
        public static DockerPluginPushSettings ToggleDisableContentTrust(this DockerPluginPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = !toolSettings.DisableContentTrust;
            return toolSettings;
        }
        #endregion
        #region Plugin
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginPushSettings.Plugin"/></em></p>
        ///   <p>PLUGIN[:TAG]</p>
        /// </summary>
        [Pure]
        public static DockerPluginPushSettings SetPlugin(this DockerPluginPushSettings toolSettings, string plugin)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Plugin = plugin;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPluginPushSettings.Plugin"/></em></p>
        ///   <p>PLUGIN[:TAG]</p>
        /// </summary>
        [Pure]
        public static DockerPluginPushSettings ResetPlugin(this DockerPluginPushSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Plugin = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerImageLoadSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerImageLoadSettingsExtensions
    {
        #region Input
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageLoadSettings.Input"/></em></p>
        ///   <p>Read from tar archive file, instead of STDIN.</p>
        /// </summary>
        [Pure]
        public static DockerImageLoadSettings SetInput(this DockerImageLoadSettings toolSettings, string input)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Input = input;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageLoadSettings.Input"/></em></p>
        ///   <p>Read from tar archive file, instead of STDIN.</p>
        /// </summary>
        [Pure]
        public static DockerImageLoadSettings ResetInput(this DockerImageLoadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Input = null;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageLoadSettings.Quiet"/></em></p>
        ///   <p>Suppress the load output.</p>
        /// </summary>
        [Pure]
        public static DockerImageLoadSettings SetQuiet(this DockerImageLoadSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageLoadSettings.Quiet"/></em></p>
        ///   <p>Suppress the load output.</p>
        /// </summary>
        [Pure]
        public static DockerImageLoadSettings ResetQuiet(this DockerImageLoadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImageLoadSettings.Quiet"/></em></p>
        ///   <p>Suppress the load output.</p>
        /// </summary>
        [Pure]
        public static DockerImageLoadSettings EnableQuiet(this DockerImageLoadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImageLoadSettings.Quiet"/></em></p>
        ///   <p>Suppress the load output.</p>
        /// </summary>
        [Pure]
        public static DockerImageLoadSettings DisableQuiet(this DockerImageLoadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImageLoadSettings.Quiet"/></em></p>
        ///   <p>Suppress the load output.</p>
        /// </summary>
        [Pure]
        public static DockerImageLoadSettings ToggleQuiet(this DockerImageLoadSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerSwarmSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerSwarmSettingsExtensions
    {
    }
    #endregion
    #region DockerContainerRmSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContainerRmSettingsExtensions
    {
        #region Force
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRmSettings.Force"/></em></p>
        ///   <p>Force the removal of a running container (uses SIGKILL).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRmSettings SetForce(this DockerContainerRmSettings toolSettings, bool? force)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = force;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRmSettings.Force"/></em></p>
        ///   <p>Force the removal of a running container (uses SIGKILL).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRmSettings ResetForce(this DockerContainerRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerRmSettings.Force"/></em></p>
        ///   <p>Force the removal of a running container (uses SIGKILL).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRmSettings EnableForce(this DockerContainerRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerRmSettings.Force"/></em></p>
        ///   <p>Force the removal of a running container (uses SIGKILL).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRmSettings DisableForce(this DockerContainerRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerRmSettings.Force"/></em></p>
        ///   <p>Force the removal of a running container (uses SIGKILL).</p>
        /// </summary>
        [Pure]
        public static DockerContainerRmSettings ToggleForce(this DockerContainerRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = !toolSettings.Force;
            return toolSettings;
        }
        #endregion
        #region Link
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRmSettings.Link"/></em></p>
        ///   <p>Remove the specified link.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRmSettings SetLink(this DockerContainerRmSettings toolSettings, bool? link)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Link = link;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRmSettings.Link"/></em></p>
        ///   <p>Remove the specified link.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRmSettings ResetLink(this DockerContainerRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Link = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerRmSettings.Link"/></em></p>
        ///   <p>Remove the specified link.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRmSettings EnableLink(this DockerContainerRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Link = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerRmSettings.Link"/></em></p>
        ///   <p>Remove the specified link.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRmSettings DisableLink(this DockerContainerRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Link = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerRmSettings.Link"/></em></p>
        ///   <p>Remove the specified link.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRmSettings ToggleLink(this DockerContainerRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Link = !toolSettings.Link;
            return toolSettings;
        }
        #endregion
        #region Volumes
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRmSettings.Volumes"/></em></p>
        ///   <p>Remove the volumes associated with the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRmSettings SetVolumes(this DockerContainerRmSettings toolSettings, bool? volumes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Volumes = volumes;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerRmSettings.Volumes"/></em></p>
        ///   <p>Remove the volumes associated with the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRmSettings ResetVolumes(this DockerContainerRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Volumes = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerRmSettings.Volumes"/></em></p>
        ///   <p>Remove the volumes associated with the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRmSettings EnableVolumes(this DockerContainerRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Volumes = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerRmSettings.Volumes"/></em></p>
        ///   <p>Remove the volumes associated with the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRmSettings DisableVolumes(this DockerContainerRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Volumes = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerRmSettings.Volumes"/></em></p>
        ///   <p>Remove the volumes associated with the container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerRmSettings ToggleVolumes(this DockerContainerRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Volumes = !toolSettings.Volumes;
            return toolSettings;
        }
        #endregion
        #region Containers
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRmSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerRmSettings SetContainers(this DockerContainerRmSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerRmSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerRmSettings SetContainers(this DockerContainerRmSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRmSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerRmSettings AddContainers(this DockerContainerRmSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerRmSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerRmSettings AddContainers(this DockerContainerRmSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerRmSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerRmSettings ClearContainers(this DockerContainerRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRmSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerRmSettings RemoveContainers(this DockerContainerRmSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerRmSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerRmSettings RemoveContainers(this DockerContainerRmSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContainerUpdateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContainerUpdateSettingsExtensions
    {
        #region BlkioWeight
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerUpdateSettings.BlkioWeight"/></em></p>
        ///   <p>Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0).</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings SetBlkioWeight(this DockerContainerUpdateSettings toolSettings, int? blkioWeight)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeight = blkioWeight;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerUpdateSettings.BlkioWeight"/></em></p>
        ///   <p>Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0).</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings ResetBlkioWeight(this DockerContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BlkioWeight = null;
            return toolSettings;
        }
        #endregion
        #region CpuPeriod
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerUpdateSettings.CpuPeriod"/></em></p>
        ///   <p>Limit CPU CFS (Completely Fair Scheduler) period.</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings SetCpuPeriod(this DockerContainerUpdateSettings toolSettings, long? cpuPeriod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuPeriod = cpuPeriod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerUpdateSettings.CpuPeriod"/></em></p>
        ///   <p>Limit CPU CFS (Completely Fair Scheduler) period.</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings ResetCpuPeriod(this DockerContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuPeriod = null;
            return toolSettings;
        }
        #endregion
        #region CpuQuota
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerUpdateSettings.CpuQuota"/></em></p>
        ///   <p>Limit CPU CFS (Completely Fair Scheduler) quota.</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings SetCpuQuota(this DockerContainerUpdateSettings toolSettings, long? cpuQuota)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuQuota = cpuQuota;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerUpdateSettings.CpuQuota"/></em></p>
        ///   <p>Limit CPU CFS (Completely Fair Scheduler) quota.</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings ResetCpuQuota(this DockerContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuQuota = null;
            return toolSettings;
        }
        #endregion
        #region CpuRtPeriod
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerUpdateSettings.CpuRtPeriod"/></em></p>
        ///   <p>Limit the CPU real-time period in microseconds.</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings SetCpuRtPeriod(this DockerContainerUpdateSettings toolSettings, long? cpuRtPeriod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuRtPeriod = cpuRtPeriod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerUpdateSettings.CpuRtPeriod"/></em></p>
        ///   <p>Limit the CPU real-time period in microseconds.</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings ResetCpuRtPeriod(this DockerContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuRtPeriod = null;
            return toolSettings;
        }
        #endregion
        #region CpuRtRuntime
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerUpdateSettings.CpuRtRuntime"/></em></p>
        ///   <p>Limit the CPU real-time runtime in microseconds.</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings SetCpuRtRuntime(this DockerContainerUpdateSettings toolSettings, long? cpuRtRuntime)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuRtRuntime = cpuRtRuntime;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerUpdateSettings.CpuRtRuntime"/></em></p>
        ///   <p>Limit the CPU real-time runtime in microseconds.</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings ResetCpuRtRuntime(this DockerContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuRtRuntime = null;
            return toolSettings;
        }
        #endregion
        #region CpuShares
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerUpdateSettings.CpuShares"/></em></p>
        ///   <p>CPU shares (relative weight).</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings SetCpuShares(this DockerContainerUpdateSettings toolSettings, long? cpuShares)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuShares = cpuShares;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerUpdateSettings.CpuShares"/></em></p>
        ///   <p>CPU shares (relative weight).</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings ResetCpuShares(this DockerContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuShares = null;
            return toolSettings;
        }
        #endregion
        #region Cpus
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerUpdateSettings.Cpus"/></em></p>
        ///   <p>Number of CPUs.</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings SetCpus(this DockerContainerUpdateSettings toolSettings, decimal? cpus)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cpus = cpus;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerUpdateSettings.Cpus"/></em></p>
        ///   <p>Number of CPUs.</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings ResetCpus(this DockerContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Cpus = null;
            return toolSettings;
        }
        #endregion
        #region CpusetCpus
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerUpdateSettings.CpusetCpus"/></em></p>
        ///   <p>CPUs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings SetCpusetCpus(this DockerContainerUpdateSettings toolSettings, string cpusetCpus)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetCpus = cpusetCpus;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerUpdateSettings.CpusetCpus"/></em></p>
        ///   <p>CPUs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings ResetCpusetCpus(this DockerContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetCpus = null;
            return toolSettings;
        }
        #endregion
        #region CpusetMems
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerUpdateSettings.CpusetMems"/></em></p>
        ///   <p>MEMs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings SetCpusetMems(this DockerContainerUpdateSettings toolSettings, string cpusetMems)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetMems = cpusetMems;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerUpdateSettings.CpusetMems"/></em></p>
        ///   <p>MEMs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings ResetCpusetMems(this DockerContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetMems = null;
            return toolSettings;
        }
        #endregion
        #region KernelMemory
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerUpdateSettings.KernelMemory"/></em></p>
        ///   <p>Kernel memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings SetKernelMemory(this DockerContainerUpdateSettings toolSettings, long? kernelMemory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KernelMemory = kernelMemory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerUpdateSettings.KernelMemory"/></em></p>
        ///   <p>Kernel memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings ResetKernelMemory(this DockerContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KernelMemory = null;
            return toolSettings;
        }
        #endregion
        #region Memory
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerUpdateSettings.Memory"/></em></p>
        ///   <p>Memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings SetMemory(this DockerContainerUpdateSettings toolSettings, long? memory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Memory = memory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerUpdateSettings.Memory"/></em></p>
        ///   <p>Memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings ResetMemory(this DockerContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Memory = null;
            return toolSettings;
        }
        #endregion
        #region MemoryReservation
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerUpdateSettings.MemoryReservation"/></em></p>
        ///   <p>Memory soft limit.</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings SetMemoryReservation(this DockerContainerUpdateSettings toolSettings, long? memoryReservation)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemoryReservation = memoryReservation;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerUpdateSettings.MemoryReservation"/></em></p>
        ///   <p>Memory soft limit.</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings ResetMemoryReservation(this DockerContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemoryReservation = null;
            return toolSettings;
        }
        #endregion
        #region MemorySwap
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerUpdateSettings.MemorySwap"/></em></p>
        ///   <p>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings SetMemorySwap(this DockerContainerUpdateSettings toolSettings, long? memorySwap)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemorySwap = memorySwap;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerUpdateSettings.MemorySwap"/></em></p>
        ///   <p>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings ResetMemorySwap(this DockerContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemorySwap = null;
            return toolSettings;
        }
        #endregion
        #region PidsLimit
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerUpdateSettings.PidsLimit"/></em></p>
        ///   <p>Tune container pids limit (set -1 for unlimited).</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings SetPidsLimit(this DockerContainerUpdateSettings toolSettings, long? pidsLimit)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PidsLimit = pidsLimit;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerUpdateSettings.PidsLimit"/></em></p>
        ///   <p>Tune container pids limit (set -1 for unlimited).</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings ResetPidsLimit(this DockerContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PidsLimit = null;
            return toolSettings;
        }
        #endregion
        #region Restart
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerUpdateSettings.Restart"/></em></p>
        ///   <p>Restart policy to apply when a container exits.</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings SetRestart(this DockerContainerUpdateSettings toolSettings, string restart)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Restart = restart;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerUpdateSettings.Restart"/></em></p>
        ///   <p>Restart policy to apply when a container exits.</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings ResetRestart(this DockerContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Restart = null;
            return toolSettings;
        }
        #endregion
        #region Containers
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerUpdateSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings SetContainers(this DockerContainerUpdateSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerUpdateSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings SetContainers(this DockerContainerUpdateSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerUpdateSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings AddContainers(this DockerContainerUpdateSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerUpdateSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings AddContainers(this DockerContainerUpdateSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerUpdateSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings ClearContainers(this DockerContainerUpdateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerUpdateSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings RemoveContainers(this DockerContainerUpdateSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerUpdateSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerUpdateSettings RemoveContainers(this DockerContainerUpdateSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerPluginSetSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerPluginSetSettingsExtensions
    {
        #region Plugin
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginSetSettings.Plugin"/></em></p>
        ///   <p>PLUGIN</p>
        /// </summary>
        [Pure]
        public static DockerPluginSetSettings SetPlugin(this DockerPluginSetSettings toolSettings, string plugin)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Plugin = plugin;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPluginSetSettings.Plugin"/></em></p>
        ///   <p>PLUGIN</p>
        /// </summary>
        [Pure]
        public static DockerPluginSetSettings ResetPlugin(this DockerPluginSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Plugin = null;
            return toolSettings;
        }
        #endregion
        #region KeyValues
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginSetSettings.KeyValues"/> to a new dictionary</em></p>
        ///   <p>KEY=VALUE</p>
        /// </summary>
        [Pure]
        public static DockerPluginSetSettings SetKeyValues(this DockerPluginSetSettings toolSettings, IDictionary<string, string> keyValues)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyValuesInternal = keyValues.ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerPluginSetSettings.KeyValues"/></em></p>
        ///   <p>KEY=VALUE</p>
        /// </summary>
        [Pure]
        public static DockerPluginSetSettings ClearKeyValues(this DockerPluginSetSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyValuesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds a new key-value-pair <see cref="DockerPluginSetSettings.KeyValues"/></em></p>
        ///   <p>KEY=VALUE</p>
        /// </summary>
        [Pure]
        public static DockerPluginSetSettings AddKeyValue(this DockerPluginSetSettings toolSettings, string keyValueKey, string keyValueValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyValuesInternal.Add(keyValueKey, keyValueValue);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes a key-value-pair from <see cref="DockerPluginSetSettings.KeyValues"/></em></p>
        ///   <p>KEY=VALUE</p>
        /// </summary>
        [Pure]
        public static DockerPluginSetSettings RemoveKeyValue(this DockerPluginSetSettings toolSettings, string keyValueKey)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyValuesInternal.Remove(keyValueKey);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets a key-value-pair in <see cref="DockerPluginSetSettings.KeyValues"/></em></p>
        ///   <p>KEY=VALUE</p>
        /// </summary>
        [Pure]
        public static DockerPluginSetSettings SetKeyValue(this DockerPluginSetSettings toolSettings, string keyValueKey, string keyValueValue)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.KeyValuesInternal[keyValueKey] = keyValueValue;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerWaitSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerWaitSettingsExtensions
    {
        #region Containers
        /// <summary>
        ///   <p><em>Sets <see cref="DockerWaitSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerWaitSettings SetContainers(this DockerWaitSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerWaitSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerWaitSettings SetContainers(this DockerWaitSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerWaitSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerWaitSettings AddContainers(this DockerWaitSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerWaitSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerWaitSettings AddContainers(this DockerWaitSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerWaitSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerWaitSettings ClearContainers(this DockerWaitSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerWaitSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerWaitSettings RemoveContainers(this DockerWaitSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerWaitSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerWaitSettings RemoveContainers(this DockerWaitSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContextExportSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContextExportSettingsExtensions
    {
        #region Kubeconfig
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContextExportSettings.Kubeconfig"/></em></p>
        ///   <p>Export as a kubeconfig file.</p>
        /// </summary>
        [Pure]
        public static DockerContextExportSettings SetKubeconfig(this DockerContextExportSettings toolSettings, bool? kubeconfig)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Kubeconfig = kubeconfig;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContextExportSettings.Kubeconfig"/></em></p>
        ///   <p>Export as a kubeconfig file.</p>
        /// </summary>
        [Pure]
        public static DockerContextExportSettings ResetKubeconfig(this DockerContextExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Kubeconfig = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContextExportSettings.Kubeconfig"/></em></p>
        ///   <p>Export as a kubeconfig file.</p>
        /// </summary>
        [Pure]
        public static DockerContextExportSettings EnableKubeconfig(this DockerContextExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Kubeconfig = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContextExportSettings.Kubeconfig"/></em></p>
        ///   <p>Export as a kubeconfig file.</p>
        /// </summary>
        [Pure]
        public static DockerContextExportSettings DisableKubeconfig(this DockerContextExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Kubeconfig = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContextExportSettings.Kubeconfig"/></em></p>
        ///   <p>Export as a kubeconfig file.</p>
        /// </summary>
        [Pure]
        public static DockerContextExportSettings ToggleKubeconfig(this DockerContextExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Kubeconfig = !toolSettings.Kubeconfig;
            return toolSettings;
        }
        #endregion
        #region Context
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContextExportSettings.Context"/></em></p>
        ///   <p>CONTEXT</p>
        /// </summary>
        [Pure]
        public static DockerContextExportSettings SetContext(this DockerContextExportSettings toolSettings, string context)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Context = context;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContextExportSettings.Context"/></em></p>
        ///   <p>CONTEXT</p>
        /// </summary>
        [Pure]
        public static DockerContextExportSettings ResetContext(this DockerContextExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Context = null;
            return toolSettings;
        }
        #endregion
        #region File
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContextExportSettings.File"/></em></p>
        ///   <p>[FILE|-]</p>
        /// </summary>
        [Pure]
        public static DockerContextExportSettings SetFile(this DockerContextExportSettings toolSettings, string file)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = file;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContextExportSettings.File"/></em></p>
        ///   <p>[FILE|-]</p>
        /// </summary>
        [Pure]
        public static DockerContextExportSettings ResetFile(this DockerContextExportSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerManifestAnnotateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerManifestAnnotateSettingsExtensions
    {
        #region Arch
        /// <summary>
        ///   <p><em>Sets <see cref="DockerManifestAnnotateSettings.Arch"/></em></p>
        ///   <p>Set architecture.</p>
        /// </summary>
        [Pure]
        public static DockerManifestAnnotateSettings SetArch(this DockerManifestAnnotateSettings toolSettings, string arch)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Arch = arch;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerManifestAnnotateSettings.Arch"/></em></p>
        ///   <p>Set architecture.</p>
        /// </summary>
        [Pure]
        public static DockerManifestAnnotateSettings ResetArch(this DockerManifestAnnotateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Arch = null;
            return toolSettings;
        }
        #endregion
        #region Os
        /// <summary>
        ///   <p><em>Sets <see cref="DockerManifestAnnotateSettings.Os"/></em></p>
        ///   <p>Set operating system.</p>
        /// </summary>
        [Pure]
        public static DockerManifestAnnotateSettings SetOs(this DockerManifestAnnotateSettings toolSettings, string os)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Os = os;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerManifestAnnotateSettings.Os"/></em></p>
        ///   <p>Set operating system.</p>
        /// </summary>
        [Pure]
        public static DockerManifestAnnotateSettings ResetOs(this DockerManifestAnnotateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Os = null;
            return toolSettings;
        }
        #endregion
        #region OsFeatures
        /// <summary>
        ///   <p><em>Sets <see cref="DockerManifestAnnotateSettings.OsFeatures"/> to a new list</em></p>
        ///   <p>Set operating system feature.</p>
        /// </summary>
        [Pure]
        public static DockerManifestAnnotateSettings SetOsFeatures(this DockerManifestAnnotateSettings toolSettings, params string[] osFeatures)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OsFeaturesInternal = osFeatures.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerManifestAnnotateSettings.OsFeatures"/> to a new list</em></p>
        ///   <p>Set operating system feature.</p>
        /// </summary>
        [Pure]
        public static DockerManifestAnnotateSettings SetOsFeatures(this DockerManifestAnnotateSettings toolSettings, IEnumerable<string> osFeatures)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OsFeaturesInternal = osFeatures.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerManifestAnnotateSettings.OsFeatures"/></em></p>
        ///   <p>Set operating system feature.</p>
        /// </summary>
        [Pure]
        public static DockerManifestAnnotateSettings AddOsFeatures(this DockerManifestAnnotateSettings toolSettings, params string[] osFeatures)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OsFeaturesInternal.AddRange(osFeatures);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerManifestAnnotateSettings.OsFeatures"/></em></p>
        ///   <p>Set operating system feature.</p>
        /// </summary>
        [Pure]
        public static DockerManifestAnnotateSettings AddOsFeatures(this DockerManifestAnnotateSettings toolSettings, IEnumerable<string> osFeatures)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OsFeaturesInternal.AddRange(osFeatures);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerManifestAnnotateSettings.OsFeatures"/></em></p>
        ///   <p>Set operating system feature.</p>
        /// </summary>
        [Pure]
        public static DockerManifestAnnotateSettings ClearOsFeatures(this DockerManifestAnnotateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.OsFeaturesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerManifestAnnotateSettings.OsFeatures"/></em></p>
        ///   <p>Set operating system feature.</p>
        /// </summary>
        [Pure]
        public static DockerManifestAnnotateSettings RemoveOsFeatures(this DockerManifestAnnotateSettings toolSettings, params string[] osFeatures)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(osFeatures);
            toolSettings.OsFeaturesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerManifestAnnotateSettings.OsFeatures"/></em></p>
        ///   <p>Set operating system feature.</p>
        /// </summary>
        [Pure]
        public static DockerManifestAnnotateSettings RemoveOsFeatures(this DockerManifestAnnotateSettings toolSettings, IEnumerable<string> osFeatures)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(osFeatures);
            toolSettings.OsFeaturesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Variant
        /// <summary>
        ///   <p><em>Sets <see cref="DockerManifestAnnotateSettings.Variant"/></em></p>
        ///   <p>Set architecture variant.</p>
        /// </summary>
        [Pure]
        public static DockerManifestAnnotateSettings SetVariant(this DockerManifestAnnotateSettings toolSettings, string variant)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Variant = variant;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerManifestAnnotateSettings.Variant"/></em></p>
        ///   <p>Set architecture variant.</p>
        /// </summary>
        [Pure]
        public static DockerManifestAnnotateSettings ResetVariant(this DockerManifestAnnotateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Variant = null;
            return toolSettings;
        }
        #endregion
        #region ManifestList
        /// <summary>
        ///   <p><em>Sets <see cref="DockerManifestAnnotateSettings.ManifestList"/></em></p>
        ///   <p>MANIFEST_LIST</p>
        /// </summary>
        [Pure]
        public static DockerManifestAnnotateSettings SetManifestList(this DockerManifestAnnotateSettings toolSettings, string manifestList)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManifestList = manifestList;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerManifestAnnotateSettings.ManifestList"/></em></p>
        ///   <p>MANIFEST_LIST</p>
        /// </summary>
        [Pure]
        public static DockerManifestAnnotateSettings ResetManifestList(this DockerManifestAnnotateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ManifestList = null;
            return toolSettings;
        }
        #endregion
        #region Manifest
        /// <summary>
        ///   <p><em>Sets <see cref="DockerManifestAnnotateSettings.Manifest"/></em></p>
        ///   <p>MANIFEST</p>
        /// </summary>
        [Pure]
        public static DockerManifestAnnotateSettings SetManifest(this DockerManifestAnnotateSettings toolSettings, string manifest)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Manifest = manifest;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerManifestAnnotateSettings.Manifest"/></em></p>
        ///   <p>MANIFEST</p>
        /// </summary>
        [Pure]
        public static DockerManifestAnnotateSettings ResetManifest(this DockerManifestAnnotateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Manifest = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerImagePullSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerImagePullSettingsExtensions
    {
        #region AllTags
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImagePullSettings.AllTags"/></em></p>
        ///   <p>Download all tagged images in the repository.</p>
        /// </summary>
        [Pure]
        public static DockerImagePullSettings SetAllTags(this DockerImagePullSettings toolSettings, bool? allTags)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllTags = allTags;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImagePullSettings.AllTags"/></em></p>
        ///   <p>Download all tagged images in the repository.</p>
        /// </summary>
        [Pure]
        public static DockerImagePullSettings ResetAllTags(this DockerImagePullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllTags = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImagePullSettings.AllTags"/></em></p>
        ///   <p>Download all tagged images in the repository.</p>
        /// </summary>
        [Pure]
        public static DockerImagePullSettings EnableAllTags(this DockerImagePullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllTags = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImagePullSettings.AllTags"/></em></p>
        ///   <p>Download all tagged images in the repository.</p>
        /// </summary>
        [Pure]
        public static DockerImagePullSettings DisableAllTags(this DockerImagePullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllTags = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImagePullSettings.AllTags"/></em></p>
        ///   <p>Download all tagged images in the repository.</p>
        /// </summary>
        [Pure]
        public static DockerImagePullSettings ToggleAllTags(this DockerImagePullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllTags = !toolSettings.AllTags;
            return toolSettings;
        }
        #endregion
        #region DisableContentTrust
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImagePullSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerImagePullSettings SetDisableContentTrust(this DockerImagePullSettings toolSettings, bool? disableContentTrust)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = disableContentTrust;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImagePullSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerImagePullSettings ResetDisableContentTrust(this DockerImagePullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImagePullSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerImagePullSettings EnableDisableContentTrust(this DockerImagePullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImagePullSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerImagePullSettings DisableDisableContentTrust(this DockerImagePullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImagePullSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerImagePullSettings ToggleDisableContentTrust(this DockerImagePullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = !toolSettings.DisableContentTrust;
            return toolSettings;
        }
        #endregion
        #region Platform
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImagePullSettings.Platform"/></em></p>
        ///   <p>Set platform if server is multi-platform capable.</p>
        /// </summary>
        [Pure]
        public static DockerImagePullSettings SetPlatform(this DockerImagePullSettings toolSettings, string platform)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = platform;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImagePullSettings.Platform"/></em></p>
        ///   <p>Set platform if server is multi-platform capable.</p>
        /// </summary>
        [Pure]
        public static DockerImagePullSettings ResetPlatform(this DockerImagePullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = null;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImagePullSettings.Quiet"/></em></p>
        ///   <p>Suppress verbose output.</p>
        /// </summary>
        [Pure]
        public static DockerImagePullSettings SetQuiet(this DockerImagePullSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImagePullSettings.Quiet"/></em></p>
        ///   <p>Suppress verbose output.</p>
        /// </summary>
        [Pure]
        public static DockerImagePullSettings ResetQuiet(this DockerImagePullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImagePullSettings.Quiet"/></em></p>
        ///   <p>Suppress verbose output.</p>
        /// </summary>
        [Pure]
        public static DockerImagePullSettings EnableQuiet(this DockerImagePullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImagePullSettings.Quiet"/></em></p>
        ///   <p>Suppress verbose output.</p>
        /// </summary>
        [Pure]
        public static DockerImagePullSettings DisableQuiet(this DockerImagePullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImagePullSettings.Quiet"/></em></p>
        ///   <p>Suppress verbose output.</p>
        /// </summary>
        [Pure]
        public static DockerImagePullSettings ToggleQuiet(this DockerImagePullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImagePullSettings.Name"/></em></p>
        ///   <p>NAME[:TAG|@DIGEST]</p>
        /// </summary>
        [Pure]
        public static DockerImagePullSettings SetName(this DockerImagePullSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImagePullSettings.Name"/></em></p>
        ///   <p>NAME[:TAG|@DIGEST]</p>
        /// </summary>
        [Pure]
        public static DockerImagePullSettings ResetName(this DockerImagePullSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerEventsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerEventsSettingsExtensions
    {
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="DockerEventsSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerEventsSettings SetFilter(this DockerEventsSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerEventsSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerEventsSettings ResetFilter(this DockerEventsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerEventsSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerEventsSettings SetFormat(this DockerEventsSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerEventsSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerEventsSettings ResetFormat(this DockerEventsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Since
        /// <summary>
        ///   <p><em>Sets <see cref="DockerEventsSettings.Since"/></em></p>
        ///   <p>Show all events created since timestamp.</p>
        /// </summary>
        [Pure]
        public static DockerEventsSettings SetSince(this DockerEventsSettings toolSettings, string since)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Since = since;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerEventsSettings.Since"/></em></p>
        ///   <p>Show all events created since timestamp.</p>
        /// </summary>
        [Pure]
        public static DockerEventsSettings ResetSince(this DockerEventsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Since = null;
            return toolSettings;
        }
        #endregion
        #region Until
        /// <summary>
        ///   <p><em>Sets <see cref="DockerEventsSettings.Until"/></em></p>
        ///   <p>Stream events until this timestamp.</p>
        /// </summary>
        [Pure]
        public static DockerEventsSettings SetUntil(this DockerEventsSettings toolSettings, string until)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Until = until;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerEventsSettings.Until"/></em></p>
        ///   <p>Stream events until this timestamp.</p>
        /// </summary>
        [Pure]
        public static DockerEventsSettings ResetUntil(this DockerEventsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Until = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerStackLsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerStackLsSettingsExtensions
    {
        #region AllNamespaces
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackLsSettings.AllNamespaces"/></em></p>
        ///   <p>List stacks from all Kubernetes namespaces.</p>
        /// </summary>
        [Pure]
        public static DockerStackLsSettings SetAllNamespaces(this DockerStackLsSettings toolSettings, bool? allNamespaces)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllNamespaces = allNamespaces;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStackLsSettings.AllNamespaces"/></em></p>
        ///   <p>List stacks from all Kubernetes namespaces.</p>
        /// </summary>
        [Pure]
        public static DockerStackLsSettings ResetAllNamespaces(this DockerStackLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllNamespaces = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerStackLsSettings.AllNamespaces"/></em></p>
        ///   <p>List stacks from all Kubernetes namespaces.</p>
        /// </summary>
        [Pure]
        public static DockerStackLsSettings EnableAllNamespaces(this DockerStackLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllNamespaces = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerStackLsSettings.AllNamespaces"/></em></p>
        ///   <p>List stacks from all Kubernetes namespaces.</p>
        /// </summary>
        [Pure]
        public static DockerStackLsSettings DisableAllNamespaces(this DockerStackLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllNamespaces = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerStackLsSettings.AllNamespaces"/></em></p>
        ///   <p>List stacks from all Kubernetes namespaces.</p>
        /// </summary>
        [Pure]
        public static DockerStackLsSettings ToggleAllNamespaces(this DockerStackLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AllNamespaces = !toolSettings.AllNamespaces;
            return toolSettings;
        }
        #endregion
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackLsSettings.Format"/></em></p>
        ///   <p>Pretty-print stacks using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerStackLsSettings SetFormat(this DockerStackLsSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStackLsSettings.Format"/></em></p>
        ///   <p>Pretty-print stacks using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerStackLsSettings ResetFormat(this DockerStackLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Namespace
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackLsSettings.Namespace"/> to a new list</em></p>
        ///   <p>Kubernetes namespaces to use.</p>
        /// </summary>
        [Pure]
        public static DockerStackLsSettings SetNamespace(this DockerStackLsSettings toolSettings, params string[] @namespace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceInternal = @namespace.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackLsSettings.Namespace"/> to a new list</em></p>
        ///   <p>Kubernetes namespaces to use.</p>
        /// </summary>
        [Pure]
        public static DockerStackLsSettings SetNamespace(this DockerStackLsSettings toolSettings, IEnumerable<string> @namespace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceInternal = @namespace.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerStackLsSettings.Namespace"/></em></p>
        ///   <p>Kubernetes namespaces to use.</p>
        /// </summary>
        [Pure]
        public static DockerStackLsSettings AddNamespace(this DockerStackLsSettings toolSettings, params string[] @namespace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceInternal.AddRange(@namespace);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerStackLsSettings.Namespace"/></em></p>
        ///   <p>Kubernetes namespaces to use.</p>
        /// </summary>
        [Pure]
        public static DockerStackLsSettings AddNamespace(this DockerStackLsSettings toolSettings, IEnumerable<string> @namespace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceInternal.AddRange(@namespace);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerStackLsSettings.Namespace"/></em></p>
        ///   <p>Kubernetes namespaces to use.</p>
        /// </summary>
        [Pure]
        public static DockerStackLsSettings ClearNamespace(this DockerStackLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NamespaceInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerStackLsSettings.Namespace"/></em></p>
        ///   <p>Kubernetes namespaces to use.</p>
        /// </summary>
        [Pure]
        public static DockerStackLsSettings RemoveNamespace(this DockerStackLsSettings toolSettings, params string[] @namespace)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(@namespace);
            toolSettings.NamespaceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerStackLsSettings.Namespace"/></em></p>
        ///   <p>Kubernetes namespaces to use.</p>
        /// </summary>
        [Pure]
        public static DockerStackLsSettings RemoveNamespace(this DockerStackLsSettings toolSettings, IEnumerable<string> @namespace)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(@namespace);
            toolSettings.NamespaceInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContainerInspectSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContainerInspectSettingsExtensions
    {
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerInspectSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerContainerInspectSettings SetFormat(this DockerContainerInspectSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerInspectSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerContainerInspectSettings ResetFormat(this DockerContainerInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Size
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerInspectSettings.Size"/></em></p>
        ///   <p>Display total file sizes.</p>
        /// </summary>
        [Pure]
        public static DockerContainerInspectSettings SetSize(this DockerContainerInspectSettings toolSettings, bool? size)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Size = size;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerInspectSettings.Size"/></em></p>
        ///   <p>Display total file sizes.</p>
        /// </summary>
        [Pure]
        public static DockerContainerInspectSettings ResetSize(this DockerContainerInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Size = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerInspectSettings.Size"/></em></p>
        ///   <p>Display total file sizes.</p>
        /// </summary>
        [Pure]
        public static DockerContainerInspectSettings EnableSize(this DockerContainerInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Size = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerInspectSettings.Size"/></em></p>
        ///   <p>Display total file sizes.</p>
        /// </summary>
        [Pure]
        public static DockerContainerInspectSettings DisableSize(this DockerContainerInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Size = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerInspectSettings.Size"/></em></p>
        ///   <p>Display total file sizes.</p>
        /// </summary>
        [Pure]
        public static DockerContainerInspectSettings ToggleSize(this DockerContainerInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Size = !toolSettings.Size;
            return toolSettings;
        }
        #endregion
        #region Containers
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerInspectSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerInspectSettings SetContainers(this DockerContainerInspectSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerInspectSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerInspectSettings SetContainers(this DockerContainerInspectSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerInspectSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerInspectSettings AddContainers(this DockerContainerInspectSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerInspectSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerInspectSettings AddContainers(this DockerContainerInspectSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerInspectSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerInspectSettings ClearContainers(this DockerContainerInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerInspectSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerInspectSettings RemoveContainers(this DockerContainerInspectSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerInspectSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerInspectSettings RemoveContainers(this DockerContainerInspectSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerKillSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerKillSettingsExtensions
    {
        #region Signal
        /// <summary>
        ///   <p><em>Sets <see cref="DockerKillSettings.Signal"/></em></p>
        ///   <p>Signal to send to the container.</p>
        /// </summary>
        [Pure]
        public static DockerKillSettings SetSignal(this DockerKillSettings toolSettings, string signal)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Signal = signal;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerKillSettings.Signal"/></em></p>
        ///   <p>Signal to send to the container.</p>
        /// </summary>
        [Pure]
        public static DockerKillSettings ResetSignal(this DockerKillSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Signal = null;
            return toolSettings;
        }
        #endregion
        #region Containers
        /// <summary>
        ///   <p><em>Sets <see cref="DockerKillSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerKillSettings SetContainers(this DockerKillSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerKillSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerKillSettings SetContainers(this DockerKillSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerKillSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerKillSettings AddContainers(this DockerKillSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerKillSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerKillSettings AddContainers(this DockerKillSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerKillSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerKillSettings ClearContainers(this DockerKillSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerKillSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerKillSettings RemoveContainers(this DockerKillSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerKillSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerKillSettings RemoveContainers(this DockerKillSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerCheckpointCreateSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerCheckpointCreateSettingsExtensions
    {
        #region CheckpointDir
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCheckpointCreateSettings.CheckpointDir"/></em></p>
        ///   <p>Use a custom checkpoint storage directory.</p>
        /// </summary>
        [Pure]
        public static DockerCheckpointCreateSettings SetCheckpointDir(this DockerCheckpointCreateSettings toolSettings, string checkpointDir)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CheckpointDir = checkpointDir;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCheckpointCreateSettings.CheckpointDir"/></em></p>
        ///   <p>Use a custom checkpoint storage directory.</p>
        /// </summary>
        [Pure]
        public static DockerCheckpointCreateSettings ResetCheckpointDir(this DockerCheckpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CheckpointDir = null;
            return toolSettings;
        }
        #endregion
        #region LeaveRunning
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCheckpointCreateSettings.LeaveRunning"/></em></p>
        ///   <p>Leave the container running after checkpoint.</p>
        /// </summary>
        [Pure]
        public static DockerCheckpointCreateSettings SetLeaveRunning(this DockerCheckpointCreateSettings toolSettings, bool? leaveRunning)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaveRunning = leaveRunning;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCheckpointCreateSettings.LeaveRunning"/></em></p>
        ///   <p>Leave the container running after checkpoint.</p>
        /// </summary>
        [Pure]
        public static DockerCheckpointCreateSettings ResetLeaveRunning(this DockerCheckpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaveRunning = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerCheckpointCreateSettings.LeaveRunning"/></em></p>
        ///   <p>Leave the container running after checkpoint.</p>
        /// </summary>
        [Pure]
        public static DockerCheckpointCreateSettings EnableLeaveRunning(this DockerCheckpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaveRunning = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerCheckpointCreateSettings.LeaveRunning"/></em></p>
        ///   <p>Leave the container running after checkpoint.</p>
        /// </summary>
        [Pure]
        public static DockerCheckpointCreateSettings DisableLeaveRunning(this DockerCheckpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaveRunning = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerCheckpointCreateSettings.LeaveRunning"/></em></p>
        ///   <p>Leave the container running after checkpoint.</p>
        /// </summary>
        [Pure]
        public static DockerCheckpointCreateSettings ToggleLeaveRunning(this DockerCheckpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LeaveRunning = !toolSettings.LeaveRunning;
            return toolSettings;
        }
        #endregion
        #region Container
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCheckpointCreateSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerCheckpointCreateSettings SetContainer(this DockerCheckpointCreateSettings toolSettings, string container)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = container;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCheckpointCreateSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerCheckpointCreateSettings ResetContainer(this DockerCheckpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = null;
            return toolSettings;
        }
        #endregion
        #region Checkpoint
        /// <summary>
        ///   <p><em>Sets <see cref="DockerCheckpointCreateSettings.Checkpoint"/></em></p>
        ///   <p>CHECKPOINT</p>
        /// </summary>
        [Pure]
        public static DockerCheckpointCreateSettings SetCheckpoint(this DockerCheckpointCreateSettings toolSettings, string checkpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Checkpoint = checkpoint;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerCheckpointCreateSettings.Checkpoint"/></em></p>
        ///   <p>CHECKPOINT</p>
        /// </summary>
        [Pure]
        public static DockerCheckpointCreateSettings ResetCheckpoint(this DockerCheckpointCreateSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Checkpoint = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerPauseSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerPauseSettingsExtensions
    {
        #region Containers
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPauseSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerPauseSettings SetContainers(this DockerPauseSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPauseSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerPauseSettings SetContainers(this DockerPauseSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerPauseSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerPauseSettings AddContainers(this DockerPauseSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerPauseSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerPauseSettings AddContainers(this DockerPauseSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerPauseSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerPauseSettings ClearContainers(this DockerPauseSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerPauseSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerPauseSettings RemoveContainers(this DockerPauseSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerPauseSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerPauseSettings RemoveContainers(this DockerPauseSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerLogsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerLogsSettingsExtensions
    {
        #region Details
        /// <summary>
        ///   <p><em>Sets <see cref="DockerLogsSettings.Details"/></em></p>
        ///   <p>Show extra details provided to logs.</p>
        /// </summary>
        [Pure]
        public static DockerLogsSettings SetDetails(this DockerLogsSettings toolSettings, bool? details)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Details = details;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerLogsSettings.Details"/></em></p>
        ///   <p>Show extra details provided to logs.</p>
        /// </summary>
        [Pure]
        public static DockerLogsSettings ResetDetails(this DockerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Details = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerLogsSettings.Details"/></em></p>
        ///   <p>Show extra details provided to logs.</p>
        /// </summary>
        [Pure]
        public static DockerLogsSettings EnableDetails(this DockerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Details = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerLogsSettings.Details"/></em></p>
        ///   <p>Show extra details provided to logs.</p>
        /// </summary>
        [Pure]
        public static DockerLogsSettings DisableDetails(this DockerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Details = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerLogsSettings.Details"/></em></p>
        ///   <p>Show extra details provided to logs.</p>
        /// </summary>
        [Pure]
        public static DockerLogsSettings ToggleDetails(this DockerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Details = !toolSettings.Details;
            return toolSettings;
        }
        #endregion
        #region Follow
        /// <summary>
        ///   <p><em>Sets <see cref="DockerLogsSettings.Follow"/></em></p>
        ///   <p>Follow log output.</p>
        /// </summary>
        [Pure]
        public static DockerLogsSettings SetFollow(this DockerLogsSettings toolSettings, bool? follow)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Follow = follow;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerLogsSettings.Follow"/></em></p>
        ///   <p>Follow log output.</p>
        /// </summary>
        [Pure]
        public static DockerLogsSettings ResetFollow(this DockerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Follow = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerLogsSettings.Follow"/></em></p>
        ///   <p>Follow log output.</p>
        /// </summary>
        [Pure]
        public static DockerLogsSettings EnableFollow(this DockerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Follow = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerLogsSettings.Follow"/></em></p>
        ///   <p>Follow log output.</p>
        /// </summary>
        [Pure]
        public static DockerLogsSettings DisableFollow(this DockerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Follow = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerLogsSettings.Follow"/></em></p>
        ///   <p>Follow log output.</p>
        /// </summary>
        [Pure]
        public static DockerLogsSettings ToggleFollow(this DockerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Follow = !toolSettings.Follow;
            return toolSettings;
        }
        #endregion
        #region Since
        /// <summary>
        ///   <p><em>Sets <see cref="DockerLogsSettings.Since"/></em></p>
        ///   <p>Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes).</p>
        /// </summary>
        [Pure]
        public static DockerLogsSettings SetSince(this DockerLogsSettings toolSettings, string since)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Since = since;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerLogsSettings.Since"/></em></p>
        ///   <p>Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes).</p>
        /// </summary>
        [Pure]
        public static DockerLogsSettings ResetSince(this DockerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Since = null;
            return toolSettings;
        }
        #endregion
        #region Tail
        /// <summary>
        ///   <p><em>Sets <see cref="DockerLogsSettings.Tail"/></em></p>
        ///   <p>Number of lines to show from the end of the logs.</p>
        /// </summary>
        [Pure]
        public static DockerLogsSettings SetTail(this DockerLogsSettings toolSettings, string tail)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tail = tail;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerLogsSettings.Tail"/></em></p>
        ///   <p>Number of lines to show from the end of the logs.</p>
        /// </summary>
        [Pure]
        public static DockerLogsSettings ResetTail(this DockerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tail = null;
            return toolSettings;
        }
        #endregion
        #region Timestamps
        /// <summary>
        ///   <p><em>Sets <see cref="DockerLogsSettings.Timestamps"/></em></p>
        ///   <p>Show timestamps.</p>
        /// </summary>
        [Pure]
        public static DockerLogsSettings SetTimestamps(this DockerLogsSettings toolSettings, bool? timestamps)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timestamps = timestamps;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerLogsSettings.Timestamps"/></em></p>
        ///   <p>Show timestamps.</p>
        /// </summary>
        [Pure]
        public static DockerLogsSettings ResetTimestamps(this DockerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timestamps = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerLogsSettings.Timestamps"/></em></p>
        ///   <p>Show timestamps.</p>
        /// </summary>
        [Pure]
        public static DockerLogsSettings EnableTimestamps(this DockerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timestamps = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerLogsSettings.Timestamps"/></em></p>
        ///   <p>Show timestamps.</p>
        /// </summary>
        [Pure]
        public static DockerLogsSettings DisableTimestamps(this DockerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timestamps = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerLogsSettings.Timestamps"/></em></p>
        ///   <p>Show timestamps.</p>
        /// </summary>
        [Pure]
        public static DockerLogsSettings ToggleTimestamps(this DockerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Timestamps = !toolSettings.Timestamps;
            return toolSettings;
        }
        #endregion
        #region Until
        /// <summary>
        ///   <p><em>Sets <see cref="DockerLogsSettings.Until"/></em></p>
        ///   <p>Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes).</p>
        /// </summary>
        [Pure]
        public static DockerLogsSettings SetUntil(this DockerLogsSettings toolSettings, string until)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Until = until;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerLogsSettings.Until"/></em></p>
        ///   <p>Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes).</p>
        /// </summary>
        [Pure]
        public static DockerLogsSettings ResetUntil(this DockerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Until = null;
            return toolSettings;
        }
        #endregion
        #region Container
        /// <summary>
        ///   <p><em>Sets <see cref="DockerLogsSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerLogsSettings SetContainer(this DockerLogsSettings toolSettings, string container)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = container;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerLogsSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerLogsSettings ResetContainer(this DockerLogsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContextInspectSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContextInspectSettingsExtensions
    {
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContextInspectSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerContextInspectSettings SetFormat(this DockerContextInspectSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContextInspectSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerContextInspectSettings ResetFormat(this DockerContextInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Context
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContextInspectSettings.Context"/></em></p>
        ///   <p>[CONTEXT]</p>
        /// </summary>
        [Pure]
        public static DockerContextInspectSettings SetContext(this DockerContextInspectSettings toolSettings, string context)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Context = context;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContextInspectSettings.Context"/></em></p>
        ///   <p>[CONTEXT]</p>
        /// </summary>
        [Pure]
        public static DockerContextInspectSettings ResetContext(this DockerContextInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Context = null;
            return toolSettings;
        }
        #endregion
        #region Contexts
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContextInspectSettings.Contexts"/> to a new list</em></p>
        ///   <p>[CONTEXT...]</p>
        /// </summary>
        [Pure]
        public static DockerContextInspectSettings SetContexts(this DockerContextInspectSettings toolSettings, params string[] contexts)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContextsInternal = contexts.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContextInspectSettings.Contexts"/> to a new list</em></p>
        ///   <p>[CONTEXT...]</p>
        /// </summary>
        [Pure]
        public static DockerContextInspectSettings SetContexts(this DockerContextInspectSettings toolSettings, IEnumerable<string> contexts)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContextsInternal = contexts.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContextInspectSettings.Contexts"/></em></p>
        ///   <p>[CONTEXT...]</p>
        /// </summary>
        [Pure]
        public static DockerContextInspectSettings AddContexts(this DockerContextInspectSettings toolSettings, params string[] contexts)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContextsInternal.AddRange(contexts);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContextInspectSettings.Contexts"/></em></p>
        ///   <p>[CONTEXT...]</p>
        /// </summary>
        [Pure]
        public static DockerContextInspectSettings AddContexts(this DockerContextInspectSettings toolSettings, IEnumerable<string> contexts)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContextsInternal.AddRange(contexts);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContextInspectSettings.Contexts"/></em></p>
        ///   <p>[CONTEXT...]</p>
        /// </summary>
        [Pure]
        public static DockerContextInspectSettings ClearContexts(this DockerContextInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContextsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContextInspectSettings.Contexts"/></em></p>
        ///   <p>[CONTEXT...]</p>
        /// </summary>
        [Pure]
        public static DockerContextInspectSettings RemoveContexts(this DockerContextInspectSettings toolSettings, params string[] contexts)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(contexts);
            toolSettings.ContextsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContextInspectSettings.Contexts"/></em></p>
        ///   <p>[CONTEXT...]</p>
        /// </summary>
        [Pure]
        public static DockerContextInspectSettings RemoveContexts(this DockerContextInspectSettings toolSettings, IEnumerable<string> contexts)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(contexts);
            toolSettings.ContextsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerNodePromoteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerNodePromoteSettingsExtensions
    {
        #region Nodes
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodePromoteSettings.Nodes"/> to a new list</em></p>
        ///   <p>NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodePromoteSettings SetNodes(this DockerNodePromoteSettings toolSettings, params string[] nodes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodesInternal = nodes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodePromoteSettings.Nodes"/> to a new list</em></p>
        ///   <p>NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodePromoteSettings SetNodes(this DockerNodePromoteSettings toolSettings, IEnumerable<string> nodes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodesInternal = nodes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNodePromoteSettings.Nodes"/></em></p>
        ///   <p>NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodePromoteSettings AddNodes(this DockerNodePromoteSettings toolSettings, params string[] nodes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodesInternal.AddRange(nodes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNodePromoteSettings.Nodes"/></em></p>
        ///   <p>NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodePromoteSettings AddNodes(this DockerNodePromoteSettings toolSettings, IEnumerable<string> nodes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodesInternal.AddRange(nodes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerNodePromoteSettings.Nodes"/></em></p>
        ///   <p>NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodePromoteSettings ClearNodes(this DockerNodePromoteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNodePromoteSettings.Nodes"/></em></p>
        ///   <p>NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodePromoteSettings RemoveNodes(this DockerNodePromoteSettings toolSettings, params string[] nodes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(nodes);
            toolSettings.NodesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNodePromoteSettings.Nodes"/></em></p>
        ///   <p>NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodePromoteSettings RemoveNodes(this DockerNodePromoteSettings toolSettings, IEnumerable<string> nodes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(nodes);
            toolSettings.NodesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerNodeDemoteSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerNodeDemoteSettingsExtensions
    {
        #region Nodes
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodeDemoteSettings.Nodes"/> to a new list</em></p>
        ///   <p>NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodeDemoteSettings SetNodes(this DockerNodeDemoteSettings toolSettings, params string[] nodes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodesInternal = nodes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerNodeDemoteSettings.Nodes"/> to a new list</em></p>
        ///   <p>NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodeDemoteSettings SetNodes(this DockerNodeDemoteSettings toolSettings, IEnumerable<string> nodes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodesInternal = nodes.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNodeDemoteSettings.Nodes"/></em></p>
        ///   <p>NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodeDemoteSettings AddNodes(this DockerNodeDemoteSettings toolSettings, params string[] nodes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodesInternal.AddRange(nodes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerNodeDemoteSettings.Nodes"/></em></p>
        ///   <p>NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodeDemoteSettings AddNodes(this DockerNodeDemoteSettings toolSettings, IEnumerable<string> nodes)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodesInternal.AddRange(nodes);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerNodeDemoteSettings.Nodes"/></em></p>
        ///   <p>NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodeDemoteSettings ClearNodes(this DockerNodeDemoteSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NodesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNodeDemoteSettings.Nodes"/></em></p>
        ///   <p>NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodeDemoteSettings RemoveNodes(this DockerNodeDemoteSettings toolSettings, params string[] nodes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(nodes);
            toolSettings.NodesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerNodeDemoteSettings.Nodes"/></em></p>
        ///   <p>NODE</p>
        /// </summary>
        [Pure]
        public static DockerNodeDemoteSettings RemoveNodes(this DockerNodeDemoteSettings toolSettings, IEnumerable<string> nodes)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(nodes);
            toolSettings.NodesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerExecSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerExecSettingsExtensions
    {
        #region Detach
        /// <summary>
        ///   <p><em>Sets <see cref="DockerExecSettings.Detach"/></em></p>
        ///   <p>Detached mode: run command in the background.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings SetDetach(this DockerExecSettings toolSettings, bool? detach)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = detach;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerExecSettings.Detach"/></em></p>
        ///   <p>Detached mode: run command in the background.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings ResetDetach(this DockerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerExecSettings.Detach"/></em></p>
        ///   <p>Detached mode: run command in the background.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings EnableDetach(this DockerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerExecSettings.Detach"/></em></p>
        ///   <p>Detached mode: run command in the background.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings DisableDetach(this DockerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerExecSettings.Detach"/></em></p>
        ///   <p>Detached mode: run command in the background.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings ToggleDetach(this DockerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = !toolSettings.Detach;
            return toolSettings;
        }
        #endregion
        #region DetachKeys
        /// <summary>
        ///   <p><em>Sets <see cref="DockerExecSettings.DetachKeys"/></em></p>
        ///   <p>Override the key sequence for detaching a container.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings SetDetachKeys(this DockerExecSettings toolSettings, string detachKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DetachKeys = detachKeys;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerExecSettings.DetachKeys"/></em></p>
        ///   <p>Override the key sequence for detaching a container.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings ResetDetachKeys(this DockerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DetachKeys = null;
            return toolSettings;
        }
        #endregion
        #region Env
        /// <summary>
        ///   <p><em>Sets <see cref="DockerExecSettings.Env"/> to a new list</em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings SetEnv(this DockerExecSettings toolSettings, params string[] env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal = env.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerExecSettings.Env"/> to a new list</em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings SetEnv(this DockerExecSettings toolSettings, IEnumerable<string> env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal = env.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerExecSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings AddEnv(this DockerExecSettings toolSettings, params string[] env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal.AddRange(env);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerExecSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings AddEnv(this DockerExecSettings toolSettings, IEnumerable<string> env)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal.AddRange(env);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerExecSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings ClearEnv(this DockerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.EnvInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerExecSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings RemoveEnv(this DockerExecSettings toolSettings, params string[] env)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(env);
            toolSettings.EnvInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerExecSettings.Env"/></em></p>
        ///   <p>Set environment variables.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings RemoveEnv(this DockerExecSettings toolSettings, IEnumerable<string> env)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(env);
            toolSettings.EnvInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Interactive
        /// <summary>
        ///   <p><em>Sets <see cref="DockerExecSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings SetInteractive(this DockerExecSettings toolSettings, bool? interactive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = interactive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerExecSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings ResetInteractive(this DockerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerExecSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings EnableInteractive(this DockerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerExecSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings DisableInteractive(this DockerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerExecSettings.Interactive"/></em></p>
        ///   <p>Keep STDIN open even if not attached.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings ToggleInteractive(this DockerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = !toolSettings.Interactive;
            return toolSettings;
        }
        #endregion
        #region Privileged
        /// <summary>
        ///   <p><em>Sets <see cref="DockerExecSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to the command.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings SetPrivileged(this DockerExecSettings toolSettings, bool? privileged)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = privileged;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerExecSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to the command.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings ResetPrivileged(this DockerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerExecSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to the command.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings EnablePrivileged(this DockerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerExecSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to the command.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings DisablePrivileged(this DockerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerExecSettings.Privileged"/></em></p>
        ///   <p>Give extended privileges to the command.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings TogglePrivileged(this DockerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Privileged = !toolSettings.Privileged;
            return toolSettings;
        }
        #endregion
        #region Tty
        /// <summary>
        ///   <p><em>Sets <see cref="DockerExecSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings SetTty(this DockerExecSettings toolSettings, bool? tty)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = tty;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerExecSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings ResetTty(this DockerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerExecSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings EnableTty(this DockerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerExecSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings DisableTty(this DockerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerExecSettings.Tty"/></em></p>
        ///   <p>Allocate a pseudo-TTY.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings ToggleTty(this DockerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Tty = !toolSettings.Tty;
            return toolSettings;
        }
        #endregion
        #region User
        /// <summary>
        ///   <p><em>Sets <see cref="DockerExecSettings.User"/></em></p>
        ///   <p>Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings SetUser(this DockerExecSettings toolSettings, string user)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.User = user;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerExecSettings.User"/></em></p>
        ///   <p>Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]).</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings ResetUser(this DockerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.User = null;
            return toolSettings;
        }
        #endregion
        #region Workdir
        /// <summary>
        ///   <p><em>Sets <see cref="DockerExecSettings.Workdir"/></em></p>
        ///   <p>Working directory inside the container.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings SetWorkdir(this DockerExecSettings toolSettings, string workdir)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Workdir = workdir;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerExecSettings.Workdir"/></em></p>
        ///   <p>Working directory inside the container.</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings ResetWorkdir(this DockerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Workdir = null;
            return toolSettings;
        }
        #endregion
        #region Container
        /// <summary>
        ///   <p><em>Sets <see cref="DockerExecSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings SetContainer(this DockerExecSettings toolSettings, string container)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = container;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerExecSettings.Container"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings ResetContainer(this DockerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Container = null;
            return toolSettings;
        }
        #endregion
        #region Command
        /// <summary>
        ///   <p><em>Sets <see cref="DockerExecSettings.Command"/></em></p>
        ///   <p>COMMAND</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings SetCommand(this DockerExecSettings toolSettings, string command)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Command = command;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerExecSettings.Command"/></em></p>
        ///   <p>COMMAND</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings ResetCommand(this DockerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Command = null;
            return toolSettings;
        }
        #endregion
        #region Args
        /// <summary>
        ///   <p><em>Sets <see cref="DockerExecSettings.Args"/> to a new list</em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings SetArgs(this DockerExecSettings toolSettings, params string[] args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal = args.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerExecSettings.Args"/> to a new list</em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings SetArgs(this DockerExecSettings toolSettings, IEnumerable<string> args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal = args.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerExecSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings AddArgs(this DockerExecSettings toolSettings, params string[] args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal.AddRange(args);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerExecSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings AddArgs(this DockerExecSettings toolSettings, IEnumerable<string> args)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal.AddRange(args);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerExecSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings ClearArgs(this DockerExecSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ArgsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerExecSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings RemoveArgs(this DockerExecSettings toolSettings, params string[] args)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(args);
            toolSettings.ArgsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerExecSettings.Args"/></em></p>
        ///   <p>[ARG...]</p>
        /// </summary>
        [Pure]
        public static DockerExecSettings RemoveArgs(this DockerExecSettings toolSettings, IEnumerable<string> args)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(args);
            toolSettings.ArgsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerImageRmSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerImageRmSettingsExtensions
    {
        #region Force
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageRmSettings.Force"/></em></p>
        ///   <p>Force removal of the image.</p>
        /// </summary>
        [Pure]
        public static DockerImageRmSettings SetForce(this DockerImageRmSettings toolSettings, bool? force)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = force;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageRmSettings.Force"/></em></p>
        ///   <p>Force removal of the image.</p>
        /// </summary>
        [Pure]
        public static DockerImageRmSettings ResetForce(this DockerImageRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImageRmSettings.Force"/></em></p>
        ///   <p>Force removal of the image.</p>
        /// </summary>
        [Pure]
        public static DockerImageRmSettings EnableForce(this DockerImageRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImageRmSettings.Force"/></em></p>
        ///   <p>Force removal of the image.</p>
        /// </summary>
        [Pure]
        public static DockerImageRmSettings DisableForce(this DockerImageRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImageRmSettings.Force"/></em></p>
        ///   <p>Force removal of the image.</p>
        /// </summary>
        [Pure]
        public static DockerImageRmSettings ToggleForce(this DockerImageRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = !toolSettings.Force;
            return toolSettings;
        }
        #endregion
        #region NoPrune
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageRmSettings.NoPrune"/></em></p>
        ///   <p>Do not delete untagged parents.</p>
        /// </summary>
        [Pure]
        public static DockerImageRmSettings SetNoPrune(this DockerImageRmSettings toolSettings, bool? noPrune)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoPrune = noPrune;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageRmSettings.NoPrune"/></em></p>
        ///   <p>Do not delete untagged parents.</p>
        /// </summary>
        [Pure]
        public static DockerImageRmSettings ResetNoPrune(this DockerImageRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoPrune = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImageRmSettings.NoPrune"/></em></p>
        ///   <p>Do not delete untagged parents.</p>
        /// </summary>
        [Pure]
        public static DockerImageRmSettings EnableNoPrune(this DockerImageRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoPrune = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImageRmSettings.NoPrune"/></em></p>
        ///   <p>Do not delete untagged parents.</p>
        /// </summary>
        [Pure]
        public static DockerImageRmSettings DisableNoPrune(this DockerImageRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoPrune = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImageRmSettings.NoPrune"/></em></p>
        ///   <p>Do not delete untagged parents.</p>
        /// </summary>
        [Pure]
        public static DockerImageRmSettings ToggleNoPrune(this DockerImageRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoPrune = !toolSettings.NoPrune;
            return toolSettings;
        }
        #endregion
        #region Images
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageRmSettings.Images"/> to a new list</em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerImageRmSettings SetImages(this DockerImageRmSettings toolSettings, params string[] images)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal = images.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageRmSettings.Images"/> to a new list</em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerImageRmSettings SetImages(this DockerImageRmSettings toolSettings, IEnumerable<string> images)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal = images.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerImageRmSettings.Images"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerImageRmSettings AddImages(this DockerImageRmSettings toolSettings, params string[] images)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal.AddRange(images);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerImageRmSettings.Images"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerImageRmSettings AddImages(this DockerImageRmSettings toolSettings, IEnumerable<string> images)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal.AddRange(images);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerImageRmSettings.Images"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerImageRmSettings ClearImages(this DockerImageRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ImagesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerImageRmSettings.Images"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerImageRmSettings RemoveImages(this DockerImageRmSettings toolSettings, params string[] images)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(images);
            toolSettings.ImagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerImageRmSettings.Images"/></em></p>
        ///   <p>IMAGE</p>
        /// </summary>
        [Pure]
        public static DockerImageRmSettings RemoveImages(this DockerImageRmSettings toolSettings, IEnumerable<string> images)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(images);
            toolSettings.ImagesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerImageSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerImageSettingsExtensions
    {
    }
    #endregion
    #region DockerContextSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContextSettingsExtensions
    {
    }
    #endregion
    #region DockerVolumeSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerVolumeSettingsExtensions
    {
        #region Command
        /// <summary>
        ///   <p><em>Sets <see cref="DockerVolumeSettings.Command"/></em></p>
        ///   <p>COMMAND</p>
        /// </summary>
        [Pure]
        public static DockerVolumeSettings SetCommand(this DockerVolumeSettings toolSettings, string command)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Command = command;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerVolumeSettings.Command"/></em></p>
        ///   <p>COMMAND</p>
        /// </summary>
        [Pure]
        public static DockerVolumeSettings ResetCommand(this DockerVolumeSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Command = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerContainerStartSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerContainerStartSettingsExtensions
    {
        #region Attach
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerStartSettings.Attach"/></em></p>
        ///   <p>Attach STDOUT/STDERR and forward signals.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStartSettings SetAttach(this DockerContainerStartSettings toolSettings, bool? attach)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Attach = attach;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerStartSettings.Attach"/></em></p>
        ///   <p>Attach STDOUT/STDERR and forward signals.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStartSettings ResetAttach(this DockerContainerStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Attach = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerStartSettings.Attach"/></em></p>
        ///   <p>Attach STDOUT/STDERR and forward signals.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStartSettings EnableAttach(this DockerContainerStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Attach = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerStartSettings.Attach"/></em></p>
        ///   <p>Attach STDOUT/STDERR and forward signals.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStartSettings DisableAttach(this DockerContainerStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Attach = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerStartSettings.Attach"/></em></p>
        ///   <p>Attach STDOUT/STDERR and forward signals.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStartSettings ToggleAttach(this DockerContainerStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Attach = !toolSettings.Attach;
            return toolSettings;
        }
        #endregion
        #region Checkpoint
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerStartSettings.Checkpoint"/></em></p>
        ///   <p>Restore from this checkpoint.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStartSettings SetCheckpoint(this DockerContainerStartSettings toolSettings, string checkpoint)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Checkpoint = checkpoint;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerStartSettings.Checkpoint"/></em></p>
        ///   <p>Restore from this checkpoint.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStartSettings ResetCheckpoint(this DockerContainerStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Checkpoint = null;
            return toolSettings;
        }
        #endregion
        #region CheckpointDir
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerStartSettings.CheckpointDir"/></em></p>
        ///   <p>Use a custom checkpoint storage directory.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStartSettings SetCheckpointDir(this DockerContainerStartSettings toolSettings, string checkpointDir)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CheckpointDir = checkpointDir;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerStartSettings.CheckpointDir"/></em></p>
        ///   <p>Use a custom checkpoint storage directory.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStartSettings ResetCheckpointDir(this DockerContainerStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CheckpointDir = null;
            return toolSettings;
        }
        #endregion
        #region DetachKeys
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerStartSettings.DetachKeys"/></em></p>
        ///   <p>Override the key sequence for detaching a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStartSettings SetDetachKeys(this DockerContainerStartSettings toolSettings, string detachKeys)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DetachKeys = detachKeys;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerStartSettings.DetachKeys"/></em></p>
        ///   <p>Override the key sequence for detaching a container.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStartSettings ResetDetachKeys(this DockerContainerStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DetachKeys = null;
            return toolSettings;
        }
        #endregion
        #region Interactive
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerStartSettings.Interactive"/></em></p>
        ///   <p>Attach container's STDIN.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStartSettings SetInteractive(this DockerContainerStartSettings toolSettings, bool? interactive)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = interactive;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerContainerStartSettings.Interactive"/></em></p>
        ///   <p>Attach container's STDIN.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStartSettings ResetInteractive(this DockerContainerStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerContainerStartSettings.Interactive"/></em></p>
        ///   <p>Attach container's STDIN.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStartSettings EnableInteractive(this DockerContainerStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerContainerStartSettings.Interactive"/></em></p>
        ///   <p>Attach container's STDIN.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStartSettings DisableInteractive(this DockerContainerStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerContainerStartSettings.Interactive"/></em></p>
        ///   <p>Attach container's STDIN.</p>
        /// </summary>
        [Pure]
        public static DockerContainerStartSettings ToggleInteractive(this DockerContainerStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Interactive = !toolSettings.Interactive;
            return toolSettings;
        }
        #endregion
        #region Containers
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerStartSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerStartSettings SetContainers(this DockerContainerStartSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerContainerStartSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerStartSettings SetContainers(this DockerContainerStartSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerStartSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerStartSettings AddContainers(this DockerContainerStartSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerContainerStartSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerStartSettings AddContainers(this DockerContainerStartSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerContainerStartSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerStartSettings ClearContainers(this DockerContainerStartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerStartSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerStartSettings RemoveContainers(this DockerContainerStartSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerContainerStartSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerContainerStartSettings RemoveContainers(this DockerContainerStartSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerPluginInspectSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerPluginInspectSettingsExtensions
    {
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginInspectSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerPluginInspectSettings SetFormat(this DockerPluginInspectSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerPluginInspectSettings.Format"/></em></p>
        ///   <p>Format the output using the given Go template.</p>
        /// </summary>
        [Pure]
        public static DockerPluginInspectSettings ResetFormat(this DockerPluginInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Plugins
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginInspectSettings.Plugins"/> to a new list</em></p>
        ///   <p>PLUGIN</p>
        /// </summary>
        [Pure]
        public static DockerPluginInspectSettings SetPlugins(this DockerPluginInspectSettings toolSettings, params string[] plugins)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PluginsInternal = plugins.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerPluginInspectSettings.Plugins"/> to a new list</em></p>
        ///   <p>PLUGIN</p>
        /// </summary>
        [Pure]
        public static DockerPluginInspectSettings SetPlugins(this DockerPluginInspectSettings toolSettings, IEnumerable<string> plugins)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PluginsInternal = plugins.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerPluginInspectSettings.Plugins"/></em></p>
        ///   <p>PLUGIN</p>
        /// </summary>
        [Pure]
        public static DockerPluginInspectSettings AddPlugins(this DockerPluginInspectSettings toolSettings, params string[] plugins)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PluginsInternal.AddRange(plugins);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerPluginInspectSettings.Plugins"/></em></p>
        ///   <p>PLUGIN</p>
        /// </summary>
        [Pure]
        public static DockerPluginInspectSettings AddPlugins(this DockerPluginInspectSettings toolSettings, IEnumerable<string> plugins)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PluginsInternal.AddRange(plugins);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerPluginInspectSettings.Plugins"/></em></p>
        ///   <p>PLUGIN</p>
        /// </summary>
        [Pure]
        public static DockerPluginInspectSettings ClearPlugins(this DockerPluginInspectSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.PluginsInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerPluginInspectSettings.Plugins"/></em></p>
        ///   <p>PLUGIN</p>
        /// </summary>
        [Pure]
        public static DockerPluginInspectSettings RemovePlugins(this DockerPluginInspectSettings toolSettings, params string[] plugins)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(plugins);
            toolSettings.PluginsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerPluginInspectSettings.Plugins"/></em></p>
        ///   <p>PLUGIN</p>
        /// </summary>
        [Pure]
        public static DockerPluginInspectSettings RemovePlugins(this DockerPluginInspectSettings toolSettings, IEnumerable<string> plugins)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(plugins);
            toolSettings.PluginsInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerLogoutSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerLogoutSettingsExtensions
    {
        #region Server
        /// <summary>
        ///   <p><em>Sets <see cref="DockerLogoutSettings.Server"/></em></p>
        ///   <p>[SERVER]</p>
        /// </summary>
        [Pure]
        public static DockerLogoutSettings SetServer(this DockerLogoutSettings toolSettings, string server)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = server;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerLogoutSettings.Server"/></em></p>
        ///   <p>[SERVER]</p>
        /// </summary>
        [Pure]
        public static DockerLogoutSettings ResetServer(this DockerLogoutSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Server = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerNetworkSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerNetworkSettingsExtensions
    {
    }
    #endregion
    #region DockerImageLsSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerImageLsSettingsExtensions
    {
        #region All
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageLsSettings.All"/></em></p>
        ///   <p>Show all images (default hides intermediate images).</p>
        /// </summary>
        [Pure]
        public static DockerImageLsSettings SetAll(this DockerImageLsSettings toolSettings, bool? all)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = all;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageLsSettings.All"/></em></p>
        ///   <p>Show all images (default hides intermediate images).</p>
        /// </summary>
        [Pure]
        public static DockerImageLsSettings ResetAll(this DockerImageLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImageLsSettings.All"/></em></p>
        ///   <p>Show all images (default hides intermediate images).</p>
        /// </summary>
        [Pure]
        public static DockerImageLsSettings EnableAll(this DockerImageLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImageLsSettings.All"/></em></p>
        ///   <p>Show all images (default hides intermediate images).</p>
        /// </summary>
        [Pure]
        public static DockerImageLsSettings DisableAll(this DockerImageLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImageLsSettings.All"/></em></p>
        ///   <p>Show all images (default hides intermediate images).</p>
        /// </summary>
        [Pure]
        public static DockerImageLsSettings ToggleAll(this DockerImageLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.All = !toolSettings.All;
            return toolSettings;
        }
        #endregion
        #region Digests
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageLsSettings.Digests"/></em></p>
        ///   <p>Show digests.</p>
        /// </summary>
        [Pure]
        public static DockerImageLsSettings SetDigests(this DockerImageLsSettings toolSettings, bool? digests)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Digests = digests;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageLsSettings.Digests"/></em></p>
        ///   <p>Show digests.</p>
        /// </summary>
        [Pure]
        public static DockerImageLsSettings ResetDigests(this DockerImageLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Digests = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImageLsSettings.Digests"/></em></p>
        ///   <p>Show digests.</p>
        /// </summary>
        [Pure]
        public static DockerImageLsSettings EnableDigests(this DockerImageLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Digests = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImageLsSettings.Digests"/></em></p>
        ///   <p>Show digests.</p>
        /// </summary>
        [Pure]
        public static DockerImageLsSettings DisableDigests(this DockerImageLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Digests = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImageLsSettings.Digests"/></em></p>
        ///   <p>Show digests.</p>
        /// </summary>
        [Pure]
        public static DockerImageLsSettings ToggleDigests(this DockerImageLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Digests = !toolSettings.Digests;
            return toolSettings;
        }
        #endregion
        #region Filter
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageLsSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerImageLsSettings SetFilter(this DockerImageLsSettings toolSettings, string filter)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = filter;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageLsSettings.Filter"/></em></p>
        ///   <p>Filter output based on conditions provided.</p>
        /// </summary>
        [Pure]
        public static DockerImageLsSettings ResetFilter(this DockerImageLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Filter = null;
            return toolSettings;
        }
        #endregion
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageLsSettings.Format"/></em></p>
        ///   <p>Pretty-print images using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerImageLsSettings SetFormat(this DockerImageLsSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageLsSettings.Format"/></em></p>
        ///   <p>Pretty-print images using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerImageLsSettings ResetFormat(this DockerImageLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region NoTrunc
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageLsSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerImageLsSettings SetNoTrunc(this DockerImageLsSettings toolSettings, bool? noTrunc)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = noTrunc;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageLsSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerImageLsSettings ResetNoTrunc(this DockerImageLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImageLsSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerImageLsSettings EnableNoTrunc(this DockerImageLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImageLsSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerImageLsSettings DisableNoTrunc(this DockerImageLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImageLsSettings.NoTrunc"/></em></p>
        ///   <p>Don't truncate output.</p>
        /// </summary>
        [Pure]
        public static DockerImageLsSettings ToggleNoTrunc(this DockerImageLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoTrunc = !toolSettings.NoTrunc;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageLsSettings.Quiet"/></em></p>
        ///   <p>Only show numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerImageLsSettings SetQuiet(this DockerImageLsSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageLsSettings.Quiet"/></em></p>
        ///   <p>Only show numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerImageLsSettings ResetQuiet(this DockerImageLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerImageLsSettings.Quiet"/></em></p>
        ///   <p>Only show numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerImageLsSettings EnableQuiet(this DockerImageLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerImageLsSettings.Quiet"/></em></p>
        ///   <p>Only show numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerImageLsSettings DisableQuiet(this DockerImageLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerImageLsSettings.Quiet"/></em></p>
        ///   <p>Only show numeric IDs.</p>
        /// </summary>
        [Pure]
        public static DockerImageLsSettings ToggleQuiet(this DockerImageLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
        #region Repository
        /// <summary>
        ///   <p><em>Sets <see cref="DockerImageLsSettings.Repository"/></em></p>
        ///   <p>[REPOSITORY[:TAG]]</p>
        /// </summary>
        [Pure]
        public static DockerImageLsSettings SetRepository(this DockerImageLsSettings toolSettings, string repository)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = repository;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerImageLsSettings.Repository"/></em></p>
        ///   <p>[REPOSITORY[:TAG]]</p>
        /// </summary>
        [Pure]
        public static DockerImageLsSettings ResetRepository(this DockerImageLsSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Repository = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerSystemDfSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerSystemDfSettingsExtensions
    {
        #region Format
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSystemDfSettings.Format"/></em></p>
        ///   <p>Pretty-print images using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerSystemDfSettings SetFormat(this DockerSystemDfSettings toolSettings, string format)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = format;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSystemDfSettings.Format"/></em></p>
        ///   <p>Pretty-print images using a Go template.</p>
        /// </summary>
        [Pure]
        public static DockerSystemDfSettings ResetFormat(this DockerSystemDfSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Format = null;
            return toolSettings;
        }
        #endregion
        #region Verbose
        /// <summary>
        ///   <p><em>Sets <see cref="DockerSystemDfSettings.Verbose"/></em></p>
        ///   <p>Show detailed information on space usage.</p>
        /// </summary>
        [Pure]
        public static DockerSystemDfSettings SetVerbose(this DockerSystemDfSettings toolSettings, bool? verbose)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = verbose;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerSystemDfSettings.Verbose"/></em></p>
        ///   <p>Show detailed information on space usage.</p>
        /// </summary>
        [Pure]
        public static DockerSystemDfSettings ResetVerbose(this DockerSystemDfSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerSystemDfSettings.Verbose"/></em></p>
        ///   <p>Show detailed information on space usage.</p>
        /// </summary>
        [Pure]
        public static DockerSystemDfSettings EnableVerbose(this DockerSystemDfSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerSystemDfSettings.Verbose"/></em></p>
        ///   <p>Show detailed information on space usage.</p>
        /// </summary>
        [Pure]
        public static DockerSystemDfSettings DisableVerbose(this DockerSystemDfSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerSystemDfSettings.Verbose"/></em></p>
        ///   <p>Show detailed information on space usage.</p>
        /// </summary>
        [Pure]
        public static DockerSystemDfSettings ToggleVerbose(this DockerSystemDfSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Verbose = !toolSettings.Verbose;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerServiceRollbackSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerServiceRollbackSettingsExtensions
    {
        #region Detach
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceRollbackSettings.Detach"/></em></p>
        ///   <p>Exit immediately instead of waiting for the service to converge.</p>
        /// </summary>
        [Pure]
        public static DockerServiceRollbackSettings SetDetach(this DockerServiceRollbackSettings toolSettings, bool? detach)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = detach;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceRollbackSettings.Detach"/></em></p>
        ///   <p>Exit immediately instead of waiting for the service to converge.</p>
        /// </summary>
        [Pure]
        public static DockerServiceRollbackSettings ResetDetach(this DockerServiceRollbackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceRollbackSettings.Detach"/></em></p>
        ///   <p>Exit immediately instead of waiting for the service to converge.</p>
        /// </summary>
        [Pure]
        public static DockerServiceRollbackSettings EnableDetach(this DockerServiceRollbackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceRollbackSettings.Detach"/></em></p>
        ///   <p>Exit immediately instead of waiting for the service to converge.</p>
        /// </summary>
        [Pure]
        public static DockerServiceRollbackSettings DisableDetach(this DockerServiceRollbackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceRollbackSettings.Detach"/></em></p>
        ///   <p>Exit immediately instead of waiting for the service to converge.</p>
        /// </summary>
        [Pure]
        public static DockerServiceRollbackSettings ToggleDetach(this DockerServiceRollbackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Detach = !toolSettings.Detach;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceRollbackSettings.Quiet"/></em></p>
        ///   <p>Suppress progress output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceRollbackSettings SetQuiet(this DockerServiceRollbackSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceRollbackSettings.Quiet"/></em></p>
        ///   <p>Suppress progress output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceRollbackSettings ResetQuiet(this DockerServiceRollbackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerServiceRollbackSettings.Quiet"/></em></p>
        ///   <p>Suppress progress output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceRollbackSettings EnableQuiet(this DockerServiceRollbackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerServiceRollbackSettings.Quiet"/></em></p>
        ///   <p>Suppress progress output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceRollbackSettings DisableQuiet(this DockerServiceRollbackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerServiceRollbackSettings.Quiet"/></em></p>
        ///   <p>Suppress progress output.</p>
        /// </summary>
        [Pure]
        public static DockerServiceRollbackSettings ToggleQuiet(this DockerServiceRollbackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
        #region Service
        /// <summary>
        ///   <p><em>Sets <see cref="DockerServiceRollbackSettings.Service"/></em></p>
        ///   <p>SERVICE</p>
        /// </summary>
        [Pure]
        public static DockerServiceRollbackSettings SetService(this DockerServiceRollbackSettings toolSettings, string service)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Service = service;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerServiceRollbackSettings.Service"/></em></p>
        ///   <p>SERVICE</p>
        /// </summary>
        [Pure]
        public static DockerServiceRollbackSettings ResetService(this DockerServiceRollbackSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Service = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerRestartSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerRestartSettingsExtensions
    {
        #region Time
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRestartSettings.Time"/></em></p>
        ///   <p>Seconds to wait for stop before killing the container.</p>
        /// </summary>
        [Pure]
        public static DockerRestartSettings SetTime(this DockerRestartSettings toolSettings, int? time)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Time = time;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerRestartSettings.Time"/></em></p>
        ///   <p>Seconds to wait for stop before killing the container.</p>
        /// </summary>
        [Pure]
        public static DockerRestartSettings ResetTime(this DockerRestartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Time = null;
            return toolSettings;
        }
        #endregion
        #region Containers
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRestartSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerRestartSettings SetContainers(this DockerRestartSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerRestartSettings.Containers"/> to a new list</em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerRestartSettings SetContainers(this DockerRestartSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal = containers.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRestartSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerRestartSettings AddContainers(this DockerRestartSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerRestartSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerRestartSettings AddContainers(this DockerRestartSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.AddRange(containers);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerRestartSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerRestartSettings ClearContainers(this DockerRestartSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ContainersInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRestartSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerRestartSettings RemoveContainers(this DockerRestartSettings toolSettings, params string[] containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerRestartSettings.Containers"/></em></p>
        ///   <p>CONTAINER</p>
        /// </summary>
        [Pure]
        public static DockerRestartSettings RemoveContainers(this DockerRestartSettings toolSettings, IEnumerable<string> containers)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(containers);
            toolSettings.ContainersInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerTrustSignerRemoveSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerTrustSignerRemoveSettingsExtensions
    {
        #region Force
        /// <summary>
        ///   <p><em>Sets <see cref="DockerTrustSignerRemoveSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation before removing the most recent signer.</p>
        /// </summary>
        [Pure]
        public static DockerTrustSignerRemoveSettings SetForce(this DockerTrustSignerRemoveSettings toolSettings, bool? force)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = force;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerTrustSignerRemoveSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation before removing the most recent signer.</p>
        /// </summary>
        [Pure]
        public static DockerTrustSignerRemoveSettings ResetForce(this DockerTrustSignerRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerTrustSignerRemoveSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation before removing the most recent signer.</p>
        /// </summary>
        [Pure]
        public static DockerTrustSignerRemoveSettings EnableForce(this DockerTrustSignerRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerTrustSignerRemoveSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation before removing the most recent signer.</p>
        /// </summary>
        [Pure]
        public static DockerTrustSignerRemoveSettings DisableForce(this DockerTrustSignerRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerTrustSignerRemoveSettings.Force"/></em></p>
        ///   <p>Do not prompt for confirmation before removing the most recent signer.</p>
        /// </summary>
        [Pure]
        public static DockerTrustSignerRemoveSettings ToggleForce(this DockerTrustSignerRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Force = !toolSettings.Force;
            return toolSettings;
        }
        #endregion
        #region Name
        /// <summary>
        ///   <p><em>Sets <see cref="DockerTrustSignerRemoveSettings.Name"/></em></p>
        ///   <p>NAME</p>
        /// </summary>
        [Pure]
        public static DockerTrustSignerRemoveSettings SetName(this DockerTrustSignerRemoveSettings toolSettings, string name)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = name;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerTrustSignerRemoveSettings.Name"/></em></p>
        ///   <p>NAME</p>
        /// </summary>
        [Pure]
        public static DockerTrustSignerRemoveSettings ResetName(this DockerTrustSignerRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Name = null;
            return toolSettings;
        }
        #endregion
        #region Repositories
        /// <summary>
        ///   <p><em>Sets <see cref="DockerTrustSignerRemoveSettings.Repositories"/> to a new list</em></p>
        ///   <p>REPOSITORY</p>
        /// </summary>
        [Pure]
        public static DockerTrustSignerRemoveSettings SetRepositories(this DockerTrustSignerRemoveSettings toolSettings, params string[] repositories)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoriesInternal = repositories.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerTrustSignerRemoveSettings.Repositories"/> to a new list</em></p>
        ///   <p>REPOSITORY</p>
        /// </summary>
        [Pure]
        public static DockerTrustSignerRemoveSettings SetRepositories(this DockerTrustSignerRemoveSettings toolSettings, IEnumerable<string> repositories)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoriesInternal = repositories.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerTrustSignerRemoveSettings.Repositories"/></em></p>
        ///   <p>REPOSITORY</p>
        /// </summary>
        [Pure]
        public static DockerTrustSignerRemoveSettings AddRepositories(this DockerTrustSignerRemoveSettings toolSettings, params string[] repositories)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoriesInternal.AddRange(repositories);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerTrustSignerRemoveSettings.Repositories"/></em></p>
        ///   <p>REPOSITORY</p>
        /// </summary>
        [Pure]
        public static DockerTrustSignerRemoveSettings AddRepositories(this DockerTrustSignerRemoveSettings toolSettings, IEnumerable<string> repositories)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoriesInternal.AddRange(repositories);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerTrustSignerRemoveSettings.Repositories"/></em></p>
        ///   <p>REPOSITORY</p>
        /// </summary>
        [Pure]
        public static DockerTrustSignerRemoveSettings ClearRepositories(this DockerTrustSignerRemoveSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.RepositoriesInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerTrustSignerRemoveSettings.Repositories"/></em></p>
        ///   <p>REPOSITORY</p>
        /// </summary>
        [Pure]
        public static DockerTrustSignerRemoveSettings RemoveRepositories(this DockerTrustSignerRemoveSettings toolSettings, params string[] repositories)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(repositories);
            toolSettings.RepositoriesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerTrustSignerRemoveSettings.Repositories"/></em></p>
        ///   <p>REPOSITORY</p>
        /// </summary>
        [Pure]
        public static DockerTrustSignerRemoveSettings RemoveRepositories(this DockerTrustSignerRemoveSettings toolSettings, IEnumerable<string> repositories)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(repositories);
            toolSettings.RepositoriesInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerStackRmSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerStackRmSettingsExtensions
    {
        #region Namespace
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackRmSettings.Namespace"/></em></p>
        ///   <p>Kubernetes namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerStackRmSettings SetNamespace(this DockerStackRmSettings toolSettings, string @namespace)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Namespace = @namespace;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerStackRmSettings.Namespace"/></em></p>
        ///   <p>Kubernetes namespace to use.</p>
        /// </summary>
        [Pure]
        public static DockerStackRmSettings ResetNamespace(this DockerStackRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Namespace = null;
            return toolSettings;
        }
        #endregion
        #region Stacks
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackRmSettings.Stacks"/> to a new list</em></p>
        ///   <p>STACK</p>
        /// </summary>
        [Pure]
        public static DockerStackRmSettings SetStacks(this DockerStackRmSettings toolSettings, params string[] stacks)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StacksInternal = stacks.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerStackRmSettings.Stacks"/> to a new list</em></p>
        ///   <p>STACK</p>
        /// </summary>
        [Pure]
        public static DockerStackRmSettings SetStacks(this DockerStackRmSettings toolSettings, IEnumerable<string> stacks)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StacksInternal = stacks.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerStackRmSettings.Stacks"/></em></p>
        ///   <p>STACK</p>
        /// </summary>
        [Pure]
        public static DockerStackRmSettings AddStacks(this DockerStackRmSettings toolSettings, params string[] stacks)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StacksInternal.AddRange(stacks);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerStackRmSettings.Stacks"/></em></p>
        ///   <p>STACK</p>
        /// </summary>
        [Pure]
        public static DockerStackRmSettings AddStacks(this DockerStackRmSettings toolSettings, IEnumerable<string> stacks)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StacksInternal.AddRange(stacks);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerStackRmSettings.Stacks"/></em></p>
        ///   <p>STACK</p>
        /// </summary>
        [Pure]
        public static DockerStackRmSettings ClearStacks(this DockerStackRmSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.StacksInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerStackRmSettings.Stacks"/></em></p>
        ///   <p>STACK</p>
        /// </summary>
        [Pure]
        public static DockerStackRmSettings RemoveStacks(this DockerStackRmSettings toolSettings, params string[] stacks)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(stacks);
            toolSettings.StacksInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerStackRmSettings.Stacks"/></em></p>
        ///   <p>STACK</p>
        /// </summary>
        [Pure]
        public static DockerStackRmSettings RemoveStacks(this DockerStackRmSettings toolSettings, IEnumerable<string> stacks)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(stacks);
            toolSettings.StacksInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region DockerBuildSettingsExtensions
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [ExcludeFromCodeCoverage]
    public static partial class DockerBuildSettingsExtensions
    {
        #region AddHost
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.AddHost"/> to a new list</em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetAddHost(this DockerBuildSettings toolSettings, params string[] addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal = addHost.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.AddHost"/> to a new list</em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetAddHost(this DockerBuildSettings toolSettings, IEnumerable<string> addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal = addHost.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerBuildSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings AddAddHost(this DockerBuildSettings toolSettings, params string[] addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal.AddRange(addHost);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerBuildSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings AddAddHost(this DockerBuildSettings toolSettings, IEnumerable<string> addHost)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal.AddRange(addHost);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerBuildSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ClearAddHost(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.AddHostInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerBuildSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings RemoveAddHost(this DockerBuildSettings toolSettings, params string[] addHost)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(addHost);
            toolSettings.AddHostInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerBuildSettings.AddHost"/></em></p>
        ///   <p>Add a custom host-to-IP mapping (host:ip).</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings RemoveAddHost(this DockerBuildSettings toolSettings, IEnumerable<string> addHost)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(addHost);
            toolSettings.AddHostInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region BuildArg
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.BuildArg"/> to a new list</em></p>
        ///   <p>Set build-time variables.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetBuildArg(this DockerBuildSettings toolSettings, params string[] buildArg)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BuildArgInternal = buildArg.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.BuildArg"/> to a new list</em></p>
        ///   <p>Set build-time variables.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetBuildArg(this DockerBuildSettings toolSettings, IEnumerable<string> buildArg)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BuildArgInternal = buildArg.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerBuildSettings.BuildArg"/></em></p>
        ///   <p>Set build-time variables.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings AddBuildArg(this DockerBuildSettings toolSettings, params string[] buildArg)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BuildArgInternal.AddRange(buildArg);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerBuildSettings.BuildArg"/></em></p>
        ///   <p>Set build-time variables.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings AddBuildArg(this DockerBuildSettings toolSettings, IEnumerable<string> buildArg)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BuildArgInternal.AddRange(buildArg);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerBuildSettings.BuildArg"/></em></p>
        ///   <p>Set build-time variables.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ClearBuildArg(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.BuildArgInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerBuildSettings.BuildArg"/></em></p>
        ///   <p>Set build-time variables.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings RemoveBuildArg(this DockerBuildSettings toolSettings, params string[] buildArg)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(buildArg);
            toolSettings.BuildArgInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerBuildSettings.BuildArg"/></em></p>
        ///   <p>Set build-time variables.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings RemoveBuildArg(this DockerBuildSettings toolSettings, IEnumerable<string> buildArg)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(buildArg);
            toolSettings.BuildArgInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region CacheFrom
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.CacheFrom"/> to a new list</em></p>
        ///   <p>Images to consider as cache sources.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetCacheFrom(this DockerBuildSettings toolSettings, params string[] cacheFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CacheFromInternal = cacheFrom.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.CacheFrom"/> to a new list</em></p>
        ///   <p>Images to consider as cache sources.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetCacheFrom(this DockerBuildSettings toolSettings, IEnumerable<string> cacheFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CacheFromInternal = cacheFrom.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerBuildSettings.CacheFrom"/></em></p>
        ///   <p>Images to consider as cache sources.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings AddCacheFrom(this DockerBuildSettings toolSettings, params string[] cacheFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CacheFromInternal.AddRange(cacheFrom);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerBuildSettings.CacheFrom"/></em></p>
        ///   <p>Images to consider as cache sources.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings AddCacheFrom(this DockerBuildSettings toolSettings, IEnumerable<string> cacheFrom)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CacheFromInternal.AddRange(cacheFrom);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerBuildSettings.CacheFrom"/></em></p>
        ///   <p>Images to consider as cache sources.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ClearCacheFrom(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CacheFromInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerBuildSettings.CacheFrom"/></em></p>
        ///   <p>Images to consider as cache sources.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings RemoveCacheFrom(this DockerBuildSettings toolSettings, params string[] cacheFrom)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(cacheFrom);
            toolSettings.CacheFromInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerBuildSettings.CacheFrom"/></em></p>
        ///   <p>Images to consider as cache sources.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings RemoveCacheFrom(this DockerBuildSettings toolSettings, IEnumerable<string> cacheFrom)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(cacheFrom);
            toolSettings.CacheFromInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region CgroupParent
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.CgroupParent"/></em></p>
        ///   <p>Optional parent cgroup for the container.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetCgroupParent(this DockerBuildSettings toolSettings, string cgroupParent)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CgroupParent = cgroupParent;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.CgroupParent"/></em></p>
        ///   <p>Optional parent cgroup for the container.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetCgroupParent(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CgroupParent = null;
            return toolSettings;
        }
        #endregion
        #region Compress
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.Compress"/></em></p>
        ///   <p>Compress the build context using gzip.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetCompress(this DockerBuildSettings toolSettings, bool? compress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Compress = compress;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.Compress"/></em></p>
        ///   <p>Compress the build context using gzip.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetCompress(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Compress = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerBuildSettings.Compress"/></em></p>
        ///   <p>Compress the build context using gzip.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings EnableCompress(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Compress = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerBuildSettings.Compress"/></em></p>
        ///   <p>Compress the build context using gzip.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings DisableCompress(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Compress = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerBuildSettings.Compress"/></em></p>
        ///   <p>Compress the build context using gzip.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ToggleCompress(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Compress = !toolSettings.Compress;
            return toolSettings;
        }
        #endregion
        #region CpuPeriod
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.CpuPeriod"/></em></p>
        ///   <p>Limit the CPU CFS (Completely Fair Scheduler) period.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetCpuPeriod(this DockerBuildSettings toolSettings, long? cpuPeriod)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuPeriod = cpuPeriod;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.CpuPeriod"/></em></p>
        ///   <p>Limit the CPU CFS (Completely Fair Scheduler) period.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetCpuPeriod(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuPeriod = null;
            return toolSettings;
        }
        #endregion
        #region CpuQuota
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.CpuQuota"/></em></p>
        ///   <p>Limit the CPU CFS (Completely Fair Scheduler) quota.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetCpuQuota(this DockerBuildSettings toolSettings, long? cpuQuota)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuQuota = cpuQuota;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.CpuQuota"/></em></p>
        ///   <p>Limit the CPU CFS (Completely Fair Scheduler) quota.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetCpuQuota(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuQuota = null;
            return toolSettings;
        }
        #endregion
        #region CpuShares
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.CpuShares"/></em></p>
        ///   <p>CPU shares (relative weight).</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetCpuShares(this DockerBuildSettings toolSettings, long? cpuShares)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuShares = cpuShares;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.CpuShares"/></em></p>
        ///   <p>CPU shares (relative weight).</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetCpuShares(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpuShares = null;
            return toolSettings;
        }
        #endregion
        #region CpusetCpus
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.CpusetCpus"/></em></p>
        ///   <p>CPUs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetCpusetCpus(this DockerBuildSettings toolSettings, string cpusetCpus)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetCpus = cpusetCpus;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.CpusetCpus"/></em></p>
        ///   <p>CPUs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetCpusetCpus(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetCpus = null;
            return toolSettings;
        }
        #endregion
        #region CpusetMems
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.CpusetMems"/></em></p>
        ///   <p>MEMs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetCpusetMems(this DockerBuildSettings toolSettings, string cpusetMems)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetMems = cpusetMems;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.CpusetMems"/></em></p>
        ///   <p>MEMs in which to allow execution (0-3, 0,1).</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetCpusetMems(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.CpusetMems = null;
            return toolSettings;
        }
        #endregion
        #region DisableContentTrust
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetDisableContentTrust(this DockerBuildSettings toolSettings, bool? disableContentTrust)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = disableContentTrust;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetDisableContentTrust(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerBuildSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings EnableDisableContentTrust(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerBuildSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings DisableDisableContentTrust(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerBuildSettings.DisableContentTrust"/></em></p>
        ///   <p>Skip image verification.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ToggleDisableContentTrust(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.DisableContentTrust = !toolSettings.DisableContentTrust;
            return toolSettings;
        }
        #endregion
        #region File
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.File"/></em></p>
        ///   <p>Name of the Dockerfile (Default is 'PATH/Dockerfile').</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetFile(this DockerBuildSettings toolSettings, string file)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = file;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.File"/></em></p>
        ///   <p>Name of the Dockerfile (Default is 'PATH/Dockerfile').</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetFile(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.File = null;
            return toolSettings;
        }
        #endregion
        #region ForceRm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.ForceRm"/></em></p>
        ///   <p>Always remove intermediate containers.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetForceRm(this DockerBuildSettings toolSettings, bool? forceRm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceRm = forceRm;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.ForceRm"/></em></p>
        ///   <p>Always remove intermediate containers.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetForceRm(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceRm = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerBuildSettings.ForceRm"/></em></p>
        ///   <p>Always remove intermediate containers.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings EnableForceRm(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceRm = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerBuildSettings.ForceRm"/></em></p>
        ///   <p>Always remove intermediate containers.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings DisableForceRm(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceRm = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerBuildSettings.ForceRm"/></em></p>
        ///   <p>Always remove intermediate containers.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ToggleForceRm(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ForceRm = !toolSettings.ForceRm;
            return toolSettings;
        }
        #endregion
        #region Iidfile
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.Iidfile"/></em></p>
        ///   <p>Write the image ID to the file.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetIidfile(this DockerBuildSettings toolSettings, string iidfile)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Iidfile = iidfile;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.Iidfile"/></em></p>
        ///   <p>Write the image ID to the file.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetIidfile(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Iidfile = null;
            return toolSettings;
        }
        #endregion
        #region Isolation
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.Isolation"/></em></p>
        ///   <p>Container isolation technology.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetIsolation(this DockerBuildSettings toolSettings, string isolation)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Isolation = isolation;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.Isolation"/></em></p>
        ///   <p>Container isolation technology.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetIsolation(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Isolation = null;
            return toolSettings;
        }
        #endregion
        #region Label
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.Label"/> to a new list</em></p>
        ///   <p>Set metadata for an image.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetLabel(this DockerBuildSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal = label.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.Label"/> to a new list</em></p>
        ///   <p>Set metadata for an image.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetLabel(this DockerBuildSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal = label.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerBuildSettings.Label"/></em></p>
        ///   <p>Set metadata for an image.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings AddLabel(this DockerBuildSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.AddRange(label);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerBuildSettings.Label"/></em></p>
        ///   <p>Set metadata for an image.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings AddLabel(this DockerBuildSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.AddRange(label);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerBuildSettings.Label"/></em></p>
        ///   <p>Set metadata for an image.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ClearLabel(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.LabelInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerBuildSettings.Label"/></em></p>
        ///   <p>Set metadata for an image.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings RemoveLabel(this DockerBuildSettings toolSettings, params string[] label)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(label);
            toolSettings.LabelInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerBuildSettings.Label"/></em></p>
        ///   <p>Set metadata for an image.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings RemoveLabel(this DockerBuildSettings toolSettings, IEnumerable<string> label)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(label);
            toolSettings.LabelInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Memory
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.Memory"/></em></p>
        ///   <p>Memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetMemory(this DockerBuildSettings toolSettings, long? memory)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Memory = memory;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.Memory"/></em></p>
        ///   <p>Memory limit.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetMemory(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Memory = null;
            return toolSettings;
        }
        #endregion
        #region MemorySwap
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.MemorySwap"/></em></p>
        ///   <p>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetMemorySwap(this DockerBuildSettings toolSettings, long? memorySwap)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemorySwap = memorySwap;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.MemorySwap"/></em></p>
        ///   <p>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetMemorySwap(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.MemorySwap = null;
            return toolSettings;
        }
        #endregion
        #region Network
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.Network"/></em></p>
        ///   <p>Set the networking mode for the RUN instructions during build.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetNetwork(this DockerBuildSettings toolSettings, string network)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Network = network;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.Network"/></em></p>
        ///   <p>Set the networking mode for the RUN instructions during build.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetNetwork(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Network = null;
            return toolSettings;
        }
        #endregion
        #region NoCache
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.NoCache"/></em></p>
        ///   <p>Do not use cache when building the image.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetNoCache(this DockerBuildSettings toolSettings, bool? noCache)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoCache = noCache;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.NoCache"/></em></p>
        ///   <p>Do not use cache when building the image.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetNoCache(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoCache = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerBuildSettings.NoCache"/></em></p>
        ///   <p>Do not use cache when building the image.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings EnableNoCache(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoCache = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerBuildSettings.NoCache"/></em></p>
        ///   <p>Do not use cache when building the image.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings DisableNoCache(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoCache = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerBuildSettings.NoCache"/></em></p>
        ///   <p>Do not use cache when building the image.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ToggleNoCache(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.NoCache = !toolSettings.NoCache;
            return toolSettings;
        }
        #endregion
        #region Output
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.Output"/></em></p>
        ///   <p>Output destination (format: type=local,dest=path).</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetOutput(this DockerBuildSettings toolSettings, string output)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = output;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.Output"/></em></p>
        ///   <p>Output destination (format: type=local,dest=path).</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetOutput(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Output = null;
            return toolSettings;
        }
        #endregion
        #region Platform
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.Platform"/></em></p>
        ///   <p>Set platform if server is multi-platform capable.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetPlatform(this DockerBuildSettings toolSettings, string platform)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = platform;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.Platform"/></em></p>
        ///   <p>Set platform if server is multi-platform capable.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetPlatform(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Platform = null;
            return toolSettings;
        }
        #endregion
        #region Progress
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.Progress"/></em></p>
        ///   <p>Set type of progress output (auto, plain, tty). Use plain to show container output.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetProgress(this DockerBuildSettings toolSettings, string progress)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Progress = progress;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.Progress"/></em></p>
        ///   <p>Set type of progress output (auto, plain, tty). Use plain to show container output.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetProgress(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Progress = null;
            return toolSettings;
        }
        #endregion
        #region Pull
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.Pull"/></em></p>
        ///   <p>Always attempt to pull a newer version of the image.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetPull(this DockerBuildSettings toolSettings, bool? pull)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pull = pull;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.Pull"/></em></p>
        ///   <p>Always attempt to pull a newer version of the image.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetPull(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pull = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerBuildSettings.Pull"/></em></p>
        ///   <p>Always attempt to pull a newer version of the image.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings EnablePull(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pull = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerBuildSettings.Pull"/></em></p>
        ///   <p>Always attempt to pull a newer version of the image.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings DisablePull(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pull = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerBuildSettings.Pull"/></em></p>
        ///   <p>Always attempt to pull a newer version of the image.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings TogglePull(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Pull = !toolSettings.Pull;
            return toolSettings;
        }
        #endregion
        #region Quiet
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.Quiet"/></em></p>
        ///   <p>Suppress the build output and print image ID on success.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetQuiet(this DockerBuildSettings toolSettings, bool? quiet)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = quiet;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.Quiet"/></em></p>
        ///   <p>Suppress the build output and print image ID on success.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetQuiet(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerBuildSettings.Quiet"/></em></p>
        ///   <p>Suppress the build output and print image ID on success.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings EnableQuiet(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerBuildSettings.Quiet"/></em></p>
        ///   <p>Suppress the build output and print image ID on success.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings DisableQuiet(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerBuildSettings.Quiet"/></em></p>
        ///   <p>Suppress the build output and print image ID on success.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ToggleQuiet(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Quiet = !toolSettings.Quiet;
            return toolSettings;
        }
        #endregion
        #region Rm
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.Rm"/></em></p>
        ///   <p>Remove intermediate containers after a successful build.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetRm(this DockerBuildSettings toolSettings, bool? rm)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = rm;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.Rm"/></em></p>
        ///   <p>Remove intermediate containers after a successful build.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetRm(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerBuildSettings.Rm"/></em></p>
        ///   <p>Remove intermediate containers after a successful build.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings EnableRm(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerBuildSettings.Rm"/></em></p>
        ///   <p>Remove intermediate containers after a successful build.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings DisableRm(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerBuildSettings.Rm"/></em></p>
        ///   <p>Remove intermediate containers after a successful build.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ToggleRm(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Rm = !toolSettings.Rm;
            return toolSettings;
        }
        #endregion
        #region Secret
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.Secret"/></em></p>
        ///   <p>Secret file to expose to the build (only if BuildKit enabled): id=mysecret,src=/local/secret.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetSecret(this DockerBuildSettings toolSettings, string secret)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Secret = secret;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.Secret"/></em></p>
        ///   <p>Secret file to expose to the build (only if BuildKit enabled): id=mysecret,src=/local/secret.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetSecret(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Secret = null;
            return toolSettings;
        }
        #endregion
        #region SecurityOpt
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.SecurityOpt"/> to a new list</em></p>
        ///   <p>Security options.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetSecurityOpt(this DockerBuildSettings toolSettings, params string[] securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal = securityOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.SecurityOpt"/> to a new list</em></p>
        ///   <p>Security options.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetSecurityOpt(this DockerBuildSettings toolSettings, IEnumerable<string> securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal = securityOpt.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerBuildSettings.SecurityOpt"/></em></p>
        ///   <p>Security options.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings AddSecurityOpt(this DockerBuildSettings toolSettings, params string[] securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal.AddRange(securityOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerBuildSettings.SecurityOpt"/></em></p>
        ///   <p>Security options.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings AddSecurityOpt(this DockerBuildSettings toolSettings, IEnumerable<string> securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal.AddRange(securityOpt);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerBuildSettings.SecurityOpt"/></em></p>
        ///   <p>Security options.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ClearSecurityOpt(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.SecurityOptInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerBuildSettings.SecurityOpt"/></em></p>
        ///   <p>Security options.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings RemoveSecurityOpt(this DockerBuildSettings toolSettings, params string[] securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(securityOpt);
            toolSettings.SecurityOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerBuildSettings.SecurityOpt"/></em></p>
        ///   <p>Security options.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings RemoveSecurityOpt(this DockerBuildSettings toolSettings, IEnumerable<string> securityOpt)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(securityOpt);
            toolSettings.SecurityOptInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region ShmSize
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.ShmSize"/></em></p>
        ///   <p>Size of /dev/shm.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetShmSize(this DockerBuildSettings toolSettings, long? shmSize)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShmSize = shmSize;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.ShmSize"/></em></p>
        ///   <p>Size of /dev/shm.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetShmSize(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.ShmSize = null;
            return toolSettings;
        }
        #endregion
        #region Squash
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.Squash"/></em></p>
        ///   <p>Squash newly built layers into a single new layer.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetSquash(this DockerBuildSettings toolSettings, bool? squash)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Squash = squash;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.Squash"/></em></p>
        ///   <p>Squash newly built layers into a single new layer.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetSquash(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Squash = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerBuildSettings.Squash"/></em></p>
        ///   <p>Squash newly built layers into a single new layer.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings EnableSquash(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Squash = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerBuildSettings.Squash"/></em></p>
        ///   <p>Squash newly built layers into a single new layer.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings DisableSquash(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Squash = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerBuildSettings.Squash"/></em></p>
        ///   <p>Squash newly built layers into a single new layer.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ToggleSquash(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Squash = !toolSettings.Squash;
            return toolSettings;
        }
        #endregion
        #region Ssh
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.Ssh"/></em></p>
        ///   <p>SSH agent socket or keys to expose to the build (only if BuildKit enabled) (format: default|&lt;id&gt;[=&lt;socket&gt;|&lt;key&gt;[,&lt;key&gt;]]).</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetSsh(this DockerBuildSettings toolSettings, string ssh)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ssh = ssh;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.Ssh"/></em></p>
        ///   <p>SSH agent socket or keys to expose to the build (only if BuildKit enabled) (format: default|&lt;id&gt;[=&lt;socket&gt;|&lt;key&gt;[,&lt;key&gt;]]).</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetSsh(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ssh = null;
            return toolSettings;
        }
        #endregion
        #region Stream
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.Stream"/></em></p>
        ///   <p>Stream attaches to server to negotiate build context.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetStream(this DockerBuildSettings toolSettings, bool? stream)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stream = stream;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.Stream"/></em></p>
        ///   <p>Stream attaches to server to negotiate build context.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetStream(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stream = null;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Enables <see cref="DockerBuildSettings.Stream"/></em></p>
        ///   <p>Stream attaches to server to negotiate build context.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings EnableStream(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stream = true;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Disables <see cref="DockerBuildSettings.Stream"/></em></p>
        ///   <p>Stream attaches to server to negotiate build context.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings DisableStream(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stream = false;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Toggles <see cref="DockerBuildSettings.Stream"/></em></p>
        ///   <p>Stream attaches to server to negotiate build context.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ToggleStream(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Stream = !toolSettings.Stream;
            return toolSettings;
        }
        #endregion
        #region Tag
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.Tag"/> to a new list</em></p>
        ///   <p>Name and optionally a tag in the 'name:tag' format.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetTag(this DockerBuildSettings toolSettings, params string[] tag)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TagInternal = tag.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.Tag"/> to a new list</em></p>
        ///   <p>Name and optionally a tag in the 'name:tag' format.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetTag(this DockerBuildSettings toolSettings, IEnumerable<string> tag)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TagInternal = tag.ToList();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerBuildSettings.Tag"/></em></p>
        ///   <p>Name and optionally a tag in the 'name:tag' format.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings AddTag(this DockerBuildSettings toolSettings, params string[] tag)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TagInternal.AddRange(tag);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Adds values to <see cref="DockerBuildSettings.Tag"/></em></p>
        ///   <p>Name and optionally a tag in the 'name:tag' format.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings AddTag(this DockerBuildSettings toolSettings, IEnumerable<string> tag)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TagInternal.AddRange(tag);
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Clears <see cref="DockerBuildSettings.Tag"/></em></p>
        ///   <p>Name and optionally a tag in the 'name:tag' format.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ClearTag(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.TagInternal.Clear();
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerBuildSettings.Tag"/></em></p>
        ///   <p>Name and optionally a tag in the 'name:tag' format.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings RemoveTag(this DockerBuildSettings toolSettings, params string[] tag)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(tag);
            toolSettings.TagInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Removes values from <see cref="DockerBuildSettings.Tag"/></em></p>
        ///   <p>Name and optionally a tag in the 'name:tag' format.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings RemoveTag(this DockerBuildSettings toolSettings, IEnumerable<string> tag)
        {
            toolSettings = toolSettings.NewInstance();
            var hashSet = new HashSet<string>(tag);
            toolSettings.TagInternal.RemoveAll(x => hashSet.Contains(x));
            return toolSettings;
        }
        #endregion
        #region Target
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.Target"/></em></p>
        ///   <p>Set the target build stage to build.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetTarget(this DockerBuildSettings toolSettings, string target)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Target = target;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.Target"/></em></p>
        ///   <p>Set the target build stage to build.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetTarget(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Target = null;
            return toolSettings;
        }
        #endregion
        #region Ulimit
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.Ulimit"/></em></p>
        ///   <p>Ulimit options.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetUlimit(this DockerBuildSettings toolSettings, string ulimit)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ulimit = ulimit;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.Ulimit"/></em></p>
        ///   <p>Ulimit options.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetUlimit(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Ulimit = null;
            return toolSettings;
        }
        #endregion
        #region Path
        /// <summary>
        ///   <p><em>Sets <see cref="DockerBuildSettings.Path"/></em></p>
        ///   <p>Path or url where the build context is located.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings SetPath(this DockerBuildSettings toolSettings, string path)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = path;
            return toolSettings;
        }
        /// <summary>
        ///   <p><em>Resets <see cref="DockerBuildSettings.Path"/></em></p>
        ///   <p>Path or url where the build context is located.</p>
        /// </summary>
        [Pure]
        public static DockerBuildSettings ResetPath(this DockerBuildSettings toolSettings)
        {
            toolSettings = toolSettings.NewInstance();
            toolSettings.Path = null;
            return toolSettings;
        }
        #endregion
    }
    #endregion
    #region LogLevel
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<LogLevel>))]
    public partial class LogLevel : Enumeration
    {
        public static LogLevel debug = (LogLevel) "debug";
        public static LogLevel info = (LogLevel) "info";
        public static LogLevel warn = (LogLevel) "warn";
        public static LogLevel error = (LogLevel) "error";
        public static LogLevel fatal = (LogLevel) "fatal";
        public static explicit operator LogLevel(string value)
        {
            return new LogLevel { Value = value };
        }
    }
    #endregion
    #region RestartCondition
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<RestartCondition>))]
    public partial class RestartCondition : Enumeration
    {
        public static RestartCondition none = (RestartCondition) "none";
        public static RestartCondition on_failure = (RestartCondition) "on-failure";
        public static RestartCondition any = (RestartCondition) "any";
        public static explicit operator RestartCondition(string value)
        {
            return new RestartCondition { Value = value };
        }
    }
    #endregion
    #region RollbackFailureAction
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<RollbackFailureAction>))]
    public partial class RollbackFailureAction : Enumeration
    {
        public static RollbackFailureAction pause = (RollbackFailureAction) "pause";
        public static RollbackFailureAction continue_ = (RollbackFailureAction) "continue";
        public static explicit operator RollbackFailureAction(string value)
        {
            return new RollbackFailureAction { Value = value };
        }
    }
    #endregion
    #region RollbackOrder
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<RollbackOrder>))]
    public partial class RollbackOrder : Enumeration
    {
        public static RollbackOrder start_first = (RollbackOrder) "start-first";
        public static RollbackOrder stop_first = (RollbackOrder) "stop-first";
        public static explicit operator RollbackOrder(string value)
        {
            return new RollbackOrder { Value = value };
        }
    }
    #endregion
    #region UpdateFailureAction
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<UpdateFailureAction>))]
    public partial class UpdateFailureAction : Enumeration
    {
        public static UpdateFailureAction pause = (UpdateFailureAction) "pause";
        public static UpdateFailureAction continue_ = (UpdateFailureAction) "continue";
        public static UpdateFailureAction rollback = (UpdateFailureAction) "rollback";
        public static explicit operator UpdateFailureAction(string value)
        {
            return new UpdateFailureAction { Value = value };
        }
    }
    #endregion
    #region UpdateOrder
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<UpdateOrder>))]
    public partial class UpdateOrder : Enumeration
    {
        public static UpdateOrder start_first = (UpdateOrder) "start-first";
        public static UpdateOrder stop_first = (UpdateOrder) "stop-first";
        public static explicit operator UpdateOrder(string value)
        {
            return new UpdateOrder { Value = value };
        }
    }
    #endregion
    #region Availability
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<Availability>))]
    public partial class Availability : Enumeration
    {
        public static Availability active = (Availability) "active";
        public static Availability pause = (Availability) "pause";
        public static Availability drain = (Availability) "drain";
        public static explicit operator Availability(string value)
        {
            return new Availability { Value = value };
        }
    }
    #endregion
    #region Role
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<Role>))]
    public partial class Role : Enumeration
    {
        public static Role worker = (Role) "worker";
        public static Role manager = (Role) "manager";
        public static explicit operator Role(string value)
        {
            return new Role { Value = value };
        }
    }
    #endregion
    #region ResolveImage
    /// <summary>
    ///   Used within <see cref="DockerTasks"/>.
    /// </summary>
    [PublicAPI]
    [Serializable]
    [ExcludeFromCodeCoverage]
    [TypeConverter(typeof(TypeConverter<ResolveImage>))]
    public partial class ResolveImage : Enumeration
    {
        public static ResolveImage always = (ResolveImage) "always";
        public static ResolveImage changed = (ResolveImage) "changed";
        public static ResolveImage never = (ResolveImage) "never";
        public static explicit operator ResolveImage(string value)
        {
            return new ResolveImage { Value = value };
        }
    }
    #endregion
}
